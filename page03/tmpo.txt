
FILE:: .//css/PVPI_org.css
.my-dsp-unique {
    position: relative;
    width:90px;
    display:inline-block;
    margin-left:3px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    background-color: aquamarine;
    /* float:left; */
}

.my-dsp-unique:hover {
    /* position:relative; */
    /* top:0%; */
    white-space: nowrap;
    overflow: visible;
    /* text-overflow:unset; */
    width:auto;
}

/* For tool-tips */
.mytooltip {
    position: relative;
    display: inline-block;
    /* border-bottom: 1px dotted black; */
}
.mytooltiptext {
    font-size:8px;
    width: 90px;
}
  
.mytooltip .mytooltiptext {
    visibility: hidden;
    background-color: #555;
    color: #fff;
    text-align: center;
    border-radius: 6px;
    padding: 5px 0;
    position: absolute;
    z-index: 1;
    bottom: 80%;
    left: 50%;
    margin-left: -45px;
    opacity: 0;
    transition: opacity 0.3s;
}
  
.mytooltip .tooltiptext::after {
    content: "";
    position: absolute;
    top: 100%;
    left: 50%;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color: #555 transparent transparent transparent;
}

.mytooltip:hover{
    border: 5px solid blue;
    background-color:#06418c;
    color:white;
}
.mytooltip:hover .mytooltiptext {
    visibility: visible;
    opacity: 1;
}


/*  */
.marquee {
    height: 30px;
    overflow: hidden;
    white-space:nowrap;
    position: relative;
    background: #fefefe;
    color: #333;
    border: 1px solid #4a4a4a;
}

.marquee p {
    position: absolute;
    width: 250%;
    height: 100%;
    margin: 0;
    line-height: 30px;
    text-align: center;
    -moz-transform: translateX(100%);
    -webkit-transform: translateX(100%);
    transform: translateX(100%);
    -moz-animation: scroll-left 2s linear infinite;
    -webkit-animation: scroll-left 2s linear infinite;
    animation: scroll-left 50s linear infinite;
}

/* @-moz-keyframes scroll-left {
    0% {
        -moz-transform: translateX(100%);
    }
    100% {
        -moz-transform: translateX(-100%);
    }
}

@-webkit-keyframes scroll-left {
    0% {
        -webkit-transform: translateX(100%);
    }
    100% {
        -webkit-transform: translateX(-100%);
    }
} */

@keyframes scroll-left {
    0% {
        -moz-transform: translateX(100%);
        -webkit-transform: translateX(100%);
        transform: translateX(50%);
    }
    100% {
        -moz-transform: translateX(-100%);
        -webkit-transform: translateX(-100%);
        transform: translateX(-150%);
    }
}

FILE:: .//css/my.css
.my-icon {
    background-image: url("../assets/sitebrief.svg");
    background-size: 100px;
    background-repeat: no-repeat;
    position:fixed;
    top:-10px;
    left:0;
    width:100%;
    height:60px;
    /* border-bottom: #555 1px solid; */
    /* height: 400px; */
}
#myMenu2 {
    z-index: 5;
    overflow:visible;
    width:100%;
    /* position:sticky; */
    top:0;
    right:0;
}
#mainSide {
    height:100%;
    overflow:visible;
    /* padding-bottom:65px; */
}
#mainSide.bgPVPI {
    /* padding-top: 10rem; */
    /* padding-bottom: calc(10rem - 4.5rem); */
    padding-top:10px;
    height: calc(100vh - 52px);
    background: linear-gradient(to bottom, rgba(92, 77, 66, 0.1) 0, rgba(92, 77, 66, 0.8) 100%), url("../assets/PVPI/bg-masthead_07.jpg");
    background-color: red;
    background-position: center;
    background-repeat: no-repeat;
    background-attachment: scroll;
    background-size: cover;
 
}
#mainSide.bgWorldCup2022 {
    /* padding-top: 10rem;
    padding-bottom: calc(10rem - 4.5rem); */
    height: calc(100vh - 52px);
    /* height: 100vh; */
    background: linear-gradient(to bottom, rgba(92, 77, 66, 0.1) 0, rgba(92, 77, 66, 0.8) 100%), url("../assets/worldcup/bg.webp");
    background-color: red;
    background-position: center;
    /* background-repeat: no-repeat; */
    background-repeat: repeat;
    background-attachment: scroll;
    background-size: cover;
 
}

#leftSide {
    display:none;
    position: fixed;
    top:55px;
    /* padding-bottom:55px; */
    left:0;
    width:250px;
    max-height:100vh;
    overflow:visible;
    background-color: khaki;
}

#myMenu2 .my-active {
    background-color:whitesmoke ;
} 
#myMenu2 .my-active::after {
    content: "\026CF" ;
    position: absolute;
    bottom:0; right:0;
} 

.notificationHolder {
    position: fixed;
    top:120px;
    left:0;
}
.my-notification {
    position: relative;
    top:100%;
    left:0;
    width:250px;
    opacity: 0;
    /* background-color:palegreen; */
    border-radius: 6px;
    font-size:20px;
    animation-name: my-notifying;
    animation-duration: 2s;
}
@keyframes my-notifying {
    0% {opacity:0.2}
    30% {opacity:1}
    60% {opacity:1}
    100% {opacity:0}
}

@keyframes my-left-out {
    0% {}
    100% {left:-100%}
}

.my-center {
    /* horizontally middle and vertically center */
    display:flex;
    justify-content: center;
    align-items:center;
    /* => text */
    text-align: center;
    vertical-align: middle;
    /* test */ 
    /* border: 1px solid lightsalmon; */
}

.my-title-icon {
    position:absolute;
    text-align: left;
    height:60px;
    width:60px;
    top:0px;
    left:110px;
}
.my-title-icon img {
    width:30px;
}

.my-title-start {
    position:absolute;
    top:0px;
    right:0px;
}
.my-title-end {
    position:absolute;
    top:20px;
    right:0px;
}

.my-add-info {
    position:absolute;
    bottom:0;
    right:0;
    bottom:-4px;
    width:100%;
    /* right: 20%; */
    color:red;
    padding:0;
}

.my-tooltip {
    position:relative;
    display:inline-block;
    overflow: visible;
    cursor: pointer;
}
.my-tooltip .my-tooltip-content {
    visibility:hidden;
    position: absolute;
    width:125px;
    top:100%;
    right:0;
    z-index: 2;
    border-radius: 6px;
    color:pink;
    background-color: #555;
    /* break the long string */
    word-wrap: break-word;
    
    /* Fade in tooltip */
    opacity: 0;
    transition: opacity 0.5s;
}
/* Tooltip arrow */
.my-tooltip .my-tooltip-content::before {
    content: "";
    position: absolute;
    bottom:100%;
    right: 16px;
    margin-left: -5px;
    border-width: 5px;
    border-style: solid;
    border-color:  transparent transparent #555 transparent;
  }
.my-tooltip:hover .my-tooltip-content {
    visibility: visible;
    opacity: 1;
    cursor: initial;
    z-index: 10;
}
.my-tooltip .my-tooltip-content-right {
    visibility:hidden;
    position: absolute;
    width:125px;
    left:100%;
    bottom:0;
    z-index: 2;
    border-radius: 6px;
    color:pink;
    background-color: #555;
    /* break the long string */
    word-wrap: break-word;
    
    /* Fade in tooltip */
    opacity: 0;
    transition: opacity 0.5s;
}
/* Tooltip arrow */
.my-tooltip .my-tooltip-content-right::before {
    content: "";
    position: absolute;
    left:100%;
    top: 5px;
    margin-left: 5px;
    border-width: 5px;
    border-style: solid;
    border-color:  transparent #555 transparent transparent;
  }
.my-tooltip:hover .my-tooltip-content-right {
    visibility: visible;
    opacity: 1;
    cursor: initial;
}
.my-tooltip .my-tooltip-content-left {
    visibility:hidden;
    position: absolute;
    width:125px;
    right:100%;
    top:55%;
    z-index: 2;
    border-radius: 6px;
    color:pink;
    background-color: #555;
    /* break the long string */
    word-wrap: break-word;
    
    /* Fade in tooltip */
    opacity: 0;
    transition: opacity 0.5s;
}
/* Tooltip arrow */
.my-tooltip .my-tooltip-content-left::before {
    content: "";
    position: absolute;
    left:100%;
    top: 2px;
    margin-right: 0;
    border-width: 5px;
    border-style: solid;
    border-color: transparent transparent transparent #555;
  }
.my-tooltip:hover .my-tooltip-content-left {
    visibility: visible;
    opacity: 1;
    cursor: initial;
}

.my-login-tick-ng {
    color:red;
    position: absolute;
    top:0;
    right:-0;
}

.my-login-tick-ok {
    color:green;
    position: absolute;
    top:0;
    right:-0;
}

.my-user-title {
    color:blue;
    position: absolute;
    top:0;
    left:0;
    font-size:10px;
}

.my-user-email {
    color:purple;
    position: absolute;
    bottom:0;
    left:0;
    font-size:10px;
}

.my-div-for-sum-table {
    float:left;
    width:100%;
}
@media (min-width:1050px) { .my-div-for-sum-table{width:49.99999%} }
@media (min-width:1450px){ .my-div-for-sum-table{width:33.33333%} }

/* a Running Line Animation using CSS3 */
/* https://codepen.io/nikhil/pen/aOMQaR */
.running_line{
    position: fixed;
    top: 53px;
    left: 0;
    margin-left:100px;
    width: 100%;
    height: 3px;
    background: rgb(7, 7, 170);
    z-index: 9;
    overflow: hidden;
    animation: lineleft 5s 1;
}
.running_dot{
    position: absolute;
    height: 3px;
    width: 5px;
    background: rgb(255, 156, 156);
    /* animation: dotleft 2s cubic-bezier(.72,.03,.75,.54) infinite; */
    animation: dotleft 2s cubic-bezier(.72,.03,.75,.54) 1;
}
/* .running_dot1{
    empty
} */
.running_dot2{
    animation-delay: .4s;
}
.running_dot3{
    animation-delay: .8s;
}
.running_dot4{
    animation-delay: 1.2s;
}
.running_dot5{
    animation-delay: 1.6s;
}
@keyframes dotleft {
    0% {
        left: 0%;
    }
    100% {
        left: 100%;
    }
}
@keyframes lineleft {
    0% {
        opacity: 1;
    }
    100% {
        opacity: 0;
    }
}


/* hide the left slowly */
.my-show-right-slowly {
    animation: hideLeft 2s;
}
@keyframes hideLeft {
    0% { margin-left: 250px;}
    100% {margin-left: 0}
}


/*  */
footer {
    font-size:10px;
    font-style: italic;
    font-weight: bold;
    position:fixed;
    bottom:0;
    right:0;
    color:lightgrey;
}

footer::after {
    content: " Powered by MD@RVC";
    color:darkgray;
}


/* some control */
.myCnt-select-big {
    position: absolute;
    top: 0;
    left: 0;
}
.myCnt-select-small {
    position: absolute;
    bottom: 0;
    left: 0;
}
.myCnt-bet-score {
    position: absolute;
    bottom: 0;
    right: 0;
}

.myCnt-leftmenu-item.active {
    text-shadow: 5px 5px 5px indigo;
    font-weight: bold;
}

FILE:: .//data_manual/PVPI_org/finished_projects.json
{
   "RCar_V4Hes2" : "FEOL Sep.15, BEOL Sep.26",
   "RCar_S4v1.2": "",
   "RH850_U2B10": "FEOL/BEOL MaskGo: Jun.05/Jun.27",
   "RH850_U2B06_2ndcut": "MaskGo: Jul.29"
}

FILE:: .//data_manual/data_worldcup_betScore.csv
﻿#match_datetime,teamA,teamB,bet_score,win_ratio
2022-12-6T18:00,Maroc,Tây Ban Nha,1_0,15
2022-12-6T18:00,Maroc,Tây Ban Nha,2_0,41
2022-12-6T18:00,Maroc,Tây Ban Nha,2_1,23
2022-12-6T18:00,Maroc,Tây Ban Nha,3_0,101
2022-12-6T18:00,Maroc,Tây Ban Nha,3_1,81
2022-12-6T18:00,Maroc,Tây Ban Nha,3_2,81
2022-12-6T18:00,Maroc,Tây Ban Nha,4_0,201
2022-12-6T18:00,Maroc,Tây Ban Nha,4_1,201
2022-12-6T18:00,Maroc,Tây Ban Nha,4_2,201
2022-12-6T18:00,Maroc,Tây Ban Nha,4_3,201
2022-12-6T18:00,Maroc,Tây Ban Nha,5_0,251
2022-12-6T18:00,Maroc,Tây Ban Nha,5_1,251
2022-12-6T18:00,Maroc,Tây Ban Nha,5_2,251
2022-12-6T18:00,Maroc,Tây Ban Nha,6_0,251
2022-12-6T18:00,Maroc,Tây Ban Nha,6_1,251
2022-12-6T18:00,Maroc,Tây Ban Nha,6_2,251
2022-12-6T18:00,Maroc,Tây Ban Nha,7_0,251
2022-12-6T18:00,Maroc,Tây Ban Nha,7_1,251
2022-12-6T18:00,Maroc,Tây Ban Nha,8_0,251
2022-12-6T18:00,Maroc,Tây Ban Nha,0_0,9.5
2022-12-6T18:00,Maroc,Tây Ban Nha,1_1,8
2022-12-6T18:00,Maroc,Tây Ban Nha,2_2,23
2022-12-6T18:00,Maroc,Tây Ban Nha,3_3,101
2022-12-6T18:00,Maroc,Tây Ban Nha,4_4,251
2022-12-6T18:00,Maroc,Tây Ban Nha,0_1,5.8
2022-12-6T18:00,Maroc,Tây Ban Nha,0_2,6.5
2022-12-6T18:00,Maroc,Tây Ban Nha,0_3,11
2022-12-6T18:00,Maroc,Tây Ban Nha,0_4,23
2022-12-6T18:00,Maroc,Tây Ban Nha,0_5,56
2022-12-6T18:00,Maroc,Tây Ban Nha,0_6,126
2022-12-6T18:00,Maroc,Tây Ban Nha,0_7,201
2022-12-6T18:00,Maroc,Tây Ban Nha,0_8,251
2022-12-6T18:00,Maroc,Tây Ban Nha,0_9,251
2022-12-6T18:00,Maroc,Tây Ban Nha,1_2,9.5
2022-12-6T18:00,Maroc,Tây Ban Nha,1_3,15
2022-12-6T18:00,Maroc,Tây Ban Nha,1_4,34
2022-12-6T18:00,Maroc,Tây Ban Nha,1_5,71
2022-12-6T18:00,Maroc,Tây Ban Nha,1_6,151
2022-12-6T18:00,Maroc,Tây Ban Nha,1_7,201
2022-12-6T18:00,Maroc,Tây Ban Nha,2_3,41
2022-12-6T18:00,Maroc,Tây Ban Nha,2_4,71
2022-12-6T18:00,Maroc,Tây Ban Nha,2_5,126
2022-12-6T18:00,Maroc,Tây Ban Nha,2_6,201
2022-12-6T18:00,Maroc,Tây Ban Nha,3_4,151
2022-12-6T18:00,Maroc,Tây Ban Nha,0_10,251

FILE:: .//data_manual/data_worldcup_matches.csv
﻿#match_datetime,match_group,teamA,teamB,def_AB_bet,def_BS_bet,score
2022-12-3T18:00,vòng 2/16,Hà Lan,Hoa Kỳ,0_1,2,3_1
2022-12-3T22:00,vòng 2/16,Argentina,Úc,0_2,2.75,2_1
2022-12-4T18:00,vòng 2/16,Pháp,Ba Lan,0_2,2.5,
2022-12-4T22:00,vòng 2/16,Anh,Sénégal,1_0,2.25,
2022-12-5T18:00,vòng 2/16,Nhật Bản,Croatia,,,
2022-12-5T22:00,vòng 2/16,Brasil,Hàn Quốc,,,
2022-12-6T18:00,vòng 2/16,Maroc,Tây Ban Nha,,,
2022-12-6T22:00,vòng 2/16,Bồ Đào Nha,Thụy Sĩ,,,
2022-12-9T18:00,Tứ kết,teamA,teamB,,,
2022-12-9T22:00,Tứ kết,Hà Lan,Argentina,,,
2022-12-10T18:00,Tứ kết,teamA,teamB,,,
2022-12-10T22:00,Tứ kết,teamA,teamB,,,
2022-12-12T22:00,Bán kết,teamA,teamB,,,
2022-12-14T22:00,Bán kết,teamA,teamB,,,
2022-12-17T18:00,Tranh hạng ba,teamA,teamB,,,
2022-12-18T18:00,Chung kết,teamA,teamB,,,

FILE:: .//data_manual/data_worldcup_matches.csv.round_table.csv
﻿#match_datetime,match_group,teamA,teamB,def_AB_bet,def_BS_bet,score,,,
2022-11-20T19:00,Bảng A,Qatar,Ecuador,,,0:2,,,
2022-11-21T19:00,Bảng A,Sénégal,Hà Lan,,,0:2,,,
2022-11-25T16:00,Bảng A,Qatar,Sénégal,0.75:0,2.25,1:3,,,
2022-11-25T19:00,Bảng A,Hà Lan,Ecuador,0:1,2.25,1:1,,,
2022-11-29T18:00,Bảng A,Ecuador,Sénégal,0:0,2,1:2,,,
2022-11-29T18:00,Bảng A,Hà Lan,Qatar,0:2,3,2:0,,,
2022-11-21T16:00,Bảng B,Anh,Iran,,,6:2,,,
2022-11-21T22:00,Bảng B,Hoa Kỳ,Wales,,,1:1,,,
2022-11-25T13:00,Bảng B,Wales,Iran,0:0,2,0:2,,,
2022-11-25T22:00,Bảng B,Anh,Hoa Kỳ,0:1,2.75,0:0,,,
2022-11-29T22:00,Bảng B,Wales,Anh,1.25:0,2.5,0:3,,,
2022-11-29T22:00,Bảng B,Iran,Hoa Kỳ,0.5:0,2.25,0:1,,,
2022-11-22T13:00,Bảng C,Argentina,Ả Rập Xê Út,,,1:2,,,
2022-11-22T19:00,Bảng C,México,Ba Lan,,,0:0,,,
2022-11-26T16:00,Bảng C,Ba Lan,Ả Rập Xê Út,0:1,2.25,2:0,,,
2022-11-26T22:00,Bảng C,Argentina,México,0:1,2.5,2:0,,,
2022-11-30T22:00,Bảng C,Ả Rập Xê Út,México,0.75:0,2.5,1:2,,,
2022-11-30T22:00,Bảng C,Ba Lan,Argentina,1.25:0,2.25,0:2,,,
2022-11-22T16:00,Bảng D,Đan Mạch,Tunisia,,,0:0,,,
2022-11-22T22:00,Bảng D,Pháp,Úc,,,4:1,,,
2022-11-26T13:00,Bảng D,Tunisia,Úc,0:0,2.25,0:1,,,
2022-11-26T19:00,Bảng D,Pháp,Đan Mạch,0:1,2.25,2:1,,,
2022-11-30T18:00,Bảng D,Úc,Đan Mạch,1:0,2.5,1:0,,,
2022-11-30T18:00,Bảng D,Tunisia,Pháp,1.25:0,2.5,1:0,,,
2022-11-23T16:00,Bảng E,Đức,Nhật Bản,,,1:2,,,
2022-11-23T19:00,Bảng E,Tây Ban Nha,Costa Rica,0:1,2.5,7:0,,,
2022-11-27T13:00,Bảng E,Nhật Bản,Costa Rica,,,0:1,,,
2022-11-27T22:00,Bảng E,Tây Ban Nha,Đức,0:0,2.75,1:1,,,
2022-12-1T22:00,Bảng E,Nhật Bản,Tây Ban Nha,1.25:0,2.75,2:1,,,
2022-12-1T22:00,Bảng E,Costa Rica,Đức,2.75:0,3.75,2:4,,,
2022-11-23T13:00,Bảng F,Maroc,Croatia,,,0:0,,,
2022-11-23T22:00,Bảng F,Bỉ,Canada,,,1:0,,,
2022-11-27T16:00,Bảng F,Bỉ,Maroc,0:1,2.25,0:2,,,
2022-11-27T19:00,Bảng F,Croatia,Canada,0:0,2.25,4:1,,,
2022-12-1T18:00,Bảng F,Croatia,Bỉ,0:0,2.25,0:0,,,
2022-12-1T18:00,Bảng F,Canada,Maroc,0.5:0,2.25,1:2,,,
2022-11-24T13:00,Bảng G,Thụy Sĩ,Cameroon,0:1,2.25,1:0,,,
2022-11-24T22:00,Bảng G,Brasil,Serbia,0:1,2.75,2:0,,,
2022-11-28T13:00,Bảng G,Cameroon,Serbia,0.75:0,2.25,3:3,,,
2022-11-28T19:00,Bảng G,Brasil,Thụy Sĩ,1:0,2.5,1:0,,,
2022-12-2T22:00,Bảng G,Serbia,Thụy Sĩ,,,0:0,,,
2022-12-2T22:00,Bảng G,Cameroon,Brasil,,,0:0,,,
2022-11-24T19:00,Bảng H,Uruguay,Hàn Quốc,0:1,2.25,0:0,,,
2022-11-24T16:00,Bảng H,Bồ Đào Nha,Ghana,0:1,2.25,3:2,,,
2022-11-28T16:00,Bảng H,Hàn Quốc,Ghana,0:0,2,2:3,,,
2022-11-28T22:00,Bảng H,Bồ Đào Nha,Uruguay,0:1,2.25,2:0,,,
2022-12-2T18:00,Bảng H,Ghana,Uruguay,,,0:0,,,
2022-12-2T18:00,Bảng H,Hàn Quốc,Bồ Đào Nha,,,0:0,,,

FILE:: .//data_manual/global_setting_users.json
{"man.duong.ym@renesas.com":{"role":"Admin"}}

FILE:: .//data_manual/list_user_w_def_OTP.txt
#account,defOTP
hac.nguyen.xf@renesas.com,ULs9m4QK
man.duong.ym@renesas.com,JHu1f3Cv
thien.nguyen.te@renesas.com,PDs3e1iL

FILE:: .//docs/PVPI_export/PVPI_sum_by_time_explain_filter_and_output.md
!!! WARNING
    This web-interface only provides method to retrieve excel files as brief info of PVPI sessions by dates, not detailed excel report for peer-review or design review - if you're seeking this detailed report, please ask designer or PV PIC to generate it at his/her working directory.

!!! INFO
    Following table holds links to download excel files which represent summary of PVPI sessions by dates.

    This help content aids users to use filter efficiently and understand the content of the files.

Use of filter
-----

!!! Tips
   The 3 filters work as 'AND' filters.

* The **Project** filter and **Date** filters help to quickly select specific files in specific project, and in specific dates.

* Use the **Free pattern** filter will help you filter files freely as your wish.
 
  *E.g.*:  `'asic,rcar 1214,1215,1216'` will filter to display the ASIC* and Rcar* for 3 dates pattern 1214, 1215 and 1216 only.

!!! WARNING
   You can only download 1 file once a click. If you want to get all (or lots of) files once, please contact developer.

Structure of a excel file's content:
-----
!!!
    This content is under construction.

Notice
-----

Currently all files (meaning all projects, all dates) are listed, this will impact to users' experience with some delay when filtering data - this is normal since your computer is working with large data. We may adjust the default number of files to display in the future.

**Thank you so much for using our service!** /*PL-team*/

#END.OF.HELP#

FILE:: .//docs/worldcup/format_import_files.md
!!! WARNING
    It's highly suggested NOT to use colon character (':') to present score-like string - by default, MS Excel auto format the string with ':' to be date-time.

    Use '_' instead. Example: `3_1` for score, `0_1.75` and for bet_AB

### Format for importing matches:

~~~~~~~~~~~~~~~~~~~~~~~~ none
     A                 B        C      D        E          F          G
#match_datetime, match_group, teamA, teamB, def_AB_bet, def_BS_bet, score
~~~~~~~~~~~~~~~~~~~~~~~~

### Format for importing bet-scores:

~~~~~~~~~~~~~~~~~~~~~~~~ none
     A             B      C        D          E
#match_datetime, teamA, teamB, bet_score, win_ratio
~~~~~~~~~~~~~~~~~~~~~~~~

!!! Tip
    To use Vietnamese, save the CSV in UTF-8 encoding format.


FILE:: .//index.php
<?php
    require_once("./src_modules/login/session.php");
   my_init_session();
?>

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>PLPI</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<link rel="icon" type="image/x-icon" href="assets/logo.bmp" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.2/font/bootstrap-icons.css">
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
<link rel="stylesheet" href="css/my.css">
<script src="src_main/my.js"></script>
<script src="src_modules/login/logging.js"></script>
<script src="src_modules/login/user_mod_info.js"></script>
<!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"></script>  -->
<!-- <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script> -->
</head>
<body class="bg" onload="my_onload()">
<div class="my-icon"></div>
<div id="myMenu2" class="w3-bar" style="padding-left:100px">
    <!-- <div class="w3-bar-item" style="width:100px"></div> -->
    
    <!-- <div class="w3-bar-item w3-mobile w3-button w3-round w3-right my-tooltip" onclick="my_login()"><i class="w3-text-indigo bi bi-box-arrow-left w3-xlarge"></i><span class="my-tooltip-content">Log-in</span></div> -->
    <!-- <div class="w3-bar-item w3-mobile w3-button w3-round w3-right my-tooltip" onclick="my_logout()"><i class="w3-text-indigo bi bi-box-arrow-right w3-xlarge"></i><span class="my-tooltip-content">Log-out</span></div> -->

    <div class="w3-bar-item w3-mobile w3-button w3-round w3-right my-tooltip" onclick="dsp_mod_user_info()" id="userDisplay">
        <span class="w3-xlarge">NobodyButYou</span>
        <span class="my-user-email">Somebody@nowhere.com</span>
        <span class="my-user-title">Guess</span>
        <i class="bi bi-shield-x my-login-tick-ng"></i>
        <span class="my-tooltip-content">Login is required for further action</span>
    </div>
</div>
<div id='notificationHolder' style='position:fixed;bottom:5px;left:0;z-index:9'></div>

<div id="leftSide" class="w3-animate-left w3-bar-block">
</div>
<div id="mainSide" class="w3-row-padding w3-responsive">
</div>

<footer>No pain, no gain - don't complain.</footer>
</body>
<script src="src_main/globals.js"></script>
<script src="src_modules/w3/w3.js"></script>
<script src="src_modules/menu/menu.js"></script>
<!-- worldcup -->
<script src="src_modules/worldcup/worldcup.js"></script>
<script src="src_modules/host_info/working_on_host_info.js"></script>
<!-- PVPI orginal -->
<script src="src_modules/PVPI_org/PVPI_org.js"></script>
<!-- PVPI export, insider -->
<script src="src_modules/PVPI_export/PVPI_export.js"></script>
<script src="src_modules/PVPI_insider/PVPI_insider.js"></script>
<!-- checking exe servers -->
<script src="src_modules/chkServers/chkServers.js"></script>
<!-- checking disk/inode -->
<script src="src_modules/usageDiskInode/usageDiskInode.js"></script>
<!-- PVPI observation -->
<script src="src_modules/PLPI_observation/PLPI_observation.js"></script>
<!-- markdeep -->
<link rel='stylesheet' href="src_modules/markdeep/my_add_md.css">
<script>window.markdeepOptions={mode:'script'};</script>
<script src="src_modules/markdeep/markdeep.js"></script>
</html>

FILE:: .//src_main/get_sum_recent_updated.php
<?php
    // ini_set('display_errors', 1);
    // ini_set('display_startup_errors', 1);
    // error_reporting(E_ALL);

    $initFile = "./data/sum_issues.json";
    $oData = array();
    if(file_exists($initFile)){
        if($fh = fopen($initFile, "r")){
            $oData = json_decode(fread($fh, filesize($initFile)), true);
            fclose($fh);
        }else{}
    }else{}
    
    echo json_encode($oData);
?>

FILE:: .//src_main/globals.js
const body = document.getElementsByTagName("body")[0];
const menu = document.getElementById("myMenu2");
const leftSide = document.getElementById("leftSide");
const mainSide = document.getElementById("mainSide");
const user = document.getElementById("userDisplay");

FILE:: .//src_main/my.js
let aoMonth = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
let flgStop = false;//stop signal caused by clicking Updating again
let flgUpdHistory = false;//on the go downloading and saving data
let flgSumNow = false;//on the go updating the table
let hrefIssue = "http://172.29.143.22:8080/";

function myTest(){
    // generate a holder for testing returned info
    let eTop = null;
    if(document.getElementById("test_holder")) test_holder.remove();
    eTop = my_create("div",
        my_create("span","X",["w3-padding","w3-large","w3-button","w3-display-topright","w3-round"],{},{"onclick":"this.parentNode.remove()"}),
        ["w3-khaki"],
        {"padding":0,"position":"fixed","bottom":0,"left":0,"height":"30%","width":"100%","overflow":"auto","font-size":"9px"},
        {id:"test_holder"}
        );
    body.appendChild(eTop);

    dsp_notification("Just a testing notification");

    // mainSide.appendChild(gen_item_w_person());
    // retrieve_user_action();
    // check cookies
    // let ca = document.cookie.split(';');
    // for(let i = 0; i < ca.length; i++) {
    //     let c = ca[i];
    //     while (c.charAt(0) == ' ') {
    //         c = c.substring(1);
    //     }
    //     console.log(i, c)
    // }

    // dsp_user_info_from_email("man.duong.ym@renesas.com");

    // init_user();
    // calc_score_of_user(retrieve_user_action())

    //
    // retrieve_sum_by_recent_updated();
   // my_create_running_line();

//       my_ajax_get("src_modules/test/rtn_server_vars.php",[{}],function(rtnO){
//     for(let tmpv in rtnO["SESSION"]){
//         eTop.innerHTML += tmpv + " : " + rtnO["SESSION"][tmpv] + "<br>";
//     }
//    })

    // my_ajax_get("src_modules/test/database.php",[{}],function(rtnO){
    //     let noFmtE = my_create("pre",JSON.stringify(rtnO,undefined,2),["w3-small"]);
    //     eTop.appendChild(noFmtE);
    //     // for(let tmpv in rtnO){
    //     //     eTop.innerHTML += tmpv + " : " + rtnO[tmpv] + "<br>";
    //     // }
    // })

    my_ajax_get("src_modules/test/rtn_server_vars.php",[{}],function(rtnO){
        let noFmtE = my_create("pre",JSON.stringify(rtnO,undefined,2).replace(/\\n/g,"<br>"),["w3-small"]);

        eTop.appendChild(noFmtE);
        // for(let tmpv in rtnO){
        //     eTop.innerHTML += tmpv + " : " + rtnO[tmpv] + "<br>";
        // }
    })
}

function my_onload(){
    console.log("on loading ...")
    //init_user();
    // retrieve_sum_by_recent_updated();
    dsp_menu();
}

//////////////////////////////////////// show/hide/toggle the top components (this page
function show_left(){
    leftSide.classList.add("w3-show");
    mainSide.style.marginLeft = "250px";
}
function hide_left(){
    leftSide.classList.remove("w3-show");
    mainSide.classList.add("my-show-right-slowly")
    mainSide.style.marginLeft = "0";
    // setTimeout(function(){
    //     mainSide.style.marginLeft = "0";
    //     mainSide.classList.remove("my-show-right-slowly")
    // },1800)
}
function toggle_left(){
    if(leftSide.classList.contains("w3-show")){
        hide_left();
    }else{
        show_left();
    }
}
function toggle_nextEle(clickedEle){
    if(clickedEle === undefined) return 0;
    let tgtEle = clickedEle.nextElementSibling;
    if(tgtEle === undefined) return 0;
    if(tgtEle === null) return 0;
    if(tgtEle.classList.contains("w3-show")){
        tgtEle.classList.remove("w3-show");
    }else{
        tgtEle.classList.add("w3-show");
    }
}

function my_create(tag,innerHTML,aoClass,hoStyle,hoAttr){
    let aE = undefined;
    if(tag === undefined){
        aE = document.createElement("div");
    }else{
        aE = document.createElement(tag);
    }
    if(innerHTML !== undefined){
        if(typeof(innerHTML) === "object"){
            aE.appendChild(innerHTML);
        }else{
            aE.innerHTML = innerHTML;
        }
    }else{}
    if(aoClass !== undefined){
        for(let tmpClass of aoClass){
            aE.classList.add(tmpClass);
        }
    }
    if(hoStyle !== undefined){
        for(let tmpS in hoStyle){
            aE.style[tmpS] = hoStyle[tmpS];
        }
    }
    if(hoAttr !== undefined){
        for(let tmpAtt in hoAttr){
            aE.setAttribute(tmpAtt,hoAttr[tmpAtt]);
        }
    }
    return aE;
}

function my_add_row(aoData,type,oComStyle){
    if(aoData === undefined) return null;
    if(typeof(aoData) !== "object") return null;
    if(aoData.length === 0) return null;

    let tr = document.createElement("tr");
    if(type === undefined) type = "td";
    for(let tmpV of aoData){
        let td = document.createElement(type);
        td.innerHTML = tmpV;
        if(oComStyle !== undefined){
            for(let keyw in oComStyle){
                td.style[keyw] = oComStyle[keyw];
            }
        }
        tr.appendChild(td)
    }
    return tr;
}

function my_add_css(id,href){
    if(document.getElementById(id) === null){
        document.getElementsByTagName("head")[0].appendChild(my_create("link",undefined,[],{},{
            "rel" : "stylesheet",
            "href" : href,
            id:id,
        }))
    }else{}
    return 1;
}
function my_add_js(id,src){
    if(document.getElementById(id) === null){
        let ae = my_create("script",undefined,[],{},{
            "src" : src,
            "type" : "text/javascript",
            id:id,
        })
        // ae.onload = function(){ console.log("loaded",ae) }
        document.getElementsByTagName("head")[0].appendChild(ae)
        return ae;
    }else{
        return document.getElementById(id);
    }
    // return 1;
}

function my_URLencode(oD){
    if(oD === undefined) return "";
    if(oD.length === 0) return "";
    let oStr = "";
    for(let comp of oD){
        for(let key in comp){
            if(oStr !== "") oStr += "&";
            oStr+=encodeURIComponent(key)+"="+encodeURIComponent(comp[key]);
        }
    }
    return oStr;
}

function dsp_notification(msg,type){
    if(type === undefined) type = "Warning";
    if(msg === undefined) msg = "Unknown message";
    if(Object.getPrototypeOf(Object.getPrototypeOf(msg)).constructor === Error) msg = msg.message
    let bgcolor = "yellow";
    if(type === "Error"){
        bgcolor = "darksalmon";
    }else if(type === "Warning"){
        bgcolor = "yellow";
    }else if(type === "Info"){
        bgcolor = "palegreen";
    }else{}
    let eTop = my_create("div",msg,["my-notification"],{"backgroundColor":bgcolor},{})
    // document.getElementsByTagName("body")[0].appendChild(eTop);
    document.getElementById("notificationHolder").appendChild(eTop);
    setTimeout(function(){eTop.remove()},2200);
    my_create_running_line();//a little animation
}

function dsp_wait(){
    let eTop = my_create("div",undefined,
    [],
    {"position":"fixed","display":"block","top":"2px","left":"72px","padding":0,"margin":0},{id:"wait_on_top"})
    eTop.appendChild(my_create("p","waiting ...",["w3-animate-fading"],{"padding":0,"margin":0}));
    eTop.appendChild(my_create("div",
        "<p class='w3-spin' style='width:100%;padding:0;margin:0'>" + 
        "<i class='bi bi-hourglass-split w3-text-indigo' style='font-size:20px'>" +
        "</i></p>",
        ["w3-center","w3-transparent"],{"width":"100%"}))
    document.body.appendChild(eTop);
    return eTop;
}

function my_datetime(objDate){
    // out string for date-time as my format
    // return objDate.toLocaleString("en-US",{"dateStyle":"medium","timeStyle":"short","hour12":false});
    return objDate.toLocaleString("en-US",{
        hourCycle: 'h23',
        year: "numeric",
        month: "short",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit"
    });
}

function my_datetime_fr_epoch(epochStr){
    if(epochStr === undefined) return "-";
    if(!String(epochStr).match(/^\d+$/)) return epochStr;
    let objDate = new Date()
    objDate.setTime(Number(epochStr)*1000);
    // out string for date-time as my format
    // return objDate.toLocaleString("en-US",{"dateStyle":"medium","timeStyle":"short","hour12":false});
    return objDate.toLocaleString("en-US",{
        hourCycle: 'h23',
        year: "numeric",
        month: "short",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit"
    });
}

function my_return_date(diffDays){
    let d = new Date();
    d.setDate(d.getDate() + diffDays);
    let aoM = ["01","02","03","04","05","06","07","08","09","10","11","12"];
    return d.getFullYear() + "-" + aoM[d.getMonth()] + "-" + d.getDate();
}

function my_create_running_line(){
    // create a wrapper of the line
    let eTop = my_create("div",undefined,["w3-container"]);
    let eLine = my_create("div",undefined,["running_line"]);
    let eDot1 = my_create("div",undefined,["running_dot","running_dot1"]);
    let eDot2 = my_create("div",undefined,["running_dot","running_dot2"]);
    let eDot3 = my_create("div",undefined,["running_dot","running_dot3"]);
    let eDot4 = my_create("div",undefined,["running_dot","running_dot4"]);
    let eDot5 = my_create("div",undefined,["running_dot","running_dot5"]);

    eLine.appendChild(eDot1);
    eLine.appendChild(eDot2);
    eLine.appendChild(eDot3);
    eLine.appendChild(eDot4);
    eLine.appendChild(eDot5);
    eTop.appendChild(eLine);

    // self destruction after sometime
    setTimeout(function(){
        eTop.remove()
    },4500);

    // append to the body
    body.appendChild(eTop)
    return;
}

////
function my_ajax_get(svrSrc,hoVar,fnc){
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState === 4){
            if(this.status === 200){
                let objData = {};
                try {objData = JSON.parse(this.responseText);}
                catch(err){ 
                    // console.log(err)
                    // console.log(this.responseText);
                    // dsp_notification(err,"Error");
                    // dsp_notification(this.responseText,"Error");
                    // return;
                    objData = this.responseText;
                    console.log("rtO not an object, return string intead.");
                    // console.log(objData)
                }
                if(fnc === undefined) return;
                try {fnc(objData)}
                catch(err){
                    dsp_notification("Err:"+fnc+":"+err,"Error");
                    console.log("ERROR when executing fnc: error=", err)
                }
                return;

            }else if(this.status === 500){
                console.log("dbg:: caught the state=" + this.readyState + " status="+this.status)
                // let objData = {};
                // try {objData = JSON.parse(this.responseText);}
                // catch(err){
                //     console.log(err);
                //     console.log(this.responseText);
                //     dsp_notification(err,"Error");
                //     dsp_notification(this.responseText,"Error");
                //     return;
                // }
                // // console.log("dbg:",objData)
                // if(fnc === undefined) return;
                // fnc(objData);return;
            }
        }
    }
    let rq = my_URLencode(hoVar);
    xmlhttp.open("GET",svrSrc+"?"+rq,true);
    xmlhttp.send();
}

////
function my_ajax_post_form(svrSrc,form,fnc){
    //https://developer.mozilla.org/en-US/docs/Learn/Forms/Sending_forms_through_JavaScript
    let xmlhttp = new XMLHttpRequest();
    let urlEncodedDataPairs = [];
    for(let ele of form.elements){
        urlEncodedDataPairs.push(`${encodeURIComponent(ele.name)}=${encodeURIComponent(ele.value)}`)
    }
    // Combine the pairs into a single string and replace all %-encoded spaces to
    // the '+' character; matches the behavior of browser form submissions.
    const urlEncodedData = urlEncodedDataPairs.join('&').replace(/%20/g, '+');
    // console.log(urlEncodedData)

    xmlhttp.addEventListener('error', (event) => {
        alert('Oops! Something went wrong.');
      });

    xmlhttp.onreadystatechange = function(){
        if(this.readyState === 4){
            if(this.status === 200){
                let objData = {};
                try {objData = JSON.parse(this.responseText);}
                catch(err){ 
                    console.log(this.responseText)
                    console.log(err)
                    dsp_notification(err,"Error");
                    dsp_notification(this.responseText,"Error");
                    // console.log(this.responseText);
                    return;
                }
                if(fnc === undefined) return;
                fnc(objData);return;

            }else if(this.status === 500){
                console.log("dbg:: caught the state=" + this.readyState + " status="+this.status + " response=" + this.responseText)
                return;
            }
        }
    }
    xmlhttp.open("POST",svrSrc,true);
    xmlhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xmlhttp.send(urlEncodedData);
}

function executeFunctionByName(functionName, context /*, args */) {
    var args = Array.prototype.slice.call(arguments, 2);
    var namespaces = functionName.split(".");
    var func = namespaces.pop();
    for(var i = 0; i < namespaces.length; i++) {
      context = context[namespaces[i]];
    }
    // console.log(func,context,args)
    return context[func].apply(context, args);
}

function my_gen_form(cntData,func_act_after_submit){
    // console.log(cntData)
    if(!cntData.hasOwnProperty("cntData")) return; //
    if(!cntData.hasOwnProperty("formAction")) cntData["formAction"] = ""; //
    // console.log(cntData)
    let eTop = my_create("div",undefined,["w3-container"]);
    let eBtnClose = my_create("span","&times;",["w3-button","w3-display-topright"],{},{"onclick":"this.parentNode.parentNode.parentNode.remove()"})
    // form content
    let eForm = my_create("form",undefined,["w3-container","w3-padding-16"],{},{"method":"post"});
    for(let formItem of cntData["cntData"]){
        let mainItem = null;
        let lblItem = null;
        if(!formItem.hasOwnProperty("type")) {
            if(formItem.hasOwnProperty("label")){
                lblItem = my_create("label",formItem["label"]);
                eForm.appendChild(lblItem);
            }
            continue;
        }else{
            if(formItem["type"] === "submit"){
                mainItem =  my_create("button",formItem["label"],["w3-button","w3-block","w3-round","w3-indigo","w3-margin-top"]);
                eForm.appendChild(mainItem);
            }else if(formItem["type"] === "checkbox"){
                mainItem =  my_create("input",formItem["label"],["w3-check"]);
                lblItem = my_create("label",formItem["label"])
                eForm.appendChild(mainItem);
                eForm.appendChild(lblItem);
            }else if(formItem["type"] === "select"){
                if(!formItem.hasOwnProperty("options")) continue;
                mainItem =  my_create("select",undefined,["w3-input"]);
                lblItem = my_create("label",formItem["label"]);
                eForm.appendChild(lblItem);
                eForm.appendChild(mainItem);
                for(let tmpv of formItem["options"]){
                    mainItem.appendChild(my_create("option",tmpv,[],{},{"value":tmpv}))
                }
            }else{
                mainItem =  my_create("input",undefined,["w3-input"]);
                lblItem = my_create("label",formItem["label"]);
                eForm.appendChild(lblItem);
                eForm.appendChild(mainItem);
            }
        }
        for(let tmpv in formItem){
            if(tmpv === "label") continue;//for common element, label is a seperated ele
            if(tmpv === "options") continue;//for select, ignore
            if(tmpv === "display") continue;//for select, ignore
            if(tmpv === "value"){
                mainItem[tmpv] = formItem[tmpv];
            }else{
                mainItem.setAttribute(tmpv,formItem[tmpv]);
            }
        }
        if(formItem.hasOwnProperty("display") && formItem["display"] === "none"){
            if(lblItem !== null) lblItem.style.display = "none";
            if(mainItem !== null) mainItem.style.display = "none";
        }
    }
    eForm.setAttribute("action",cntData["formAction"]);

    // preserve a holder for information
    eForm.appendChild(my_create("div","This holds some info.",["w3-light-grey","w3-margin-top","w3-center","form_return_info"],{"width":"100%"},{}));

    // prevent default submit behavaior and redirect it to the submit-button
    eForm.addEventListener("submit",function(event){
        event.preventDefault(); 
        my_ajax_post_form(cntData["formAction"],eForm,function(rtnO){
            func_act_after_submit(eTop.parentNode.parentNode,rtnO);
            // console.log(rtnO)
        })
        // event.target.parentNode.parentNode.parentNode.remove();// don't auto close form because OTP need sendingOTP to standstill
    })

    eTop.appendChild(eBtnClose)
    eTop.appendChild(eForm);
    return my_create("div",my_create("div",eTop,["w3-modal-content"]),["w3-modal"],{},{});
}

///////////////////////////////
function upUserDisplay(oData){
    if(document.getElementById("userDisplay") === null) return;

    let eName = userDisplay.getElementsByTagName("span")[0];
    let eEmail = userDisplay.getElementsByTagName("span")[1];
    let eTitle = userDisplay.getElementsByTagName("span")[2];
    let eShield = userDisplay.getElementsByTagName("i")[0];
    let eMoreInfo = userDisplay.getElementsByTagName("span")[3];

    if(oData.hasOwnProperty("login_email")) eEmail.innerText = oData["login_email"];
    if(oData.hasOwnProperty("user_name")) eName.innerText = oData["user_name"];
    if(oData.hasOwnProperty("role")) eTitle.innerText = oData["role"];
    if(oData.hasOwnProperty("shielded") && oData["shielded"] === "yes"){
        eShield.classList.remove("bi-shield-x");
        eShield.classList.remove("my-login-tick-ng");
        eShield.classList.add("bi-shield-check");
        eShield.classList.add("my-login-tick-ok");
    }
    if(oData.hasOwnProperty("modify_on")) eMoreInfo.innerText = new Date(Number(oData["modify_on"]) *1000);
}

function upd_user_info(){
    let sf = "src_modules/login/chk_and_rtn_login_user_info_sqlite.php";
    my_ajax_get(sf,[{}],function(rtnO){
        upUserDisplay(rtnO["user_info"]);
        // console.log(rtnO)
        upd_login_logout_buttons();
    })
};

function upd_login_logout_buttons(){
    if(userDisplay.getElementsByTagName("span")[1].innerText === "Somebody@nowhere.com"){
        btn_logout.style.display = 'none';
        if(document.getElementById("btn_login_otp") !== null) btn_login_otp.style.display = 'block';
        if(document.getElementById("btn_login") !== null) btn_login.style.display = 'block';
    }else{
        btn_logout.style.display = 'block';
        if(document.getElementById("btn_login_otp") !== null) btn_login_otp.style.display = 'none';
        if(document.getElementById("btn_login") !== null) btn_login.style.display = 'none';
    }
}

// ///////////////////////////////////////////////////////////////////
// function update_history_data(){
//     if(flgStop === true){
//         dsp_notification("Stopping state, cannot do this.","Error")
//         return;//stop interfereing
//     }

//     // => control the flag of stopping
//     let tgtClkE = null;
//     for(let tmpE of myMenu2.getElementsByTagName("div")){
//         if(tmpE.getAttribute("onclick") === "update_history_data()"){
//             tgtClkE = tmpE;
//         }
//     }
//     if(tgtClkE !== null){
//         if(tgtClkE.getElementsByTagName("i")[0].classList.contains("bi-cloud-download") && flgUpdHistory === false){
//             //at the state of standingby
//             tgtClkE.getElementsByTagName("i")[0].classList.remove("bi-cloud-download");
//             tgtClkE.getElementsByTagName("i")[0].classList.add("bi-cloud-download-fill");
//             tgtClkE.getElementsByTagName("i")[0].classList.add("w3-animate-fading");
//             tgtClkE.classList.add("w3-border");
//             tgtClkE.classList.add("w3-border-red");
//         }else{
//             // at the state of executing => cannot do this again, wait until the button returning its standby state
//             dsp_notification("Updating is on the go, cannot do this again.","Warn")
//             return;
//         }
//     }

//     // => AJAX to send request updating data
//     let xmlhttp = new XMLHttpRequest();
//     // =>
//     xmlhttp.open("GET","get_issues.php?opMode=upHistory",true);
//     // let eProgressTop = my_create("i",undefined,["bi","bi-hourglass-split","w3-spin","w3-xxlarge"],{"position":"fixed","top":"5px","left":"5px"},{"id":"my_progress"})
//     // document.getElementsByTagName("body")[0].appendChild(eProgressTop);

//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//            // =>
//             let objData = {};
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             // 
//             // while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
//             // while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//             // hide_left();//if any
//             // show_left();
//             if(objData["outObj"]["result"] === "done"){
//                 dsp_notification("Finished updating data.","Info")
//             }else{
//                 dsp_notification("Problem Status: " + objData["outObj"]["result"],"Warn")
//             }
//             flgUpdHistory = false;
//             // reset status of the button
//             tgtClkE.getElementsByTagName("i")[0].classList.remove("bi-cloud-download-fill");
//             tgtClkE.getElementsByTagName("i")[0].classList.remove("w3-animate-fading");
//             tgtClkE.getElementsByTagName("i")[0].classList.add("bi-cloud-download");
//             tgtClkE.classList.remove("w3-border");
//             tgtClkE.classList.remove("w3-border-red");
//         }else{}
//     }

//     xmlhttp.send();
//     flgUpdHistory = true;
//     return;
// }

// ///////////////////////////////////////////////////////////////////
// function retrieve_Redmine_API_key_info(tgtE){
//     // => AJAX to get info
//     let xmlhttp = new XMLHttpRequest();
//     // =>
//     xmlhttp.open("GET","get_issues.php?childURL="+encodeURIComponent("users/current.json")+"&opMode=org"+"&apiKey="+tgtE.value,true);
//     // let eProgressTop = my_create("i",undefined,["bi","bi-hourglass-split","w3-spin","w3-xxlarge"],{"position":"fixed","top":"5px","left":"5px"},{"id":"my_progress"})
//     // document.getElementsByTagName("body")[0].appendChild(eProgressTop);

//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//            // =>
//             let objData = {};
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             // 
//             while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
//             while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//             // hide_left();//if any
//             show_left();
//             console.log("dbg:", objData)
//             dsp_notification("Finished retrieving user data.","Info")
//         }else{}
//     }

//     xmlhttp.send();
//     return;
// }

// ///////////////////////////////////////////////////////////////////
// function retrieve_sum_by_recent_updated(){
//     if(flgStop === true || flgSumNow === true){
//         dsp_notification("Stopping or SumNow state, cannot do this.","Error")
//         return;//stop interfereing
//     }

//    // => AJAX to get info
//     let xmlhttp = new XMLHttpRequest();
//     // =>
//     xmlhttp.open("GET","get_sum_recent_updated.php",true);
//     // let eProgressTop = my_create("i",undefined,["bi","bi-hourglass-split","w3-spin","w3-xxlarge"],{"position":"fixed","top":"5px","left":"5px"},{"id":"my_progress"})
//     // document.getElementsByTagName("body")[0].appendChild(eProgressTop);

//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//            // =>
//             let objData = {};
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             // 
//             while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
//             while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//             // hide_left();//if any
//             show_left();
//             // console.log("dbg:", objData)
//             let allData = {};
//             mainSide.appendChild(gen_init_sum_info());
//             if(document.getElementById("sum_status") !== undefined){
//                 document.getElementById("sum_status").innerText = "Total: " + objData["total_count"];
//                 document.getElementById("sum_status").innerText += " /Current-Offset: " + objData["offset"];
//                 document.getElementById("sum_status").innerText += " /Updated on: " + my_datetime_fr_epoch(objData["regTime"]);
//             }
//             update_sum_data(objData['outObj'],allData);
//             update_sum_info_to_tbody(mainSide.getElementsByTagName("tbody")[0],allData);
//             update_charts_after_sort(mainSide.getElementsByTagName("tbody")[0]);
//             dsp_notification("Finished loading and displaying data.","Info")
//             flgStop = false;//reset this flag to allow other action
//             hide_left();
//         }else{}
//     }

//     xmlhttp.send();
//     flgStop = true;//stop other action
//     return;
// }

// ///////////////////////////////////////////////////////////////////
// function retrieve_sum_by_get_all_issues_now(){
//     if(flgStop === true){
//         dsp_notification("Stopping state, cannot do this.","Error")
//         return;//stop interfereing
//     }

//     // => control the flag of stopping
//     let tgtClkE = null;
//     for(let tmpE of myMenu2.getElementsByTagName("div")){
//         if(tmpE.getAttribute("onclick") === "retrieve_sum_by_get_all_issues_now()"){
//             tgtClkE = tmpE;
//         }
//     }
//     if(tgtClkE !== null){
//         if(tgtClkE.getElementsByTagName("i")[0].classList.contains("bi-cloud-haze2")){
//             //at the state of standingby
//             tgtClkE.getElementsByTagName("i")[0].classList.remove("bi-cloud-haze2");
//             tgtClkE.getElementsByTagName("i")[0].classList.add("bi-cloud-haze2-fill");
//             tgtClkE.getElementsByTagName("i")[0].classList.add("w3-animate-fading");
//             tgtClkE.classList.add("w3-border");
//             tgtClkE.classList.add("w3-border-red");
//         }else{
//             // at the state of executing
//             tgtClkE.getElementsByTagName("i")[0].classList.remove("w3-animate-fading");
//             tgtClkE.getElementsByTagName("i")[0].classList.remove("bi-cloud-haze2-fill");
//             tgtClkE.classList.remove("w3-border");
//             tgtClkE.classList.remove("w3-border-red");
//             tgtClkE.getElementsByTagName("i")[0].classList.add("bi-cloud-haze2");
//             flgStop = true;
//             return;
//         }
//     }

//     // => AJAX to get info
//     let xmlhttp = new XMLHttpRequest();
//     // =>
//     xmlhttp.open("GET","get_issues.php?lastIndex=0",true);
//     // let eProgressTop = my_create("i",undefined,["bi","bi-hourglass-split","w3-spin","w3-xxlarge"],{"position":"fixed","top":"5px","left":"5px"},{"id":"my_progress"})
//     // document.getElementsByTagName("body")[0].appendChild(eProgressTop);

//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//            // =>
//             let objData = {};
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             // 
//             while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
//             while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//             // hide_left();//if any
//             show_left();
//             // console.log("dbg:", objData)
//             let allData = {};
//             if(objData.hasOwnProperty("total_count")){
//                 let aoRegFrTo = [];
//                 let interval = 100;
//                 if(objData["total_count"]) interval = Number(objData["total_count"]/100).toFixed(0);
//                 if(interval < 1) interval = objData["total_count"];
//                 console.log("dbg: inteval="+interval)
//                 for(i=-1;i<=objData['total_count'];i+=Number(interval)){
//                     let frItem = i+1;
//                     let toItem = i+Number(interval);
//                     if(objData['total_count'] - i < interval) toItem = objData['total_count'];
//                     aoRegFrTo.push([frItem,toItem]);
//                 } 
//                 console.log(aoRegFrTo)
//                 // => gen and display the results
//                 mainSide.appendChild(gen_init_sum_info());
//                 if(document.getElementById("sum_status") !== undefined){
//                     document.getElementById("sum_status").innerText = "Total: " + objData["total_count"];
//                     document.getElementById("sum_status").innerText += " /Current-Offset: " + objData["offset"];
//                     document.getElementById("sum_status").innerText += " /Updated on: " + my_datetime_fr_epoch(objData["regTime"]);
//                 }
//                 // console.log(aoRegFrTo)
//                 // => update the results
//                 // get_n_dsp_sum_issues_partly([[0,124],[125,249]],mainSide,allData);//testing
//                 get_n_dsp_sum_issues_partly(aoRegFrTo,mainSide,allData);

//                 // =>
//                 // update_sum_info_to_tbody(mainSide,allData);
//             }else{}
//             // => remove loading
//             // if(document.getElementById("my_progress") !== undefined) document.getElementById("my_progress").remove();
//             dsp_notification("Finished loading first data, proceeding to all data...","Info")
//         }else{}
//     }

//     xmlhttp.send();
//     flgSumNow = true;
//     return;
// }

// function get_n_dsp_sum_issues_partly(aoRegFrTo,tgtE,allData){
//     // partly (from->to offset) get and display sum of issues
//     // depend on array of reg. from-to, will gradually call the ajax to server
//     if(aoRegFrTo === undefined) return;
//     if(aoRegFrTo.length === 0) return;
//     let thisFrTo = aoRegFrTo.shift();
//     let frItem = thisFrTo[0];
//     let toItem = thisFrTo[1];

//     // => AJAX to get info
//     let xmlhttp = new XMLHttpRequest();
//     // =>
//     xmlhttp.open("GET","get_issues.php?offset="+frItem+"&lastIndex=" + toItem,true);
//     // => percentage information
//     let eProgressTop = my_create("div",undefined,[],{"position":"fixed","top":"5px","left":"162px"},{"id":"my_progress"});
//     eProgressTop.appendChild(my_create("i",undefined,["bi","bi-hourglass-split","w3-spin"],{"position":"absolute","top":"28px","left":"30px"},{}))
//     eProgressTop.appendChild(my_create("span",(100 - aoRegFrTo.length)  +"%",[],{"position":"absolute","top":"-5px","left":"-2px"}))
//     document.getElementsByTagName("body")[0].appendChild(eProgressTop);

//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             // =>
//             let objData = {};
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             // 
//             // while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
//             // while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//             // hide_left();//if any
//             // console.log(objData)
//             // => remove loading
//             if(document.getElementById("my_progress") !== null) document.getElementById("my_progress").remove();
//             // => update the display element
//             if(objData.hasOwnProperty("outObj") && Object.keys(objData["outObj"]).length > 0){
//                 update_sum_data(objData['outObj'], allData);
//                 if(tgtE !== undefined){ // don't do this, the table will be messed up
//                     // delete all and create newly
//                     let aoTr = tgtE.getElementsByTagName("tbody")[0].getElementsByTagName("tr");
//                     while(aoTr.length > 1) {aoTr[aoTr.length-1].remove();}
//                     // update_sum_info_to_tbody(tgtE.getElementsByTagName("tbody")[0],objData["outObj"]);
//                     if(document.getElementById("sum_status") !== undefined){
//                         document.getElementById("sum_status").innerText = "Total: " + objData["total_count"];
//                         document.getElementById("sum_status").innerText += " /Current-Offset: " + objData["offset"];
//                         document.getElementById("sum_status").innerText += " /Updated on: " + my_datetime_fr_epoch(objData["regTime"]);
//                     }
//                     update_sum_info_to_tbody(tgtE.getElementsByTagName("tbody")[0],allData);
//                 }
//             }
//             // => recursively untill all are loaded
//             if(aoRegFrTo.length > 0){
//                 dsp_notification("Partly finished loading data (+1%), proceeding next ...","Info")
//                 if(flgStop === true){
//                     dsp_notification("Stop-signal encountered, stop the progress!!!","Warn")
//                     update_charts_after_sort(tgtE.getElementsByTagName("tbody")[0]);
//                     flgStop = false;//reset the flag of stopping
//                     flgSumNow = false;
//                     hide_left();
//                 }else{
//                     get_n_dsp_sum_issues_partly(aoRegFrTo,tgtE,allData);
//                 }
//             }else{
//                 // the job is finishing
//                 if(document.getElementById("sum_status") !== undefined){
//                     document.getElementById("sum_status").innerText = "Total: " + objData["total_count"];
//                     document.getElementById("sum_status").innerText += " /Current-Offset: " + objData["offset"];
//                     document.getElementById("sum_status").innerText += " /Updated on: " + my_datetime_fr_epoch(objData["regTime"]);
//                 }
//                 update_sum_info_to_tbody(tgtE.getElementsByTagName("tbody")[0],allData);
//                 dsp_notification("Finished loading all data, enjoy!","Info")
//                 // making charts
//                 update_charts_after_sort(tgtE.getElementsByTagName("tbody")[0]);
//                 // // updating the icon of the button
//                 let tgtClkE = null;
//                 for(let tmpE of myMenu2.getElementsByTagName("div")){
//                     if(tmpE.getAttribute("onclick") === "retrieve_sum_by_get_all_issues_now()"){
//                         tgtClkE = tmpE;
//                     }
//                 }
//                 if(tgtClkE !== null){
//                     tgtClkE.getElementsByTagName("i")[0].classList.remove("w3-animate-fading");
//                     tgtClkE.getElementsByTagName("i")[0].classList.remove("bi-cloud-haze2-fill");
//                     tgtClkE.classList.remove("w3-border");
//                     tgtClkE.classList.remove("w3-border-red");
//                     tgtClkE.getElementsByTagName("i")[0].classList.add("bi-cloud-haze2");
//                 }else{}
//                 // reset the flag of stopping if needed ???
//                 flgStop = false;
//                 flgSumNow = false;
//                 hide_left();
//             }
//         }else{}
//     }
//     xmlhttp.send();
//     return;
// }

// function gen_init_sum_info(){
//     let eTop = my_create("div",undefined,["w3-block"]);// top
//     eTop.appendChild(my_create("div","status:....",["w3-block","w3-tiny"],{},{"id":"sum_status"}));// status

//     let eTbl = my_create("table",undefined,["w3-table-all","w3-centered","w3-hoverable","w3-bordered","w3-animate-top"],{"width":"100%"});
//     let eTbd = my_create("tbody"); eTbl.appendChild(eTbd);
//     eTbd.appendChild(my_add_row(["Asset Group","<i class='bi bi-pie-chart'></i>","#emptyMAC","#MAC<31","#MAC=31-90","#MAC>90","#Total"],"th",{"padding":0,"border":"1px gray solid","font-family":"monospace"}));
//     // making it the sticky thing
//     eTbd.getElementsByTagName("tr")[0].style.position = "sticky";
//     eTbd.getElementsByTagName("tr")[0].style.top = "0";
//     // eTbd.getElementsByTagName("tr")[0].style.boxShadow = "0 2px 2px -1px rgba(0, 0, 0, 0.4)";
//     // making it sorting headers
//     for(let tmpE of eTbd.getElementsByTagName("th")){
//         if(tmpE.innerHTML.indexOf("bi-pie-chart") > -1) continue;//
//         tmpE.innerHTML = tmpE.innerHTML+"<i class=\"bi bi-shuffle\"></i>";
//         tmpE.setAttribute("onclick","sortTblByHeader(this);update_charts_after_sort(this.parentNode.parentNode)");
//     }
//     // =>
//     eTop.appendChild(eTbl);
//     return eTop;
// }

// function update_sum_data(thisData,allData){
//     for(let prjN in thisData){
//         if(!allData.hasOwnProperty(prjN)){
//             allData[prjN] = [];
//             allData[prjN]["total"] = thisData[prjN]["total"];
//             allData[prjN]["emptyMAC"] = thisData[prjN]["emptyMAC"];
//             allData[prjN]["MAC<31"] = thisData[prjN]["MAC<31"];
//             allData[prjN]["MAC=31-90"] = thisData[prjN]["MAC=31-90"];
//             allData[prjN]["MAC>90"] = thisData[prjN]["MAC>90"];
//             allData[prjN]["id"] = thisData[prjN]["id"];
//         }else{
//             allData[prjN]["total"] += thisData[prjN]["total"];
//             allData[prjN]["emptyMAC"] += thisData[prjN]["emptyMAC"];
//             allData[prjN]["MAC<31"] += thisData[prjN]["MAC<31"];
//             allData[prjN]["MAC=31-90"] += thisData[prjN]["MAC=31-90"];
//             allData[prjN]["MAC>90"] += thisData[prjN]["MAC>90"];
//         }
//     }
// }


// function rtn_number_with_link(num,link){
//     if(num > 0){
//         return "<a target='_blank_' href='"+link+"'>"+num+"</a>";
//     }else{
//         return num;
//     }
// }

// function update_sum_info_to_tbody(tgtE,data){
//     let aoTr = tgtE.getElementsByTagName("tr");
//     if(aoTr.length === 1){
//         console.log("update table newly")
//         // => sorting data
//         let tmpD = Object.keys(data);
//         tmpD.sort(function(a,b){
//             let x = data[a]["MAC>90"];
//             let y = data[b]["MAC>90"];
//             return y-x;
//         });
//         // append newly
//         for(let prjN of tmpD){
//             // data
//             let prjID = data[prjN]["id"];
//             // let href4 = hrefIssue + "/projects/"+prjID+"/issues?" + encodeURIComponent("utf8=✓&set_filter=1&f[]=cf_12&op[cf_12]=>=&v[cf_12][]=")+my_return_date(-90);
//             let href3 = hrefIssue + "/projects/"+prjID+"/issues?" + my_URLencode(
//                 [
//                     {"utf8":"✓"},
//                     {"set_filter":"1"},
//                     {"f[]":"cf_12"},
//                     {"op[cf_12]":"><"},
//                     {"v[cf_12][]": my_return_date(-91)},
//                     {"v[cf_12][]": my_return_date(-30)},
//                 ]
//             );
//             let href4 = hrefIssue + "/projects/"+prjID+"/issues?" + my_URLencode(
//                 [
//                     {"utf8":"✓"},
//                     {"set_filter":"1"},
//                     {"f[]":"cf_12"},
//                     {"op[cf_12]":"<t-"},
//                     {"v[cf_12][]": 90},
//                 ]
//             );

//             // console.log(prjN,prjID,href3)
//             tgtE.appendChild(my_add_row([
//                 prjN,
//                 "<div></div>",
//                 data[prjN]["emptyMAC"],
//                 data[prjN]["MAC<31"],
//                 rtn_number_with_link(data[prjN]["MAC=31-90"],href3),
//                 rtn_number_with_link(data[prjN]["MAC>90"],href4),
//                 data[prjN]["total"]
//             ],"td",{"padding":0,"border":"1px gray solid"}
//             ))
//             // console.log("add new", prjN)
//             //formating
//             update_format_sum_row(tgtE.getElementsByTagName("tr")[tgtE.getElementsByTagName("tr").length - 1]);
//         }
//     }else{
//         console.log("update table additionally -> disabled")
//     }
// }

// function update_format_sum_row(tgtTR){
//     let aoD = tgtTR.getElementsByTagName("th")
//     if(aoD.length === 0) aoD = tgtTR.getElementsByTagName("td")
//     // => background color
//     aoD[aoD.length-2].style.backgroundColor = "RGB(253, 83, 126)";//MAC>90 red like
//     aoD[aoD.length-3].style.backgroundColor = "RGB(19, 182, 236)";//MAC=31-90 blue like
//     aoD[aoD.length-4].style.backgroundColor = "RGB(153, 255, 187)";//MAC<31 green like
//     aoD[aoD.length-5].style.backgroundColor = "RGB(253, 211, 83)";//empty MAC yellow like
//     // => add a chart
//     aoD[1].style.width = "80px";
//     aoD[1].classList.add("my-cnt-canvas-top");
//     // aoD[1].getElementsByTagName("div")[0].appendChild(gen_pie_chart(undefined,aoD[2].innerText,aoD[3].innerText,aoD[4].innerText,aoD[5].innerText));
// }

// function update_charts_after_sort(tgtTbl){
//     console.log("dbg:: update charts after sort")
//     let i = 0;
//     for(let eTd of tgtTbl.getElementsByClassName("my-cnt-canvas-top")){
//         i+=1;
//         let eTop = eTd.getElementsByTagName("div")[0];
//         setTimeout(function(){gen_pie_chart(eTop,
//             eTd.nextElementSibling.innerText,
//             eTd.nextElementSibling.nextElementSibling.innerText,
//             eTd.nextElementSibling.nextElementSibling.nextElementSibling.innerText,
//             eTd.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.innerText,
//             );
//         },50*i);
//     }

//     return 0;
// }

// function gen_pie_chart(tgtE,num_emptyMAC,num_MAC31,num_MAC90,num_MACover){
//     let aPieTop = null;
//     let eCanvas = null;
//     if(tgtE === undefined){
//         aPieTop = my_create("div",undefined,["w3-white","w3-card-4","w3-border"],{"width":"100%","float":"left"});
//         eCanvas = my_create("canvas");
//         eCanvas.height = "80px";
//         eCanvas.width = "80px";
//         aPieTop.appendChild(eCanvas);
//     }else{
//         aPieTop = tgtE;
//         if(aPieTop.getElementsByTagName("canvas").length > 0){
//             eCanvas = aPieTop.getElementsByTagName("canvas")[0];
//         }else{
//             eCanvas = my_create("canvas");
//             eCanvas.height = "80px";
//             eCanvas.width = "80px";
//             aPieTop.appendChild(eCanvas);
//         }
//     }
//     const chartData = {
//         labels: [
//             'empty',
//             '<31',
//             '31-90',
//             '>90'
//           ],
//           datasets: [{
//             label: '',
//             data: [num_emptyMAC,num_MAC31,num_MAC90,num_MACover],
//             backgroundColor: [
//                 "RGB(253, 211, 83)",
//                 "RGB(153, 255, 187)",
//                 "RGB(19, 182, 236)",
//                 "RGB(253, 83, 126)",
//             ],
//             hoverOffset: 4
//           }]
//     };
//     let chartConfig = {
//         type:'pie',
//         data: chartData,
//         options: {
//             plugins : {
//                 legend : {
//                     display : false,
//                 },
//                 tooltip: {
//                     enabled : true
//                 }
//             }
//         }
//     };
//     let theChart = new Chart(eCanvas,chartConfig);
//     // =>
//     return aPieTop;
// }

function sortTblByHeader(thTgt){
    let trHead = thTgt.parentNode.getElementsByTagName("th");
    let tgtTbl = thTgt.parentNode.parentNode;
    let indexTH = -1;

    let iDir = thTgt.getElementsByTagName("i")[0];// <i> element for direction
    if(iDir === undefined || iDir === null) return 0;

    let current_sort_direction = "";
    if(iDir.classList.contains("bi-shuffle")){
        iDir.classList.remove("bi-shuffle");
        iDir.classList.add("bi-sort-down-alt");
        current_sort_direction = "down";
    }else if(iDir.classList.contains("bi-sort-down")){
        iDir.classList.remove("bi-sort-down");
        iDir.classList.add("bi-sort-down-alt");
        current_sort_direction = "down";
    }else if(iDir.classList.contains("bi-sort-down-alt")){
        iDir.classList.remove("bi-sort-down-alt");
        iDir.classList.add("bi-sort-down");
        current_sort_direction = "up";
    }else{
        return 0;
    }

    // get index of header => get the target content to be compared
    for(let i=0;i<trHead.length;i++){
        if(thTgt === trHead[i]){
            indexTH = i;
        }
    }
    // console.log(tgtTbl.childNodes.length)
    // => arrange table again by indicating array
    let aoTr = tgtTbl.getElementsByTagName("tr");
    let orgAoTr = new Array();
    for(i=0;i<aoTr.length;i++){
        orgAoTr.push(aoTr[i].cloneNode(true));
    }
    //notice: canvas "content" is not part of the DOM and can't be copied by DOM method. However, it's quite easy to call clonedCanvas.getContext('2d').drawImage(originalCanvas, 0,0) which will draw the original canvas on the cloned one.

    // => control the array
    let tmpA = new Array();
    for(let i=1;i<aoTr.length;i++){
        let tmpO = new Object();
        tmpO["index"] = i;
        tmpO["org"] = aoTr[i].getElementsByTagName("td")[indexTH].innerText;
        tmpO["strMod"] = tmpO["org"].replace(/\s+/,"");
        let tmpO2 = /^[-\.\d]+/.exec(aoTr[i].getElementsByTagName("td")[indexTH].innerText);
        if(tmpO2 !== null){
            if(tmpO2[0] === "-") {
                tmpO["tgtNum"] = null;
            }else{
                tmpO["tgtNum"] = tmpO2[0];
            }
        }else{
            tmpO["tgtNum"] = null;
        }
        // tmpO["epoch"] = new Date(tmpO["org"]).getTime();
        // tmpO["epoch"] = new Date(tmpO["org"]).valueOf();
        // if(!/^[-\.\d+]$/.test(tmpO["tgtNum"])){ //number takes precedence
        //     if(/^\d+$/.test(tmpO["epoch"])) {tmpO["tgtNum"] = tmpO["epoch"]}
        // }
        // =>
        tmpA.push(tmpO);
    }
    // => sorting: sort the indicating array
    if(current_sort_direction === "up"){
        tmpA.sort(function(a,b){
            if(b.tgtNum === null && a.tgtNum === null){
                x = a.strMod.toUpperCase();
                y = b.strMod.toUpperCase();
                if(x < y) { return 1; }
                if(x > y) { return -1; }
                return 0;
            }else{
                return b.tgtNum - a.tgtNum;
            }
        });
    }else{
        tmpA.sort(function(a,b){
            if(b.tgtNum === null && a.tgtNum === null){
                x = a.strMod.toUpperCase();
                y = b.strMod.toUpperCase();
                if(x < y) { return -1; }
                if(x > y) { return 1; }
                return 0;
            }else{
                return a.tgtNum - b.tgtNum
            }
        });
    }
    // console.log("index",indexTH, tmpA)

    // remove orginal table
    // while(tgtTbl.childNodes.length > 2){ tgtTbl.lastChild.remove();   }
    while(tgtTbl.getElementsByTagName("tr").length > 1){ tgtTbl.getElementsByTagName("tr")[tgtTbl.getElementsByTagName("tr").length-1].remove()}
    // replace by copied elements
    for(let i=1;i<orgAoTr.length;i++){
        let tgtI = tmpA[i-1]["index"];
        // console.log(i, tgtI, tmpA[i-1]["tgtNum"][0], tmpA[i-1]["srvN"], aoTr[tgtI])
        tgtTbl.appendChild(orgAoTr[tgtI]);
    }
    // update the status show-off
    // update the icons of other header to be shuffer
    for(let tmpe of aoTr[0].getElementsByTagName("th")){
        if(tmpe === thTgt) continue;
        if(tmpe.getElementsByTagName("i").length > 0){
            let iDir = tmpe.getElementsByTagName("i")[0];
            if(iDir.classList.contains("bi-shuffle")){
                // keep it
            }else if(iDir.classList.contains("bi-sort-down")){
                iDir.classList.remove("bi-sort-down");
                iDir.classList.add("bi-shuffle");
            }else if(iDir.classList.contains("bi-sort-down-alt")){
                iDir.classList.remove("bi-sort-down-alt");
                iDir.classList.add("bi-shuffle");
            }else{
            }
        }
    }
}

///////
function is_Renesas_email(inS){
    if(inS === undefined) return false;
    if(inS === null) return false;
    if(inS === "") return false;
    if(inS.search(/^\w+\.\w+\.\w+@renesas.com$/) > -1) return true;
    dsp_notification("Not a Renesas email.","Error");
    return false;
}


////// TODO

FILE:: .//src_main/my.old.js
let thisUser = "Somebody@nowhere.com";
let aoMonth = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
let flgStop = false;//stop signal caused by clicking Updating again
let flgUpdHistory = false;//on the go downloading and saving data
let flgSumNow = false;//on the go updating the table
let hrefIssue = "http://172.29.143.22:8080/";

function myTest(){
    dsp_notification("Just a testing notification");
    // mainSide.appendChild(gen_item_w_person());
    // retrieve_user_action();
    // check cookies
    // let ca = document.cookie.split(';');
    // for(let i = 0; i < ca.length; i++) {
    //     let c = ca[i];
    //     while (c.charAt(0) == ' ') {
    //         c = c.substring(1);
    //     }
    //     console.log(i, c)
    // }

    // dsp_user_info_from_email("man.duong.ym@renesas.com");

    // init_user();
    // calc_score_of_user(retrieve_user_action())

    //
    // retrieve_sum_by_recent_updated();
   my_create_running_line();
}

function my_onload(){
    //init_user();
    retrieve_sum_by_recent_updated();
}

function show_left(){
    leftSide.classList.add("w3-show");
    mainSide.style.marginLeft = "250px";
}
function hide_left(){
    leftSide.classList.remove("w3-show");
    mainSide.classList.add("my-show-right-slowly")
    setTimeout(function(){
        mainSide.style.marginLeft = "0";
        mainSide.classList.remove("my-show-right-slowly")
    },1800)
}
function toggle_left(){
    if(leftSide.classList.contains("w3-show")){
        hide_left();
    }else{
        show_left();
    }
}
function toggle_nextEle(clickedEle){
    if(clickedEle === undefined) return 0;
    let tgtEle = clickedEle.nextElementSibling;
    if(tgtEle === undefined) return 0;
    if(tgtEle === null) return 0;
    if(tgtEle.classList.contains("w3-show")){
        tgtEle.classList.remove("w3-show");
    }else{
        tgtEle.classList.add("w3-show");
    }
}

function my_create(tag,innerHTML,aoClass,hoStyle,hoAttr){
    let aE = undefined;
    if(tag === undefined){
        aE = document.createElement("div");
    }else{
        aE = document.createElement(tag);
    }
    if(innerHTML !== undefined){
        aE.innerHTML = innerHTML;
    }else{}
    if(aoClass !== undefined){
        for(let tmpClass of aoClass){
            aE.classList.add(tmpClass);
        }
    }
    if(hoStyle !== undefined){
        for(let tmpS in hoStyle){
            aE.style[tmpS] = hoStyle[tmpS];
        }
    }
    if(hoAttr !== undefined){
        for(let tmpAtt in hoAttr){
            aE.setAttribute(tmpAtt,hoAttr[tmpAtt]);
        }
    }
    return aE;
}

function my_add_row(aoData,type,oComStyle){
    if(aoData === undefined) return null;
    if(typeof(aoData) !== "object") return null;
    if(aoData.length === 0) return null;

    let tr = document.createElement("tr");
    if(type === undefined) type = "td";
    for(let tmpV of aoData){
        let td = document.createElement(type);
        td.innerHTML = tmpV;
        if(oComStyle !== undefined){
            for(let keyw in oComStyle){
                td.style[keyw] = oComStyle[keyw];
            }
        }
        tr.appendChild(td)
    }
    return tr;
}

function my_URLencode(oD){
    let oStr;
    for(let comp of oD){
        for(let key in comp){
            oStr+="&"+encodeURIComponent(key)+"="+encodeURIComponent(comp[key]);
        }
    }
    return oStr;
}

function dsp_notification(msg,type){
    if(type === undefined) type = "Warning";
    let bgcolor = "yellow";
    if(type === "Error"){
        bgcolor = "darksalmon";
    }else if(type === "Warning"){
        bgcolor = "yellow";
    }else if(type === "Info"){
        bgcolor = "palegreen";
    }else{}
    let eTop = my_create("div",msg,["my-notification"],{"backgroundColor":bgcolor},{})
    document.getElementsByTagName("body")[0].appendChild(eTop);
    setTimeout(function(){eTop.remove()},2200);
    my_create_running_line();//a little animation
}

function my_datetime(objDate){
    // out string for date-time as my format
    // return objDate.toLocaleString("en-US",{"dateStyle":"medium","timeStyle":"short","hour12":false});
    return objDate.toLocaleString("en-US",{
        hourCycle: 'h23',
        year: "numeric",
        month: "short",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit"
    });
}

function my_datetime_fr_epoch(epochStr){
    if(epochStr === undefined) return "-";
    if(!String(epochStr).match(/^\d+$/)) return epochStr;
    let objDate = new Date()
    objDate.setTime(Number(epochStr)*1000);
    // out string for date-time as my format
    // return objDate.toLocaleString("en-US",{"dateStyle":"medium","timeStyle":"short","hour12":false});
    return objDate.toLocaleString("en-US",{
        hourCycle: 'h23',
        year: "numeric",
        month: "short",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit"
    });
}

function my_return_date(diffDays){
    let d = new Date();
    d.setDate(d.getDate() + diffDays);
    let aoM = ["01","02","03","04","05","06","07","08","09","10","11","12"];
    return d.getFullYear() + "-" + aoM[d.getMonth()] + "-" + d.getDate();
}

function my_create_running_line(){
    // create a wrapper of the line
    let eTop = my_create("div",undefined,["w3-container"]);
    let eLine = my_create("div",undefined,["line"]);
    let eDot1 = my_create("div",undefined,["dot","dot1"]);
    let eDot2 = my_create("div",undefined,["dot","dot2"]);
    let eDot3 = my_create("div",undefined,["dot","dot3"]);
    let eDot4 = my_create("div",undefined,["dot","dot4"]);
    let eDot5 = my_create("div",undefined,["dot","dot5"]);

    eLine.appendChild(eDot1);
    eLine.appendChild(eDot2);
    eLine.appendChild(eDot3);
    eLine.appendChild(eDot4);
    eLine.appendChild(eDot5);
    eTop.appendChild(eLine);

    // self destruction after sometime
    setTimeout(function(){
        eTop.remove()
    },4500);

    // append to the body
    document.getElementsByTagName("body")[0].appendChild(eTop)
    return;
}

///////////////////////////////////////////////////////////////////
function update_history_data(){
    if(flgStop === true){
        dsp_notification("Stopping state, cannot do this.","Error")
        return;//stop interfereing
    }

    // => control the flag of stopping
    let tgtClkE = null;
    for(let tmpE of myMenu2.getElementsByTagName("div")){
        if(tmpE.getAttribute("onclick") === "update_history_data()"){
            tgtClkE = tmpE;
        }
    }
    if(tgtClkE !== null){
        if(tgtClkE.getElementsByTagName("i")[0].classList.contains("bi-cloud-download") && flgUpdHistory === false){
            //at the state of standingby
            tgtClkE.getElementsByTagName("i")[0].classList.remove("bi-cloud-download");
            tgtClkE.getElementsByTagName("i")[0].classList.add("bi-cloud-download-fill");
            tgtClkE.getElementsByTagName("i")[0].classList.add("w3-animate-fading");
            tgtClkE.classList.add("w3-border");
            tgtClkE.classList.add("w3-border-red");
        }else{
            // at the state of executing => cannot do this again, wait until the button returning its standby state
            dsp_notification("Updating is on the go, cannot do this again.","Warn")
            return;
        }
    }

    // => AJAX to send request updating data
    let xmlhttp = new XMLHttpRequest();
    // =>
    xmlhttp.open("GET","get_issues.php?opMode=upHistory",true);
    // let eProgressTop = my_create("i",undefined,["bi","bi-hourglass-split","w3-spin","w3-xxlarge"],{"position":"fixed","top":"5px","left":"5px"},{"id":"my_progress"})
    // document.getElementsByTagName("body")[0].appendChild(eProgressTop);

    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200){
           // =>
            let objData = {};
            try {objData = JSON.parse(this.responseText);}
            catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
            // 
            // while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
            // while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
            // hide_left();//if any
            // show_left();
            if(objData["outObj"]["result"] === "done"){
                dsp_notification("Finished updating data.","Info")
            }else{
                dsp_notification("Problem Status: " + objData["outObj"]["result"],"Warn")
            }
            flgUpdHistory = false;
            // reset status of the button
            tgtClkE.getElementsByTagName("i")[0].classList.remove("bi-cloud-download-fill");
            tgtClkE.getElementsByTagName("i")[0].classList.remove("w3-animate-fading");
            tgtClkE.getElementsByTagName("i")[0].classList.add("bi-cloud-download");
            tgtClkE.classList.remove("w3-border");
            tgtClkE.classList.remove("w3-border-red");
        }else{}
    }

    xmlhttp.send();
    flgUpdHistory = true;
    return;
}

///////////////////////////////////////////////////////////////////
function retrieve_Redmine_API_key_info(tgtE){
    // => AJAX to get info
    let xmlhttp = new XMLHttpRequest();
    // =>
    xmlhttp.open("GET","get_issues.php?childURL="+encodeURIComponent("users/current.json")+"&opMode=org"+"&apiKey="+tgtE.value,true);
    // let eProgressTop = my_create("i",undefined,["bi","bi-hourglass-split","w3-spin","w3-xxlarge"],{"position":"fixed","top":"5px","left":"5px"},{"id":"my_progress"})
    // document.getElementsByTagName("body")[0].appendChild(eProgressTop);

    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200){
           // =>
            let objData = {};
            try {objData = JSON.parse(this.responseText);}
            catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
            // 
            while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
            while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
            // hide_left();//if any
            show_left();
            console.log("dbg:", objData)
            dsp_notification("Finished retrieving user data.","Info")
        }else{}
    }

    xmlhttp.send();
    return;
}

///////////////////////////////////////////////////////////////////
function retrieve_sum_by_recent_updated(){
    if(flgStop === true || flgSumNow === true){
        dsp_notification("Stopping or SumNow state, cannot do this.","Error")
        return;//stop interfereing
    }

   // => AJAX to get info
    let xmlhttp = new XMLHttpRequest();
    // =>
    xmlhttp.open("GET","get_sum_recent_updated.php",true);
    // let eProgressTop = my_create("i",undefined,["bi","bi-hourglass-split","w3-spin","w3-xxlarge"],{"position":"fixed","top":"5px","left":"5px"},{"id":"my_progress"})
    // document.getElementsByTagName("body")[0].appendChild(eProgressTop);

    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200){
           // =>
            let objData = {};
            try {objData = JSON.parse(this.responseText);}
            catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
            // 
            while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
            while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
            // hide_left();//if any
            show_left();
            // console.log("dbg:", objData)
            let allData = {};
            mainSide.appendChild(gen_init_sum_info());
            if(document.getElementById("sum_status") !== undefined){
                document.getElementById("sum_status").innerText = "Total: " + objData["total_count"];
                document.getElementById("sum_status").innerText += " /Current-Offset: " + objData["offset"];
                document.getElementById("sum_status").innerText += " /Updated on: " + my_datetime_fr_epoch(objData["regTime"]);
            }
            update_sum_data(objData['outObj'],allData);
            update_sum_info_to_tbody(mainSide.getElementsByTagName("tbody")[0],allData);
            update_charts_after_sort(mainSide.getElementsByTagName("tbody")[0]);
            dsp_notification("Finished loading and displaying data.","Info")
            flgStop = false;//reset this flag to allow other action
            hide_left();
        }else{}
    }

    xmlhttp.send();
    flgStop = true;//stop other action
    return;
}

///////////////////////////////////////////////////////////////////
function retrieve_sum_by_get_all_issues_now(){
    if(flgStop === true){
        dsp_notification("Stopping state, cannot do this.","Error")
        return;//stop interfereing
    }

    // => control the flag of stopping
    let tgtClkE = null;
    for(let tmpE of myMenu2.getElementsByTagName("div")){
        if(tmpE.getAttribute("onclick") === "retrieve_sum_by_get_all_issues_now()"){
            tgtClkE = tmpE;
        }
    }
    if(tgtClkE !== null){
        if(tgtClkE.getElementsByTagName("i")[0].classList.contains("bi-cloud-haze2")){
            //at the state of standingby
            tgtClkE.getElementsByTagName("i")[0].classList.remove("bi-cloud-haze2");
            tgtClkE.getElementsByTagName("i")[0].classList.add("bi-cloud-haze2-fill");
            tgtClkE.getElementsByTagName("i")[0].classList.add("w3-animate-fading");
            tgtClkE.classList.add("w3-border");
            tgtClkE.classList.add("w3-border-red");
        }else{
            // at the state of executing
            tgtClkE.getElementsByTagName("i")[0].classList.remove("w3-animate-fading");
            tgtClkE.getElementsByTagName("i")[0].classList.remove("bi-cloud-haze2-fill");
            tgtClkE.classList.remove("w3-border");
            tgtClkE.classList.remove("w3-border-red");
            tgtClkE.getElementsByTagName("i")[0].classList.add("bi-cloud-haze2");
            flgStop = true;
            return;
        }
    }

    // => AJAX to get info
    let xmlhttp = new XMLHttpRequest();
    // =>
    xmlhttp.open("GET","get_issues.php?lastIndex=0",true);
    // let eProgressTop = my_create("i",undefined,["bi","bi-hourglass-split","w3-spin","w3-xxlarge"],{"position":"fixed","top":"5px","left":"5px"},{"id":"my_progress"})
    // document.getElementsByTagName("body")[0].appendChild(eProgressTop);

    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200){
           // =>
            let objData = {};
            try {objData = JSON.parse(this.responseText);}
            catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
            // 
            while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
            while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
            // hide_left();//if any
            show_left();
            // console.log("dbg:", objData)
            let allData = {};
            if(objData.hasOwnProperty("total_count")){
                let aoRegFrTo = [];
                let interval = 100;
                if(objData["total_count"]) interval = Number(objData["total_count"]/100).toFixed(0);
                if(interval < 1) interval = objData["total_count"];
                console.log("dbg: inteval="+interval)
                for(i=-1;i<=objData['total_count'];i+=Number(interval)){
                    let frItem = i+1;
                    let toItem = i+Number(interval);
                    if(objData['total_count'] - i < interval) toItem = objData['total_count'];
                    aoRegFrTo.push([frItem,toItem]);
                } 
                console.log(aoRegFrTo)
                // => gen and display the results
                mainSide.appendChild(gen_init_sum_info());
                if(document.getElementById("sum_status") !== undefined){
                    document.getElementById("sum_status").innerText = "Total: " + objData["total_count"];
                    document.getElementById("sum_status").innerText += " /Current-Offset: " + objData["offset"];
                    document.getElementById("sum_status").innerText += " /Updated on: " + my_datetime_fr_epoch(objData["regTime"]);
                }
                // console.log(aoRegFrTo)
                // => update the results
                // get_n_dsp_sum_issues_partly([[0,124],[125,249]],mainSide,allData);//testing
                get_n_dsp_sum_issues_partly(aoRegFrTo,mainSide,allData);

                // =>
                // update_sum_info_to_tbody(mainSide,allData);
            }else{}
            // => remove loading
            // if(document.getElementById("my_progress") !== undefined) document.getElementById("my_progress").remove();
            dsp_notification("Finished loading first data, proceeding to all data...","Info")
        }else{}
    }

    xmlhttp.send();
    flgSumNow = true;
    return;
}

function get_n_dsp_sum_issues_partly(aoRegFrTo,tgtE,allData){
    // partly (from->to offset) get and display sum of issues
    // depend on array of reg. from-to, will gradually call the ajax to server
    if(aoRegFrTo === undefined) return;
    if(aoRegFrTo.length === 0) return;
    let thisFrTo = aoRegFrTo.shift();
    let frItem = thisFrTo[0];
    let toItem = thisFrTo[1];

    // => AJAX to get info
    let xmlhttp = new XMLHttpRequest();
    // =>
    xmlhttp.open("GET","get_issues.php?offset="+frItem+"&lastIndex=" + toItem,true);
    // => percentage information
    let eProgressTop = my_create("div",undefined,[],{"position":"fixed","top":"5px","left":"162px"},{"id":"my_progress"});
    eProgressTop.appendChild(my_create("i",undefined,["bi","bi-hourglass-split","w3-spin"],{"position":"absolute","top":"28px","left":"30px"},{}))
    eProgressTop.appendChild(my_create("span",(100 - aoRegFrTo.length)  +"%",[],{"position":"absolute","top":"-5px","left":"-2px"}))
    document.getElementsByTagName("body")[0].appendChild(eProgressTop);

    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200){
            // =>
            let objData = {};
            try {objData = JSON.parse(this.responseText);}
            catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
            // 
            // while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
            // while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
            // hide_left();//if any
            // console.log(objData)
            // => remove loading
            if(document.getElementById("my_progress") !== null) document.getElementById("my_progress").remove();
            // => update the display element
            if(objData.hasOwnProperty("outObj") && Object.keys(objData["outObj"]).length > 0){
                update_sum_data(objData['outObj'], allData);
                if(tgtE !== undefined){ // don't do this, the table will be messed up
                    // delete all and create newly
                    let aoTr = tgtE.getElementsByTagName("tbody")[0].getElementsByTagName("tr");
                    while(aoTr.length > 1) {aoTr[aoTr.length-1].remove();}
                    // update_sum_info_to_tbody(tgtE.getElementsByTagName("tbody")[0],objData["outObj"]);
                    if(document.getElementById("sum_status") !== undefined){
                        document.getElementById("sum_status").innerText = "Total: " + objData["total_count"];
                        document.getElementById("sum_status").innerText += " /Current-Offset: " + objData["offset"];
                        document.getElementById("sum_status").innerText += " /Updated on: " + my_datetime_fr_epoch(objData["regTime"]);
                    }
                    update_sum_info_to_tbody(tgtE.getElementsByTagName("tbody")[0],allData);
                }
            }
            // => recursively untill all are loaded
            if(aoRegFrTo.length > 0){
                dsp_notification("Partly finished loading data (+1%), proceeding next ...","Info")
                if(flgStop === true){
                    dsp_notification("Stop-signal encountered, stop the progress!!!","Warn")
                    update_charts_after_sort(tgtE.getElementsByTagName("tbody")[0]);
                    flgStop = false;//reset the flag of stopping
                    flgSumNow = false;
                    hide_left();
                }else{
                    get_n_dsp_sum_issues_partly(aoRegFrTo,tgtE,allData);
                }
            }else{
                // the job is finishing
                if(document.getElementById("sum_status") !== undefined){
                    document.getElementById("sum_status").innerText = "Total: " + objData["total_count"];
                    document.getElementById("sum_status").innerText += " /Current-Offset: " + objData["offset"];
                    document.getElementById("sum_status").innerText += " /Updated on: " + my_datetime_fr_epoch(objData["regTime"]);
                }
                update_sum_info_to_tbody(tgtE.getElementsByTagName("tbody")[0],allData);
                dsp_notification("Finished loading all data, enjoy!","Info")
                // making charts
                update_charts_after_sort(tgtE.getElementsByTagName("tbody")[0]);
                // // updating the icon of the button
                let tgtClkE = null;
                for(let tmpE of myMenu2.getElementsByTagName("div")){
                    if(tmpE.getAttribute("onclick") === "retrieve_sum_by_get_all_issues_now()"){
                        tgtClkE = tmpE;
                    }
                }
                if(tgtClkE !== null){
                    tgtClkE.getElementsByTagName("i")[0].classList.remove("w3-animate-fading");
                    tgtClkE.getElementsByTagName("i")[0].classList.remove("bi-cloud-haze2-fill");
                    tgtClkE.classList.remove("w3-border");
                    tgtClkE.classList.remove("w3-border-red");
                    tgtClkE.getElementsByTagName("i")[0].classList.add("bi-cloud-haze2");
                }else{}
                // reset the flag of stopping if needed ???
                flgStop = false;
                flgSumNow = false;
                hide_left();
            }
        }else{}
    }
    xmlhttp.send();
    return;
}

function gen_init_sum_info(){
    let eTop = my_create("div",undefined,["w3-block"]);// top
    eTop.appendChild(my_create("div","status:....",["w3-block","w3-tiny"],{},{"id":"sum_status"}));// status

    let eTbl = my_create("table",undefined,["w3-table-all","w3-centered","w3-hoverable","w3-bordered","w3-animate-top"],{"width":"100%"});
    let eTbd = my_create("tbody"); eTbl.appendChild(eTbd);
    eTbd.appendChild(my_add_row(["Asset Group","<i class='bi bi-pie-chart'></i>","#emptyMAC","#MAC<31","#MAC=31-90","#MAC>90","#Total"],"th",{"padding":0,"border":"1px gray solid","font-family":"monospace"}));
    // making it the sticky thing
    eTbd.getElementsByTagName("tr")[0].style.position = "sticky";
    eTbd.getElementsByTagName("tr")[0].style.top = "0";
    // eTbd.getElementsByTagName("tr")[0].style.boxShadow = "0 2px 2px -1px rgba(0, 0, 0, 0.4)";
    // making it sorting headers
    for(let tmpE of eTbd.getElementsByTagName("th")){
        if(tmpE.innerHTML.indexOf("bi-pie-chart") > -1) continue;//
        tmpE.innerHTML = tmpE.innerHTML+"<i class=\"bi bi-shuffle\"></i>";
        tmpE.setAttribute("onclick","sortTblByHeader(this);update_charts_after_sort(this.parentNode.parentNode)");
    }
    // =>
    eTop.appendChild(eTbl);
    return eTop;
}

function update_sum_data(thisData,allData){
    for(let prjN in thisData){
        if(!allData.hasOwnProperty(prjN)){
            allData[prjN] = [];
            allData[prjN]["total"] = thisData[prjN]["total"];
            allData[prjN]["emptyMAC"] = thisData[prjN]["emptyMAC"];
            allData[prjN]["MAC<31"] = thisData[prjN]["MAC<31"];
            allData[prjN]["MAC=31-90"] = thisData[prjN]["MAC=31-90"];
            allData[prjN]["MAC>90"] = thisData[prjN]["MAC>90"];
            allData[prjN]["id"] = thisData[prjN]["id"];
        }else{
            allData[prjN]["total"] += thisData[prjN]["total"];
            allData[prjN]["emptyMAC"] += thisData[prjN]["emptyMAC"];
            allData[prjN]["MAC<31"] += thisData[prjN]["MAC<31"];
            allData[prjN]["MAC=31-90"] += thisData[prjN]["MAC=31-90"];
            allData[prjN]["MAC>90"] += thisData[prjN]["MAC>90"];
        }
    }
}


function rtn_number_with_link(num,link){
    if(num > 0){
        return "<a target='_blank_' href='"+link+"'>"+num+"</a>";
    }else{
        return num;
    }
}

function update_sum_info_to_tbody(tgtE,data){
    let aoTr = tgtE.getElementsByTagName("tr");
    if(aoTr.length === 1){
        console.log("update table newly")
        // => sorting data
        let tmpD = Object.keys(data);
        tmpD.sort(function(a,b){
            let x = data[a]["MAC>90"];
            let y = data[b]["MAC>90"];
            return y-x;
        });
        // append newly
        for(let prjN of tmpD){
            // data
            let prjID = data[prjN]["id"];
            // let href4 = hrefIssue + "/projects/"+prjID+"/issues?" + encodeURIComponent("utf8=✓&set_filter=1&f[]=cf_12&op[cf_12]=>=&v[cf_12][]=")+my_return_date(-90);
            let href3 = hrefIssue + "/projects/"+prjID+"/issues?" + my_URLencode(
                [
                    {"utf8":"✓"},
                    {"set_filter":"1"},
                    {"f[]":"cf_12"},
                    {"op[cf_12]":"><"},
                    {"v[cf_12][]": my_return_date(-91)},
                    {"v[cf_12][]": my_return_date(-30)},
                ]
            );
            let href4 = hrefIssue + "/projects/"+prjID+"/issues?" + my_URLencode(
                [
                    {"utf8":"✓"},
                    {"set_filter":"1"},
                    {"f[]":"cf_12"},
                    {"op[cf_12]":"<t-"},
                    {"v[cf_12][]": 90},
                ]
            );

            // console.log(prjN,prjID,href3)
            tgtE.appendChild(my_add_row([
                prjN,
                "<div></div>",
                data[prjN]["emptyMAC"],
                data[prjN]["MAC<31"],
                rtn_number_with_link(data[prjN]["MAC=31-90"],href3),
                rtn_number_with_link(data[prjN]["MAC>90"],href4),
                data[prjN]["total"]
            ],"td",{"padding":0,"border":"1px gray solid"}
            ))
            // console.log("add new", prjN)
            //formating
            update_format_sum_row(tgtE.getElementsByTagName("tr")[tgtE.getElementsByTagName("tr").length - 1]);
        }
    }else{
        console.log("update table additionally -> disabled")
        // // check and update the target prjN
        // for(let prjN in data){
        //     let tgtTr = undefined;
        //     for(let tmpTr of aoTr){
        //         if(tmpTr.getElementsByTagName("td").length > 0){
        //             if(tmpTr.getElementsByTagName("td")[0].innerText === prjN){
        //                 tgtTr = tmpTr;
        //             }
        //         }
        //     }
        //     if(tgtTr === undefined){
        //         // add new
        //         tgtE.appendChild(my_add_row([
        //             prjN,
        //             data[prjN]["emptyMAC"],
        //             data[prjN]["MAC<31"],
        //             data[prjN]["MAC=31-90"],
        //             data[prjN]["MAC>90"],
        //             data[prjN]["total"]
        //         ],"td",{"padding":0,"border":"1px gray solid"}
        //         ))
        //         // console.log("add new", prjN)
        //     }else{
        //         // updating
        //         tgtTr.getElementsByTagName("td")[1].innerText = Number(tgtTr.getElementsByTagName("td")[1].innerText) + Number(data[prjN]["emptyMAC"]);
        //         tgtTr.getElementsByTagName("td")[2].innerText = Number(tgtTr.getElementsByTagName("td")[2].innerText) + Number(data[prjN]["MAC<31"]);
        //         tgtTr.getElementsByTagName("td")[3].innerText = Number(tgtTr.getElementsByTagName("td")[3].innerText) + Number(data[prjN]["MAC=31-90"]);
        //         tgtTr.getElementsByTagName("td")[4].innerText = Number(tgtTr.getElementsByTagName("td")[4].innerText) + Number(data[prjN]["MAC>90"]);
        //         tgtTr.getElementsByTagName("td")[5].innerText = Number(tgtTr.getElementsByTagName("td")[5].innerText) + Number(data[prjN]["total"]);
        //         // console.log("updating", prjN,tgtTr)
        //     }
        // }
    }
}

function update_format_sum_row(tgtTR){
    let aoD = tgtTR.getElementsByTagName("th")
    if(aoD.length === 0) aoD = tgtTR.getElementsByTagName("td")
    // => background color
    aoD[aoD.length-2].style.backgroundColor = "RGB(253, 83, 126)";//MAC>90 red like
    aoD[aoD.length-3].style.backgroundColor = "RGB(19, 182, 236)";//MAC=31-90 blue like
    aoD[aoD.length-4].style.backgroundColor = "RGB(153, 255, 187)";//MAC<31 green like
    aoD[aoD.length-5].style.backgroundColor = "RGB(253, 211, 83)";//empty MAC yellow like
    // => add a chart
    aoD[1].style.width = "80px";
    aoD[1].classList.add("my-cnt-canvas-top");
    // aoD[1].getElementsByTagName("div")[0].appendChild(gen_pie_chart(undefined,aoD[2].innerText,aoD[3].innerText,aoD[4].innerText,aoD[5].innerText));
}

function update_charts_after_sort(tgtTbl){
    console.log("dbg:: update charts after sort")
    let i = 0;
    for(let eTd of tgtTbl.getElementsByClassName("my-cnt-canvas-top")){
        i+=1;
        let eTop = eTd.getElementsByTagName("div")[0];
        setTimeout(function(){gen_pie_chart(eTop,
            eTd.nextElementSibling.innerText,
            eTd.nextElementSibling.nextElementSibling.innerText,
            eTd.nextElementSibling.nextElementSibling.nextElementSibling.innerText,
            eTd.nextElementSibling.nextElementSibling.nextElementSibling.nextElementSibling.innerText,
            );
        },50*i);
    }

    return 0;
}

function gen_pie_chart(tgtE,num_emptyMAC,num_MAC31,num_MAC90,num_MACover){
    let aPieTop = null;
    let eCanvas = null;
    if(tgtE === undefined){
        aPieTop = my_create("div",undefined,["w3-white","w3-card-4","w3-border"],{"width":"100%","float":"left"});
        eCanvas = my_create("canvas");
        eCanvas.height = "80px";
        eCanvas.width = "80px";
        aPieTop.appendChild(eCanvas);
    }else{
        aPieTop = tgtE;
        if(aPieTop.getElementsByTagName("canvas").length > 0){
            eCanvas = aPieTop.getElementsByTagName("canvas")[0];
        }else{
            eCanvas = my_create("canvas");
            eCanvas.height = "80px";
            eCanvas.width = "80px";
            aPieTop.appendChild(eCanvas);
        }
    }
    const chartData = {
        labels: [
            'empty',
            '<31',
            '31-90',
            '>90'
          ],
          datasets: [{
            label: '',
            data: [num_emptyMAC,num_MAC31,num_MAC90,num_MACover],
            backgroundColor: [
                "RGB(253, 211, 83)",
                "RGB(153, 255, 187)",
                "RGB(19, 182, 236)",
                "RGB(253, 83, 126)",
            ],
            hoverOffset: 4
          }]
    };
    let chartConfig = {
        type:'pie',
        data: chartData,
        options: {
            plugins : {
                legend : {
                    display : false,
                },
                tooltip: {
                    enabled : true
                }
            }
        }
    };
    let theChart = new Chart(eCanvas,chartConfig);
    // =>
    return aPieTop;
}

// ///////////////////////////////////////////////////////////////////
// function dsp_login(){
//     remove_effect();
//     hide_left();
//     while(leftSide.childNodes.length > 0){leftSide.lastChild.remove()}
//     leftSide.appendChild(gen_login_form());
//     show_left();
// }

// function dsp_add_item(){
//     remove_effect();
//     hide_left();
//     while(leftSide.childNodes.length > 0){leftSide.lastChild.remove()}
//     leftSide.appendChild(gen_add_item_form());
//     show_left();
// }

// function dsp_add_person(){
//     remove_effect();
//     hide_left();
//     while(leftSide.childNodes.length > 0){leftSide.lastChild.remove()}
//     leftSide.appendChild(gen_add_person_form());
//     show_left();
// }

// function dsp_user_action_on_item(clickedEle){
//     remove_effect();
//     hide_left();
//     while(leftSide.childNodes.length > 0){leftSide.lastChild.remove()}
//     leftSide.appendChild(gen_user_action_on_item(clickedEle));
//     show_left();
// }

// function gen_add_item_form(){
//     // => prepare time-tring for today 00:00
//     let nowStr = new Date();
//     // nowStr.setMinutes(nowStr.getMinutes() - nowStr.getTimezoneOffset());
//     nowStr.setMinutes(nowStr.getTimezoneOffset()+1);
//     // console.log(nowStr.toJSON().slice(0,16))
//     // =>
//     let eTop = my_create();
//     eTop.appendChild(my_create("p","Adding a new item to list of elearning/ survey.",[],{},{}))
//     eTop.appendChild(my_create("label","Subject:",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"item_subject","onchange":"update_item_info_in_adding_form(this.value,this.parentNode)"}))
//     eTop.appendChild(my_create("label","Start date",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"item_start","type":"datetime-local","value":nowStr.toJSON().slice(0,16)}))
//     eTop.appendChild(my_create("label","End date",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"item_end","type":"datetime-local"}))
//     eTop.appendChild(my_create("label","Link",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"item_link"}))
//     eTop.appendChild(my_create("label","More info",["w3-large"],{},{}))
//     eTop.appendChild(my_create("textarea",undefined,[],{"width":"100%","resize":"none"},{"name":"item_moreInfo","rows":9}))
//     //
//     eTop.appendChild(my_create("div","Import",["w3-button","w3-round","w3-indigo"],{"width":"100%"},{"onclick":"import_data_from_form(this.parentNode)"}));
//     return eTop;
// }

// function gen_user_action_on_item(clickedEle){
//     // console.log(clickedEle.parentNode.parentNode.getElementsByTagName("a")[0].innerText)
//     // let subject = clickedEle.parentNode.parentNode.getElementsByTagName("a")[0].innerText;
//     let reflink = clickedEle.parentNode.parentNode.getElementsByTagName("a")[0].href;
//     let subject = clickedEle.parentNode.parentNode.getElementsByTagName("a")[0].nextElementSibling.innerText;
//     let eTop = my_create();
//     eTop.appendChild(my_create("p","User input finished date for an item.",[],{},{}))
//     eTop.appendChild(my_create("label","Subject:",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"item_subject","readonly":true,"value":subject}))
//     eTop.appendChild(my_create("label","CheckLink (careful)!",["w3-block","w3-button"],{},{"onclick":"toggle_nextEle(this)"}))
//     eTop.appendChild(my_create("label",reflink,["w3-small","w3-block"],{"wordWrap":"break-word","display":"none"},{"name":"item_link","readonly":true}))
//     eTop.appendChild(my_create("label","More info:",["w3-large"],{},{}))
//     eTop.appendChild(my_create("textarea",undefined,[],{"width":"100%","resize":"none"},{"name":"item_moreInfo","rows":9,"readonly":true}))
//     eTop.appendChild(my_create("label","Your Finished date",["w3-large","w3-topbar"],{},{}))
//     eTop.appendChild(my_create("div","now?",["w3-button","w3-black","w3-round","w3-right"],{},{"onclick":"get_nowstr_to_next_input(this)"}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"item_finish","type":"datetime-local"}))
//     eTop.appendChild(my_create("div","Import",["w3-button","w3-round","w3-indigo"],{"width":"100%"},{"onclick":"import_user_action_on_item_form(this.parentNode)"}));
//     // =>
//     update_item_info_in_adding_form(subject,eTop)
//     return eTop;
// }
// function get_nowstr_to_next_input(thisEle){
//     let nowStr = new Date();
//     nowStr.setMinutes(nowStr.getMinutes() - nowStr.getTimezoneOffset());
//     // console.log(nowStr.toJSON().slice(0,16))
//     thisEle.nextElementSibling.setAttribute("value",nowStr.toJSON().slice(0,16))
//     return 0;
// }

// function import_login_or_OTP(tgtForm){
//     if(tgtForm === undefined) return;
//     // => retrieve the values from form inputs, text-area, select ...
//     let objData = {};
//     let btnAction = "";
//     let btnOpacity = false;//control the enabling property
//     for(let tmpE of tgtForm.getElementsByTagName("div")){
//         if(tmpE.classList.contains("w3-button")){
//             btnAction = tmpE.innerText;
//             if(tmpE.classList.contains("w3-opacity")){
//                 btnOpacity = true;
//             }
//         }
//     }
//     if(btnOpacity === true){
//         dsp_notification("Email or OTP code not valid.","Error")
//         return 0;//if the button is disable, then don't do anything
//     }
//     for(let tmpE of tgtForm.childNodes){
//         if(tmpE.getAttribute("name") !== null){
//             objData[tmpE.getAttribute("name")] = tmpE["value"]
//         }
//     }
//     // console.log(objData)

//     // => sending over internet
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             // =>
//             let objData = [];
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             // =>
//             // console.log(objData)
//             if(!objData.hasOwnProperty("OTP")){
//                 dsp_notification("Login FAILED","Error");
//             }else{
//                 if(objData["OTP"] === "OK"){
//                     dsp_user_info_from_email(objData["login_email"]);
//                     // => remove leftSide and update the content
//                     setCookie("userEmail",objData["login_email"],180);
//                     setCookie("userEmailOTP","OK",180);
//                     while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//                     hide_left();
//                     // =>
//                     dsp_all_items("warn");
//                 }else if(objData["OTP"] === "Sent"){
//                     dsp_notification("OTP sent.")
//                 }else if(objData["OTP"] === "NG"){
//                     dsp_notification("OTP not matched.")
//                     setCookie("userEmail","Somebody@nowhere.com",-1);
//                     setCookie("userEmailOTP","NG",-1);
//                 }else{
//                     dsp_notification("Unknown OTP status: "+objData["OTP"])
//                     setCookie("userEmail","Somebody@nowhere.com",-1);
//                     setCookie("userEmailOTP","NG",-1);
//                 }
//             }
//         }else{}
//     }
//     let oStr = "";
//     for(let tmpv in objData){
//         oStr += "&"+tmpv+"="+objData[tmpv];
//     }
//     oStr = oStr.replace(/^&/,"");
//     xmlhttp.open("POST","login.php",true);
//     xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
//     xmlhttp.send(oStr);
//     return;
// }

// function import_data_from_form(tgtForm){
//     if(tgtForm === undefined) return;
//     // => retrieve the values from form inputs, text-area, select ...
//     let objData = {};
//     for(let tmpE of tgtForm.childNodes){
//         if(tmpE.getAttribute("name") !== null){
//             objData[tmpE.getAttribute("name")] = tmpE["value"]
//         }
//     }
//     if(Object.keys(objData).length > 0) {
//         objData["_type_"] = "item";
//         objData["_user_"] = thisUser;
//     }

//     // => sending over internet
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             if(this.responseText === "OK"){
//                 dsp_notification("Successfully registered the item: "+this.responseText,"Info")
//                 // => remove leftSide and update the content
//                 while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//                 hide_left();
//                 // =>
//                 dsp_all_items("warn");
//             }else{
//                 dsp_notification("Fail registering the item: "+this.responseText,"Error")
//             }
//             // clear/reset current info
//             // for(let tmpE of tgtForm.childNodes){
//             //     if(tmpE.getAttribute("name") !== null){
//             //         tmpE.value = null;
//             //     }
//             // }
//         }else{}
//     }
//     let oStr = "";
//     for(let tmpv in objData){
//         oStr += "&"+tmpv+"="+objData[tmpv];
//     }
//     oStr = oStr.replace(/^&/,"");
//     xmlhttp.open("POST","register_item.php",true);
//     xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
//     xmlhttp.send(oStr);
//     return;
// }

// function import_user_action_on_item_form(tgtForm){
//     if(tgtForm === undefined) return;
//     // => retrieve the values from form inputs, text-area, select ...
//     let objData = {};
//     for(let tmpE of tgtForm.childNodes){
//         if(tmpE.getAttribute("name") !== null){
//             objData[tmpE.getAttribute("name")] = tmpE["value"]
//         }
//     }
//     if(Object.keys(objData).length > 0) {
//         objData["email"] = thisUser;
//     }

//     // => sending over internet
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             if(this.responseText === "OK"){
//                 dsp_notification("Successfully registered the item: "+this.responseText,"Info")
//                 // => remove leftSide and update the content
//                 while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//                 hide_left();
//                 // =>
//                 dsp_all_items("warn");
//             }else{
//                 dsp_notification("Fail registering the item: "+this.responseText,"Error")
//             }
//         }else{}
//     }
//     let oStr = "";
//     for(let tmpv in objData){
//         oStr += "&"+tmpv+"="+encodeURIComponent(objData[tmpv]);
//     }
//     oStr = oStr.replace(/^&/,"");
//     // console.log(oStr)
//     xmlhttp.open("POST","register_user_action_on_item.php",true);
//     xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
//     xmlhttp.send(oStr);
//     return;
// }

// function gen_add_person_form(){
//     // form for adding or modifying a person account
//     let eTop = my_create();
//     eTop.appendChild(my_create("p","Adding a person to list of cooperation.",[],{},{}))
//     eTop.appendChild(my_create("label","Email:",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"person_email","type":"email","onchange":"update_user_info_in_adding_form(this.value,this.parentNode)"}))
//     eTop.appendChild(my_create("label","Last-Middle-First Name",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"person_name"}))
//     eTop.appendChild(my_create("label","Section",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"person_section"}))
//     eTop.appendChild(my_create("label","Group",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"person_group"}))
//     eTop.appendChild(my_create("label","More Info",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"person_moreInfo"}))
//     //
//     eTop.appendChild(my_create("div","Import",["w3-button","w3-round","w3-indigo"],{"width":"100%"},{"onclick":"import_user_info(this.parentNode)"}))     
//     eTop.appendChild(my_create("div","Delete",["w3-button","w3-round","w3-indigo"],{"width":"100%"},{"onclick":"delete_user_info(this.parentNode)"}))     
//     eTop.appendChild(my_create("div","Recover",["w3-button","w3-round","w3-indigo"],{"width":"100%"},{"onclick":"recover_user_info(this.parentNode)"}))
//     // => find and update if there existed the user
//     update_user_info_in_adding_form(thisUser,eTop);
//     return eTop;
// }

// function import_user_info(tgtForm){
//     if(tgtForm === undefined) return;
//     // => retrieve the values from form inputs, text-area, select ...
//     let objData = {};
//     for(let tmpE of tgtForm.childNodes){
//         if(tmpE.getAttribute("name") !== null){
//             objData[tmpE.getAttribute("name")] = tmpE["value"]
//         }
//     }
//     if(Object.keys(objData).length > 0) {
//         objData["_user_"] = thisUser;
//     }

//     // => sending over internet
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             if(this.responseText === "OK"){
//                 dsp_notification("Successfully registered the user: "+this.responseText,"Info")
//                 // // => remove leftSide and update the content
//                 // while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//                 // hide_left();
//                 // // =>
//                 // dsp_all_items("warn");
//                 if(objData["person_email"] === thisUser){
//                     dsp_user_info_from_email(thisUser);
//                 }
//                 update_user_info_in_adding_form(objData["person_email"],leftSide.getElementsByTagName("div")[0]);
//             }else{
//                 dsp_notification("Fail registering the user: "+this.responseText,"Error")
//             }
//         }else{}
//     }
//     let oStr = "";
//     for(let tmpv in objData){
//         oStr += "&"+tmpv+"="+objData[tmpv];
//     }
//     oStr = oStr.replace(/^&/,"");
//     // console.log(oStr)
//     xmlhttp.open("POST","register_user_info.php",true);
//     xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
//     xmlhttp.send(oStr);
//     return;
// }

// function delete_user_info(tgtForm){
//     if(tgtForm === undefined) return;
//     // => retrieve the values from form inputs, text-area, select ...
//     let objData = {};
//     for(let tmpE of tgtForm.childNodes){
//         if(tmpE.getAttribute("name") !== null){
//             objData[tmpE.getAttribute("name")] = tmpE["value"]
//         }
//     }
//     if(Object.keys(objData).length > 0) {
//         if(objData["person_email"] === thisUser){
//             dsp_notification("You cannot delete yourself.","Error");
//             return 0;
//         }
//         objData["_user_"] = thisUser;
//         objData["_delete_"] = "yes";
//     }

//     // => sending over internet
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             if(this.responseText === "OK"){
//                 dsp_notification("Successfully deleted the user: "+this.responseText,"Info")
//                 // => remove leftSide and update the content
//                 while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//                 hide_left();
//                 // // =>
//                 // dsp_all_items("warn");
//             }else{
//                 dsp_notification("Fail deleting the user: "+this.responseText,"Error")
//             }
//         }else{}
//     }
//     let oStr = "";
//     for(let tmpv in objData){
//         oStr += "&"+tmpv+"="+objData[tmpv];
//     }
//     oStr = oStr.replace(/^&/,"");
//     // console.log(oStr)
//     xmlhttp.open("POST","register_user_info.php",true);
//     xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
//     xmlhttp.send(oStr);
//     return;
// }

// function recover_user_info(tgtForm){
//     if(tgtForm === undefined) return;
//     // => retrieve the values from form inputs, text-area, select ...
//     let objData = {};
//     for(let tmpE of tgtForm.childNodes){
//         if(tmpE.getAttribute("name") !== null){
//             objData[tmpE.getAttribute("name")] = tmpE["value"]
//         }
//     }
//     if(Object.keys(objData).length > 0) {
//         if(objData["person_email"] === thisUser){
//             dsp_notification("You cannot recover yourself.","Error");
//             return 0;
//         }
//         objData["_user_"] = thisUser;
//         objData["_recover_"] = "yes";
//     }

//     // => sending over internet
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             if(this.responseText === "OK"){
//                 dsp_notification("Successfully recovered the user: "+this.responseText,"Info")
//                 // // => remove leftSide and update the content
//                 // while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//                 // hide_left();
//                 // // =>
//                 // dsp_all_items("warn");
//                 update_user_info_in_adding_form(objData["person_email"],leftSide.getElementsByTagName("div")[0]);
//             }else{
//                 dsp_notification("Fail recovering the user: "+this.responseText,"Error")
//             }
//         }else{}
//     }
//     let oStr = "";
//     for(let tmpv in objData){
//         oStr += "&"+tmpv+"="+objData[tmpv];
//     }
//     oStr = oStr.replace(/^&/,"");
//     // console.log(oStr)
//     xmlhttp.open("POST","register_user_info.php",true);
//     xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
//     xmlhttp.send(oStr);
//     return;
// }

// function gen_login_form(){
//     // form for login/changing login information
//     let eTop = my_create();
//     eTop.appendChild(my_create("p","Changing Login information.",[],{},{}))
//     eTop.appendChild(my_create("label","Email:",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"login_email","type":"email","onkeyup":"check_email_input(this)"}))
//     eTop.appendChild(my_create("label","OTPcode",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"login_OTP","onkeyup":"check_OTP_input(this)"}))
//     //
//     eTop.appendChild(my_create("div","getOTP",["w3-button","w3-round","w3-indigo","w3-opacity"],{"width":"100%"},{"onclick":"import_login_or_OTP(this.parentNode)"}))
//     return eTop;
// }

// function gen_list_NY_members_for_item(objData){
//     // console.log("gen_list_NY_members_for_item")
//     let eTop = my_create("div",undefined,["w3-responsive"],{"height":"100vh"});
//     eTop.appendChild(my_create("p","List of Not-Finished-Yet persons.",[],{},{}))
//     eTop.appendChild(my_create("label","Subject",["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"readonly":true,"value":objData["subject"]}))
//     eTop.appendChild(my_create("label",objData["type"],["w3-large"],{},{}))
//     eTop.appendChild(my_create("input",undefined,["w3-input"],{},{"readonly":true,"value":objData["name"]}))
//     eTop.appendChild(my_create("label","List of NY:",["w3-large"],{},{}))
//     for(let email in objData["data"]){
//         let eDiv = my_create("div",undefined,["w3-container","w3-border-top"],{"paddingLeft":0});
//         let eName = my_create("div",objData["data"][email]["person_name"],[],{},{});
//         let eMoreInfo = my_create("div",objData["data"][email]["person_moreInfo"],["w3-small","w3-text-pink"],{"width":"100%","textAlign":"left"},{});
//         let eEmail = my_create("div",email,["w3-small","w3-text-purple"],{"width":"100%","textAlign":"right"},{});
//         eDiv.appendChild(eName);
//         eDiv.appendChild(eMoreInfo);
//         eDiv.appendChild(eEmail);
//         eTop.appendChild(eDiv);
//     }
//     //
//     return eTop;
// }

// function gen_sum_items_tbl(itemRef,sumSect,sumGroup){
//     // console.log("dbg:: gen_sum_items_tbl");
//     // => working on data
//     let iSubject = "an item subject";
//     let iRefLink = "an item subject";
//     let iStaDate = new Date(Date.now() - 2*24*3600*1000);
//     let iEndDate = new Date(Date.now() + 24*3600*1000);
//     let iFinDate = null;
//     let iFinLastModBy = "-";
//     let iFinLastModOn = "-";
//     let iLastUpdBy = undefined;
//     let iLastUpdOn = undefined;
//     // for some testing contextes
//     if(itemRef !== undefined){
//         iSubject = itemRef["item_subject"]; //"an item subject";
//         iRefLink = itemRef["item_link"]; //"an item subject";
//         iStaDate = new Date(itemRef["item_start"]); //new Date(Date.now() - 2*24*3600*1000);
//         iEndDate = new Date(itemRef["item_end"]); //new Date(Date.now() + 24*3600*1000);
//         iLastUpdBy = "-";if(itemRef.hasOwnProperty("_user_")) iLastUpdBy = itemRef["_user_"];
//         iLastUpdOn = "-";if(itemRef.hasOwnProperty("_modTime_")) iLastUpdOn = itemRef["_modTime_"];
//     }
//     let total_days =Number((iEndDate-iStaDate)/(1000*3600*24)).toFixed(1);
//     let now_diff_days = Number((Date.now()-iStaDate)/(1000*3600*24)).toFixed(1);
//     let now_diff_percent = Number(100*(Date.now()-iStaDate)/(iEndDate-iStaDate)).toFixed(1);
//     let now_diff_days_dsp = now_diff_days; if(now_diff_days - total_days > 0) now_diff_days_dsp = "Over " + Number(now_diff_days - total_days).toFixed(1);
//     let now_diff_percent_dsp = now_diff_percent;if(now_diff_percent - 100 > 0) now_diff_percent_dsp = "-";

//     let oBySects = {};
//     for(let sect in itemRef["sumBySect"]){
//         if(!oBySects.hasOwnProperty(sect)) oBySects[sect] = {};
//         oBySects[sect]["done"] = itemRef["sumBySect"][sect];
//         oBySects[sect]["all"] = sumSect[sect];
//     }
//     for(let sect in sumSect){
//         if(!oBySects.hasOwnProperty(sect)){
//             oBySects[sect] = {};
//             oBySects[sect]["done"] = 0;
//             oBySects[sect]["all"] = sumSect[sect];
//         }
//     }

//     let oByGroups = {};
//     for(let group in itemRef["sumByGroup"]){
//         if(!oByGroups.hasOwnProperty(group)) oByGroups[group] = {};
//         oByGroups[group]["done"] = itemRef["sumByGroup"][group];
//         oByGroups[group]["all"] = sumGroup[group];
//     }
//     for(let group in sumGroup){
//         if(!oByGroups.hasOwnProperty(group)){
//             oByGroups[group] = {};
//             oByGroups[group]["done"] = 0;
//             oByGroups[group]["all"] = sumGroup[group];
//         }
//     }
//     // console.log(oBySects,oByGroups);
 
//     // => working on generating element
//     // let eTop = my_create(undefined,undefined,["my-an-item","w3-padding-small","w3-animate-zoom","w3-col","l4","m6","s12"]);
//     let eTop = my_create(undefined,undefined,["my-an-item","w3-padding-small","w3-animate-zoom","my-div-for-sum-table"]);
//     let eTop2 = my_create(undefined,undefined,["w3-light-gray","w3-card-4","w3-round","w3-center"])
//     eTop.appendChild(eTop2)
//     // eTop2.appendChild(my_create("a",iSubject,["w3-block","w3-bottombar","w3-large","my-center"],{"width":"100%","minHeight":"72px"},{"href":iRefLink,"target":"_blank_"}))
//     let eTitle = my_create("div",undefined,["w3-bottombar"],{"position":"relative"});
//     eTitle.appendChild(my_create("a","ref: clickme.",["w3-block"],{"padding":0,"paddingTop":"4px","paddingLeft":"8px","text-align":"left"},{"href":iRefLink,"target":"_blank_"}))
//     eTitle.appendChild(my_create("div",iSubject,["w3-large","my-center"],{"width":"100%","minHeight":"72px"},{}))
//     eTitle.appendChild(my_create("div","<img src=''/>",["my-title-icon"],{},{}))
//     eTitle.appendChild(my_create("div","Start:" + my_datetime(iStaDate),["w3-small","my-title-start"],{"font-family":"monospace"}))
//     eTitle.appendChild(my_create("div","End  :" + my_datetime(iEndDate),["w3-small","my-title-end"],{"font-family":"monospace"}))
//     if(now_diff_days - total_days <= 0){
//         eTitle.getElementsByTagName("img")[0].src = ongoIcon;
//         eTitle.style.backgroundColor = "#191970";//MidnightBlue
//         eTitle.style.color = "white";
//     }else{
//         eTitle.getElementsByTagName("img")[0].src = pastIcon;
//     }

//     let eChild1 = my_create("div");//
//     eChild1.appendChild(my_create("div","ModBy:" + iLastUpdBy,["w3-small"],{"font-family":"monospace"}))
//     eChild1.appendChild(my_create("div","ModOn:" + my_datetime_fr_epoch(iLastUpdOn),["w3-small"],{"font-family":"monospace"}))
//     // eChild1.appendChild(my_create("div","Start:" + my_datetime(iStaDate),["w3-small"],{"font-family":"monospace"}))
//     // eChild1.appendChild(my_create("div","End  :" + my_datetime(iEndDate),["w3-small"],{"font-family":"monospace"}))
//     let eChild2 = my_create("div",undefined,["w3-container"]);//
//     eChild2.appendChild(my_create("div",total_days+" day(s)"        ,["my-center"],{"width":"33.33%","minHeight":"44px","float":"left"}))
//     eChild2.appendChild(my_create("div",now_diff_days_dsp+" day(s)" ,["my-center"],{"width":"33.33%","minHeight":"44px","float":"left"}))
//     eChild2.appendChild(my_create("div",now_diff_percent_dsp + " %" ,["my-center"],{"width":"33.33%","minHeight":"44px","float":"left"}))

//     let tblSect = my_create("table",undefined,["w3-table-all","w3-centered","w3-hoverable","w3-bordered","w3-animate-zoom"],{"width":"100%","fontSize":"8px"});
//     let tblSectTbd = my_create("tbody"); tblSect.appendChild(tblSectTbd);
//     let aoHeadSect = Object.keys(oBySects).sort();
//     let aoDoneSect = [];
//     let aoAllSect = [];
//     let aoPercSect = [];
//     for(let sect of aoHeadSect){
//         aoDoneSect.push(oBySects[sect]["done"]);
//         aoAllSect.push(oBySects[sect]["all"]);
//         let dspPerc = Number(100*Number(oBySects[sect]["done"])/Number(oBySects[sect]["all"])).toFixed(0);
//         // if(dspPerc === "100.0") dspPerc = "100";
//         if(dspPerc - 100 < 0) dspPerc = "0"+dspPerc;
//         aoPercSect.push(dspPerc);
//     }
//     tblSectTbd.appendChild(my_add_row(aoHeadSect,"th",{"padding":0,"border":"1px gray solid","font-family":"monospace"}));
//     tblSectTbd.appendChild(my_add_row(aoDoneSect,"td",{"padding":0,"border":"1px gray solid"}));
//     tblSectTbd.appendChild(my_add_row(aoAllSect,"td",{"padding":0,"border":"1px gray solid"}));
//     tblSectTbd.appendChild(my_add_row(aoPercSect,"td",{"padding":0,"border":"1px gray solid"}));

//     let tblGroup = my_create("table",undefined,["w3-table-all","w3-centered","w3-bordered","w3-hoverable","w3-animate-zoom","w3-margin-top"],{"width":"100%","fontSize":"8px"});
//     let tblGroupTbd = my_create("tbody");tblGroup.appendChild(tblGroupTbd);
//     let aoHeadGroup = Object.keys(oByGroups).sort();
//     let aoHeadGroupDsp = [];
//     let aoDoneGroup = [];
//     let aoAllGroup = [];
//     let aoPercGroup = [];
//     for(let group of aoHeadGroup){
//         let grpDsp = group.replace("Backend Design","BED");
//         grpDsp = grpDsp.replace("MiddleEnd Design","MED");
//         aoHeadGroupDsp.push(grpDsp);
//         aoDoneGroup.push(oByGroups[group]["done"]);
//         aoAllGroup.push(oByGroups[group]["all"]);
//         let dspPerc = Number(100*Number(oByGroups[group]["done"])/Number(oByGroups[group]["all"])).toFixed(0);
//         // if(dspPerc === "100.0") dspPerc = "100";
//         if(dspPerc - 100 < 0) dspPerc = "0"+dspPerc;
//         aoPercGroup.push(dspPerc);
//     }
//     tblGroupTbd.appendChild(my_add_row(aoHeadGroupDsp,"th",{"padding":0,"border":"1px gray solid","font-family":"monospace"}));
//     tblGroupTbd.appendChild(my_add_row(aoDoneGroup,"td",{"padding":0,"border":"1px gray solid"}));
//     tblGroupTbd.appendChild(my_add_row(aoAllGroup,"td",{"padding":0,"border":"1px gray solid"}));
//     tblGroupTbd.appendChild(my_add_row(aoPercGroup,"td",{"padding":0,"border":"1px gray solid"}));

//     // => modify the color for the 100% finished (to easily ignore)
//     let lastRow = tblSectTbd.getElementsByTagName("tr")[tblSectTbd.getElementsByTagName("tr").length-1];
//     for(let i=0;i<tblSectTbd.getElementsByTagName("th").length;i++){
//         if(Number(lastRow.getElementsByTagName("td")[i].innerText).toFixed(1) - 100 === 0){
//             for(let tmpR of tblSectTbd.getElementsByTagName("tr")){
//                 if(tmpR.getElementsByTagName("th").length !== 0){
//                     tmpR.getElementsByTagName("th")[i].style.color = "#ccc";
//                 }else{
//                     tmpR.getElementsByTagName("td")[i].style.color = "#ccc";
//                 }
//             }
//         }else{
//             // add behavior for clicking on header
//             let th = tblSectTbd.getElementsByTagName("th")[i];
//             th.classList.add("w3-hover-indigo")
//             th.setAttribute("onclick","dsp_ny_members_for_item('"+iSubject+"','section','"+aoHeadSect[i]+"')")
//         }
//     }

//     lastRow = tblGroupTbd.getElementsByTagName("tr")[tblGroupTbd.getElementsByTagName("tr").length-1];
//     for(let i=0;i<tblGroupTbd.getElementsByTagName("th").length;i++){
//         if(Number(lastRow.getElementsByTagName("td")[i].innerText).toFixed(1) - 100 === 0){
//             for(let tmpR of tblGroupTbd.getElementsByTagName("tr")){
//                 if(tmpR.getElementsByTagName("th").length !== 0){
//                     tmpR.getElementsByTagName("th")[i].style.color = "#ccc";
//                 }else{
//                     tmpR.getElementsByTagName("td")[i].style.color = "#ccc";
//                 }
//             }
//         }else{
//             // add behavior for clicking on header
//             let th = tblGroupTbd.getElementsByTagName("th")[i];
//             th.classList.add("w3-hover-indigo")
//             th.setAttribute("onclick","dsp_ny_members_for_item('"+iSubject+"','group','"+aoHeadGroup[i]+"')")
//         }
//     }
    
//     eTop2.appendChild(eTitle);
//     eTop2.appendChild(eChild1);
//     eTop2.appendChild(eChild2);
//     eTop2.appendChild(tblSect);
//     eTop2.appendChild(tblGroup);
//     return eTop;
// }

// function gen_sum_items_graph(itemRef,sumSect,sumGroup,userInfo){
//     // console.log("dbg:: gen_sum_items_tbl");
//     // => working on data
//     let iSubject = "an item subject";
//     let iRefLink = "an item subject";
//     let iStaDate = new Date(Date.now() - 2*24*3600*1000);
//     let iEndDate = new Date(Date.now() + 24*3600*1000);
//     let iLastUpdBy = undefined;
//     let iLastUpdOn = undefined;
//     // for some testing contextes
//     if(itemRef !== undefined){
//         iSubject = itemRef["item_subject"]; //"an item subject";
//         iRefLink = itemRef["item_link"]; //"an item subject";
//         iStaDate = new Date(itemRef["item_start"]); //new Date(Date.now() - 2*24*3600*1000);
//         iEndDate = new Date(itemRef["item_end"]); //new Date(Date.now() + 24*3600*1000);
//         iLastUpdBy = "-";if(itemRef.hasOwnProperty("_user_")) iLastUpdBy = itemRef["_user_"];
//         iLastUpdOn = "-";if(itemRef.hasOwnProperty("_modTime_")) iLastUpdOn = itemRef["_modTime_"];
//     }
//     let total_days =Number((iEndDate-iStaDate)/(1000*3600*24)).toFixed(1);
//     let now_diff_days = Number((Date.now()-iStaDate)/(1000*3600*24)).toFixed(1);
//     let now_diff_percent = Number(100*(Date.now()-iStaDate)/(iEndDate-iStaDate)).toFixed(1);
//     let now_diff_days_dsp = now_diff_days; if(now_diff_days - total_days > 0) now_diff_days_dsp = "Over " + Number(now_diff_days - total_days).toFixed(1);
//     let now_diff_percent_dsp = now_diff_percent;if(now_diff_percent - 100 > 0) now_diff_percent_dsp = "-";

//     if(now_diff_days - total_days > 0) {return null};//don't need to display the past

//     let oBySects = {};
//     for(let sect in itemRef["sumBySect"]){
//         // =>
//         if(!oBySects.hasOwnProperty("All")){
//             oBySects["All"] = {};
//             oBySects["All"]["done"] = 0;
//             oBySects["All"]["all"] = 0;
//         }
//         oBySects["All"]["done"] += itemRef["sumBySect"][sect];
//         oBySects["All"]["all"] += sumSect[sect];
//         // =>
//         if(!oBySects.hasOwnProperty(sect)) oBySects[sect] = {};
//         oBySects[sect]["done"] = itemRef["sumBySect"][sect];
//         oBySects[sect]["all"] = sumSect[sect];
//     }
//     for(let sect in sumSect){
//         if(!oBySects.hasOwnProperty(sect)){
//             // =>
//             if(!oBySects.hasOwnProperty("All")){
//                 oBySects["All"] = {};
//                 oBySects["All"]["done"] = 0;
//                 oBySects["All"]["all"] = 0;
//             }
//             oBySects["All"]["all"] += sumSect[sect];
//             // =>
//             oBySects[sect] = {};
//             oBySects[sect]["done"] = 0;
//             oBySects[sect]["all"] = sumSect[sect];
//         }
//     }

//     let oByGroups = {};
//     for(let group in itemRef["sumByGroup"]){
//         if(!oByGroups.hasOwnProperty(group)) oByGroups[group] = {};
//         oByGroups[group]["done"] = itemRef["sumByGroup"][group];
//         oByGroups[group]["all"] = sumGroup[group];
//     }
//     for(let group in sumGroup){
//         if(!oByGroups.hasOwnProperty(group)){
//             oByGroups[group] = {};
//             oByGroups[group]["done"] = 0;
//             oByGroups[group]["all"] = sumGroup[group];
//         }
//     }
//     // console.log(oBySects,oByGroups,userInfo);
 
//     // // => working on generating element
//     let eTop = my_create(undefined,undefined,["my-an-item","w3-padding-small","w3-animate-zoom","my-div-for-sum-table"]);
//     let eTop2 = my_create(undefined,undefined,["w3-light-gray","w3-card-4","w3-round","w3-center"])
//     eTop.appendChild(eTop2)
//     // eTop2.appendChild(my_create("a",iSubject,["w3-block","w3-bottombar","w3-large","my-center"],{"width":"100%","minHeight":"72px"},{"href":iRefLink,"target":"_blank_"}))
//     let eTitle = my_create("div",undefined,["w3-bottombar"],{"position":"relative"});
//     eTitle.appendChild(my_create("a","ref: clickme.",["w3-block"],{"padding":0,"paddingTop":"4px","paddingLeft":"8px","text-align":"left"},{"href":iRefLink,"target":"_blank_"}))
//     eTitle.appendChild(my_create("div",iSubject,["w3-large","my-center"],{"width":"100%","minHeight":"72px"},{}))
//     eTitle.appendChild(my_create("div","<img src=''/>",["my-title-icon"],{},{}))
//     eTitle.appendChild(my_create("div","Start:" + my_datetime(iStaDate),["w3-small","my-title-start"],{"font-family":"monospace"}))
//     eTitle.appendChild(my_create("div","End  :" + my_datetime(iEndDate),["w3-small","my-title-end"],{"font-family":"monospace"}))
//     if(now_diff_days - total_days <= 0){
//         eTitle.getElementsByTagName("img")[0].src = ongoIcon;
//         eTitle.style.backgroundColor = "#191970";//MidnightBlue
//         eTitle.style.color = "white";
//     }else{
//         eTitle.getElementsByTagName("img")[0].src = pastIcon;
//     }

//     let eChild1 = my_create("div");//
//     eChild1.appendChild(my_create("div","ModBy:" + iLastUpdBy,["w3-small"],{"font-family":"monospace"}))
//     eChild1.appendChild(my_create("div","ModOn:" + my_datetime_fr_epoch(iLastUpdOn),["w3-small"],{"font-family":"monospace"}))
//     // eChild1.appendChild(my_create("div","Start:" + my_datetime(iStaDate),["w3-small"],{"font-family":"monospace"}))
//     // eChild1.appendChild(my_create("div","End  :" + my_datetime(iEndDate),["w3-small"],{"font-family":"monospace"}))
//     let eChild2 = my_create("div",undefined,["w3-container"]);//
//     eChild2.appendChild(my_create("div",total_days+" day(s)"        ,["my-center"],{"width":"33.33%","minHeight":"44px","float":"left"}))
//     eChild2.appendChild(my_create("div",now_diff_days_dsp+" day(s)" ,["my-center"],{"width":"33.33%","minHeight":"44px","float":"left"}))
//     eChild2.appendChild(my_create("div",now_diff_percent_dsp + " %" ,["my-center"],{"width":"33.33%","minHeight":"44px","float":"left"}))
   
//     eTop2.appendChild(eTitle);
//     eTop2.appendChild(eChild1);
//     eTop2.appendChild(eChild2);
//     // =>
//     if(userInfo[thisUser]["person_section"].hasOwnProperty("all")){
//         eTop2.appendChild(gen_pie_chart("33.33%","All",oBySects["All"]["all"],oBySects["All"]["done"]));
//         eTop2.appendChild(gen_pie_chart("33.33%",userInfo[thisUser]["person_section"],oBySects[userInfo[thisUser]["person_section"]]["all"],oBySects[userInfo[thisUser]["person_section"]]["done"],iSubject,"section"));
//         eTop2.appendChild(gen_pie_chart("33.33%",userInfo[thisUser]["person_group"],oByGroups[userInfo[thisUser]["person_group"]]["all"],oByGroups[userInfo[thisUser]["person_group"]]["done"],iSubject,"group"));
//     }
//     // =>
//     for(let sectN in oBySects){
//         if(sectN === "All") continue;
//         // if(sectN === userInfo[thisUser]["person_section"]) continue;
//         eTop2.appendChild(gen_pie_chart(
//             "25%",
//             sectN,
//             oBySects[sectN]["all"],
//             oBySects[sectN]["done"],
//             iSubject,"section"));
//     }
//     return eTop;
// }

// function gen_pie_chart(percent,title,numTotal,numDone,subject,sectOrGrp){
//     let aPieTop = my_create("div",undefined,["w3-white","w3-topbar","w3-border"],{"width":percent,"float":"left"});
//     let titleDsp = title;
//     titleDsp = titleDsp.replace(/Backend Design Division/,"BEDD");
//     titleDsp = titleDsp.replace(/Backend Design/,"BED");
//     titleDsp = titleDsp.replace(/MiddleEnd Design/,"MED");
//     let eTitle = my_create("p",titleDsp,[],{"padding":0});
//     if(title !== "All"){
//         eTitle.classList.add("w3-button");
//         eTitle.setAttribute("onclick","dsp_ny_members_for_item('"+subject+"','"+sectOrGrp+"','"+title   +"')")
//     }else{
//         eTitle.classList.add("w3-container");
//     }
//     let eInfo = my_create("div",undefined,[],{"padding":0,"margin":0})
//     let eInfo1 = my_create("span","All:"+numTotal,["w3-half","w3-small"])
//     let eInfo2 = my_create("span","NY:"+Number(numTotal-numDone),["w3-half","w3-small"],{"backgroundColor":"rgb(255, 99, 132)"})
//     eInfo.appendChild(eInfo1);
//     eInfo.appendChild(eInfo2);
//     let eCanvas = my_create("canvas");
//     const chartData = {
//         labels: [
//             'NotYet',
//             'Done'
//           ],
//           datasets: [{
//             label: 'My First Dataset',
//             data: [Number(numTotal-numDone).toFixed(0), numDone],
//             backgroundColor: [
//               'rgb(255, 99, 132)',
//               'rgb(54, 162, 235)',
//             ],
//             hoverOffset: 4
//           }]
//     };
//     let chartConfig = {
//         type:'pie',
//         data: chartData,
//         options: {
//             plugins : {
//                 legend : {
//                     display : false,
//                 },
//                 tooltip: {
//                     enabled : true
//                 }
//             }
//         }
//     };
//     let theChart = new Chart(eCanvas,chartConfig);
//     // =>
//     aPieTop.appendChild(eTitle);
//     aPieTop.appendChild(eInfo);
//     aPieTop.appendChild(eCanvas);
//     return aPieTop;
// }

// function gen_item_w_person(itemRef,personActionRef,mode){
//     // console.log("dbg:: gen_item_w_person");
//     if(mode === undefined) mode = "future_only";
//     // => working on data
//     let iSubject = "an item subject";
//     let iRefLink = "an item subject";
//     let iStaDate = new Date(Date.now() - 2*24*3600*1000);
//     let iEndDate = new Date(Date.now() + 24*3600*1000);
//     let iFinDate = null;
//     let iFinLastModBy = "-";
//     let iFinLastModOn = "-";
//     let iLastUpdBy = undefined;
//     let iLastUpdOn = undefined;
//     let stt = "NotYet";//NY, Done
//     // for some testing contextes
//     if(itemRef !== undefined){
//         iSubject = itemRef["item_subject"]; //"an item subject";
//         iRefLink = itemRef["item_link"]; //"an item subject";
//         iStaDate = new Date(itemRef["item_start"]); //new Date(Date.now() - 2*24*3600*1000);
//         iEndDate = new Date(itemRef["item_end"]); //new Date(Date.now() + 24*3600*1000);
//         iLastUpdBy = "-";if(itemRef.hasOwnProperty("_user_")) iLastUpdBy = itemRef["_user_"];
//         iLastUpdOn = "-";if(itemRef.hasOwnProperty("_modTime_")) iLastUpdOn = itemRef["_modTime_"];
//     }
//     if(iSubject === undefined) return null;//something wrong with the data, ignore to generate the element
//     if(personActionRef !== undefined){
//         for(let chkSubject in personActionRef){
//             if(chkSubject.replace(/[\s'"]/g,"") === iSubject.replace(/[\s'"]/g,"")){
//                 iFinDate = new Date(personActionRef[chkSubject]["fin_date"]);
//                 let dateOffset = "";
//                 if(personActionRef[chkSubject].hasOwnProperty("lastUpdBy")) iFinLastModBy = personActionRef[chkSubject]["lastUpdBy"];
//                 if(personActionRef[chkSubject].hasOwnProperty("lastUpdOn")) iFinLastModOn = personActionRef[chkSubject]["lastUpdOn"];
//                 if(personActionRef[chkSubject].hasOwnProperty("timeOffset"))   dateOffset = personActionRef[chkSubject]["timeOffset"];
//                 // console.log(chkSubject+ " vs "+iSubject, "matched", personActionRef[chkSubject],iFinDate)
//             }
//         }
//     }
//     let total_days =Number((iEndDate-iStaDate)/(1000*3600*24)).toFixed(1);
//     let now_diff_days = Number((Date.now()-iStaDate)/(1000*3600*24)).toFixed(1);
//     let now_diff_percent = Number(100*(Date.now()-iStaDate)/(iEndDate-iStaDate)).toFixed(1);
//     let now_diff_days_dsp = "Past " + now_diff_days; if(now_diff_days - total_days > 0) now_diff_days_dsp = "Over " + Number(now_diff_days - total_days).toFixed(1);
//     let now_diff_percent_dsp = now_diff_percent;if(now_diff_percent - 100 > 0) now_diff_percent_dsp = "-";
//     let now_score = 0;
//     if(now_diff_percent <=30){
//         now_score = 3;
//     }else if(now_diff_percent <=60){
//         now_score = 2;
//     }else if(now_diff_percent <=100){
//         now_score = 1;
//     }else if(now_diff_percent > 100){
//         now_score = -1;
//     }else{}
//     if(iFinDate - iStaDate >= 0 && iEndDate - iFinDate >= 0){
//         stt = "Done";
//     }else if(iFinDate - iEndDate > 0) {
//         stt = "DoneLate";
//     }else{}
//     if(stt === "Done"){
//         // get score from the history
//         now_score = "0";
//         if(Number(100*(iFinDate - iStaDate)/(iEndDate - iStaDate)) <=30){
//             now_score = 3;
//         }else if(Number(100*(iFinDate - iStaDate)/(iEndDate - iStaDate)) <=60){
//             now_score = 2;
//         }else if(Number(100*(iFinDate - iStaDate)/(iEndDate - iStaDate)) <=100){
//             now_score = 1;
//         }else{}
//     }else if(stt === "DoneLate"){
//         now_score = 0.5;
//     }else{
//         // stt === NotYet
//         if(Date.now() - iEndDate <= 0) {
//             // now_score = 0; //only turn to 0 when calculating the real number
//         }else{}
//     }
//     // => scoring
//     if(stt === "Done" || now_diff_days - total_days > 0) theScore.innerText = Number(theScore.innerText)+now_score;
//     // console.log("stt="+stt+" now_score="+now_score+" score="+theScore.innerText)

//     if(stt === "NotYet") theWarn.innerText = Number(theWarn.innerText)+1
    
//     // scoping the displaying of items
//     if(mode === "future_only"){
//         if(now_diff_days - total_days > 0) return null;
//     }else if(mode === "warn"){
//         if(stt !== "NotYet") return null;
//     }else{}

//     // => working on generating element
//     let eTop = my_create(undefined,undefined,["w3-padding-small","w3-animate-zoom","w3-col","l3","m4","s6"]);
//     let eTop2 = my_create(undefined,undefined,["w3-light-gray","w3-card-4","w3-round","w3-center","w3-rightbar","w3-topbar"])
//     eTop.appendChild(eTop2)
//     // eTop2.appendChild(my_create("a",iSubject,["w3-block","w3-bottombar","w3-large","my-center"],{"width":"100%","minHeight":"72px"},{"href":iRefLink,"target":"_blank_"}))
//     let eTitle = my_create("div",undefined,["w3-bottombar"],{"position":"relative"});
//     eTitle.appendChild(my_create("a","ref: clickme.",["w3-block"],{"padding":0,"paddingTop":"4px","paddingLeft":"8px","text-align":"left"},{"href":iRefLink,"target":"_blank_"}))
//     eTitle.appendChild(my_create("div",iSubject,["w3-large","my-center"],{"width":"100%","minHeight":"72px"},{}))
//     eTitle.appendChild(my_create("div","<img src=''/>",["my-title-icon"],{},{}))
//     eTitle.appendChild(my_create("div","Start:" + my_datetime(iStaDate),["w3-small","my-title-start"],{"font-family":"monospace"}))
//     eTitle.appendChild(my_create("div","End  :" + my_datetime(iEndDate),["w3-small","my-title-end"],{"font-family":"monospace"}))
//     if(now_diff_days - total_days <= 0){
//         eTitle.getElementsByTagName("img")[0].src = ongoIcon;
//         eTitle.style.backgroundColor = "#191970";//MidnightBlue
//         eTitle.style.color = "white";
//     }else{
//         eTitle.getElementsByTagName("img")[0].src = pastIcon;
//     }
//     // let eChild1 = my_create("div");//
//     // eChild1.appendChild(my_create("div","ModBy:" + iLastUpdBy,["w3-small"],{"font-family":"monospace"}))
//     // eChild1.appendChild(my_create("div","ModOn:" + my_datetime_fr_epoch(iLastUpdOn),["w3-small"],{"font-family":"monospace"}))
//     // eChild1.appendChild(my_create("div","Start:" + my_datetime(iStaDate),["w3-small"],{"font-family":"monospace"}))
//     // eChild1.appendChild(my_create("div","End  :" + my_datetime(iEndDate),["w3-small"],{"font-family":"monospace"}))
//     let eChild2 = my_create("div",undefined,["w3-container"]);//
//     eChild2.appendChild(my_create("div",total_days+" day(s)"        ,["my-center"] ,{"width":"33.33%","minHeight":"44px","float":"left"}))
//     eChild2.appendChild(my_create("div",now_diff_days_dsp+" day(s)" ,["my-center"] ,{"width":"33.33%","minHeight":"44px","float":"left"}))
//     eChild2.appendChild(my_create("div",now_diff_percent_dsp + " %" ,["my-center"] ,{"width":"33.33%","minHeight":"44px","float":"left"}))
//     let eChild3 = my_create("div",undefined,["w3-topbar"]);//
//     if(stt === "Done"){
//         eChild3.appendChild(my_create("div",stt + "<span> on "+aoMonth[iFinDate.getMonth()]+"/"+iFinDate.getDate()+"</span>",["w3-show-inline-block","w3-padding"]))
//     }else if(stt === "DoneLate"){
//         eChild3.appendChild(my_create("div",stt + "<span> on "+aoMonth[iFinDate.getMonth()]+"/"+iFinDate.getDate()+"</span>",["w3-show-inline-block","w3-padding"]))
//     }else{
//         eChild3.appendChild(my_create("div",stt,["w3-button","w3-indigo","w3-shadow"],{},{"onclick":"dsp_user_action_on_item(this)"}))
//     }
//     eChild3.appendChild(my_create("div",now_score,["w3-container","w3-show-inline-block"],{"width":"16px"}))

//     // // => some colors for over-due
//     // if(now_diff_days - total_days < -1){
//     //     eTop2.classList.add("w3-border-light-green");
//     // }else if(now_diff_days - total_days < 0){
//     //     eTop2.classList.add("w3-border-khaki");
//     // }else{
//     //     if(! stt.match("Done")) eTop2.classList.add("w3-border-red");
//     // }
    
//     eTop2.appendChild(eTitle);
//     // eTop2.appendChild(eChild1);
//     eTop2.appendChild(eChild2);
//     eTop2.appendChild(eChild3);
//     return eTop;
// }

// function calc_score_of_user(listItemRef,personActionRef){
//     // console.log("dbg:: calc_score_of_user");
//     let totalScore = 0;
//     // => working on data
//     for(let itemRef of listItemRef){
//         // => working on data
//         let iSubject = "an item subject";
//         let iStaDate = new Date(Date.now() - 2*24*3600*1000);
//         let iEndDate = new Date(Date.now() + 24*3600*1000);
//         let iFinDate = null;
//         let stt = "NotYet";//NY, Done
//         // for some testing contextes
//         if(itemRef !== undefined){
//             iSubject = itemRef["item_subject"]; //"an item subject";
//             iStaDate = new Date(itemRef["item_start"]); //new Date(Date.now() - 2*24*3600*1000);
//             iEndDate = new Date(itemRef["item_end"]); //new Date(Date.now() + 24*3600*1000);
//         }
//         if(personActionRef !== undefined){
//             for(let chkSubject in personActionRef){
//                 if(chkSubject.replace(/[\s'"]/g,"") === iSubject.replace(/[\s'"]/g,"")){
//                     iFinDate = new Date(personActionRef[chkSubject]["fin_date"]);
//                     // console.log(chkSubject+ " vs "+iSubject, "matched", personActionRef[chkSubject],iFinDate)
//                 }
//             }
//         }
//         let total_days =Number((iEndDate-iStaDate)/(1000*3600*24)).toFixed(1);
//         let now_diff_days = Number((Date.now()-iStaDate)/(1000*3600*24)).toFixed(1);
//         let now_diff_percent = Number(100*(Date.now()-iStaDate)/(iEndDate-iStaDate)).toFixed(1);
//         let now_score = 0;
//         if(now_diff_percent <=30){
//             now_score = 3;
//         }else if(now_diff_percent <=60){
//             now_score = 2;
//         }else if(now_diff_percent <=100){
//             now_score = 1;
//         }else if(now_diff_percent > 100){
//             now_score = -1;
//         }else{}
//         if(iFinDate - iStaDate >= 0 && iEndDate - iFinDate >= 0){
//             stt = "Done";
//         }else if(iFinDate - iEndDate > 0) {
//             stt = "DoneLate";
//         }else{}
//         if(stt === "Done"){
//             // get score from the history
//             now_score = "0";
//             if(Number(100*(iFinDate - iStaDate)/(iEndDate - iStaDate)) <=30){
//                 now_score = 3;
//             }else if(Number(100*(iFinDate - iStaDate)/(iEndDate - iStaDate)) <=60){
//                 now_score = 2;
//             }else if(Number(100*(iFinDate - iStaDate)/(iEndDate - iStaDate)) <=100){
//                 now_score = 1;
//             }else{}
//         }else if(stt === "DoneLate"){
//             now_score = 0.5;
//         }else{
//             // stt === NotYet
//             if(Date.now() - iEndDate <= 0) {
//                 now_score = 0; //only turn to 0 when calculating the real number
//             }else{}
//         }
//         // => scoring
//         if(stt === "Done" || now_diff_days - total_days > 0) totalScore += now_score;
//         // =>
//     }
//     return totalScore;
// }

// function gen_tbl_scoring(listItemRef,personActionRef){
//     // console.log("dbg:: gen_tbl_scoring");
//     // => working on generating element
//     let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable","w3-small","w3-animate-zoom"],{"width":"100%"});
//     let eTbd = my_create("tbody");
//     eTbd.appendChild(my_add_row(["Subject","Status","Last Update On","Start Date","End Date","Finished on","Score"],"th"));
//     // => working on data
//     for(let itemRef of listItemRef){
//         // => working on data
//         let iSubject = "an item subject";
//         let iRefLink = "an item subject";
//         let iStaDate = new Date(Date.now() - 2*24*3600*1000);
//         let iEndDate = new Date(Date.now() + 24*3600*1000);
//         let iFinDate = null;
//         let iFinLastModBy = "-";
//         let iFinLastModOn = "-";
//         let stt = "NotYet";//NY, Done
//         // for some testing contextes
//         if(itemRef !== undefined){
//             iSubject = itemRef["item_subject"]; //"an item subject";
//             iRefLink = itemRef["item_link"]; //"an item subject";
//             iStaDate = new Date(itemRef["item_start"]); //new Date(Date.now() - 2*24*3600*1000);
//             iEndDate = new Date(itemRef["item_end"]); //new Date(Date.now() + 24*3600*1000);
//         }
//         if(personActionRef !== undefined){
//             for(let chkSubject in personActionRef){
//                 if(chkSubject.replace(/[\s'"]/g,"") === iSubject.replace(/[\s'"]/g,"")){
//                     iFinDate = new Date(personActionRef[chkSubject]["fin_date"]);
//                     let dateOffset = "";
//                     if(personActionRef[chkSubject].hasOwnProperty("lastUpdBy")) iFinLastModBy = personActionRef[chkSubject]["lastUpdBy"];
//                     if(personActionRef[chkSubject].hasOwnProperty("lastUpdOn")) iFinLastModOn = personActionRef[chkSubject]["lastUpdOn"];
//                     if(personActionRef[chkSubject].hasOwnProperty("timeOffset"))   dateOffset = personActionRef[chkSubject]["timeOffset"];
//                     // console.log(chkSubject+ " vs "+iSubject, "matched", personActionRef[chkSubject],iFinDate)
//                 }
//             }
//         }
//         let total_days =Number((iEndDate-iStaDate)/(1000*3600*24)).toFixed(1);
//         let now_diff_days = Number((Date.now()-iStaDate)/(1000*3600*24)).toFixed(1);
//         let now_diff_percent = Number(100*(Date.now()-iStaDate)/(iEndDate-iStaDate)).toFixed(1);
//         let now_score = 0;
//         if(now_diff_percent <=30){
//             now_score = 3;
//         }else if(now_diff_percent <=60){
//             now_score = 2;
//         }else if(now_diff_percent <=100){
//             now_score = 1;
//         }else if(now_diff_percent > 100){
//             now_score = -1;
//         }else{}
//         if(iFinDate - iStaDate >= 0 && iEndDate - iFinDate >= 0){
//             stt = "Done";
//         }else if(iFinDate - iEndDate > 0) {
//             stt = "DoneLate";
//         }else{}
//         if(stt === "Done"){
//             // get score from the history
//             now_score = "0";
//             if(Number(100*(iFinDate - iStaDate)/(iEndDate - iStaDate)) <=30){
//                 now_score = 3;
//             }else if(Number(100*(iFinDate - iStaDate)/(iEndDate - iStaDate)) <=60){
//                 now_score = 2;
//             }else if(Number(100*(iFinDate - iStaDate)/(iEndDate - iStaDate)) <=100){
//                 now_score = 1;
//             }else{}
//         }else if(stt === "DoneLate"){
//             now_score = 0.5;
//         }else{
//             // stt === NotYet
//             if(Date.now() - iEndDate <= 0) {
//                 now_score = 0; //only turn to 0 when calculating the real number
//             }else{}
//         }
//         // => scoring
//         if(stt === "Done" || now_diff_days - total_days > 0) theScore.innerText = Number(theScore.innerText)+now_score;
//         if(stt === "NotYet") theWarn.innerText = Number(theWarn.innerText)+1
//         // =>
//         eTbd.appendChild(my_add_row([iSubject,stt,my_datetime_fr_epoch(iFinLastModOn),my_datetime(iStaDate),my_datetime(iEndDate),my_datetime(iFinDate),now_score]));
//     }
//     eTbl.appendChild(eTbd); 
//     return eTbl;
// }

// function gen_people_accounts(objData,objDataItems){
//     let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable","w3-small","w3-animate-zoom"],{"width":"100%"});
//     let eTbd = my_create("tbody");
//     eTbd.appendChild(my_add_row(["Account","Name","Section","group","moreInfo","del?","lastModBy","lastModOn","score"],"th"));
//     for(let tmpE of eTbd.getElementsByTagName("tr")[eTbd.getElementsByTagName("tr").length-1].getElementsByTagName("th")){
//         tmpE.innerHTML = tmpE.innerHTML+"<i class=\"bi bi-shuffle\"></i>";
//         tmpE.setAttribute("onclick","sortTblByHeader(this)");
//     }
//     // => working on data
//     for(let email in objData){
//         let name = objData[email]["person_name"];
//         let sect = objData[email]["person_section"];
//         let group = objData[email]["person_group"];
//         let moreInfo = objData[email]["person_moreInfo"];
//         let flgDel = "-";if(objData[email].hasOwnProperty("_delete_")) flgDel = objData[email]["_delete_"];
//         let lastModBy = ""; if(objData[email].hasOwnProperty("_user_")) lastModBy = objData[email]["_user_"];
//         let lastModOn = objData[email]["_modTime_"];
//         let score = "-";
//         if(objDataItems !== undefined){
//             score = calc_score_of_user(objDataItems,retrieve_user_action(email))
//         }
//         eTbd.appendChild(my_add_row([email,name,sect,group,moreInfo,flgDel,lastModBy,my_datetime_fr_epoch(lastModOn),score]));
//     }
//     eTbl.appendChild(eTbd); 
//     //
//     return eTbl;
// }

// function dsp_all_items(mode){
//     // => AJAX to get info
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             remove_effect();
//             // =>
//             let objData = [];
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             // 
//             while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
//             while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//             hide_left();//if any
//             // reset warning and scoring
//             theWarn.innerText = 0;
//             theScore.innerText = 100;
//             // sorting by the end date
//             objData.sort(function(a,b){
//                 let x = new Date(a["item_end"]);
//                 let y = new Date(b["item_end"]);
//                 return y - x;
//             })
//             let personActionRef = retrieve_user_action();
//             for(let tmpO of objData){
//                 let aE = gen_item_w_person(tmpO,personActionRef,mode);
//                 if(aE !== null) mainSide.appendChild(aE);
//             }
//         }else{}
//     }
//     xmlhttp.open("GET","retrieve_items.php",true);
//     xmlhttp.send();
//     return;
// }

// function dsp_sum_all_items(type){
//     if(type === undefined) type = "tables";
//     if(type !== "tables" && type !== "graphs") type = "tables";
//     // => AJAX to get info
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             remove_effect();
//             // =>
//             let objData = {};
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             // 
//             // console.log(objData)
//             while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
//             // sorting by the end date
//             objData["data"].sort(function(a,b){
//                 let x = new Date(a["item_end"]);
//                 let y = new Date(b["item_end"]);
//                 return y - x;
//             })
//             for(let tmpO of objData["data"]){
//                 if(type === "tables"){
//                     let aE = null;
//                     aE = gen_sum_items_tbl(tmpO,objData["sumSect"],objData["sumGroup"]);
//                     if(aE !== null) mainSide.appendChild(aE);
//                 }else if(type === "graphs"){
//                     // retrieve user info to scope the instant charts (3 charts: 1 for all, 1 for section, 1 for group) displaying
//                     let xmlhttp = new XMLHttpRequest();
//                     xmlhttp.onreadystatechange = function(){
//                         if(this.readyState == 4 && this.status == 200){
//                             // =>
//                             let userData = {};
//                             try {userData = JSON.parse(this.responseText);}
//                             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//                             //
//                             if(Object.keys(userData).length > 0) {
//                                 // =>
//                                 let aE = null;
//                                 aE = gen_sum_items_graph(tmpO,objData["sumSect"],objData["sumGroup"],userData);
//                                 if(aE !== null) mainSide.appendChild(aE);
//                             }else{}
//                         }else{}
//                     }
//                     xmlhttp.open("GET","retrieve_users.php?q="+thisUser,true);
//                     xmlhttp.send();
//                 }else{}
//             }
//         }else{}
//     }
//     xmlhttp.open("GET","retrieve_items_for_graphs.php",true);
//     xmlhttp.send();
//     return;
// }

// function dsp_ny_members_for_item(subject,sectOrGrp,sectOrGrpName){
//     //
//     // console.log("dsp_NY: ",subject,sectOrGrp,sectOrGrpName);
//     // => AJAX to get info
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             remove_effect();
//             hide_left();
//             // =>
//             let objData = {};
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             // 
//             // console.log(objData)
//             while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//             let aE = gen_list_NY_members_for_item(objData);
//             if(aE !== null) leftSide.appendChild(aE);
//             show_left();
//         }else{}
//     }
//     xmlhttp.open("GET","retrieve_NY_members_for_item.php?subject="+encodeURIComponent(subject)+"&type="+sectOrGrp+"&name="+sectOrGrpName,true);
//     xmlhttp.send();
//     return;
// }

// function dsp_tbl_scoring(){
//         //
//     // => AJAX to get info
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             remove_effect();
//             // =>
//             let objData = [];
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             // 
//             while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
//             // reset warning and scoring
//             theWarn.innerText = 0;
//             theScore.innerText = 100;
//             // sorting by the end date
//             objData.sort(function(a,b){
//                 let x = new Date(a["item_end"]);
//                 let y = new Date(b["item_end"]);
//                 return y - x;
//             })
//             let personActionRef = retrieve_user_action();
//             mainSide.appendChild(gen_tbl_scoring(objData,personActionRef));
//         }else{}
//     }
//     xmlhttp.open("GET","retrieve_items.php",true);
//     xmlhttp.send();
//     return;
// }

// function dsp_all_users(){
//     // => display all users and their scores => AJAX 2 times x number of users => will be a hard work
//     // => AJAX 1 to get list of items registered
//     let xmlhttp1 = new XMLHttpRequest();
//     xmlhttp1.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             remove_effect();
//             let objDataItems = [];
//             try {objDataItems = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             dsp_notification("Retrieved list of items: done","Info");
//             // => create a progress div
//             let eProgressTop = my_create("i",undefined,["bi","bi-hourglass-split","w3-spin","w3-xxlarge"],{"position":"fixed","top":"5px","left":"5px"},{"id":"my_progress"})
//             document.getElementsByTagName("body")[0].appendChild(eProgressTop);
//             // => AJAX 2 to get info of all users
//             let xmlhttp = new XMLHttpRequest();
//             xmlhttp.onreadystatechange = function(){
//                 if(this.readyState == 4 && this.status == 200){
//                     // =>
//                     let objDataUsers = {};
//                     try {objDataUsers = JSON.parse(this.responseText);}
//                     catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//                     dsp_notification("Retrieved list of users: done","Info");
//                     // 
//                     while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
//                     // gen table of accounts
//                     mainSide.appendChild(gen_people_accounts(objDataUsers,objDataItems));
//                     //
//                     if(document.getElementById("my_progress") !== undefined) document.getElementById("my_progress").remove();
//                     dsp_notification("Generated table of users and scores.","Info")
//                 }else{}
//             }
//             xmlhttp.open("GET","retrieve_users.php",true);
//             xmlhttp.send();
//             dsp_notification("Will take time, please be patient ...", "Warn");
//         }
//     }
//     xmlhttp1.open("GET","retrieve_items.php",true);
//     xmlhttp1.send();
//     return;
// }

// function retrieve_user_action(tgtUser){
//     //
//     if(tgtUser === undefined) tgtUser = thisUser;
//     let objData = {};
//     // => AJAX to get info => NOT AJAX
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.open("GET","retrieve_user_action.php?q="+tgtUser,false);
//     // dsp_notification("Retrieving user action: sent.","Info");
//     xmlhttp.send();
//     // dsp_notification("Retrieving user action: received.");
//     try {objData = JSON.parse(xmlhttp.responseText);}
//     catch(err){ dsp_notification(err,"Error");dsp_notification(xmlhttp.responseText,"Error");return {};}
//     return objData;
// }

// // ====================================
// function setCookie(cname, cvalue, exdays) {
//     const d = new Date();
//     d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
//     let expires = "expires="+d.toUTCString();
//     document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
// }

// function getCookie(cname) {
//     let name = cname + "=";
//     let ca = document.cookie.split(';');
//     for(let i = 0; i < ca.length; i++) {
//         let c = ca[i];
//         while (c.charAt(0) == ' ') {
//             c = c.substring(1);
//         }
//         if (c.indexOf(name) == 0) {
//             return c.substring(name.length, c.length);
//         }
//     }
//     return "";
// }

// function init_user(){
//     let user = getCookie("userEmail");
//     if (user === "")  user = "Somebody@nowhere.com";
//     dsp_user_info_from_email(user);
//     dsp_sum_all_items("graphs");
//     // dsp_all_items("all");
// }

// // function checkCookie() {
// //     let user = getCookie("userEmail");
// //     if (user != "") {
// //     } else {
// //         user = prompt("Hi! Who are you?! :", "");
// //         if (user != "" && user != null) {
// //             setCookie("userEmail", user, 1);
// //         } else {
// //             user = "Somebody@nowhere.com";
// //         }
// //     }
// //     // update wherever needed
// //     document.getElementById("userDisplay").innerHTML = user ;
// // }

// function dsp_user_info_from_email(email){
//     if(email === undefined) return 0;
//     if(email === "") return 0;
    
//     // AJAX retrieving info from list of registered users
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             // =>
//             remove_effect();
//             let objData = {};
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             // 
//             while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
//             //
//             if(Object.keys(objData).length > 0) {
//                 // update the user info
//                 // console.log(objData)
//                 let nameStr = objData[email]["person_name"];
//                 let title = "User-normal";if(objData[email].hasOwnProperty("person_title")) title = objData[email]["person_title"];
//                 let section = "Section";if(objData[email].hasOwnProperty("person_section")) section = objData[email]["person_section"];
//                 let group = "Group";if(objData[email].hasOwnProperty("person_group")) group = objData[email]["person_group"];
//                 let OTPTicker = getCookie("userEmailOTP");
//                 let eName = userDisplay.getElementsByTagName("span")[0];
//                 let eEmail = userDisplay.getElementsByTagName("span")[1];
//                 let eTitle = userDisplay.getElementsByTagName("span")[2];
//                 let eShield = userDisplay.getElementsByTagName("i")[0];
//                 let eSectGrp = userDisplay.getElementsByTagName("span")[3];
//                 // =>
//                 let fname = nameStr.split(/\s+/)[nameStr.split(/\s+/).length-1];
//                 let lname = nameStr.split(/\s+/)[0];
//                 // console.log("fname="+fname,"lname="+lname)
//                 let dspName =  "";
//                 if( lname !== undefined) dspName += lname;
//                 if( fname !== undefined && fname !== lname) dspName += " " + fname;
//                 // =>
//                 eName.innerText = dspName;
//                 eEmail.innerText = email;
//                 eTitle.innerText = title;
//                 if(title !== "Admin" && title !== "Moderator"){
//                     for(let tmpE of myMenu2.getElementsByTagName("div")){
//                         if(String(tmpE.getAttribute("onclick")).search(/dsp_add_item/)>-1) tmpE.style.display = "none";
//                         if(String(tmpE.getAttribute("onclick")).search(/dsp_all_users/)>-1) tmpE.style.display = "none";
//                     }
//                 }
//                 eSectGrp.innerText = section + "/" + group;
//                 if(OTPTicker === "OK"){
//                     if(eShield.classList.contains("my-login-tick-ng")){
//                         eShield.classList.remove("my-login-tick-ng");
//                         eShield.classList.remove("bi-shield-x");
//                         eShield.classList.add("my-login-tick-ok");
//                         eShield.classList.add("bi-shield-check");
//                     }
//                 }else{
//                     if(eShield.classList.contains("my-login-tick-ok")){
//                         eShield.classList.remove("my-login-tick-ok");
//                         eShield.classList.remove("bi-shield-check");
//                         eShield.classList.add("my-login-tick-ng");
//                         eShield.classList.add("bi-shield-x");
//                     }
//                 }
//                 thisUser = email;
//                 // =>
//                 dsp_all_items("all");
//             }else{
//                 // new account?!
//                 dsp_notification("New/Deleted account, please register first.")
//             }
//         }else{}
//     }
//     xmlhttp.open("GET","retrieve_users.php?q="+email,true);
//     xmlhttp.send();
//     return;
//     //
// }

// function update_user_info_in_adding_form(email,tgtForm){
//     if(tgtForm === undefined) tgtForm = gen_add_person_form();
//     if(email === undefined) email = thisUser;
//     // => change the way buttons' looks
//     let btnImport = null;
//     let btnDelete = null;
//     let btnRecover = null;
//     for(let tmpBtn of tgtForm.getElementsByTagName("div")){
//         if(!tmpBtn.classList.contains("w3-button")) continue;
//         tmpBtn.style.display = "none";
//         if(tmpBtn.getAttribute("onclick").match("import_user_info")){
//             btnImport = tmpBtn;
//         }else if(tmpBtn.getAttribute("onclick").match("delete_user_info")){
//             btnDelete = tmpBtn;
//         }else if(tmpBtn.getAttribute("onclick").match("recover_user_info")){
//             btnRecover = tmpBtn;
//         }else{}
//     }
//     // =>
//     if(email.search(/\S+@\S+\.com/)) return 0;
//     // AJAX getting info of the user
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             // =>
//             remove_effect();
//             let objData = {};
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             //
//             if(Object.keys(objData).length > 0) {
//                 // console.log(objData)
//                 for(let eInp of tgtForm.getElementsByTagName("input")){
//                     for(let keyw in objData[email]){
//                         if(objData[email][keyw] === undefined) continue;
//                         if(eInp.name === keyw) eInp.value = objData[email][keyw];
//                     }
//                 }
//                 if(objData[email].hasOwnProperty("_delete_") && objData[email]["_delete_"]){
//                     dsp_notification("Account deleted, recover?!")
//                     btnRecover.style.display = "";
//                 }else{
//                     btnImport.style.display = ""; btnImport.innerText = "Modify";
//                     if(email !== thisUser) btnDelete.style.display = "";
//                 }
//             }else{
//                 // new account?!
//                 dsp_notification("User "+email+" not found, create new?!")
//                 // => update tgtForm the buttons
//                 btnImport.style.display = "";
//                 btnImport.innerText = "New";
//             }
//         }else{}
//     }
//     xmlhttp.open("GET","retrieve_users.php?q="+email,true);
//     xmlhttp.send();
//     return 1;
// }

// function update_item_info_in_adding_form(subject,tgtForm){
//     if(tgtForm === undefined) return 0;
//     if(subject === undefined) return 0;
//     if(subject === "") return 0;
//     // AJAX getting info of the user
//     let xmlhttp = new XMLHttpRequest();
//     xmlhttp.onreadystatechange = function(){
//         if(this.readyState == 4 && this.status == 200){
//             // =>
//             remove_effect();
//             let objData = [];
//             try {objData = JSON.parse(this.responseText);}
//             catch(err){ dsp_notification(err,"Error");dsp_notification(this.responseText,"Error");return;}
//             //
//             // console.log(objData);
//             if(objData.length > 0) {
//                 for(let eInp of tgtForm.getElementsByTagName("input")){
//                     for(let keyw in objData[objData.length-1]){
//                         if(objData[objData.length-1][keyw] === undefined) continue;
//                         if(eInp.name === keyw) eInp.value = objData[objData.length-1][keyw];
//                     }
//                 }
//                 for(let eInp of tgtForm.getElementsByTagName("textarea")){
//                     for(let keyw in objData[objData.length-1]){
//                         if(objData[objData.length-1][keyw] === undefined) continue;
//                         if(eInp.name === keyw) eInp.value = objData[objData.length-1][keyw];
//                     }
//                 }
//             }else{
//                 // new account?!
//                 dsp_notification("item not found, make new.")
//             }
//         }else{}
//     }
//     xmlhttp.open("GET","retrieve_items.php?q="+encodeURIComponent(subject),true);
//     xmlhttp.send();
//     return 1;
// }

// function check_email_input(field){
//     if(field.value === undefined) return 0;
//     if(field.value === ""){
//         for(let tmpE of field.parentNode.getElementsByTagName("div")){
//             if(tmpE.classList.contains("w3-button")){
//                 if(!tmpE.classList.contains("w3-opacity")) tmpE.classList.add("w3-opacity")
//             }
//         }
//         return 0;
//     }else{}
//     if(! field.value.match(/.*@.*\.com/)) return 0;
//     for(let tmpE of field.parentNode.getElementsByTagName("div")){
//         if(tmpE.classList.contains("w3-button")){
//             if(tmpE.classList.contains("w3-opacity")) tmpE.classList.remove("w3-opacity");
//         }
//     }
//     return 1;
//     // console.log("got email: ", field.value)
// }

// function check_OTP_input(field){
//     if(field.value === undefined) return 0;
//     let flgChkEmail = 0;
//     for(let tmpE of field.parentNode.getElementsByTagName("input")){
//         if(tmpE.name === "login_email"){
//             flgChkEmail = check_email_input(tmpE);
//         }
//     }
//     if(flgChkEmail === 0) return 0;
//     if(field.value === ""){
//         for(let tmpE of field.parentNode.getElementsByTagName("div")){
//             if(tmpE.classList.contains("w3-button")){
//                 tmpE.innerText = "getOTP";
//             }
//         }
//         return 0;
//     }else{
//         for(let tmpE of field.parentNode.getElementsByTagName("div")){
//             if(tmpE.classList.contains("w3-button")){
//                 tmpE.innerText = "Login";
//             }
//         }
//         return 1;
//     }
//     // console.log("got OTP: ",field.value)
//     return 1;
// }

// function remove_effect(){
//     if(document.getElementById("effectDsp") !== null) document.getElementById("effectDsp").remove();
// }
// function clear_all(){
//     // => duel with leftSide
//     while(leftSide.childNodes.length > 0) {leftSide.lastChild.remove()}
//     hide_left();
//     // => remove child elements in mainSide
//     let max = mainSide.childNodes.length;
//     for(let i=max-1;i>=0;i--){
//         setTimeout(function(){
//             let leftP =  Math.random()*100;
//             let topP =  Math.random()*100;
//             mainSide.childNodes[i].style.position = "absolute";
//             mainSide.childNodes[i].style.left = leftP + "%";
//             mainSide.childNodes[i].style.top = topP + "%";
//             mainSide.childNodes[i].style.animationName = "my-left-out";
//             // mainSide.childNodes[i].style.animationName = "my-notifying";
//             mainSide.childNodes[i].style.animationDuration = "1s";
//             setTimeout(function(){
//                 mainSide.childNodes[i].remove();
//             },1000);
//         },200*(max-i))
//     }
//     // while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
//     // => make effect (snow flake)
//     if(document.getElementById("effectDsp") === null){
//         // => generate a snow flake?!
//         let snowDivTop = document.createElement("div");
//         snowDivTop.setAttribute("id","effectDsp");
//         // let snowDiv = document.createElement("div");
//         // snowDivTop.appendChild(snowDiv);
//         // snowDiv.classList.add("snowflake");
//         let snow_density = 300;
//         // =>//spawn the css for snow flakes, 200 means density of flakes
//         spawnSnowCSS(snow_density);
//         // =>//spawn the snow flake div.
//         snow_density -= 1;
//         for (let x = 0; x < snow_density; x++) {
//             let board = document.createElement('div');
//             board.className = "snowflake";
//             snowDivTop.appendChild(board);
//         }
//         document.getElementsByTagName("body")[0].insertBefore(snowDivTop,document.getElementsByTagName("body")[0].childNodes[0]);
//     }
// }

function sortTblByHeader(thTgt){
    let trHead = thTgt.parentNode.getElementsByTagName("th");
    let tgtTbl = thTgt.parentNode.parentNode;
    let indexTH = -1;

    let iDir = thTgt.getElementsByTagName("i")[0];// <i> element for direction

    let current_sort_direction = "";
    if(iDir.classList.contains("bi-shuffle")){
        iDir.classList.remove("bi-shuffle");
        iDir.classList.add("bi-sort-down-alt");
        current_sort_direction = "down";
    }else if(iDir.classList.contains("bi-sort-down")){
        iDir.classList.remove("bi-sort-down");
        iDir.classList.add("bi-sort-down-alt");
        current_sort_direction = "down";
    }else if(iDir.classList.contains("bi-sort-down-alt")){
        iDir.classList.remove("bi-sort-down-alt");
        iDir.classList.add("bi-sort-down");
        current_sort_direction = "up";
    }else{
        return 0;
    }

    // get index of header => get the target content to be compared
    for(let i=0;i<trHead.length;i++){
        if(thTgt === trHead[i]){
            indexTH = i;
        }
    }
    // console.log(tgtTbl.childNodes.length)
    // => arrange table again by indicating array
    let aoTr = tgtTbl.getElementsByTagName("tr");
    let orgAoTr = new Array();
    for(i=0;i<aoTr.length;i++){
        orgAoTr.push(aoTr[i].cloneNode(true));
    }
    //notice: canvas "content" is not part of the DOM and can't be copied by DOM method. However, it's quite easy to call clonedCanvas.getContext('2d').drawImage(originalCanvas, 0,0) which will draw the original canvas on the cloned one.

    // => control the array
    let tmpA = new Array();
    for(let i=1;i<aoTr.length;i++){
        let tmpO = new Object();
        tmpO["index"] = i;
        tmpO["org"] = aoTr[i].getElementsByTagName("td")[indexTH].innerText;
        tmpO["strMod"] = tmpO["org"].replace(/\s+/,"");
        let tmpO2 = /^[-\.\d]+/.exec(aoTr[i].getElementsByTagName("td")[indexTH].innerText);
        if(tmpO2 !== null){
            if(tmpO2[0] === "-") {
                tmpO["tgtNum"] = null;
            }else{
                tmpO["tgtNum"] = tmpO2[0];
            }
        }else{
            tmpO["tgtNum"] = null;
        }
        // tmpO["epoch"] = new Date(tmpO["org"]).getTime();
        // tmpO["epoch"] = new Date(tmpO["org"]).valueOf();
        // if(!/^[-\.\d+]$/.test(tmpO["tgtNum"])){ //number takes precedence
        //     if(/^\d+$/.test(tmpO["epoch"])) {tmpO["tgtNum"] = tmpO["epoch"]}
        // }
        // =>
        tmpA.push(tmpO);
    }
    // => sorting: sort the indicating array
    if(current_sort_direction === "up"){
        tmpA.sort(function(a,b){
            if(b.tgtNum === null && a.tgtNum === null){
                x = a.strMod.toUpperCase();
                y = b.strMod.toUpperCase();
                if(x < y) { return 1; }
                if(x > y) { return -1; }
                return 0;
            }else{
                return b.tgtNum - a.tgtNum;
            }
        });
    }else{
        tmpA.sort(function(a,b){
            if(b.tgtNum === null && a.tgtNum === null){
                x = a.strMod.toUpperCase();
                y = b.strMod.toUpperCase();
                if(x < y) { return -1; }
                if(x > y) { return 1; }
                return 0;
            }else{
                return a.tgtNum - b.tgtNum
            }
        });
    }
    // console.log("index",indexTH, tmpA)

    // remove orginal table
    // while(tgtTbl.childNodes.length > 2){ tgtTbl.lastChild.remove();   }
    while(tgtTbl.getElementsByTagName("tr").length > 1){ tgtTbl.getElementsByTagName("tr")[tgtTbl.getElementsByTagName("tr").length-1].remove()}
    // replace by copied elements
    for(let i=1;i<orgAoTr.length;i++){
        let tgtI = tmpA[i-1]["index"];
        // console.log(i, tgtI, tmpA[i-1]["tgtNum"][0], tmpA[i-1]["srvN"], aoTr[tgtI])
        tgtTbl.appendChild(orgAoTr[tgtI]);
    }
    // update the status show-off
    // update the icons of other header to be shuffer
    for(let tmpe of aoTr[0].getElementsByTagName("th")){
        if(tmpe === thTgt) continue;
        if(tmpe.getElementsByTagName("i").length > 0){
            let iDir = tmpe.getElementsByTagName("i")[0];
            if(iDir.classList.contains("bi-shuffle")){
                // keep it
            }else if(iDir.classList.contains("bi-sort-down")){
                iDir.classList.remove("bi-sort-down");
                iDir.classList.add("bi-shuffle");
            }else if(iDir.classList.contains("bi-sort-down-alt")){
                iDir.classList.remove("bi-sort-down-alt");
                iDir.classList.add("bi-shuffle");
            }else{
            }
        }
    }
}


////// TODO

FILE:: .//src_main/my.php
<?php
    // my collection of common functions
    // =================================

    function my_handler_fatal($oO=array()){
        $error = error_get_last();
        if($error !== null){
            $oO["FATAL"] = $error;
        }
        if(count($oO) > 0) echo(json_encode($oO));
    }
    
    /// 
    function my_dbg_get_some_variables(){
        session_start();//Start new or resume existing session
        $oO = array();
        $oO["GET"] = $_GET; 
        $oO["POST"] = $_POST; 
        $oO["COOKIES"] = $_COOKIE;
        $oO["SESSION"] = $_SESSION;
        $oO["SERVER"] = $_SERVER;
        $oO["GLOBALS"] = $GLOBALS;
        $oO["REQUEST"] = $_REQUEST;
        $oO["ENV"] = $_ENV;
        $oO["FILES"] = $_FILES;
        $oO["version_php"] =  phpversion();
        $oO["version_apache"] =  apache_get_version();
        $oO["version_SQLite3"] =  SQLite3::version();
        return $oO;
    }
?>

FILE:: .//src_modules/PLPI_observation/PLPI_obs_sqlite3.class.php
<?php
require_once "../../src_modules/login/users_sqlite3_OTP.class.php";
date_default_timezone_set("Asia/Ho_Chi_Minh");

class PLPI_observation
{
    private $tgtd = "../../data/by_sqlite3";
    private $dbname = "PLPI_obs_settings.db";

    private $thisUser = null;

    function __construct(){
        if(!file_exists($this->tgtd)){
            try {
                mkdir($this->tgtd,0777,true);
            }catch(Exception $e){
                return $e;
            }
        }else{}

        $this->init_table();
        $this->thisUser = new User_by_sqlite3;

        return "OK";
    }

    function init_table(){
        $db = new SQLite3($this->tgtd . "/" . $this->dbname);
        if(!$db) return "103: Cannot access database: " . $db->lastErrorMsg();

        /// => MATCHES table
        $sql ="CREATE TABLE IF NOT EXISTS
            PLPI_OBS_SETTINGS (
                prjN        TEXT PRIMARY KEY,
                disk_n_cluster_paths TEXT ,
                user_n_cluster_accounts TEXT ,
                PVPI_prjN TEXT ,
                modify_on,
                modify_by,
                register_on,
                register_by
            );";
        
        // create table
        $retExec = $db->exec($sql);
        if(!$retExec) return $db->lastErrorMsg();

        $db->close();
        return "OK";
    }

    function reg_setting($prjN="",$info=array()){
        // newly register or modify a match by its id
        if($info === array() ) return "101: nothing to reg or mod";//nothing to reg or mod

        // check the info if there is invalid combination
        // foreach(array('match_datetime','teamA','teamB') as $chkkey){
        //     if(!isset($info[$chkkey])) return "NG: must have '$chkkey'";
        //     if($info[$chkkey] === "") return "NG: '$chkkey' must not empty";
        // }

        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname,"PLPI_OBS_SETTINGS");
        if(!$db) return "NG: NotRegYet";

        if($prjN === "") return "NG: project name must not empty.";

        // check if already existed the project setting
        $sql = "SELECT * from PLPI_OBS_SETTINGS WHERE prjN=\"$prjN\";";
        $query = $db->query($sql);
        $fA = false;
        if($query) $fA = $query->fetchArray(SQLITE3_ASSOC);
        if($fA){
            // already existed, modify only
            $info["modify_on"] = time();
            $info["modify_by"] = $this->thisUser->login_email;
            $updStr = "";
            foreach($info  as $keyw => $value){
                if(is_int($value) || is_long($value) || is_null($value) || is_float($value)){
                    $updStr .= $keyw . " = " . $value . " , ";
                }else{
                    $updStr .= $keyw . " = '" . $value . "' , ";
                }
            }
            if($updStr !== ""){
                $updStr = preg_replace("/ , $/","",$updStr);
                $sql = "UPDATE PLPI_OBS_SETTINGS SET $updStr WHERE prjN=\"$prjN\"";
                $info["sql"] = $sql;
                $info["exec_stt"] = $db->exec($sql);
                $info["exec_msg"] = $db->lastErrorMsg();
            }
            // return array("info" => $info);
        }else{
            // create new bet
            $info["register_on"] = time();
            $info["register_by"] = $this->thisUser->login_email;
            $updStrHeads = "(";
            $updStrValues = "VALUES(";
            foreach($info  as $keyw => $value){
                $updStrHeads .= $keyw . " , ";
                if(is_int($value) || is_long($value) || is_null($value) || is_float($value)){
                    $updStrValues .= $value . " , ";
                }else{
                    $updStrValues .= "'" . $value . "' , ";
                }
            }
            $updStrHeads = preg_replace("/, $/","",$updStrHeads);
            $updStrValues = preg_replace("/, $/","",$updStrValues);
            $updStrHeads .= ")";
            $updStrValues .= ")";
            if($updStrHeads !== "()" && $updStrValues !== "VALUES()"){
                $sql = "INSERT INTO PLPI_OBS_SETTINGS $updStrHeads $updStrValues ;";
                $info["sql"] = $sql;
                $info["exec_stt"] = $db->exec($sql);
                $info["exec_msg"] = $db->lastErrorMsg();
            }
            // return array("info" => $info);
        }

        $db->close();
        return "OK:$prjN";//OK
    }

    function del_setting($prjN=""){
        if($prjN === "") return "NG: there is no prjN to delete.";
        if($this->thisUser->role !== "Admin" && $this->thisUser->role !== "AdminWC") return "NG: User not a valid role.";
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname,"PLPI_OBS_SETTINGS");
        if(!$db) return "NG: NotRegYet";
        $sql = "DELETE FROM PLPI_OBS_SETTINGS WHERE prjN=\"$prjN\";";
        $info["sql"] = $sql;
        $info["exec_stt"] = $db->exec($sql);
        $info["exec_msg"] = $db->lastErrorMsg();
        $db->close();
        return "OK:$prjN";//OK
    }

    function get_setting_info($prjN=""){
        $oO = array();
 
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname,"PLPI_OBS_SETTINGS");
        if(!$db) return "NG: NotRegYet";

        // => header
        array_push($oO,array());
        $sql = "PRAGMA table_info(PLPI_OBS_SETTINGS)";
        $query = $db->query($sql);
        while($fA = $query->fetchArray(SQLITE3_ASSOC)){
            array_push($oO[0],$fA["name"]);
        }

        // => content
        $sql = "SELECT * from PLPI_OBS_SETTINGS";
        if($prjN !== "" && $prjN !== "all") $sql .= " WHERE prjN=\"$prjN\";";
        // $oO["sql"] = $sql;//debug
        $query = $db->query($sql);
        if(!$query) return $oO;
        while($fA = $query->fetchArray(SQLITE3_ASSOC)){
            array_push($oO,array_values($fA));
        }
 
        $db->close();
        return $oO;
    }

    function get_setting_table_header(){
        // return array of header in sqlite3 table, without some internal controlling names
        $oO = array();
 
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname,"PLPI_OBS_SETTINGS");
        if(!$db) return false;

        // => header
        $sql = "PRAGMA table_info(PLPI_OBS_SETTINGS)";
        $query = $db->query($sql);
        while($fA = $query->fetchArray(SQLITE3_ASSOC)){
            if($fA["name"] === "id"
            || $fA["name"] === "register_on"
            || $fA["name"] === "register_by"
            || $fA["name"] === "modify_on"
            || $fA["name"] === "modify_by"
            ) continue;
            array_push($oO,$fA["name"]);
        }
 
        $db->close();
        return $oO;
    }

    ///////////////////////
    private function is_tbl_existed($dbPath="",$tbln=""){
        if($dbPath === "") return false;
        if(!file_exists($dbPath)) return false;
        if(filesize($dbPath) === 0) return false;
        $db = new SQLite3($dbPath);
        if(!$db) return false;
        $sql = "SELECT * from sqlite_master WHERE name='".$tbln."' and type='table'";
        if(!$db->query($sql)) {$db->close();return false;}
        return $db;
    }

    //////////////////////// Observation content
    

    /////////////////////////////////////////////////////
}
?>

FILE:: .//src_modules/PLPI_observation/PLPI_observation.js
// https://developer.mozilla.org/en-US/docs/Glossary/IIFE

(function(){

    // => load css for PVPI
    // my_add_css("ss_google_icon","https://fonts.googleapis.com/icon?family=Material+Icons");
    // my_add_css("ss_PVPI_org","css/PVPI_org.css");

    // //Private Property
    // var isHot = true;
    // some fontsize controlling the size of displaying
    var fs_circle = "20px";//
    var fs_label = "15px";//
    var fs_number = "12px";//

    // //Public Property
    // skillet.ingredient = "Bacon Strips";


    /////////////////////////////////////////////////////////////
    // => public methods
    /////////////////////////////////////////////////////////////

    // =>
    PLPI_observation.dsp_all_settings = function(rtnO){
        console.log(rtnO)
        if(rtnO.length === 0) return;
        if(!rtnO.hasOwnProperty("cntData")) return;
        if(rtnO["cntData"].length === 0) return;
        if(document.getElementById("mainSide") === null) return;
        while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}

        let eTop = my_create("div",undefined,["w3-responsive"],{"position":"relative"},{"id":"tbl_all_settings"});
        let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable"],{"min-width":"100%"});
        let eTbd = my_create("tbody",undefined,["w3-small"],{"min-width":"100%"});
        let eAdd = my_create("div","Add new",["w3-btn","w3-card-2","w3-border","w3-hover-indigo"],{"width":"100%"});
        eAdd.addEventListener("click",function(){dsp_form_setting("")});

        // reg columns
        let regCols = [];
        for(let i=0;i<rtnO["cntData"][0].length;i++){
            if(0
            || rtnO["cntData"][0][i] === "modify_on"
            || rtnO["cntData"][0][i] === "modify_by"
            || rtnO["cntData"][0][i] === "register_on"
            || rtnO["cntData"][0][i] === "register_by"
            ) continue;
            regCols.push(i);
        }
        // header
        let thData = [];
        for(let i of regCols) { thData.push(rtnO["cntData"][0][i]); }
        thData.push("");//preserve room for added button later
        thData.push("");
        eTbd.appendChild(my_add_row(thData,"th",{"padding":"2px"}));

        // content
        for(let j=1;j<rtnO["cntData"].length;j++){
            let tdData = [];
            for(let i of regCols) { 
                tdData.push(rtnO["cntData"][j][i].replace(/\s*,\s*/g,"<br>")); 
            }
            // => add some more buttons
            tdData.push("<i class='bi bi-bandaid    w3-button w3-hover-orange w3-xlarge w3-round' style='padding:0'></i>")
            tdData.push("<i class='bi bi-patch-plus w3-button w3-hover-orange w3-xlarge w3-round' style='padding:0'></i>")
            tdData.push("<i class='bi bi-trash      w3-button w3-hover-orange w3-xlarge w3-round' style='padding:0'></i>")

            // => layout
            eTbd.appendChild(my_add_row(tdData,"td",{"text-align":"center","vertical-align":"middle","padding":"2px","border":"1px dotted dimgrey","border-radius":"2px"}));
        }

        for(let tmpe of eTbd.getElementsByClassName("bi-bandaid")){
            tmpe.addEventListener("click",function(){dsp_form_setting(this.parentNode.parentNode.childNodes[0].innerText);});
        }
        for(let tmpe of eTbd.getElementsByClassName("bi-patch-plus")){
            tmpe.addEventListener("click",function(){
                // console.log(dsp_notification("Not applied yet.","Error"))
                dup_form_setting(this.parentNode.parentNode.childNodes[0].innerText)
            });
        }
        for(let tmpe of eTbd.getElementsByClassName("bi-trash")){
            tmpe.addEventListener("click",function(){
                // console.log(dsp_notification("Not applied yet.","Error"))
                del_setting(this.parentNode.parentNode.childNodes[0].innerText)
            });
        }
        // layout-ing
        eTbl.appendChild(eTbd);
        eTop.appendChild(eTbl);
        eTop.appendChild(eAdd)
        mainSide.appendChild(eTop);

        return 1;
    }
    
    // =>
    PLPI_observation.dsp_top_view = function(rtnO){
        // console.log(rtnO.cntData)
        // retrieve and analyze settings (per project)
        let oPrjD = {};// object of project data (as settings)
        for(let i=1;i<Object.keys(rtnO.cntData).length;i++){
            oPrjD[rtnO.cntData[i][0]] = {};
            for(let j=1;j<rtnO.cntData[i].length;j++){
                // 0 index is for project name
                oPrjD[rtnO.cntData[i][0]][rtnO.cntData[0][j]] = rtnO.cntData[i][j];
            }
        }
        // console.log(oPrjD)

        // gen sum element as project setting
        // //////////////////////////////////
        // => top
        let eTop = null;
        if(document.getElementById("PLPI_obs_sum") === null){
            while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
            eTop = my_create("div",undefined,
                ["w3-card-2","w3-light-grey","w3-row-padding"],
                {},
                {id:"PLPI_obs_sum"})
            mainSide.appendChild(eTop);
        }else{
            eTop = document.getElementById("PLPI_obs_sum");
        }

        // => individual
        let oPrjEle = {};
        for(let tmpe of eTop.getElementsByClassName("myCnt-obs-prjN")){
            oPrjEle[tmpe.innerText] = tmpe.parentNode;
        }
        for(let prjN in oPrjD){
            if(!oPrjEle.hasOwnProperty(prjN)){
                let tmpe = gen_PLPI_obs_ind(prjN);
                eTop.appendChild(tmpe);
                oPrjEle[prjN] = tmpe;
            }else{}
        }
        // console.log(oPrjEle)

        // => update content
        for(let prjN in oPrjEle){
            update_obs_content(oPrjEle[prjN],prjN);
        }

        return 1;
    }

    PLPI_observation.upd_PVPI_unique_session = function(){
        // update the display for PVPI unique session
        if(document.getElementById("PVPI_dsp_unq") === null) return 0;
        let prjN = PVPI_dsp_unq.getElementsByClassName("myCnt-PVPI-prjN")[0].innerText;
        let unique = PVPI_dsp_unq.getElementsByClassName("myCnt-PVPI-unique")[0].innerText;
        console.log("updating ", prjN, unique)
        dsp_PVPI_unique_session(prjN,unique);
        return 1;
    }


    /////////////////////////////////////////////////////////////
    // private functions
    /////////////////////////////////////////////////////////////
    
    // => Working with setting

    function dsp_form_setting(prjN,newPrjN){
        console.log("working on prjN='"+prjN+"'")
        let sf = "src_modules/PLPI_observation/rtn_data_n_reg_setting.php";
        my_ajax_get(sf,[{prjN:prjN}],function(rtnO){
            if(newPrjN !== undefined && newPrjN !== null && newPrjN !== "") rtnO.cntData[0].value = newPrjN;//very dangerous
            let tgtForm  = my_gen_form(rtnO,function(tgtForm,rtnO){
                tgtForm.remove();
                console.log(rtnO);//after-mod status
                my_ajax_get("./src_modules/PLPI_observation/rtn_data_n_reg_setting.php",[{prjN:"all"}],PLPI_observation.dsp_all_settings)
            });
            // => display the form
            if(tgtForm !== null){
                // => modify the form for supporting the input of list of user/ disk/ ...
                for(let tmpe of tgtForm.getElementsByTagName("label")){
                    if(tmpe.innerText.search(/_n_cluster_/) === -1) continue;//out-of-scope
                    tmpe.appendChild(my_create("i",undefined,["bi-three-dots","w3-padding"]))
                    tmpe.style.cursor = "pointer";
                    tmpe.classList.add("w3-hover-indigo");
                    tmpe.addEventListener("click",function(){
                        dsp_support_input_array_to_string(this.nextSibling);
                    })
                }
                
                // =>
                body.appendChild(tgtForm);
                tgtForm.style.display = "block";
            }
        });
        return;
    }

    function dsp_support_input_array_to_string(tgte){
        // console.log(tgte)
        let eTop = null;
        if(document.getElementById("e_support_array_to_string") === null){
            eTop = my_create("div",undefined,["w3-container"],{},{id:"e_support_array_to_string"})
            let eBtnClose = my_create("span","&times;",["w3-button","w3-display-topright"],{},{"onclick":"this.parentNode.parentNode.parentNode.remove()"})
            eTop.appendChild(eBtnClose);
            body.appendChild(my_create("div",my_create("div",eTop,["w3-modal-content"]),["w3-modal"],{},{}));
        }else{
            eTop = document.getElementById("e_support_array_to_string");
        }
        while(eTop.childNodes.length>1)(eTop.lastChild.remove())

        // =>
        eTop.appendChild(my_create("label","Support for '" +  tgte.name + "'"))
        let eSub = my_create("ul");
        for(let tmpv of tgte.value.split(/\s*,\s*/)){
            let eI = my_create("li")
            eI.appendChild(my_create("span",tmpv))
            eI.appendChild(my_create("i",undefined,["bi-trash","w3-button","w3-hover-red","w3-round"],{"padding":"3px"}))
            eI.lastChild.addEventListener("click",function(){eI.remove();})
            eSub.appendChild(eI)
        }
        // =>
        let eI = my_create("li",undefined);
        eI.appendChild(my_create("input",undefined))
        eI.appendChild(my_create("i",undefined,["bi-plus-circle","w3-hover-indigo","w3-round"],{"padding":"5px","cursor":"pointer"}))
        eI.lastChild.addEventListener("click",function(){
            if(this.previousSibling.value === null) return;
            if(this.previousSibling.value === undefined) return;
            if(this.previousSibling.value === "") return;
            // => some checker should be here
            let tmpa = this.previousSibling.value.split(":")
            if(tmpa.length !== 2) return;
            if(tmpa[0] !== "RVC" && tmpa[0] !== "klsl" && tmpa[0] !== "mesl") return;
            if(tmpa[1] === "") return;

            // => add to upper part
            let tmpe = my_create("li",undefined)
            tmpe.appendChild(my_create("span",this.previousSibling.value))
            tmpe.appendChild(my_create("i",undefined,["bi-trash","w3-button","w3-hover-red","w3-round"],{"padding":"3px"}))
            tmpe.lastChild.addEventListener("click",function(){tmpe.remove();})
            eSub.insertBefore(tmpe,eI)
        })
        eSub.appendChild(eI)

        // =>
        eSub.appendChild(my_create("hr"))
        let eB = my_create("button","Submit",["w3-button","w3-block","w3-hover-indigo","w3-round"]);
        eB.addEventListener("click",function(){
            let theStr = "";
            for(let tmpe of eSub.querySelectorAll("li span")){
                theStr += tmpe.innerText + ",";
            }
            theStr = theStr.replace(/,$/,"")
            // =>
            tgte.value = theStr;
            // =>
            eTop.firstChild.click();
        })
        eSub.appendChild(eB)

        eTop.appendChild(eSub)
        // =>display it
        eTop.parentNode.parentNode.classList.add("w3-show");
        return;
    }

    function del_setting(prjN){
        if(prjN === null) return;
        if(prjN === undefined) return;
        if(prjN === "") return;
        if(! confirm("Delete setting for prjN='"+prjN+"', cannot revert this action.<br>Are you sure?")) return;
        let sf = "src_modules/PLPI_observation/rtn_data_n_reg_setting.php"
        my_ajax_get(sf,[{mode:"del",prjN:prjN}],function(rtnO){
            console.log("Del return data:",rtnO);
            // display all settings again
            my_ajax_get("./src_modules/PLPI_observation/rtn_data_n_reg_setting.php",[{prjN:"all"}],PLPI_observation.dsp_all_settings)
        });
        return;
    }

    function dup_form_setting(prjN){
        if(prjN === undefined) return;
        if(prjN === null) return;
        if(prjN === "") return;

        console.log("working on prjN='"+prjN+"'")
        // => get current list of prjN
        if(document.getElementById("tbl_all_settings") === null) return;
        let aoTr = tbl_all_settings.getElementsByTagName("tr");
        let aoPrjN = [];
        for(let i=1;i<aoTr.length;i++){
            aoPrjN.push(aoTr[i].getElementsByTagName("td")[0].innerText);
        }
        
        // try to get new name from user
        let newPrjN = prjN;
        let flgNameOK = false;
        while(!flgNameOK){
            newPrjN = prompt("You're copying setting from prjN='"+prjN+"', please inform a new project name:",prjN);
            if(newPrjN === null){
                // cancel was chosen
                break;
            }else if(newPrjN === undefined){
                alert("A undefined detected, please do it again.")
            }else if(newPrjN === ""){
                alert("An empty detected, please do it again.")
            }else{
                if(aoPrjN.length > 0 && aoPrjN.indexOf(newPrjN) > -1){
                    alert("Your new name='"+newPrjN+"' already existed, please do it again.")
                }else{
                    flgNameOK = true;
                }
            }
        }
        if(!flgNameOK) return;
        // console.log(aoPrjN,newPrjN)
        
        // make it a form
        dsp_form_setting(prjN,newPrjN);

        return;
    }



    // => Working with observation content

    function gen_PLPI_obs_ind(prjN){
        let eTop = my_create("div",undefined,["myCnt-PLPI-obs-ind","w3-col","l3","m4","s6"],{"padding":"5px ","margin":"5px 0 5px 0"},{});
        let eContent = my_create("div");//content

        eContent.appendChild(my_create("h2",prjN,["myCnt-obs-prjN"],{}));
        eContent.appendChild(my_create("hr",undefined,["w3-border-indigo"],{"margin":"3px"}))

        let eItem;
        eItem = my_create("div",undefined,[],{"clear":"both"})
        eItem.appendChild(my_create("label","Disk",["w3-left"],{"font-size":fs_label}))
        eItem.appendChild(my_create("div",undefined,["w3-right","myCnt-obs-disk"],{"font-size":fs_circle,"height":fs_circle}))
        eItem.lastChild.appendChild(gen_nothing_to_show())
        eContent.appendChild(eItem);

        eItem = my_create("div",undefined,[],{"clear":"both"})
        eItem.appendChild(my_create("label","Users' Jobs",["w3-left"],{"font-size":fs_label}))
        eItem.appendChild(my_create("div",undefined,["w3-right","myCnt-obs-inscope-jobs"],{"font-size":fs_circle,"height":fs_circle}))
        eItem.lastChild.appendChild(gen_nothing_to_show())
        eContent.appendChild(eItem);

        eItem = my_create("div",undefined,[],{"clear":"both"})
        eItem.appendChild(my_create("label","PVPI",["w3-left"],{"font-size":fs_label}))
        eItem.appendChild(my_create("div",undefined,["w3-right","myCnt-obs-PVPI"],{"font-size":fs_circle,"height":fs_circle}))
        eItem.lastChild.appendChild(gen_nothing_to_show())
        eContent.appendChild(eItem);
        
        eItem = my_create("div",undefined,[],{"clear":"both"})
        eItem.appendChild(my_create("label","PL-task",["w3-left"],{"font-size":fs_label}))
        eItem.appendChild(my_create("div",undefined,["w3-right","myCnt-obs-PLtask"],{"font-size":fs_circle,"height":fs_circle}))
        eItem.lastChild.appendChild(gen_nothing_to_show())
        eContent.appendChild(eItem);

        // =>
        eTop.appendChild(eContent)
        return eTop;
    }

    function update_obs_content(tgte,prjN){
        dsp_notification("Updating '" + prjN + "'","Info")
        let eWait = dsp_wait();
        my_ajax_get("./src_modules/PLPI_observation/rtn_data_obs.php",[{prjN:prjN}],function(rtnO){
            let cntD = rtnO.cntData;
            // => for obs disk
            if(cntD.hasOwnProperty("disk") && Object.keys(cntD.disk).length > 0)
                update_obs_content_disk(tgte.getElementsByClassName("myCnt-obs-disk")[0],cntD.disk)
            // => for obs jobs
            if(cntD.hasOwnProperty("inscope_jobs") && Object.keys(cntD["inscope_jobs"]).length > 0)
                update_obs_content_inscope_jobs(tgte.getElementsByClassName("myCnt-obs-inscope-jobs")[0],cntD["inscope_jobs"])
            // => for obs PVPI
            if(cntD.hasOwnProperty("PVPI") && Object.keys(cntD.PVPI).length > 0)
                update_obs_content_PVPI(tgte.getElementsByClassName("myCnt-obs-PVPI")[0],cntD.PVPI)
            // => for obs PLtask
            if(cntD.hasOwnProperty("PLtask") && Object.keys(cntD.PLtask).length > 0)
                update_obs_content_PLtask(tgte.getElementsByClassName("myCnt-obs-PLtask")[0],cntD.PLtask)

            // =>
            dsp_notification("Updated '" + prjN + "'","Info")
            eWait.remove();
        });

        return 1;
    }

    function update_obs_content_disk(tgte,oD){
        // console.log(tgte,oD)
        if(oD === null || oD === undefined || Object.keys(oD).length === 0) return 0;
        while(tgte.childNodes.length > 0) {tgte.lastChild.remove()}

        for(let path in oD){
            let eTop = my_create("div",undefined,["my-tooltip"])
            num = oD[path]["disk"]["used%"].replace("%","")
            if(Number(oD[path]["disk"]["used%"].replace("%","")) - Number(num) > 0) num = oD[path]["inode"]["used%"].replace("%","");

            eTop.appendChild(my_create("i",undefined,["bi-circle-fill"],
                {"color":color_by_percent(oD[path]["disk"]["used%"],oD[path]["inode"]["used%"])}
            ))
            // real number
            eTop.appendChild(my_create("span",num,[],{"position":"absolute","top":"15%","left":"15%","font-size":fs_number}));

            let eMore = my_create("div",undefined,["my-tooltip-content-left","w3-tiny"])
            eMore.appendChild(my_create("span",path.split("/").pop(),["w3-block"]))
            eMore.appendChild(my_create("span","Disk used%: " + oD[path]["disk"]["used%"],["w3-block"]))
            eMore.appendChild(my_create("span","Disk valid (GB): " + (parseInt(oD[path]["disk"]["avai"]) / (1024*1024)).toFixed(1),["w3-block"]))
            eMore.appendChild(my_create("span","Inode used%: " + oD[path]["inode"]["used%"],["w3-block"]))

            // =>
            eTop.appendChild(eMore);
            tgte.appendChild(eTop);

            // =>
            eTop.addEventListener("click",function(){
                // =>remove other sub-info
                for(let tmpe of mainSide.childNodes){
                    if(tmpe.id === "PLPI_obs_sum") continue;
                    if(tmpe.id === "disk_inode_graphs") continue;
                    if(tmpe.nodeType !== 1) continue;
                    tmpe.remove();
                }
                
                // =>
                usageDiskInode.dsp_n_upd_disk_inode_graphs_top(PLPI_obs_sum,path);
                // =>
                let tmpa = path.split(":")
                if(tmpa.length !== 2) return 0;
                let eWait = dsp_wait();
                 // ajax- for 24h (default) data
                my_ajax_get("src_modules/usageDiskInode/chkDiskInode.php",[{q:tmpa[0],path:tmpa[1],mode:"24h"}],function(rtnO){
                    // console.log(rtnO)
                    usageDiskInode.dsp_n_upd_disk_inode_graphs_top(PLPI_obs_sum,path,rtnO.data)
                    eWait.remove();
                });
            })
        }

        return 1;
    }

    function update_obs_content_inscope_jobs(tgte,oD){
        // console.log(tgte,oD)
        if(oD === null || oD === undefined || Object.keys(oD).length === 0) return 0;
        while(tgte.childNodes.length > 0) {tgte.lastChild.remove()}

        for(let keyw of ["run","pend","unknown"]){
            let tmpe = my_create("div",undefined,["my-tooltip"]);
            let num = oD["#all_jobs_"+keyw];
            let bgColor = "gray";
            let color = "gray";
            if(num === 0){
                if(oD["#all_jobs_run"] !== 0 
                || oD["#all_jobs_pend"] !== 0
                || oD["#all_jobs_unknown"] !== 0
                ){
                    bgColor = "rgb(60, 179, 113)";//green like
                    color = "rgb(60, 179, 113)";
                }else{}
            }else{
                if(keyw === "pend" || keyw === "unknown"){
                    bgColor = "rgb(255, 10, 10)";// red-like
                    color = "yellow";
                }else{
                    bgColor = "black";
                    color = "white";
                }
            }

            //
            tmpe.appendChild(my_create("i",undefined,["bi-circle-fill"],{"color":bgColor}));//dump circle

            // real number
            tmpe.appendChild(my_create("span",num,[],{"position":"absolute","top":"15%","left":"15%","color":color,"font-size":fs_number}));
            
            // more info when hovering
            let sMore = keyw.toUpperCase() + " (" + num + ")"  + "<br><hr style='margin:0'>";
            let tmpo = {};
            for(let jobId in oD["by_"+keyw]){
                let unique = oD["by_"+keyw][jobId]["user"] + "/" + oD["by_"+keyw][jobId]["queue"];
                if(! tmpo.hasOwnProperty(unique))  tmpo[unique] = 0;
                tmpo[unique]++;
            }
            for(let unique in tmpo){
                sMore += unique + " : " + tmpo[unique] + "<br>";
            }
            tmpe.appendChild(my_create("span",sMore,["w3-tiny","my-tooltip-content-left"],{"width":'auto',"max-width":"500px","white-space":"nowrap"}));

            // =>
            tmpe.addEventListener("click",function(){
                let prjN = tgte.parentNode.parentNode.getElementsByTagName("h2")[0].innerText;
                let stat = keyw;
                exeServers.dsp_jobs_inscope_on_top(prjN,stat);
            })

            // =>
            tgte.appendChild(tmpe)
        }

        return 1;
    }

    function update_obs_content_PVPI(tgte,oD){
        // console.log(tgte,oD)
        if(oD === null || oD === undefined || Object.keys(oD).length === 0) return 0;
        while(tgte.childNodes.length > 0) {tgte.lastChild.remove()}

        let num_ongoing = 0; if(oD.hasOwnProperty("ongoing")) num = Object.keys(oD["ongoing"]).length;
        let num_24h_OK = 0; if(oD.hasOwnProperty("24h_OK")) num = Object.keys(oD["24h_OK"]).length;
        let num_24h_NG = 0; if(oD.hasOwnProperty("24h_NG")) num = Object.keys(oD["24h_NG"]).length;

        for(let keyw of ["ongoing","24h_OK","24h_NG"]){
            let tmpe = my_create("div",undefined,["my-tooltip"]);
            let num = 0; 
            if(oD.hasOwnProperty(keyw)) num = Object.keys(oD[keyw]).length;
            let bgColor = "gray";//gray like
            let color = "gray";
            if(num === 0){
                if(keyw === "24h_NG" && (num_ongoing !== 0 || num_24h_OK !== 0)){
                    bgColor = "rgb(60, 179, 113)";//green like
                    color = "rgb(60, 179, 113)";
                }else{}
            }else{
                if(keyw === "24h_NG"){
                    bgColor = "rgb(255, 10, 10)";// red-like
                    color = "yellow";
                }else{
                    bgColor = "black";
                    color = "white";
                }
            }

            //
            tmpe.appendChild(my_create("i",undefined,["bi-circle-fill"],{"color":bgColor}));//dump circle

            // real number
            tmpe.appendChild(my_create("span",num,[],{"position":"absolute","top":"15%","left":"15%","color":color,"font-size":fs_number}));
                        
            // more info when hovering
            let eMore = my_create("div",undefined,["w3-tiny","my-tooltip-content-left"],{"width":'auto'});
            eMore.appendChild(my_create("div",keyw.toUpperCase() + " (" + num + ")"));
            eMore.appendChild(my_create("hr",undefined,[],{"margin":0}));

            let tmpo = {};
            for(let unique in oD[keyw]){
                if(! tmpo.hasOwnProperty(unique))  tmpo[unique] = 0;
                tmpo[unique]++;
            }
            for(let unique in tmpo){
                // => temp data for the span of unique info
                let eMoreI = my_create("div",undefined,["w3-hover-black","w3-hover-shadow"],{"border-top":"1px solid blue"});
                let tmpa = unique.split(/:/)
                let site = tmpa[0]
                tmpa = tmpa[1].split(/__/g)
                let user = tmpa[0]
                let host = tmpa[1]
                let staE = tmpa[2]
                let oDT = new Date(Number(staE) * 1000)
                let eMoreI1 = my_create("span",user + "|"+shorten_DateTime(oDT),["w3-button","w3-hover-indigo"],{"text-align":"left","width":"100%","padding":"3px"});
                eMoreI.appendChild(eMoreI1)
                eMoreI1.addEventListener("click",function(){
                    // =>
                    for(let tmpe of mainSide.childNodes){
                        if(tmpe.id === "PLPI_obs_sum") continue;
                        if(tmpe.id === "PVPI_dsp_unq") continue;
                        if(tmpe.nodeType !== 1) continue;
                        tmpe.remove();
                    }

                    let tmpa = unique.split(':');
                    if(tmpa.length != 2) return 0;
                    // =>
                    dsp_PVPI_unique_session(tmpa[0],tmpa[1]);
                })
                
                // => more info of NG
                if(keyw === "24h_NG"){
                    if(Object.keys(oD[keyw][unique]["problem"]).length > 0){
                        let eMoreI2 = my_create("ul",undefined,["w3-ul"],{"margin-left":"12px"})
                        for(let runk in oD[keyw][unique]["problem"]){
                            let eMoreI3 = my_create("li",undefined,[],{"padding":0})
                            eMoreI3.appendChild(my_create("span",runk))
                            eMoreI3.appendChild(my_create("div",oD[keyw][unique]["problem"][runk],[],{"margin":"0 0 5px 15px","max-width":"300px"}))
                            eMoreI2.appendChild(eMoreI3)
                        }
                        eMoreI.appendChild(eMoreI2);
                    }else{}
                }else{}

                eMore.appendChild(eMoreI)
            }
            tmpe.appendChild(eMore);
            // tmpe.appendChild(my_create("span",sMore,["w3-tiny","my-tooltip-content-left"],{"width":'auto',"max-width":"500px"}));

            // =>
            tgte.appendChild(tmpe)
        }

        return 1;
    }

    function update_obs_content_PLtask(tgte,oD){
        console.log(tgte,oD)
        if(oD === null || oD === undefined || Object.keys(oD).length === 0) return 0;
        while(tgte.childNodes.length > 0) {tgte.lastChild.remove()}
        
        
        return 1;
    }

    function gen_nothing_to_show(){
        let eTop = my_create("i",undefined,["bi-exclamation-circle","my-tooltip"]);
        eTop.appendChild(my_create("span","Nothing to show",["w3-tiny","my-tooltip-content-left"]))
        eTop.lastChild.style.width = "50px";
        return eTop;
    }

    function color_by_percent(diskPercent, inodePercent){
        let num1 = parseInt(diskPercent);
        let num2 = 0; if(inodePercent !== undefined) num2 = parseInt(inodePercent);
        let num = num1; if(num2 > num1) num = num2;
        if(num === 100){    return "rgb(255, 10, 10)";
        }else if(num > 95){ return "rgb(255, 99, 71, 0.9)";
        }else if(num > 91){ return "rgb(255, 99, 71, 0.8)";
        }else if(num > 87){ return "rgb(255, 99, 71, 0.7)";
        }else if(num > 85){ return "rgb(255, 99, 71, 0.5)";
        }else if(num > 80){ return "rgb(255, 99, 71, 0.5)";
        }else if(num > 50){ return "rgb(60, 179, 113, 0.5)";
        }else{ return "rgb(60, 179, 113, 0.7)";
        }
    }

    function dsp_PVPI_unique_session(prjN,unique){
        if(document.getElementById("mainSide") === null) return 0;//
        if(document.getElementById("PLPI_obs_sum") === null) return 0; // must called from PLPI observation summary
        PLPI_obs_sum.style.padding = 'initial';

        let eTop = null;
        if(document.getElementById("PVPI_dsp_unq") === null){
            eTop = my_create("div",undefined,["w3-display-container"],{},{id:"PVPI_dsp_unq"})
            mainSide.appendChild(eTop);
        }else{
            eTop = document.getElementById("PVPI_dsp_unq");
        }
        while(eTop.childNodes.length > 0) { eTop.lastChild.remove() }
        // => for some controlling variables
        eTop.appendChild(my_create("span",prjN,["myCnt-PVPI-prjN"],{"display":"none"}))
        eTop.appendChild(my_create("span",unique,["myCnt-PVPI-unique"],{"display":"none"}))
        // =>
        let eTitle = my_create("h3",
            "PVPI session info: " + prjN + " / " + unique,
            ["w3-yellow"],
            {"position":"sticky","top":0,"margin-top":"30px"},
            {});
        // => add a closing button
        eTitle.appendChild(my_create("span","X",["w3-container","w3-display-topright","w3-hover-red"],{},{"onclick":"this.parentNode.parentNode.remove()"}))

        eTop.appendChild(eTitle);

        let eUnq = my_create("div","Updating, please wait ...",["w3-animate-fading"])

        // =>
        let eWait = dsp_wait();
        my_ajax_get("src_modules/PVPI_org/upDetailPVPI_session.php",[{prjN:prjN,unique:unique}],function(strHTML){
            eUnq.classList.remove("w3-animate-fading")
            eUnq.innerHTML = strHTML;
            // modify 
            if(eUnq.getElementsByTagName("p").length > 0){
                // => modify the format (smaller)
                eUnq.getElementsByTagName("p")[0].style.margin = 0;
                eUnq.getElementsByTagName("p")[0].classList.add("w3-tiny","w3-text-grey");
                let aoTd = eUnq.getElementsByTagName("td");
                for(let td of aoTd) {
                    td.style.paddingTop = "2px";
                    td.style.paddingBottom = "2px";
                    td.classList.add("w3-tiny");
                }

            }else{
                eUnq.innerHTML = "<p class=\"w3-large\">Nothing to show here</p>";
            }
            eWait.remove();
        });

        eTop.appendChild(eUnq)
        return 1;
    }

    function shorten_DateTime(dt){
        if(typeof(dt) !== "object") return dt;
        let oStr = "";
        let midNight = new Date();
        midNight.setHours(0,0,0);

        let delta = Number(dt.getTime() - midNight.getTime())/(24*3600*1000);
        if(delta > 0){          oStr = "Today@" + dt.toLocaleString("en-US",{timeStyle : "short", hourCycle : "h23"});
        }else if(delta > -1){   oStr = "YTD@"   + dt.toLocaleString("en-US",{timeStyle : "short", hourCycle : "h23"});
        }else if(delta > -2){   oStr = "DBY@"   + dt.toLocaleString("en-US",{timeStyle : "short", hourCycle : "h23"});
        }else{
            oStr = dt.toLocalString();
        }
        return oStr;
    }
        
}(window.PLPI_observation = window.PLPI_observation || {}));

FILE:: .//src_modules/PLPI_observation/rtn_data_n_reg_setting.php
<?php
// ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
// ini_set('display_startup_errors',1);
// ini_set('html_errors',1);
// error_reporting(E_ALL);

require_once '../../src_main/my.php';
require_once("PLPI_obs_sqlite3.class.php");
register_shutdown_function("my_handler_fatal");
$obs = new PLPI_observation;
date_default_timezone_set("Asia/Ho_Chi_Minh");

// return control data for generation of login form
$oO = array();

$mode = "display";
if(isset($_GET["mode"])) $mode = $_GET["mode"];
if(count(array_keys($_POST)) > 1) $mode = "reg";
$prjN = ""; if(isset($_REQUEST["prjN"])) $prjN = $_REQUEST["prjN"];

$oO["rtnCode"] = "NG: unknown reason";
$oO["cntData"] = array();
$oO["mode"] = $mode;
$oO["POST"] = $_POST;
$oO["prjN"] = $prjN;

if($mode === "display"){
    if($prjN === "all"){
        // display data for table of all settings
        $oO["cntData"] = $obs->get_setting_info("all");
        $oO["rtnCode"] = "OK";
    }else{
        // display data for setting form
        _rtn_data_for_form($oO,$prjN);
    }

}elseif($mode === "reg"){
    $oO["reg_setting_status"] = $obs->reg_setting($prjN,$_POST);//reg for existed
    $oO["rtnCode"] = "OK";

}elseif($mode === "del"){
    $oO["del_status"] = $obs->del_setting($prjN);//
    $oO["rtnCode"] = "OK";

}else{
    $oO["rtnCode"] = "NG: unknown mode='$mode'";
}

// =>
exit(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.

////////// SUB function
function _rtn_data_for_form(&$oO,$prjN=""){
    global $obs;

    if($prjN === ""){
        // empty form
        if($obs->get_setting_table_header() === false){
            echo array();
            $oO["rtnCode"] = "NG: no header.";
            exit;
        }else{}
        
        $oO["cntData"] = array();
        $oO["formAction"] = "src_modules/PLPI_observation/rtn_data_n_reg_setting.php";
        foreach($obs->get_setting_table_header() as $header){
            $type = "text";
            if(preg_match("/datetime/",$header)) $type = "datetime-local";
            if($header === "def_score_bet"){
                // this is reg by another method (table)
            }else{
                array_push($oO["cntData"],array("label" => $header, "type" => $type, "name" => $header));
            }
        }
        array_push($oO["cntData"],array("label" => "Add New", "type" => "submit"));

        $oO["rtnCode"] = "OK";

    }else{
        // form for specific prjN
        if($obs->get_setting_table_header() === false){
            echo array();
            $oO["rtnCode"] = "NG: no header.";
            exit;
        }else{}
        
        $oO["cntData"] = array();
        $oO["formAction"] = "src_modules/PLPI_observation/rtn_data_n_reg_setting.php";
        $data = $obs->get_setting_info($prjN);
        for($i=0;$i<count(array_keys($data[0]));$i++){
            $header = $data[0][$i];
            if($header === "register_on"
            || $header === "register_by"
            || $header === "modify_on"
            || $header === "modify_by"
            ) continue;
            $value = $data[1][$i];
            $type = "text";
            if(preg_match("/datetime/",$header)){
                $type = "datetime-local";
                $value = strftime('%Y-%m-%dT%H:%M:%S', $value);
            }
            if($header === "prjN"){
                array_push($oO["cntData"],array("label" => $header, "type" => $type, "name" => $header, "value" => $value, "readonly" => true));
            }elseif($header === "def_score_bet"){
                // this is reg by another method (table)
            }else{
                array_push($oO["cntData"],array("label" => $header, "type" => $type, "name" => $header, "value" => $value));
            }
        }
        array_push($oO["cntData"],array("label" => "Modify", "type" => "submit"));

        $oO["rtnCode"] = "OK";
    }
}
?>

FILE:: .//src_modules/PLPI_observation/rtn_data_obs.php
<?php
// ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
// ini_set('display_startup_errors',1);
// ini_set('html_errors',1);
// error_reporting(E_ALL);

require_once '../../src_main/my.php';
require_once("PLPI_obs_sqlite3.class.php");
register_shutdown_function("my_handler_fatal");
$obs = new PLPI_observation;
date_default_timezone_set("Asia/Ho_Chi_Minh");

$data_dir_disk = "../../data/disk_usage_collections";
$data_dir_server = "../../data/PVPI_org";
$data_dir_PVPI = "../../data/PVPI_org";
$data_dir_PVPI_manual = "../../data_manual/PVPI_org";

// return control data for generation of login form
$oO = array();

$prjN = ""; if(isset($_REQUEST["prjN"])) $prjN = $_REQUEST["prjN"];

$oO["rtnCode"] = "NG: unknown reason";
$oO["prjN"] = $prjN;//call-back info
$oO["cntData"] = array();

// =>
$setting = convert_arr_to_hash($obs->get_setting_info($prjN));
// $oO["setting"] = $setting; // dbg

// update disk info
rtn_data_disk($oO["cntData"],$setting["disk_n_cluster_paths"]);

// update server and jobs (per users)
rtn_data_server($oO["cntData"],$setting["user_n_cluster_accounts"]);

// update PVPI sum
rtn_data_PVPI_sum($oO["cntData"],$setting["PVPI_prjN"]);

// update PL-task sum

// =>
exit(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.

////////// SUB function
###
function convert_arr_to_hash($arr){
    // convert from array of 2 items (as output from class) to the hash of header and content in index 1
    $oO = array();
    if(! is_array($arr)) return array();
    if(count($arr) !== 2) return array();
    for($i=0;$i<count($arr[0]);$i++){
        $oO[$arr[0][$i]] = $arr[1][$i];
    }
    return $oO;
}
###
function rtn_data_disk(&$oO,$cntS){
    global $data_dir_disk;
    
    $cntS = preg_replace('/\s+/','',$cntS);
    foreach(preg_split('/,/',$cntS) as $item){
        $tmpa = preg_split("/:/",$item);
        if(count($tmpa) != 2) continue;
        $tgtSite = $tmpa[0];
        $tgtPath = $tmpa[1];
        // =>
        $tgtf = $data_dir_disk . "/" . $tgtSite . "_df_24h.json";
        if(file_exists($tgtf)){
            $data = array();
            try {
                $data = json_decode(file_get_contents($tgtf),true);
            }catch(Exception $e){
                $data = array();
                // $oO["error"] = $e;
            }
            if(is_array($data) && count(array_keys($data)) > 0){
                foreach($data as $type => $content){
                    if(isset($content[$tgtPath])){

                        $allDT = array_keys($content[$tgtPath]);
                        rsort($allDT);
                        if(!isset($oO["disk"])) $oO["disk"] = array();
                        if(!isset($oO["disk"][$item])) $oO["disk"][$item] = array();
                        if(!isset($oO["disk"][$item][$type])) $oO["disk"][$item][$type] = array();
                        $oO["disk"][$item][$type] = $content[$tgtPath][$allDT[0]];
                        $oO["disk"][$item][$type]['time'] = $allDT[0];
                        // break 1;
                    }
                }
            }else{
                if(!isset($oO["disk"])) $oO["disk"] = array();
                if(!isset($oO["disk"][$item])) $oO["disk"][$item] = array();
                $oO["disk"][$item]["disk"] = array();
                $oO["disk"][$item]["inode"] = array();
            }
        }
    }
    return $oO;
}
###
function rtn_data_server(&$oO,$cntS){
    global $data_dir_server;
    
    $cntS = preg_replace('/\s+/','',$cntS);

    // retrieve info from setting
    $hoClusterVsUsers = array();
    foreach(preg_split('/,/',$cntS) as $cluster_n_user){
        $tmpa = preg_split("/:/",$cluster_n_user);
        if(count($tmpa) != 2) continue;
        $tgtSite = $tmpa[0];
        $user = $tmpa[1];//account

        if(! array_key_exists($tgtSite,$hoClusterVsUsers)) $hoClusterVsUsers[$tgtSite] = array();
        if(! array_key_exists($user,$hoClusterVsUsers[$tgtSite])) $hoClusterVsUsers[$tgtSite][$user] = 0;
        $hoClusterVsUsers[$tgtSite][$user]++;
    }

    // retrieve info from database (will take time)
    foreach($hoClusterVsUsers as $cluster => $users){
        $tgtf = $data_dir_server . "/" . $cluster . "_copiedFile.txt";
        if(file_exists($tgtf)){
            $tmph = extract_servers_info($tgtf);
            // $oO["server"] = $tmph;//dgb
            // => init things
            if(!isset($oO["server"])) $oO["server"] = array();
            if(!isset($oO["server"]["#servers"])) $oO["server"]["#servers"] = 0;
            if(!isset($oO["server"]["#servers_ok"])) $oO["server"]["#servers_ok"] = 0;
            if(!isset($oO["server"]["#all_slots"])) $oO["server"]["#all_slots"] = 0;
            if(!isset($oO["server"]["#used_slots"])) $oO["server"]["#used_slots"] = 0;
            if(!isset($oO["server"]["all_mem"])) $oO["server"]["all_mem"] = 0;
            if(!isset($oO["server"]["requested_mem"])) $oO["server"]["requested_mem"] = 0;
            if(!isset($oO["server"]["#all_jobs"])) $oO["server"]["#all_jobs"] = 0;
            if(!isset($oO["server"]["#all_jobs_pend"])) $oO["server"]["#all_jobs_pend"] = 0;
            if(!isset($oO["server"]["#all_jobs_unknown"])) $oO["server"]["#all_jobs_unknown"] = 0;
            if(!isset($oO["server"]["failed_get_mem"])) $oO["server"]["failed_get_mem"] = array();
            if(!isset($oO["server"]["test"])) $oO["server"]["test"] = array();


            if(!isset($oO["inscope_jobs"])) $oO["inscope_jobs"] = array();//#notice: jobs here are in-scoped users only
            if(!isset($oO["inscope_jobs"]["#all_jobs_run"])) $oO["inscope_jobs"]["#all_jobs_run"] = 0;
            if(!isset($oO["inscope_jobs"]["#all_jobs_pend"])) $oO["inscope_jobs"]["#all_jobs_pend"] = 0;
            if(!isset($oO["inscope_jobs"]["#all_jobs_unknown"])) $oO["inscope_jobs"]["#all_jobs_unknown"] = 0;
            if(!isset($oO["inscope_jobs"]["by_run"])) $oO["inscope_jobs"]["by_run"] = array();
            if(!isset($oO["inscope_jobs"]["by_pend"])) $oO["inscope_jobs"]["by_pend"] = array();
            if(!isset($oO["inscope_jobs"]["by_unknown"])) $oO["inscope_jobs"]["by_unknown"] = array();
            
            // => sweep the data
            if(isset($tmph["_byHost_"])){
                foreach($tmph["_byHost_"] as $hostname => $info){
                    # =>
                    if($hostname === "-" || $info["lshosts_exeServer"] === "No"){
                        // maybe PEND jobs or a uknown host, or a None-exe server
                    }else if(!array_key_exists("bhosts_status",$info)){
                        // problem?
                        $oO["server"]["test"][$hostname] = $info;
                    }else{
                        $oO["server"]["#servers"]++;
                        if($info["bhosts_status"] === "ok") $oO["server"]["#servers_ok"]++;
                        if(array_key_exists("bhosts_MAX",$info)) $oO["server"]["#all_slots"] += $info["bhosts_MAX"];
                        if(array_key_exists("bhosts_RUN",$info)) $oO["server"]["#used_slots"] += $info["bhosts_RUN"];
                        if(array_key_exists("lshosts_maxmem",$info)) $oO["server"]["all_mem"] += getMem($info["lshosts_maxmem"]);
                    }


                    # =>
                    foreach($info as $keyw => $moreinfo){
                        if(preg_match('/^\d+$/',$keyw)){
                            // this is a job id
                            // =>
                            $oO["server"]["#all_jobs"] ++;
                            if($moreinfo["stat"] === "RUN"){
                            }elseif($moreinfo["stat"] === "PEND"){  $oO["server"]["#all_jobs_pend"]++;
                            }else{                                  $oO["server"]["#all_jobs_unknown"]++;
                            }
                            
                            // =>
                            $memRqt = 0;
                            if(preg_match('/.*use_mem_size=([\.\d]+)/',$moreinfo["resreq"],$aoMatches)){
                                $memRqt = floatval($aoMatches[1]);
                            }elseif(preg_match('/.*mem=([\.\d]+)/',$moreinfo["resreq"],$aoMatches)){
                                $memRqt = floatval($aoMatches[1]);
                            }else{
                                if($moreinfo["stat"] !== "PEND") 
                                    $oO["server"]["failed_get_mem"][$keyw] = $moreinfo;
                            }
                            $oO["server"]["requested_mem"]+=$memRqt;

                            // =>
                            if(array_key_exists($moreinfo["user"],$users)){
                                // =>
                                if($moreinfo["stat"] === "RUN"){
                                    $oO["inscope_jobs"]["#all_jobs_run"]++;
                                    $oO["inscope_jobs"]["by_run"][$keyw] = $moreinfo;
                                }elseif($moreinfo["stat"] === "PEND"){
                                    $oO["inscope_jobs"]["#all_jobs_pend"]++;
                                    $oO["inscope_jobs"]["by_pend"][$keyw] = $moreinfo;
                                }else{
                                    $oO["inscope_jobs"]["#all_jobs_unknown"]++;
                                    $oO["inscope_jobs"]["by_unknown"][$keyw] = $moreinfo;
                                }
                            }
                        }else{}
                    }
                }
            }else{}
        }else{}
    }
    return $oO;
}

###
function extract_servers_info($tgtf){
    // extract servers' info for servers and jobs info later
    $oO = array();
    $output = array();
    if(file_exists($tgtf)){
        // =>
        $fh = fopen($tgtf,"r");
        while(!feof($fh)) {array_push($output,trim(fgets($fh)));}
        fclose($fh);
        // =>
    }else{}

    $keyw = "";
    foreach ($output as $line) {
        $aoMatches = array();
        if(preg_match("/^START\s+(\S+)/",$line,$aoMatches)) {
            $keyw = $aoMatches[1];
            // echo "starting ... $keyw ... <br>\n";
            continue;
        }
        if(preg_match("/^END\s+(\S+)/",$line,$aoMatches))  $keyw = "";
        if($keyw === "") continue;

        #############################################
        if($keyw === "hostname"){
            // ignored
            // if(! array_key_exists("_thishost_",$oO))   $oO["_thishost_"] = array();
            // $oO["_thishost_"]["hostname"] = $line;
        #############################################
        }elseif($keyw === "top"){
            // ignored
            // if(! array_key_exists("_thishost_",$oO))   $oO["_thishost_"] = array();
            // if(preg_match("/^top/", $line)){
            //     $oO["_thishost_"]["summary"] = $line;
            // }elseif(preg_match("/^(\S+):\s+(.*)/", $line, $aoMatches)){
            //     $oO["_thishost_"][$aoMatches[1]] = $aoMatches[2];
            // }else{
            //     // echo "top: out-of-scope: '$line'<br>\n";
            // }
        #############################################
        }elseif($keyw === "bmgroup"){
            // ignored
            // if(preg_match_all("/\S+/",$line,$aoMatches)){
            //     if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
            //     if(! array_key_exists("_byHostGroup_",$oO))   $oO["_byHostGroup_"] = array();
            //     if($aoMatches[0][0] === "GROUP_NAME") continue; #this is header line
            //     for($i=1;$i<count($aoMatches[0]);$i++){
            //         if(! array_key_exists($aoMatches[0][0], $oO["_byHostGroup_"]))   $oO["_byHostGroup_"][$aoMatches[0][0]] = array();
            //         if(! array_key_exists($aoMatches[0][$i], $oO["_byHost_"]))   $oO["_byHost_"][$aoMatches[0][$i]] = array();
            //         if(! array_key_exists("_hostGroup", $oO["_byHost_"][$aoMatches[0][$i]]))   $oO["_byHost_"][$aoMatches[0][$i]]["_hostGroup_"] = "";
            //         $oO["_byHost_"][$aoMatches[0][$i]]["_hostGroup_"] .= $aoMatches[0][0];
            //         $oO["_byHostGroup_"][$aoMatches[0][0]][$aoMatches[0][$i]] = 1;
            //     }
            // }else{}
        #############################################
        }elseif($keyw === "lshosts"){
            if(preg_match_all("/\S+/",$line,$aoMatches)){
                if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                if(! array_key_exists("_byOS_",$oO))   $oO["_byOS_"] = array();
                if($aoMatches[0][0] === "HOST_NAME") continue; #this is header line
                if(! array_key_exists($aoMatches[0][0], $oO["_byHost_"])) $oO["_byHost_"][$aoMatches[0][0]] = array();
                if(! array_key_exists("lshosts_os", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_os"]        = "";
                if(! array_key_exists("lshosts_model", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_model"]     = "";
                if(! array_key_exists("lshosts_cpuf", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_cpuf"]      = "";
                if(! array_key_exists("lshosts_ncpus", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_ncpus"]     = "";
                if(! array_key_exists("lshosts_maxmem", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_maxmem"]    = "";
                if(! array_key_exists("lshosts_maxswp", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_maxswp"]    = "";
                if(! array_key_exists("lshosts_exeServer", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_exeServer"] = "";

                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_os"] .= $aoMatches[0][1];#type
                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_model"] .= $aoMatches[0][2];
                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_cpuf"] .= $aoMatches[0][3];
                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_ncpus"] .= $aoMatches[0][4];
                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_maxmem"] .= $aoMatches[0][5];
                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_maxswp"] .= $aoMatches[0][6];
                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_exeServer"] .= $aoMatches[0][7];
                $oO["_byOS_"][$aoMatches[0][1]][$aoMatches[0][0]] = 1;
            }else{}
        #############################################
        }elseif($keyw === "lsload"){
            // ignored
            // if(preg_match_all("/\S+/",$line,$aoMatches)){
            //     if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
            //     if($aoMatches[0][0] === "HOST_NAME") continue; #this is header line
            //     if(! array_key_exists($aoMatches[0][0], $oO["_byHost_"])) $oO["_byHost_"][$aoMatches[0][0]] = array();
            //     if(! array_key_exists("lsload_status", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_status"]  = "";
            //     if(! array_key_exists("lsload_r15s", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_r15s"]    = "";
            //     if(! array_key_exists("lsload_r1m", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_r1m"]     = "";
            //     if(! array_key_exists("lsload_r15m", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_r15m"]    = "";
            //     if(! array_key_exists("lsload_ut", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_ut"]      = "";
            //     if(! array_key_exists("lsload_pg", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_pg"]      = "";
            //     if(! array_key_exists("lsload_ls", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_ls"]      = "";
            //     if(! array_key_exists("lsload_it", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_it"]      = "";
            //     if(! array_key_exists("lsload_tmp", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_tmp"]     = "";
            //     if(! array_key_exists("lsload_swp", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_swp"]     = "";
            //     if(! array_key_exists("lsload_mem", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_mem"]     = "";

            //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_status"] .= (count($aoMatches[0]) > 1) ? $aoMatches[0][1] : "";
            //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_r15s"]   .= (count($aoMatches[0]) > 2) ? $aoMatches[0][2] : "";
            //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_r1m"]    .= (count($aoMatches[0]) > 3) ? $aoMatches[0][3] : "";
            //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_r15m"]   .= (count($aoMatches[0]) > 4) ? $aoMatches[0][4] : "";
            //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_ut"]     .= (count($aoMatches[0]) > 5) ? $aoMatches[0][5] : "";
            //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_pg"]     .= (count($aoMatches[0]) > 6) ? $aoMatches[0][6] : "";
            //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_ls"]     .= (count($aoMatches[0]) > 7) ? $aoMatches[0][7] : "";
            //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_it"]     .= (count($aoMatches[0]) > 8) ? $aoMatches[0][8] : "";
            //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_tmp"]    .= (count($aoMatches[0]) > 9) ? $aoMatches[0][9] : "";
            //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_swp"]    .= (count($aoMatches[0]) > 10) ?  $aoMatches[0][10] : "";
            //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_mem"]    .= (count($aoMatches[0]) > 11) ?  $aoMatches[0][11] : "";
            // }else{}
        #############################################
        }elseif($keyw === "bhosts"){
            if(preg_match_all("/\S+/",$line,$aoMatches)){
                if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                if($aoMatches[0][0] === "HOST_NAME") continue; #this is header line
                if(! array_key_exists($aoMatches[0][0], $oO["_byHost_"])) $oO["_byHost_"][$aoMatches[0][0]] = array();
                if(! array_key_exists("bhosts_status" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_status"] = "";
                if(! array_key_exists("bhosts_JL/U" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_JL/U"]   = "";
                if(! array_key_exists("bhosts_MAX" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_MAX"]    = "";
                if(! array_key_exists("bhosts_NJOBS" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_NJOBS"]  = "";
                if(! array_key_exists("bhosts_RUN" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_RUN"]    = "";
                if(! array_key_exists("bhosts_SSUSP" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_SSUSP"]  = "";
                if(! array_key_exists("bhosts_USUSP" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_USUSP"]  = "";
                if(! array_key_exists("bhosts_RSV" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_RSV"]    = "";
                
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_status"]  .= (count($aoMatches[0]) > 1) ? $aoMatches[0][1] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_JL/U"]    .= (count($aoMatches[0]) > 2) ? $aoMatches[0][2] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_MAX"]     .= (count($aoMatches[0]) > 3) ? $aoMatches[0][3] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_NJOBS"]   .= (count($aoMatches[0]) > 4) ? $aoMatches[0][4] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_RUN"]     .= (count($aoMatches[0]) > 5) ? $aoMatches[0][5] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_SSUSP"]   .= (count($aoMatches[0]) > 6) ? $aoMatches[0][6] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_USUSP"]   .= (count($aoMatches[0]) > 7) ? $aoMatches[0][7] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_RSV"]     .= (count($aoMatches[0]) > 8) ? $aoMatches[0][8] : "";
            }else{}
        #############################################
        }elseif($keyw === "SP_HOST_DIR"){
            // ignored
            // if(file_exists($line)){
            //     foreach (glob("$line/*") as $file){
            //         if(is_file($file)){
            //             $host = basename($file);
            //             if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
            //             if(! array_key_exists($host,$oO["_byHost_"]))   $oO["_byHost_"][$host] = array();
            //             foreach (file($file) as $txtLine){
            //                 if(! array_key_exists("dedicated_head",$oO["_byHost_"][$host]))   $oO["_byHost_"][$host]["dedicated_head"] = array();
            //                 if(! array_key_exists("dedicated_users",$oO["_byHost_"][$host]))  $oO["_byHost_"][$host]["dedicated_users"] = array();
            //                 if(preg_match("/^#/", $txtLine)){
            //                     array_push($oO["_byHost_"][$host]["dedicated_head"], $txtLine);
            //                 }else{
            //                     array_push($oO["_byHost_"][$host]["dedicated_users"], $txtLine);
            //                 }
            //             }
            //         }
            //     }
            // }else{}
        #############################################
        }elseif($keyw === "bjobs"){
            if(preg_match_all("/[^;]+/",$line,$aoMatches)){
                if(preg_match_all("/[^:]+/", $aoMatches[0][0], $aoHosts)){
                    $aoUnqHosts = array_unique($aoHosts[0]);
                    $unqHostWnumber = array();
                    if(count($aoUnqHosts) > 1){
                        // echo "dbg: WARNING: not same host: $line\n";
                    }
                    foreach ($aoHosts[0] as $host){
                        if(! array_key_exists($host, $unqHostWnumber)) $unqHostWnumber[$host] = 0;
                        $unqHostWnumber[$host]++;
                    }
                    foreach ($aoUnqHosts as $host){
                        if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                        if($host === "EXEC_HOST") continue; #this is header line
                        if(! array_key_exists($host, $oO["_byHost_"])) $oO["_byHost_"][$host] = array();
                        if(! array_key_exists($aoMatches[0][1], $oO["_byHost_"][$host])) {
                            $oO["_byHost_"][$host][$aoMatches[0][1]] = array();
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["stat"] = "";
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["user"] = "";
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["queue"] = "";
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["run_time"] = "";
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["cmd"] = "";
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["resreq"] = "";
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["#hosts"] = -1;
                        }
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["stat"] .= $aoMatches[0][2];
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["user"] .= $aoMatches[0][3];
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["queue"] .= $aoMatches[0][4];
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["run_time"] .= $aoMatches[0][5];
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["cmd"] .= $aoMatches[0][6];
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["resreq"] .= $aoMatches[0][count($aoMatches[0])-1];
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["#hosts"] = $unqHostWnumber[$host];
                    }
                }
            }else{}
        #############################################
        }else{
            #out-of-scope
        }
    }

    return $oO;
}

function getMem($iStr){
    // convert a string to be a memory in GB
    $oNum = trim($iStr);
    if(preg_match('/^(\d+)(.*)/',$iStr,$aoMatches)){
        $num = floatval($aoMatches[1]);
        $unit = $aoMatches[2];
        if($unit === "G") {
            $oNum = $num;
        }else if($unit === "M") {
            $oNum = floatval($num / 1024);
        }else if($unit === "T"){
            $oNum = floatval($num * 1024);
        }
    }else{}
    return $oNum;
}

###
function rtn_data_PVPI_sum(&$oO,$cntS){
    if($cntS === "") return;
    global $data_dir_PVPI;
    global $data_dir_PVPI_manual;

    // retrieve info from PVPI-org Sum
    $finPrj = null;#finished projects
    $outData1 = null;//sum statistic and ongoing sessions
    $outData2 = null;//sum latest PV info by mnemonic top-cell-name
    $outData3 = null;//sum latest PV info by real top-layout-name
    
    // retreive info from PVPI-insider
    $outData4 = null;//detailSum prjN PVexeLog.json (Done data as brief info)

    // if($fh = fopen("$data_dir_PVPI_manual/finished_projects.json","r")){
    //     $finPrj = json_decode(fread($fh, filesize("$data_dir_PVPI_manual/finished_projects.json")),true);
    //     fclose($fh);
    // }else{}
    if($fh = fopen("$data_dir_PVPI/sumAll.json", "r")){
        $outData1 = json_decode(fread($fh, filesize("$data_dir_PVPI/sumAll.json")), true);
        fclose($fh);
    } else {}
    // if($fh = fopen("$data_dir_PVPI/sumAllLatest.json", "r")){
    //     $outData2 = json_decode(fread($fh, filesize("$data_dir_PVPI/sumAllLatest.json")), true);
    //     fclose($fh);
    // } else {}
    // if($fh = fopen("$data_dir_PVPI/sumAllLatest_TOP_LAYOUT_NAME.json", "r")){
    //     $outData3 = json_decode(fread($fh, filesize("$data_dir_PVPI/sumAllLatest_TOP_LAYOUT_NAME.json")), true);
    //     fclose($fh);
    // } else {}

    $oO["PVPI"] = array();
    // $oO["PVPI"]["finishData"] = $finPrj;//dbg
    // $oO["PVPI"]["outData1"] = $outData1;//dbg
    // $oO["PVPI"]["outData2"] = $outData2;//dbg
    // $oO["PVPI"]["outData3"] = $outData3;//dbg
    $oO["PVPI"]["test"] = array();
    
    $cntS = preg_replace('/\s+/','',$cntS);
    foreach(preg_split('/,/',$cntS) as $PVPIprjName){
        // => some info from summary
        if(array_key_exists($PVPIprjName,$outData1)){
            // => add info to the ongoing session so that they can be called to specific project later
            $oO["PVPI"]["ongoing"] = array();
            foreach($outData1[$PVPIprjName]["ongoing_sessions"] as $session => $info){
                $oO["PVPI"]["ongoing"][$PVPIprjName . ":" . $session] = $info;
            }
            // =>
            $oO["PVPI"]["#fin_all"] = $outData1[$PVPIprjName]["total_number_finished_sessions"];
        }else{}

        // all target detailInd for detailed info later
        $aoTgtf = glob("{$data_dir_PVPI}/detailInd_{$PVPIprjName}_PVexeLog_*.json");
        
        // => some info from insider
        $outData4 = array();
        if(file_exists("$data_dir_PVPI/detailSum_{$PVPIprjName}_PVexeLog.json")){
            if($fh = fopen("$data_dir_PVPI/detailSum_{$PVPIprjName}_PVexeLog.json", "r")){
                $outData4 = json_decode(fread($fh, filesize("$data_dir_PVPI/detailSum_{$PVPIprjName}_PVexeLog.json")), true);
                fclose($fh);
            } else {}
        }
        // $oO["PVPI"]["outData4"] = $outData4;//dbg
        foreach($outData4 as $session => $info){
            $staAt = -1; if(isset($info["startAt"])) $staAt = $info["startAt"];
            $TAT = -1; if(isset($info["TAT"])) $TAT = $info["TAT"];
            if($staAt > -1 && $TAT > -1){
                $dt = new DateTime();
                $dt->setTime(-24,0,0);
                if(intval($staAt) + intval($TAT) - $dt->getTimestamp() > 0){
                    // => sum number
                    if(!array_key_exists("#fin_24h",$oO["PVPI"])) $oO["PVPI"]["#fin_24h"] = 0;
                    $oO["PVPI"]["#fin_24h"]++;
                    // => problem or not (based on logInd inside)
                    $probInf = get_prob_info_from_ind_file($aoTgtf,$session);
                    if(count(array_keys($probInf)) > 0){
                        if(!array_key_exists("24h_NG",$oO["PVPI"])) $oO["PVPI"]["24h_NG"] = array();
                        $oO["PVPI"]["24h_NG"][$PVPIprjName . ":" . $session] = $info;
                        $oO["PVPI"]["24h_NG"][$PVPIprjName . ":" . $session]["problem"] = $probInf;
                    }else{
                        if(!array_key_exists("24h_OK",$oO["PVPI"])) $oO["PVPI"]["24h_OK"] = array();
                        $oO["PVPI"]["24h_OK"][$PVPIprjName . ":" . $session] = $info;
                    }
                }else{}
            }else{
                if(!array_key_exists("#prob_notime",$oO["PVPI"])) $oO["PVPI"]["#prob_notime"] = 0;
                $oO["PVPI"]["#prob_notime"]++;
            }
        }
        
    }

    #############
    return $oO;
}

function get_prob_info_from_ind_file($aof,$tgtUnique){
    if($aof === null) return array();
    if(count($aof) <= 0) array();
    $oObj = array();
    $flgFound = false;
    for($i=count($aof)-1;$i>=0;$i--){
        if($flgFound === true) {break;}
        $tmpa = preg_split("/_/", preg_replace('/.json$/', "", $aof[$i]));
        $minSat = $tmpa[count($tmpa)-2];
        $maxSat = $tmpa[count($tmpa)-1];
        $tmpa = preg_split("/__/", $tgtUnique);
        $tgtSat = $tmpa[2];
        if($tgtSat >= $minSat && $tgtSat <= $maxSat ){
            // -> json file interacting
            if($fh = fopen($aof[$i], "r")){
                $fWholeStr = fread($fh, filesize($aof[$i]));
                fclose($fh);
                $outData = json_decode($fWholeStr, true);
                // -> out info
                foreach ($outData as $unique => $session){
                    if($unique === $tgtUnique){
                        // get info of problem
                        if(count(array_keys($session)) === 0){
                            $oObj["all"] = "Nothing in this session.";#fail #1
                        }else{
                            $noTotalSubRun = 0;
                            $noLogNA = 0;
                            $allRun = "";
                            foreach($session as $runk => $detail){
                                if(preg_match("/^run_/",$runk)){
                                    $noTotalSubRun++;
                                    $regProbRunk = $runk;
                                    if($detail["logStatus"] !== "logInd=OK"){
                                        $oObj[$regProbRunk] =  $detail["logStatus"];
                                        $noLogNA++;
                                        $dspRunK = preg_replace("/^run_/","",$runk);
                                        $allRun .= $dspRunK . ",";
                                        // $oObj[$runk]["#jobsAll"] = $detail["#jobsAll"];
                                        // $oObj[$runk]["jnames"] = $detail["jnames"];
                                    }else{
                                        foreach($detail["subrun"] as $subrun){
                                            $regProbRunk = $subrun['sortKey'];
                                            if(!array_key_exists("moreInfo",$subrun)){
                                                if($subrun['sortKey'] === "NW2LEAF") {continue;};#oK since this is just a script
                                                $oObj[$regProbRunk] = "moreInfo not found.";
                                            }elseif(array_key_exists("_problem_",$subrun["moreInfo"])){
                                                $oObj[$regProbRunk] = "found tracked problem (FAILED flag).";
                                                foreach($subrun["moreInfo"]["_problem_"] as $probStr){
                                                    $probStr = preg_replace("/\\n/","<br>",$probStr);
                                                    $oObj[$regProbRunk] .= "<br>" . $probStr;
                                                }
                                            }else{
                                                // echo "\nXXXXXXXXXXXXXXXXXXXXXXXXXXX $runk/" . $subrun['sortKey'] . ": " . $subrun["moreInfo"]["jobSTT"] ."\n"; print_r($detail);
                                            }
                                        }
                                    }
                                }else{}
                            }
                            if($noTotalSubRun === $noLogNA){
                                $allRun = preg_replace("/,$/","",$allRun);
                                $oObj = array();
                                $oObj["all"] = "Session failed: " . $allRun;
                            }else{}
                        }
                        // reg it
                        $flgFound = true;
                        break;
                    }
                }
            } else {
                echo "<div><p>Cannot read from file</p></div>";
            }
        }else{}
    }
    return $oObj;
}

?>

FILE:: .//src_modules/PVPI_export/PVPI_export.js
function dsp_simple_table_4_PVPI_sum_by_time(cntO){
    if(cntO.length === 0) return;
    if(!cntO.hasOwnProperty("cntData")) return;
    if(cntO["cntData"].length === 0) return;
    if(document.getElementById("mainSide") === null) return;
    while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
    console.log(cntO)

    let eTop = my_create("div",undefined,["w3-responsive","w3-animate-zoom"],{"position":"relative"},{id:"PVPI_sum_by_time_top"});

    // => title and help icon
    let eTitle = my_create("h2","Summary of PVPI session by dates in excel files")
    let eHelpIcon = my_create("i",undefined,["bi-info-circle-fill","w3-xlarge","w3-display-topright","w3-button","w3-round-xlarge","w3-text-sand"],{})
    eTop.appendChild(eTitle)
    eTop.appendChild(eHelpIcon)
    
    let eHelpContent = my_create("div",undefined,["w3-light-gray","w3-card-2","w3-animate-opacity","w3-round"],{"display":"none"});
    // eHelpContent.appendChild(my_create("div","Sorry, this guiding content is under construction!"));
    my_ajax_get("src_modules/PVPI_export/get_help",[{}],function(rtnO){
        // console.log(rtnO)
        for(let keyw in rtnO){
            eHelpContent.appendChild(my_create("p",keyw));
            let ePart = my_create("div",undefined,["w3-card-2"],{},{"id":keyw});
            ePart.innerHTML = window.markdeep.format(rtnO[keyw]);
            eHelpContent.appendChild(ePart)
        }
    })
    eTop.appendChild(eHelpContent);

    eHelpIcon.addEventListener("click",function(){
        if(eHelpContent.style.display === "none"){
            eHelpContent.style.display = "block";
        }else{
            eHelpContent.style.display = "none";
        }
    });
    
    // => working on the filter guiding
    let eFltTop = my_create("div",undefined,["w3-row","w3-indigo","w3-round"])
    let eFltPrj = my_create("div",undefined,["w3-third"],{"padding":"3px"})
    let eFltDate = my_create("div",undefined,["w3-third"],{"padding":"3px"})
    let eFltStr = my_create("div",undefined,["w3-third"],{"padding":"3px"})
    eFltTop.appendChild(eFltStr);
    eFltTop.appendChild(eFltPrj);
    eFltTop.appendChild(eFltDate);
    eTop.appendChild(eFltTop);

    eFltPrj.appendChild(my_create("label","Project",["w3-text-white"]));
    eFltDate.appendChild(my_create("Label","Date",["w3-text-white"]));
    eFltStr.appendChild(my_create("label","Free pattern",["w3-text-white"]))

    eFltPrj.appendChild(my_create("select",undefined,["w3-select"],{},{"name":"select_prjN"}))
    eFltDate.appendChild(my_create("select",undefined,["w3-select"],{},{"name":"select_date"}))
    eFltStr.appendChild(my_create("input",undefined,["w3-input"],{},{"name":"filter_pattern"}))

    eFltPrj.getElementsByTagName("select")[0].appendChild(my_create("option","All",[],{},{"value":"all"}));
    eFltPrj.getElementsByTagName("select")[0].appendChild(my_create("option","----",[],{},{"disabled":true}));
    eFltDate.getElementsByTagName("select")[0].appendChild(my_create("option","All",[],{},{"value":"all"}));
    eFltDate.getElementsByTagName("select")[0].appendChild(my_create("option","----",[],{},{"disabled":true}));
    eFltDate.getElementsByTagName("select")[0].appendChild(my_create("option","Today",[],{},{"value":"0"}));
    eFltDate.getElementsByTagName("select")[0].appendChild(my_create("option","From yesterday",[],{},{"value":"-1"}));
    eFltDate.getElementsByTagName("select")[0].appendChild(my_create("option","This week",[],{},{"value":"-7"}));
    eFltDate.getElementsByTagName("select")[0].appendChild(my_create("option","Within 2weeks",[],{},{"value":"-14"}));
    eFltDate.getElementsByTagName("select")[0].appendChild(my_create("option","This month",[],{},{"value":"-30"}));

    // => working on the content table
    let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable","w3-small"],{"min-width":"100%","font-family":"Courier New"},{"id":"tbl_PVPI_sum_by_time"});
    let eTbd = my_create("tbody",undefined,[],{"min-width":"100%"});
    eTbl.appendChild(eTbd);
    eTop.appendChild(eTbl);

    // reg columns
    let colUrl = -1;
    let regCols = [];
    for(let i=0;i<cntO["cntData"][0].length;i++){
        if(cntO["cntData"][0][i] === "Url") colUrl = i;
        if(0
            || cntO["cntData"][0][i] === "Owner"
            || cntO["cntData"][0][i] === "Perm"
            || cntO["cntData"][0][i] === "Url"
        ) continue;
        regCols.push(i);
    }
    // header
    let thData = [];
    for(let i of regCols) { thData.push(cntO["cntData"][0][i]); }
    // dump column
    thData.push("","")
    eTbd.appendChild(my_add_row(thData,"th"));

    // content
    let allPrjs = {};
    for(let j=1;j<cntO["cntData"].length;j++){
        let tdData = [];
        for(let i of regCols) { tdData.push(cntO["cntData"][j][i]); }
        // => add some more buttons
        tdData.push("<a href='ms-excel:ofe|u|"+cntO["cntData"][j][colUrl]+"'><i class='bi bi-filetype-xlsx w3-button w3-hover-orange w3-large w3-round' style='padding:0'></i></a>")
        tdData.push("<a href='"+cntO["cntData"][j][colUrl]+"'><i class='bi bi-download w3-button w3-hover-orange w3-large w3-round' style='padding:0'></i></a>")
        // tdData.push("<div onclick='try_open_this(this)'><span style='display:none'>"+cntO["cntData"][j][colUrl]+"</span><i class='bi bi-door-open w3-button w3-hover-orange w3-large w3-round' style='padding:0'></i>")
        // =>
        eTbd.appendChild(my_add_row(tdData,"td"));
    }
    for(let tmpe of eTbd.getElementsByTagName("tr")){
        if(tmpe.childNodes[0].tagName === "TH") continue;
        tmpe.addEventListener("click",dsp_info_on_PVPI_sum_excel);
        tmpe.childNodes[0].style.cursor = "pointer";
        // => get prjName to scoping later
        let str = tmpe.childNodes[0].innerText;
        if(str !== ""){
            let prjN = str.replace(/_\d+\.xlsx$/,"",str);
            if(prjN !== ""){
                if(!allPrjs.hasOwnProperty(prjN)) allPrjs[prjN] = 0;
                allPrjs[prjN]++;
            }
        }else{}
    }

    // more options for project names
    if(Object.keys(allPrjs).length > 0){
        for(let prjN in allPrjs){
            eFltPrj.getElementsByTagName("select")[0].appendChild(my_create("option",prjN,[],{},{"value":prjN}))
        }
    }

    // event listeners
    eFltPrj.getElementsByTagName("select")[0].addEventListener("change",function(){
        upd_PVPI_sum_by_time_table(eTbl,eFltPrj.getElementsByTagName("select")[0],eFltDate.getElementsByTagName("select")[0],eFltStr.getElementsByTagName("input")[0]);
    });
    eFltDate.getElementsByTagName("select")[0].addEventListener("change",function(){
        upd_PVPI_sum_by_time_table(eTbl,eFltPrj.getElementsByTagName("select")[0],eFltDate.getElementsByTagName("select")[0],eFltStr.getElementsByTagName("input")[0]);
    });
    eFltStr.getElementsByTagName("input")[0].addEventListener("keyup",function(){
        upd_PVPI_sum_by_time_table(eTbl,eFltPrj.getElementsByTagName("select")[0],eFltDate.getElementsByTagName("select")[0],eFltStr.getElementsByTagName("input")[0]);
    });
    

    // layout
    mainSide.appendChild(eTop);
    return 1;
}

function dsp_info_on_PVPI_sum_excel(){
    // console.log(this)
    let fName = this.innerText;
    if(this.tagName === "TR"){
        fName = this.childNodes[0].innerText;
        for(let tmpe of this.parentNode.childNodes){
            tmpe.style.backgroundColor = '';
        }
        this.style.backgroundColor = "rgba(255, 99, 71, 0.5)";
    }
    let eWait = dsp_wait();
    let eTop = null;
    if(document.getElementById("PVPI_sum_by_time_info")){
        eTop = PVPI_sum_by_time_info;
    }else{
        eTop = my_create("div",undefined,["w3-card-2","w3-light-grey"],{"position":"fixed","bottom":"5px","left":"5px","width":"255px"},{id:"PVPI_sum_by_time_info"});
        mainSide.appendChild(eTop);
    }
    // clean
    while(eTop.childNodes.length > 0) {eTop.firstChild.remove();}
    eTop.appendChild(my_create("span","updating ..."));

    my_ajax_get("src_modules/PVPI_export/rtn_sum_by_time_info.php",[{filename:fName}],function(rtnO){
        // => waiting sign removed
        eWait.remove();
        while(eTop.childNodes.length > 0) {eTop.firstChild.remove();}
        // =>
        if(!rtnO.hasOwnProperty("info") || rtnO["info"].length === 0){
            // dsp_notification("error","Nothing to show.")
            eTop.appendChild(my_create("span","Sorry! Nothing to show."));
        }else{
            // components
            let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable","w3-small"],{"min-width":"100%","font-family":"Courier New"},{});
            let eTbd = my_create("tbody",undefined,[],{"min-width":"100%"});
            console.log(rtnO)
            for(let keyw in rtnO["info"]){
                eTbd.appendChild(my_add_row([keyw,rtnO["info"][keyw]],"td",{"padding":"2px","min-width":"30px"}))
            }
            // layout it
            eTbl.appendChild(eTbd);
            eTop.appendChild(my_create("p",rtnO["rqtFileName"],["w3-indigo"],{"padding":0,"margin":0}));
            eTop.appendChild(eTbl);
        }
        // console.log(rtnO)
    })
}

function upd_PVPI_sum_by_time_table(tbl,fPrjN,fDate,fPattern){
    let aoTr = tbl.getElementsByTagName("tr");
    if(aoTr === null || aoTr.length === 0) return;
    let tgtDates = [];
    if(fDate.value !== "all" && Number.isInteger(fDate.value * -1)){
        for(let i=0;i<=Number(fDate.value * -1);i++){
            let tgtD = new Date(Date.now() - i*1000*60*60*24);
            tgtDates.push((tgtD.getYear()+1900).toString().slice(-2) + ('0'+(tgtD.getMonth()+1).toString()).slice(-2) + ('0'+tgtD.getDate().toString()).slice(-2))
        }
    }
    for(let i=1;i<aoTr.length;i++){
        let fName = aoTr[i].childNodes[0].innerText.toUpperCase();
        let thisDate = fName.replace(/.XLSX/,'').split("_").pop()
        // scoping based on the filter info
        let flgDsp = true;
        // => by project name
        if(fPrjN.value !== "all" && fName.search(fPrjN.value.toUpperCase()) !== 0) flgDsp = false;
        // => by date quick string
        if(fDate.value !== "all" && thisDate !== "" && tgtDates.indexOf(thisDate) === -1) flgDsp = false;
        // => by free pattern
        if(fPattern.value !== ""){
            let flgGo2 = false;
            let aoPat = fPattern.value.toUpperCase().split(" ");
            if(aoPat.length === 1){
                console.log(aoPat[0],fName.search(aoPat[0]))
                if(fName.search(aoPat[0]) > -1) flgGo2 = true;
            }else{
                let flgGo3 = true;
                for(let tmpv of aoPat){
                    let flgGo4 = false;
                    for(let tmpv1 of tmpv.split(",")){
                        if(fName.search(tmpv1) > -1) flgGo4 = true;
                    }
                    if(flgGo4 === true){
                        flgGo2 = true;
                    }else{
                        flgGo3 = false;
                    }
                }
                if(flgGo3 === false) flgGo2 = false;
            }
            if(!flgGo2) flgDsp = false;
        }else{}


        (!flgDsp)  ? aoTr[i].style.display = "none" : aoTr[i].style.display = '';
    }
    // console.log(fPrjN.value,fDate.value,fPattern.value,tbl)
}

function try_open_this(tgte){
    // https://learn.microsoft.com/en-us/office/client-developer/office-uri-schemes
    // console.log(tgte.childNodes[0].innerText)
    window.open('ms-excel:ofe|u|' + tgte.childNodes[0].innerText)
}

FILE:: .//src_modules/PVPI_export/get_help.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    register_shutdown_function("my_handler_fatal");

    function reg_file_content($file,&$oO){
        if(file_exists($file)){
            $oO[basename(($file))] = preg_replace('/\r/','',file_get_contents($file));
        }else{
            $oO[basename(($file))] = "Nothing to show.";
        }
        return;
    }

    // return control data for generation of login form
    $oO = array();
    
    reg_file_content("../../docs/PVPI_export/PVPI_sum_by_time_explain_filter_and_output.md",$oO);

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/PVPI_export/rtn_sum_by_time_info.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    function my_shorten_path($str){
        $tmpa = explode(DIRECTORY_SEPARATOR,$str);
        $ostr = "";
        foreach ($tmpa as $tmpv){
            if($tmpv === ".") continue;
            if($tmpv === ".." && $ostr !== ""){
                $ostr = preg_replace("|[^" . DIRECTORY_SEPARATOR . "]+".DIRECTORY_SEPARATOR."$|","",$ostr);
            }else{
                $ostr .= $tmpv . DIRECTORY_SEPARATOR;
            }
        }
        $ostr = preg_replace("|".DIRECTORY_SEPARATOR."$|","",$ostr);
        return $ostr;
    }

    ####################
    require_once '../../src_main/my.php';
    register_shutdown_function("my_handler_fatal");
    date_default_timezone_set("Asia/Ho_Chi_Minh");

    // return control data for generation of login form
    $oO = array();
    $tgtd = "../../wkdirServer/PVPI_export/outdir";

    if(!isset($_GET["filename"])){
        $oO["cntData"][0] = array("File Name","Owner","Perm","Size","Last mod.","Url");
        $aoF = array();
        // => sweep all files
        foreach(glob("$tgtd/*.xlsx") as $file) array_push($aoF,$file);
        // => sort them
        usort($aoF,function($a,$b){
            $keya = $a; if(preg_match("/(\d+)\.xlsx/",$a,$maches)) $keya = $maches[1];
            $keyb = $b; if(preg_match("/(\d+)\.xlsx/",$b,$maches)) $keyb = $maches[1];
            return $keyb - $keya;
        });
        // => get info to output
        foreach($aoF as $file){
            // => basic info of file
            $stat = stat($file);
            $owner = $stat["uid"];
            if(function_exists('posix_getpwuid')){
                $tmpv = posix_getpwuid($stat[4]);
                if($tmpv) $owner = $tmpv["name"];
                // $owner = posix_getpwuid($stat[4])['name'];
            }
            $size = $stat["size"]; $size = sprintf("%.1f",$size/(1024)) . "KB";
            $perm = decoct(fileperms($file) & 0777);
            $mtime = date("M d Y H:i:s",$stat["mtime"]);
            $filename = basename($file);
            $filepath = my_shorten_path( (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] === 'on' ? "https" : "http")
                . "://$_SERVER[HTTP_HOST]"
                . dirname($_SERVER["REQUEST_URI"])
                . DIRECTORY_SEPARATOR . $file);
            // =>
            array_push($oO["cntData"],array($filename,$owner,$perm,$size,$mtime,$filepath));
        }
    }elseif(isset($_GET["filename"])){
        $oO["rqtFileName"] = $_GET["filename"];
        $tgtf = "$tgtd/".$_GET["filename"]."_info.json";
        $oO["info"] = array();#nothing to show
        if(file_exists($tgtf)){
            $str = file_get_contents($tgtf);
            if($str !== "") $oO["info"] = json_decode($str,true);
        }else{}

        // // testing only
        // $oO["info"]["#sessions"] = 3;
        // $oO["info"]["#checkers"] = 2;
        // $oO["info"]["#user"] = 3;
    }
    
    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/PVPI_insider/PVPI_insider.js
// https://stackoverflow.com/questions/881515/how-do-i-declare-a-namespace-in-javascript
// https://developer.mozilla.org/en-US/docs/Glossary/IIFE

(function(){

    // => load css for PVPI
    // my_add_css("ss_google_icon","https://fonts.googleapis.com/icon?family=Material+Icons");
    // my_add_css("ss_PVPI_org","css/PVPI_org.css");


    /////////////////////////////////////////////////////////////
    // => public methods
    /////////////////////////////////////////////////////////////

    PVPI_insider.upTrackByMergeData = function(rtnO){
        // console.log(rtnO)
        // default controlling values
        let flgAllowUntrack = false;
        let flgAllowNonePVitem = false;
        let guidedPrjN = "all";
        let guidedTopCell = "all";
        let guidedMaxN = 4;

        // => create new div if not existed
        let eTop = null;
        if(document.getElementById("PVPI_insider_dataMerge") === null){
            if(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
            eTop = my_create("div",undefined,["w3-animate-zoom","w3-responsive"],{"height":"100%"},{id:"PVPI_insider_dataMerge"});
            
            // some controlling elements on top
            // RESERVED

            // table of info
            let eTbl = my_create("table",undefined,["w3-table-all","w3-bordered","w3-small"]);
            let eTbd = my_create("tbody");
            eTbd.appendChild(my_add_row(["(1)"
                                        ,"(2)"
                                        ,"inf"
                                        ,"ongo"
                                        ,"mtime"
                                        ,"Project"
                                        ,"topCellName"
                                        ,"user"
                                        ,"host"
                                        ,"Core"
                                        ,"Merge1"
                                        ,"Dummy"
                                        ,"Merge2"
                                        ,"#DRC"
                                        ,"#LVS"
                                        ,"#LVL"
                                    ],"th",{"padding":"2px"}));
            eTbl.appendChild(eTbd);
            
            // layout
            eTop.appendChild(eTbl);
            mainSide.appendChild(eTop);
        }else{
            eTop = document.getElementById("PVPI_insider_dataMerge");
        }

        // retrive some controlling variables
        // RESERVED

        // => main work
        if(Object.keys(rtnO).length > 0){
            let tgtTbl = eTop.getElementsByTagName("tbody")[0];
            while(tgtTbl.childNodes.length > 2) {tgtTbl.lastChild.remove()}
            // -> reset the icon showing the sorting direction
            for(let th of tgtTbl.getElementsByTagName("th")){
                if(th.getElementsByTagName("i").length > 0){
                    if(th.getElementsByTagName("i")[0].classList.contains("nosort")){
                    }else{
                        th.getElementsByTagName("i")[0].innerText = "shuffle";
                    }
                }else{}
            }
            // ->
            let regInodeVsPath = new Object();//register inode => path for reference later
            for(let dataPI in rtnO){
                //
                let uniInf = get_more_from_unique(rtnO[dataPI]["ref"]);
                let tmpv = get_more_from_PI(dataPI);
                if(! regInodeVsPath.hasOwnProperty(uniInf[1])) { regInodeVsPath[uniInf[1]] = new Object;}
                if(! regInodeVsPath[uniInf[1]].hasOwnProperty(tmpv[1])) { regInodeVsPath[uniInf[1]][tmpv[1]] = new Array;}
                regInodeVsPath[uniInf[1]][tmpv[1]].push(tmpv[0]);
                //
                // ONLY List the data-stream with PVitem
                if(flgAllowNonePVitem === false){
                    if(rtnO[dataPI]["PVitems"] === undefined) {continue;}
                    if(Object.keys(rtnO[dataPI]["PVitems"]).length == 0) {continue;}
                }else{}
                /////////////////////////////////////////////
                let noDRC = 0;
                let noLVS = 0;
                let noLVL = 0;
                let ongo = "done";
                let prjN = "aPrj";
                let topCellName = "aTopCellName";
                let infObj = new Object();//get all involved sessions to be displayed later (and compare)
                let infDiv = "<i class=\"material-icons w3-text-grey\" style=\"font-size:16px\">info</i>";
                let cmpL = "<i onclick=\"dsp_compareInfo_on_merge_data(this)\" class=\"material-icons w3-button w3-tiny\" style=\"padding:0;font-size:16px\">visibility_off</i>";
                let cmpR = "<i onclick=\"dsp_compareInfo_on_merge_data(this)\" class=\"material-icons w3-button w3-tiny\" style=\"padding:0;font-size:16px\">visibility_off</i>";
                let mtime = undefined;
                if(rtnO[dataPI].hasOwnProperty("mtime")) {mtime = rtn_mydate(rtnO[dataPI]["mtime"]); }
                for(let keyw in rtnO[dataPI]["PVitems"]){
                    if(/^drc/.test(keyw)){
                        noDRC+=Object.keys(rtnO[dataPI]["PVitems"][keyw]).length;
                    }else if(/^lvs/.test(keyw)){
                        noLVS+=Object.keys(rtnO[dataPI]["PVitems"][keyw]).length;
                    }else if(/^lvl/.test(keyw)){
                        noLVL+=Object.keys(rtnO[dataPI]["PVitems"][keyw]).length;
                    }else{ }
                    for(let unq in rtnO[dataPI]["PVitems"][keyw]){
                        if(!infObj.hasOwnProperty(keyw)){infObj[keyw] = new Object();}
                        infObj[keyw][unq] = 1;
                    }
                }
                if(rtnO[dataPI]["ongo"] !== undefined && rtnO[dataPI]["ongo"]){ ongo = rtnO[dataPI]["ongo"]; }
                ////////////////////////////////////////////
                if(flgAllowUntrack === false){
                    if(ongo === "untrack") {continue;} //Disable this to limit the out-puts
                }else{}
                ////////////////////////////////////////////
                prjN = rtnO[dataPI]["prjN"];
                topCellName = rtnO[dataPI]["TOP_LAYOUT_NAME"];
                if(guidedTopCell !== "all" && topCellName !== guidedTopCell) {continue;}
                let type = rtnO[dataPI]["type"];
                // console.log(type, rtnO[dataPI])
                if(type === "gds_merge2"){
                    let thisRegData = get_more_from_PI(dataPI);
                    let merge1PI = undefined;
                    let refMerge1Unq = undefined;
                    if(rtnO[dataPI].hasOwnProperty("inputs")){
                        if(rtnO[dataPI]["inputs"].hasOwnProperty("gds_merge1")){
                            merge1PI = rtnO[dataPI]["inputs"]["gds_merge1"];
                            if(rtnO.hasOwnProperty(merge1PI)){
                                refMerge1Unq = rtnO[merge1PI]["ref"];
                            }
                        }else{}
                    }else{}
                    let merge1RegData = get_more_from_PI(merge1PI);
                    let coreRegData = Array(undefined,"untracked");
                    let refUnq = rtnO[dataPI]["ref"];
                    if(!infObj.hasOwnProperty(type)){infObj[type] = new Object();} ; infObj[type][refUnq] = 1;
                    if(!infObj.hasOwnProperty("gds_merge1")){infObj["gds_merge1"] = new Object();} ; infObj["gds_merge1"][refMerge1Unq] = 1;
                    if(!rtnO.hasOwnProperty(merge1PI)){
                        //untracked merge1
                        if(merge1PI === ""){
                            merge1PI ="Unknown:empty";
                            merge1RegData = get_more_from_PI(merge1PI);
                        }
                    }else if(!rtnO[merge1PI].hasOwnProperty("inputs")){
                        //untracked core: maybe before not applied the script tracking or old version
                    }else{
                        coreRegData = get_more_from_PI(rtnO[merge1PI]["inputs"]["core"]);
                    }
                    // console.log(merge1PI,rtnO[merge1PI])
                    let dummyStr = "";
                    for(let dmyT in rtnO[dataPI]["inputs"]){
                        if(dmyT === "gds_merge1") {continue;}
                        let dmyXPI = rtnO[dataPI]["inputs"][dmyT];
                        if(rtnO[dmyXPI] === undefined){
                            // try to compare with merge1
                            let dmyXPIRegData = get_more_from_PI(dmyXPI);
                            let tmpa = String(dmyXPIRegData[0]).split("/");
                            tmpa.pop();tmpa.pop();
                            let chkPdmy = tmpa.join("/");
                            tmpa = String(merge1RegData[0]).split("/");
                            tmpa.pop();tmpa.pop();tmpa.pop();
                            let chkPm1 = tmpa.join("/");
                            if(chkPdmy === chkPm1){
                                dummyStr += " " + genEle_PathInode_w_click(get_more_from_PI(dmyXPI),dmyT) + ":" + "Maybe";
                            }else{
                                dummyStr += " " + genEle_PathInode_w_click(get_more_from_PI(dmyXPI),dmyT) + ":" + "Unkwn";
                            }
                        }else{
                            let merge1ForDMYRegData = get_more_from_PI(rtnO[dmyXPI]["inputs"]["gds_merge1"]);
                            if(merge1ForDMYRegData[1] === merge1RegData[1]){
                                dummyStr += " " + genEle_PathInode_w_click(get_more_from_PI(dmyXPI),dmyT) + ":" + "Same";
                            }else{
                                dummyStr += " " + genEle_PathInode_w_click(get_more_from_PI(dmyXPI),dmyT) + ":" + genEle_PathInode_w_click(merge1ForDMYRegData);
                            }
                            let refUnq = rtnO[dmyXPI]["ref"];
                            if(!infObj.hasOwnProperty(dmyT)){infObj[dmyT] = new Object();} ; infObj[dmyT][refUnq] = 1;
                        }
                    }
                    // => decide the add info
                    if(Object.keys(infObj).length>0){
                        let addInf = "<span style=\"display:none\">";
                        for(let keyw in infObj){
                            for(let unq in infObj[keyw]){
                                addInf += keyw + ":" + unq + " ";
                            }
                        }
                        addInf += "</span>"
                        infDiv = "<i onclick=\"dsp_info_on_merge_data(this)\" class=\"material-icons w3-button w3-text-blue\" style=\"padding:0;font-size:16px\">info</i>"+addInf;
                    }
                    // =>
                    add_tr_to_tbl(tgtTbl,Array(
                        cmpL,cmpR,
                        infDiv,
                        ongo,
                        mtime,
                        prjN,
                        topCellName,
                        uniInf[0],
                        uniInf[1],
                        genEle_PathInode_w_click(coreRegData),
                        genEle_PathInode_w_click(merge1RegData),
                        dummyStr,
                        genEle_PathInode_w_click(thisRegData),
                        noDRC,
                        noLVS,
                        noLVL
                    ));
                    // console.log("tracked merge2: ", infObj)
                }else if(type === "gds_merge1"){
                    let thisRegData = get_more_from_PI(dataPI);
                    let corePI = undefined;
                    let coreRegData = Array(undefined,"untracked");
                    if(rtnO[dataPI].hasOwnProperty("inputs")){
                        if(rtnO[dataPI]["inputs"].hasOwnProperty("core")){
                            corePI = rtnO[dataPI]["inputs"]["core"];
                        }else{}
                    }else{}
                    if(corePI !== null && corePI !== undefined  ){coreRegData = get_more_from_PI(corePI);}
                    let refUnq = rtnO[dataPI]["ref"];
                    if(!infObj.hasOwnProperty(type)){infObj[type] = new Object();} ; infObj[type][refUnq] = 1;
                    // => decide the add info
                    if(Object.keys(infObj).length>0){
                        let addInf = "<span style=\"display:none\">";
                        for(let keyw in infObj){
                            for(let unq in infObj[keyw]){
                                addInf += keyw + ":" + unq + " ";
                            }
                        }
                        addInf += "</span>"
                        infDiv = "<i onclick=\"dsp_info_on_merge_data(this)\" class=\"material-icons w3-button w3-text-blue\" style=\"padding:0;font-size:16px\">info</i>"+addInf;
                    }
                    // =>
                    add_tr_to_tbl(tgtTbl,Array(
                        cmpL,cmpR,
                        infDiv,
                        ongo,
                        mtime,
                        prjN,
                        topCellName,
                        uniInf[0],
                        uniInf[1],
                        genEle_PathInode_w_click(coreRegData),
                        genEle_PathInode_w_click(thisRegData),
                        "none",
                        "none",
                        noDRC,
                        noLVS,
                        noLVL
                    ));
                }else{
                    //UNKNOWN DATA!!!
                    // => maybe untracked => try to divide into group of unique, assume that there is only "PVitems" under "dataPI"
                    let thisRegData = get_more_from_PI(dataPI);
                    if(thisRegData.length > 0){
                        // console.log("unknown type 1",thisRegData)
                        // => decide the add info
                        if(Object.keys(infObj).length>0){
                            let addInf = "<span style=\"display:none\">";
                            for(let keyw in infObj){
                                for(let unq in infObj[keyw]){
                                    addInf += keyw + ":" + unq + " ";
                                }
                            }
                            addInf += "</span>"
                            infDiv = "<i onclick=\"dsp_info_on_merge_data(this)\" class=\"material-icons w3-button w3-text-blue\" style=\"padding:0;font-size:16px\">info</i>"+addInf;
                        }
                        // =>
                        add_tr_to_tbl(tgtTbl,Array(
                            cmpL,cmpR,
                            infDiv,
                            ongo,
                            mtime,
                            prjN,
                            topCellName,
                            uniInf[0],
                            uniInf[1],
                            "uknown",
                            "uknown",
                            "uknown",
                            genEle_PathInode_w_click(thisRegData),
                            noDRC,
                            noLVS,
                            noLVL
                        ));
                    }else{
                        // untracked event the merge data (very old data) => try to divide by the unique key
                        // console.log(rtnO[dataPI]["PVitems"])
                if(1){
                        let tmpObj = new Object();
                        for(let item in rtnO[dataPI]["PVitems"]){
                            for(let unique in rtnO[dataPI]["PVitems"][item]){
                                if(!tmpObj.hasOwnProperty(unique)) {tmpObj[unique] = new Object();}
                                tmpObj[unique][item] = 1;
                            }
                        }
                        console.log("unknown type 2",rtnO[dataPI])
                        // out the data
                        for(let unique in tmpObj){
                            noDRC = 0;
                            noLVS = 0;
                            noLVL = 0;
                            infObj = new Object();
                            for(let keyw in tmpObj[unique]){
                                if(/^drc/.test(keyw)){
                                    noDRC++;
                                }else if(/^lvs/.test(keyw)){
                                    noLVS++;
                                }else if(/^lvl/.test(keyw)){
                                    noLVL++;
                                }else{ }
                                if(!infObj.hasOwnProperty(keyw)){infObj[keyw] = new Object();}
                                infObj[keyw][unique] = 1;
                            }
                            // =>
                            tmpa = String(unique).split("__");
                            // => decide the add info
                            if(Object.keys(infObj).length>0){
                                let addInf = "<span style=\"display:none\">";
                                for(let keyw in infObj){
                                    for(let unq in infObj[keyw]){
                                        addInf += keyw + ":" + unq + " ";
                                    }
                                }
                                addInf += "</span>"
                                infDiv = "<i onclick=\"dsp_info_on_merge_data(this)\" class=\"material-icons w3-button w3-text-blue\" style=\"padding:0;font-size:16px\">info</i>"+addInf;
                            }
                            // =>
                            add_tr_to_tbl(tgtTbl,Array(
                                cmpL,cmpR,
                                infDiv,
                                ongo,
                                rtn_mydate(tmpa[2]),
                                prjN,
                                topCellName,
                                tmpa[0],
                                tmpa[1],
                                undefined,
                                undefined,
                                undefined,
                                genEle_PathInode_w_click(Array(unique,"ut3-" + tmpa[2])),
                                noDRC,
                                noLVS,
                                noLVL
                            ));
                        }
                }
                    }
                }
            }
            // default sort this
            sortTblByHeader(tgtTbl.getElementsByTagName("th")[4]);
            // modify some column
            for(let tr of tgtTbl.getElementsByTagName("tr")){
                if(tr.getElementsByTagName("td").length > 0){
                    tr.getElementsByTagName("td")[6].style.textAlign = "left" ;//the top-cell-name too long
                    tr.getElementsByTagName("td")[6].style.maxWidth = "100px" ;//the top-cell-name too long
                    tr.getElementsByTagName("td")[6].style.overflow = "clip" ;//
                    tr.getElementsByTagName("td")[6].style.textOverflow = "ellipsis" ;//
                }
            }
        }else{}
        // =>
    }

    PVPI_insider.upTrackByOngoingData = function(rtnO){
        // console.log(rtnO)
        // => create new div/ table if not existed
        let eTop = null;
        if(document.getElementById("PVPI_insider_ongoing") === null){
            if(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
            eTop = my_create("div",undefined,["w3-animate-zoom","w3-responsive"],{"height":"100%"},{id:"PVPI_insider_ongoing"});
            let eTbl = my_create("table",undefined,["w3-table-all","w3-bordered","w3-small"]);
            let eTbd = my_create("tbody");
            eTbd.appendChild(my_add_row(["starting","unique","#jobs","status","est.Finish","working dir."],"th",{"padding":"2px"}));
            eTbl.appendChild(eTbd);
            eTop.appendChild(eTbl);
            mainSide.appendChild(eTop);
        }else{
            eTop = document.getElementById("PVPI_insider_ongoing");
        }
        // =>
        if(Object.keys(rtnO).length > 0){
            let tgtTbl = eTop.getElementsByTagName("tbody")[0];
            while(tgtTbl.childNodes.length > 2) {tgtTbl.lastChild.remove()}
            // -> reset the icon showing the sorting direction
            for(let th of tgtTbl.getElementsByTagName("th")){
                if(th.getElementsByTagName("i").length > 0){
                    if(th.getElementsByTagName("i")[0].classList.contains("nosort")){
                    }else{
                        th.getElementsByTagName("i")[0].innerText = "shuffle";
                    }
                }else{}
            }
            for(let cwd in rtnO){
                let dspItem = "";//displaying item (as PV item)
                let cdir = "";//child dir
                let pdir = "";//parent dir
                let stt = rtnO[cwd]["running"]["ongoStt"];
                let noJob = 0;
               
                // get some info related to cwd
                let tmpa = cwd.split("/");
                // =>
                let tmpa2 = tmpa[tmpa.length-1].split("_");
                if(tmpa2[0].match(/^\d+$/)) {dspItem = tmpa2.shift(); dspItem += "_";}
                dspItem += tmpa2.shift();
                if(tmpa[tmpa.length-2] === "02_lvsnet") {dspItem = "02_lvsnet";}
                // =>
                for(let jobid in rtnO[cwd]){
                    if(jobid === "running" || jobid === "session") {continue}
                    if(rtnO[cwd][jobid]["sub_cwd"] === cwd) {noJob++;}
                }
                while(tmpv = tmpa.pop()){
                    cdir =  tmpv + "/" + cdir;
                    if(tmpv === "01_gdsmerge" || tmpv === "02_lvsnet" || tmpv === "03_calibre"){
                        break;
                    }else{}
                }
                pdir = tmpa.join("/");
                
                // get some info related to unique
                let unique = rtnO[cwd]["session"];
                let prjN = rtnO[cwd]["prjN"];
                tmpa = String(unique).split("__");
                let staT = tmpa[tmpa.length-1]
                let staT2 = rtnO[cwd]["time_start"]
                if(staT2 === null || staT2 === undefined) { staT2 = staT;}
                let user = tmpa[0]
                let host = tmpa[1]
                // console.log(cdir, stt, noJob, tmpa[tmpa.length-1])
                // estimate the time to finish
                let estTimeStr = "unknown";
                let aoPercentOngo = /([\d\.]+)%/.exec(stt);
                if(aoPercentOngo !== null){
                    if(aoPercentOngo[1] > 0 && aoPercentOngo[1] < 100){
                        let tmpv = Date.now()/1000;
                        let nowEpoch = tmpv.toFixed(0);
                        estTimeStr = rtn_mydate(Number(nowEpoch) + (100 - aoPercentOngo[1]) * (nowEpoch - staT2) / 100 + 15*60,true);
                        // console.log(aoPercentOngo[1], nowEpoch, staT2, staT)
                    }else{}
                }

                // make it data
                add_tr_to_tbl(tgtTbl,Array(
                    rtn_mydate(staT,true),
                    "<span onclick=\"PVPI_org.dsp_detail_session_on_top('"+prjN+"','"+unique+"')\" class=\"w3-button w3-brown w3-hover-red\" style=\"padding:0;\">" + unique + "</span>",
                    noJob,
                    stt,
                    estTimeStr,
                    // user,
                    // host,
                    dspItem,cwd
                    ));
            }
            // add_tr_to_tbl(tgtTbl,Array("-","-","-","-","-","-"));
            // MOD some format and add the copy behavior
            for(let tr of tgtTbl.getElementsByTagName("tr")){
                if(tr.lastChild.nodeName === "TD"){
                    tr.lastElementChild.previousElementSibling.innerHTML = 
                        "<i style=\"padding:3px\" onclick=\"upStt_copy_icon(this)\" class=\"w3-button w3-hover-red w3-tiny material-icons\">content_copy</i>" 
                        + tr.lastElementChild.previousElementSibling.innerHTML;
                    tr.lastElementChild.previousElementSibling.classList.add("w3-left-align");
                    // tr.lastElementChild.previousElementSibling.getElementsByTagName("i")[0].addEventListener("click",function(ev){
                    //     if(ev.target.parentNode.nextElementSibling !== null){
                    //             let theText = ev.target.parentNode.nextElementSibling.innerText;
                    //             // navigator.clipboard.writeText(theText);
                    //             document.getElementById("status").innerHTML = "<table><tr><td><i style=\"padding:3px\" class=\"w3-tiny material-icons\">content_copy</i></td><td class=\"w3-card-2\" style=\"display:inline-block\">" + theText + "</td></tr></table>";
                    //         }else{}
                    //     });
                    tr.lastElementChild.style.display = "none";
                    tr.getElementsByTagName("td")[1].classList.add("w3-left-align");
                }else{
                    // console.log(tr.lastChild.nodeName)
                }
            }
        }else{}
    }

    PVPI_insider.upTrackByProblemData = function(rtnO){
        // console.log(rtnO)
        // => create new div/ table if not existed
        let eTop = null;
        if(document.getElementById("PVPI_insider_problem") === null){
            if(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
            eTop = my_create("div",undefined,["w3-animate-zoom","w3-responsive"],{"height":"100%"},{id:"PVPI_insider_problem"});
            let eTbl = my_create("table",undefined,["w3-table-all","w3-bordered","w3-small"]);
            let eTbd = my_create("tbody");
            eTbd.appendChild(my_add_row(["starting","unique","runkey","problem"],"th",{"padding":"2px"}));
            eTbl.appendChild(eTbd);
            eTop.appendChild(eTbl);
            mainSide.appendChild(eTop);
        }else{
            eTop = document.getElementById("PVPI_insider_problem");
        }
        // =>
        if(Object.keys(rtnO).length > 0){
            let tgtTbl = eTop.getElementsByTagName("tbody")[0];
            while(tgtTbl.childNodes.length > 2) {tgtTbl.lastChild.remove()}
            // -> reset the icon showing the sorting direction
            for(let th of tgtTbl.getElementsByTagName("th")){
                if(th.getElementsByTagName("i").length > 0){
                    if(th.getElementsByTagName("i")[0].classList.contains("nosort")){
                    }else{
                        th.getElementsByTagName("i")[0].innerText = "shuffle";
                    }
                }else{}
            }
            // sorting the problem by time
            let tmpa = new Array();
            for(let unique in rtnO){
                let tmpa1 = String(unique).split("__");
                tmpa.push({"unique":unique,"startAt":tmpa1[2]});
            }
            tmpa.sort(function(a,b){
                return b.startAt - a.startAt;
            });
            let maxI = 50;//care only first 20 sessions
            if(maxI > tmpa.length) {maxI = tmpa.length}
            // =>
            for(let i=0;i<maxI;i++){
                let unique = tmpa[i]["unique"];
                let prjN = rtnO[unique]["_prjN_"];
                for(let runk in rtnO[unique]){
                    if(runk === "_prjN_"){continue;}
                    // make it data
                    add_tr_to_tbl(tgtTbl,Array(
                        rtn_mydate(tmpa[i]["startAt"],true),
                        "<span onclick=\"PVPI_org.dsp_detail_session_on_top('"+prjN+"','"+unique+"')\" class=\"w3-button w3-brown w3-hover-red\" style=\"padding:0;\">" + unique + "</span>",
                        runk,
                        rtnO[unique][runk]["problem"],
                        rtnO[unique][runk]["cwd"]
                    ));
                }
            }
            // add_tr_to_tbl(tgtTbl,Array("-","-","-","-"));
            // MOD some format and add the copy behavior
            for(let tr of tgtTbl.getElementsByTagName("tr")){
                if(tr.lastChild.nodeName === "TD"){
                    tr.lastElementChild.previousElementSibling.innerHTML = 
                        "<i style=\"padding:3px\" "
                            +"class=\"w3-button w3-hover-red w3-tiny material-icons\""
                            +"onclick=\"upStt_copy_icon(this)\""
                        +">content_copy</i>"
                        + tr.lastElementChild.previousElementSibling.innerHTML;
                    tr.lastElementChild.style.display = "none";
                }else{
                    // console.log(tr.lastChild.nodeName)
                }
            }
        }else{}
    }

    /////////////////////////////////////////////////////////////
    // private functions
    /////////////////////////////////////////////////////////////
    
    function get_more_from_PI(pi){
        if(pi === undefined) {return Array()};
        if(pi === "") {return Array()};
        return String(pi).split(":");
    }

    function get_more_from_unique(unique){
        if(unique === undefined) {return Array();}
        if(unique === "") {return Array();}
        return String(unique).split("__");
    }

    function genEle_PathInode_w_click(aoInf,owText){
        let inode = aoInf[1];
        if(owText !== undefined){inode = owText;}
        let path = aoInf[0];
        if(inode === "untracked") return "<span class=\"w3-text-grey\">" + inode + "</span>";
        if(inode === undefined) return "<span class=\"w3-text-grey\">" + inode + "</span>";
        if(inode === "empty") return "<span class=\"w3-text-grey\">" + inode + "</span>";
        if(path === undefined) return "<span class=\"w3-text-grey\">" + inode + "</span>";
        return "" + 
                    "<span onclick=\"upStt_this_inode(this)\" style=\"padding:0\" class=\"w3-border-bottom w3-hover-red w3-button\">"+inode+"</span>"+
                    "<span style=\"display:none\">"+path+"</span>"+
                "";
    }

    function rtn_mydate(epoch,flgShortForm){
        let dt = new Date(Number(epoch)*1000);
        let today = new Date();
        // let diffHours = (today - dt)/3600/1000;
        const month = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
        // console.log(epoch, dt, dt.getMonth())
        if(flgShortForm === true){
            if(dt.getDate() === today.getDate()){
                return String(
                    "Today " +
                    ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
                    ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
                );
            }else if(dt.getDate() + 1 === today.getDate()){
                return String(
                    "YDA " +
                    ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
                    ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
                );
            }else if(dt.getDate() + 2 === today.getDate()){
                return String(
                    "TD-2 " +
                    ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
                    ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
                );
            }else if(dt.getDate() - 1 === today.getDate()){
                return String(
                    "TMR " +
                    ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
                    ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
                );
            }else{
            }
        }else{}
        // =>
        return String(
            month[dt.getMonth()] + " " +
            dt.getDate() + ", " +
            dt.getFullYear() + " " +
            ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
            ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
        );
    }

    function add_tr_to_tbl(eleTbl, aoTdTxt,type){
        if(type === undefined) {type = "td"}
        let tr = document.createElement("tr");
        for(let tdTxt of aoTdTxt){
            let td = document.createElement(type); td.innerHTML = tdTxt; tr.appendChild(td); td.style.padding = "1px";
        }
        tr.style.padding = 0;
        eleTbl.appendChild(tr);
        return;
    }

    function rtn_mydate(epoch,flgShortForm){
        let dt = new Date(Number(epoch)*1000);
        let today = new Date();
        // let diffHours = (today - dt)/3600/1000;
        const month = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
        // console.log(epoch, dt, dt.getMonth())
        if(flgShortForm === true){
            if(dt.getDate() === today.getDate()){
                return String(
                    "Today " +
                    ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
                    ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
                );
            }else if(dt.getDate() + 1 === today.getDate()){
                return String(
                    "YDA " +
                    ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
                    ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
                );
            }else if(dt.getDate() + 2 === today.getDate()){
                return String(
                    "TD-2 " +
                    ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
                    ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
                );
            }else if(dt.getDate() - 1 === today.getDate()){
                return String(
                    "TMR " +
                    ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
                    ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
                );
            }else{
            }
        }else{}
        // =>
        return String(
            month[dt.getMonth()] + " " +
            dt.getDate() + ", " +
            dt.getFullYear() + " " +
            ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
            ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
        );
    }
    
}(window.PVPI_insider = window.PVPI_insider || {}));

FILE:: .//src_modules/PVPI_insider/simpleFunctions_myCritData.js
// let tgtObj = new Object();//global object

let flgAllowUntrack = false;// flag to allow to display the data (merge1/merge2/core) 'untrack' status 
let flgAllowNonePVitem = true; //flag to allow to display the data (merge1/merge2/core) with no PV item following
let oPrjNvsTopCell = new Object();
let flgDspSessions = false;
////////////////////////////////////////////

setInterval(function(){
    console.log("trigger ...", new Date());
    upTrackByMergeData();
    upTrackByOngoData();
    upTrackByProblemData();
    upDspSessions();
}, 900000);//action set the scheduling, unit: ms

function myTest(){
    upTrackByMergeData();
    upTrackByOngoData();
    upTrackByProblemData();
}

function onload4document(){
    // ->
    hideEle(document.getElementById("loading"));
    toggle_the_right();
    first_load_project_names();
    // -> main task
    upTrackByMergeData();
    upTrackByOngoData();
    upTrackByProblemData();
    dsp_sessions_onright();
    //
    console.log("finished onload4document");
}

function upTrackByProblemData (){
    // notify
    showEle(document.getElementById("loading"));
    let loadingEle = gen_loading_4subEle(document.getElementById("dataMerge"));
    //AJAX data
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            tgtObj = JSON.parse(this.responseText);
            // console.log(tgtObj);
            if(Object.keys(tgtObj).length > 0){
                let tgtTbl = document.getElementById("problem").getElementsByTagName("tbody")[0];
                while(tgtTbl.childNodes.length > 2) {tgtTbl.lastChild.remove()}
                // -> reset the icon showing the sorting direction
                for(let th of tgtTbl.getElementsByTagName("th")){
                    if(th.getElementsByTagName("i").length > 0){
                        if(th.getElementsByTagName("i")[0].classList.contains("nosort")){
                        }else{
                            th.getElementsByTagName("i")[0].innerText = "shuffle";
                        }
                    }else{}
                }
                // sorting the problem by time
                let tmpa = new Array();
                for(let unique in tgtObj){
                    let tmpa1 = String(unique).split("__");
                    tmpa.push({"unique":unique,"startAt":tmpa1[2]});
                }
                tmpa.sort(function(a,b){
                    return b.startAt - a.startAt;
                });
                let maxI = 50;//care only first 20 sessions
                if(maxI > tmpa.length) {maxI = tmpa.length}
                // =>
                for(let i=0;i<maxI;i++){
                    let unique = tmpa[i]["unique"];
                    let prjN = tgtObj[unique]["_prjN_"];
                    for(let runk in tgtObj[unique]){
                        if(runk === "_prjN_"){continue;}
                        // make it data
                        add_tr_to_tbl(tgtTbl,Array(
                            rtn_mydate(tmpa[i]["startAt"],true),
                            "<span onclick=\"dsp_unique_ontop('"+prjN+"','"+unique+"')\" class=\"w3-button w3-brown w3-hover-red\" style=\"padding:0;\">" + unique + "</span>",
                            runk,
                            tgtObj[unique][runk]["problem"],
                            tgtObj[unique][runk]["cwd"]
                        ));
                    }
                }
                // add_tr_to_tbl(tgtTbl,Array("-","-","-","-"));
                // MOD some format and add the copy behavior
                for(let tr of tgtTbl.getElementsByTagName("tr")){
                    if(tr.lastChild.nodeName === "TD"){
                        tr.lastElementChild.previousElementSibling.innerHTML = 
                            "<i style=\"padding:3px\" "
                                +"class=\"w3-button w3-hover-red w3-tiny material-icons\""
                                +"onclick=\"upStt_copy_icon(this)\""
                            +">content_copy</i>"
                            + tr.lastElementChild.previousElementSibling.innerHTML;
                        tr.lastElementChild.style.display = "none";
                    }else{
                        // console.log(tr.lastChild.nodeName)
                    }
                }
            }else{}
            //
            hideEle(document.getElementById("loading"));
            loadingEle.remove();
        }
    };
    xmlhttp.open("GET", "trackProblemData.php", true)
    xmlhttp.send();

    // console.log("finished upTrackByOngoData")
    return 1;
}

function upTrackByOngoData (){
    // notify
    showEle(document.getElementById("loading"));
    let loadingEle = gen_loading_4subEle(document.getElementById("dataMerge"));
    //AJAX data
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            tgtObj = JSON.parse(this.responseText);
            // console.log(tgtObj);
            if(Object.keys(tgtObj).length > 0){
                let tgtTbl = document.getElementById("ongoing").getElementsByTagName("tbody")[0];
                while(tgtTbl.childNodes.length > 2) {tgtTbl.lastChild.remove()}
                // -> reset the icon showing the sorting direction
                for(let th of tgtTbl.getElementsByTagName("th")){
                    if(th.getElementsByTagName("i").length > 0){
                        th.getElementsByTagName("i")[0].innerText = "shuffle";
                    }else{}
                }
                for(let cwd in tgtObj){
                    let dspItem = "";//displaying item (as PV item)
                    let cdir = "";//child dir
                    let pdir = "";//parent dir
                    let stt = tgtObj[cwd]["running"]["ongoStt"];
                    let noJob = 0;
                   
                    // get some info related to cwd
                    let tmpa = cwd.split("/");
                    // =>
                    let tmpa2 = tmpa[tmpa.length-1].split("_");
                    if(tmpa2[0].match(/^\d+$/)) {dspItem = tmpa2.shift(); dspItem += "_";}
                    dspItem += tmpa2.shift();
                    if(tmpa[tmpa.length-2] === "02_lvsnet") {dspItem = "02_lvsnet";}
                    // =>
                    for(let jobid in tgtObj[cwd]){
                        if(jobid === "running" || jobid === "session") {continue}
                        if(tgtObj[cwd][jobid]["sub_cwd"] === cwd) {noJob++;}
                    }
                    while(tmpv = tmpa.pop()){
                        cdir =  tmpv + "/" + cdir;
                        if(tmpv === "01_gdsmerge" || tmpv === "02_lvsnet" || tmpv === "03_calibre"){
                            break;
                        }else{}
                    }
                    pdir = tmpa.join("/");
                    
                    // get some info related to unique
                    let unique = tgtObj[cwd]["session"];
                    let prjN = tgtObj[cwd]["prjN"];
                    tmpa = String(unique).split("__");
                    let staT = tmpa[tmpa.length-1]
                    let staT2 = tgtObj[cwd]["time_start"]
                    if(staT2 === null || staT2 === undefined) { staT2 = staT;}
                    let user = tmpa[0]
                    let host = tmpa[1]
                    // console.log(cdir, stt, noJob, tmpa[tmpa.length-1])
                    // estimate the time to finish
                    let estTimeStr = "unknown";
                    let aoPercentOngo = /([\d\.]+)%/.exec(stt);
                    if(aoPercentOngo !== null){
                        if(aoPercentOngo[1] > 0 && aoPercentOngo[1] < 100){
                            let tmpv = Date.now()/1000;
                            let nowEpoch = tmpv.toFixed(0);
                            estTimeStr = rtn_mydate(Number(nowEpoch) + (100 - aoPercentOngo[1]) * (nowEpoch - staT2) / 100 + 15*60,true);
                            // console.log(aoPercentOngo[1], nowEpoch, staT2, staT)
                        }else{}
                    }

                    // make it data
                    add_tr_to_tbl(tgtTbl,Array(
                        rtn_mydate(staT,true),
                        "<span onclick=\"dsp_unique_ontop('"+prjN+"','"+unique+"')\" class=\"w3-button w3-brown w3-hover-red\" style=\"padding:0;\">" + unique + "</span>",
                        noJob,
                        stt,
                        estTimeStr,
                        // user,
                        // host,
                        dspItem,cwd
                        ));
                }
                // add_tr_to_tbl(tgtTbl,Array("-","-","-","-","-","-"));
                // MOD some format and add the copy behavior
                for(let tr of tgtTbl.getElementsByTagName("tr")){
                    if(tr.lastChild.nodeName === "TD"){
                        tr.lastElementChild.previousElementSibling.innerHTML = 
                            "<i style=\"padding:3px\" onclick=\"upStt_copy_icon(this)\" class=\"w3-button w3-hover-red w3-tiny material-icons\">content_copy</i>" 
                            + tr.lastElementChild.previousElementSibling.innerHTML;
                        tr.lastElementChild.previousElementSibling.classList.add("w3-left-align");
                        // tr.lastElementChild.previousElementSibling.getElementsByTagName("i")[0].addEventListener("click",function(ev){
                        //     if(ev.target.parentNode.nextElementSibling !== null){
                        //             let theText = ev.target.parentNode.nextElementSibling.innerText;
                        //             // navigator.clipboard.writeText(theText);
                        //             document.getElementById("status").innerHTML = "<table><tr><td><i style=\"padding:3px\" class=\"w3-tiny material-icons\">content_copy</i></td><td class=\"w3-card-2\" style=\"display:inline-block\">" + theText + "</td></tr></table>";
                        //         }else{}
                        //     });
                        tr.lastElementChild.style.display = "none";
                        tr.getElementsByTagName("td")[1].classList.add("w3-left-align");
                    }else{
                        // console.log(tr.lastChild.nodeName)
                    }
                }
            }else{}
            //
            hideEle(document.getElementById("loading"));
            loadingEle.remove();
        }
    };
    xmlhttp.open("GET", "trackOngoingData.php", true)
    xmlhttp.send();

    // console.log("finished upTrackByOngoData")
    return 1;
}

function get_more_from_PI(pi){
    if(pi === undefined) {return Array()};
    if(pi === "") {return Array()};
    return String(pi).split(":");
}
function get_more_from_unique(unique){
    if(unique === undefined) {return Array();}
    if(unique === "") {return Array();}
    return String(unique).split("__");
}
function genEle_PathInode_w_click(aoInf,owText){
    let inode = aoInf[1];
    if(owText !== undefined){inode = owText;}
    let path = aoInf[0];
    if(inode === "untracked") return "<span class=\"w3-text-grey\">" + inode + "</span>";
    if(inode === undefined) return "<span class=\"w3-text-grey\">" + inode + "</span>";
    if(inode === "empty") return "<span class=\"w3-text-grey\">" + inode + "</span>";
    if(path === undefined) return "<span class=\"w3-text-grey\">" + inode + "</span>";
    return "" + 
                "<span onclick=\"upStt_this_inode(this)\" style=\"padding:0\" class=\"w3-border-bottom w3-hover-red w3-button\">"+inode+"</span>"+
                "<span style=\"display:none\">"+path+"</span>"+
            "";
}
function rtn_mydate(epoch,flgShortForm){
    let dt = new Date(Number(epoch)*1000);
    let today = new Date();
    // let diffHours = (today - dt)/3600/1000;
    const month = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
    // console.log(epoch, dt, dt.getMonth())
    if(flgShortForm === true){
        if(dt.getDate() === today.getDate()){
            return String(
                "Today " +
                ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
                ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
            );
        }else if(dt.getDate() + 1 === today.getDate()){
            return String(
                "YDA " +
                ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
                ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
            );
        }else if(dt.getDate() + 2 === today.getDate()){
            return String(
                "TD-2 " +
                ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
                ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
            );
        }else if(dt.getDate() - 1 === today.getDate()){
            return String(
                "TMR " +
                ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
                ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
            );
        }else{
        }
    }else{}
    // =>
    return String(
        month[dt.getMonth()] + " " +
        dt.getDate() + ", " +
        dt.getFullYear() + " " +
        ((dt.getHours()<10) ? "0" : "") + dt.getHours() + ":" +
        ((dt.getMinutes()<10) ? "0" : "") + dt.getMinutes()
    );
}
function upTrackByMergeData (){
    // notify
    showEle(document.getElementById("loading"));
    let loadingEle = gen_loading_4subEle(document.getElementById("dataMerge"));
    if(flgNonePV.value === "true") {flgAllowNonePVitem = true;  }else{ flgAllowNonePVitem = false;}
    if(flgUntrack.value === "true") {flgAllowUntrack = true;  }else{ flgAllowUntrack = false;}
    let guidedPrjN = globalShowedPrjN.value;
    let guidedTopCell = globalShowedTopCell.value;
    let guidedMaxN = globalMaxDataPerIP.value;
    // console.log("ALOHA", flgAllowNonePVitem, flgAllowUntrack, guidedPrjN, guidedMaxN)
    //AJAX data
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            tgtObj = JSON.parse(this.responseText);
            // console.log(tgtObj);
            let tgtTbl = document.getElementById("dataMerge").getElementsByTagName("tbody")[0];
            // => remove all childs
            while(tgtTbl.childNodes.length > 2) {tgtTbl.lastChild.remove()};
            // => proceed data if valid
            if(Object.keys(tgtObj).length > 0){
                // -> reset the icon showing the sorting direction
                for(let th of tgtTbl.getElementsByTagName("th")){
                    if(th.getElementsByTagName("i").length > 0){
                        th.getElementsByTagName("i")[0].innerText = "shuffle";
                    }else{}
                }
                let regInodeVsPath = new Object();//register inode => path for reference later
                for(let dataPI in tgtObj){
                    //
                    let uniInf = get_more_from_unique(tgtObj[dataPI]["ref"]);
                    let tmpv = get_more_from_PI(dataPI);
                    if(! regInodeVsPath.hasOwnProperty(uniInf[1])) { regInodeVsPath[uniInf[1]] = new Object;}
                    if(! regInodeVsPath[uniInf[1]].hasOwnProperty(tmpv[1])) { regInodeVsPath[uniInf[1]][tmpv[1]] = new Array;}
                    regInodeVsPath[uniInf[1]][tmpv[1]].push(tmpv[0]);
                    //
                    // ONLY List the data-stream with PVitem
                    if(flgAllowNonePVitem === false){
                        if(tgtObj[dataPI]["PVitems"] === undefined) {continue;}
                        if(Object.keys(tgtObj[dataPI]["PVitems"]).length == 0) {continue;}
                    }else{}
                    /////////////////////////////////////////////
                    let noDRC = 0;
                    let noLVS = 0;
                    let noLVL = 0;
                    let ongo = "done";
                    let prjN = "aPrj";
                    let topCellName = "aTopCellName";
                    let infObj = new Object();//get all involved sessions to be displayed later (and compare)
                    let infDiv = "<i class=\"material-icons w3-text-grey\" style=\"font-size:16px\">info</i>";
                    let cmpL = "<i onclick=\"dsp_compareInfo_on_merge_data(this)\" class=\"material-icons w3-button w3-tiny\" style=\"padding:0;font-size:16px\">visibility_off</i>";
                    let cmpR = "<i onclick=\"dsp_compareInfo_on_merge_data(this)\" class=\"material-icons w3-button w3-tiny\" style=\"padding:0;font-size:16px\">visibility_off</i>";
                    let mtime = undefined;
                    if(tgtObj[dataPI].hasOwnProperty("mtime")) {mtime = rtn_mydate(tgtObj[dataPI]["mtime"]); }
                    for(let keyw in tgtObj[dataPI]["PVitems"]){
                        if(/^drc/.test(keyw)){
                            noDRC+=Object.keys(tgtObj[dataPI]["PVitems"][keyw]).length;
                        }else if(/^lvs/.test(keyw)){
                            noLVS+=Object.keys(tgtObj[dataPI]["PVitems"][keyw]).length;
                        }else if(/^lvl/.test(keyw)){
                            noLVL+=Object.keys(tgtObj[dataPI]["PVitems"][keyw]).length;
                        }else{ }
                        for(let unq in tgtObj[dataPI]["PVitems"][keyw]){
                            if(!infObj.hasOwnProperty(keyw)){infObj[keyw] = new Object();}
                            infObj[keyw][unq] = 1;
                        }
                    }
                    if(tgtObj[dataPI]["ongo"] !== undefined && tgtObj[dataPI]["ongo"]){ ongo = tgtObj[dataPI]["ongo"]; }
                    ////////////////////////////////////////////
                    if(flgAllowUntrack === false){
                        if(ongo === "untrack") {continue;} //Disable this to limit the out-puts
                    }else{}
                    ////////////////////////////////////////////
                    prjN = tgtObj[dataPI]["prjN"];
                    topCellName = tgtObj[dataPI]["TOP_LAYOUT_NAME"];
                    if(guidedTopCell !== "all" && topCellName !== guidedTopCell) {continue;}
                    let type = tgtObj[dataPI]["type"];
                    // console.log(type, tgtObj[dataPI])
                    if(type === "gds_merge2"){
                        let thisRegData = get_more_from_PI(dataPI);
                        let merge1PI = undefined;
                        let refMerge1Unq = undefined;
                        if(tgtObj[dataPI].hasOwnProperty("inputs")){
                            if(tgtObj[dataPI]["inputs"].hasOwnProperty("gds_merge1")){
                                merge1PI = tgtObj[dataPI]["inputs"]["gds_merge1"];
                                if(tgtObj.hasOwnProperty(merge1PI)){
                                    refMerge1Unq = tgtObj[merge1PI]["ref"];
                                }
                            }else{}
                        }else{}
                        let merge1RegData = get_more_from_PI(merge1PI);
                        let coreRegData = Array(undefined,"untracked");
                        let refUnq = tgtObj[dataPI]["ref"];
                        if(!infObj.hasOwnProperty(type)){infObj[type] = new Object();} ; infObj[type][refUnq] = 1;
                        if(!infObj.hasOwnProperty("gds_merge1")){infObj["gds_merge1"] = new Object();} ; infObj["gds_merge1"][refMerge1Unq] = 1;
                        if(!tgtObj.hasOwnProperty(merge1PI)){
                            //untracked merge1
                            if(merge1PI === ""){
                                merge1PI ="Unknown:empty";
                                merge1RegData = get_more_from_PI(merge1PI);
                            }
                        }else if(!tgtObj[merge1PI].hasOwnProperty("inputs")){
                            //untracked core: maybe before not applied the script tracking or old version
                        }else{
                            coreRegData = get_more_from_PI(tgtObj[merge1PI]["inputs"]["core"]);
                        }
                        // console.log(merge1PI,tgtObj[merge1PI])
                        let dummyStr = "";
                        for(let dmyT in tgtObj[dataPI]["inputs"]){
                            if(dmyT === "gds_merge1") {continue;}
                            let dmyXPI = tgtObj[dataPI]["inputs"][dmyT];
                            if(tgtObj[dmyXPI] === undefined){
                                // try to compare with merge1
                                let dmyXPIRegData = get_more_from_PI(dmyXPI);
                                let tmpa = String(dmyXPIRegData[0]).split("/");
                                tmpa.pop();tmpa.pop();
                                let chkPdmy = tmpa.join("/");
                                tmpa = String(merge1RegData[0]).split("/");
                                tmpa.pop();tmpa.pop();tmpa.pop();
                                let chkPm1 = tmpa.join("/");
                                if(chkPdmy === chkPm1){
                                    dummyStr += " " + genEle_PathInode_w_click(get_more_from_PI(dmyXPI),dmyT) + ":" + "Maybe";
                                }else{
                                    dummyStr += " " + genEle_PathInode_w_click(get_more_from_PI(dmyXPI),dmyT) + ":" + "Unkwn";
                                }
                            }else{
                                let merge1ForDMYRegData = get_more_from_PI(tgtObj[dmyXPI]["inputs"]["gds_merge1"]);
                                if(merge1ForDMYRegData[1] === merge1RegData[1]){
                                    dummyStr += " " + genEle_PathInode_w_click(get_more_from_PI(dmyXPI),dmyT) + ":" + "Same";
                                }else{
                                    dummyStr += " " + genEle_PathInode_w_click(get_more_from_PI(dmyXPI),dmyT) + ":" + genEle_PathInode_w_click(merge1ForDMYRegData);
                                }
                                let refUnq = tgtObj[dmyXPI]["ref"];
                                if(!infObj.hasOwnProperty(dmyT)){infObj[dmyT] = new Object();} ; infObj[dmyT][refUnq] = 1;
                            }
                        }
                        // => decide the add info
                        if(Object.keys(infObj).length>0){
                            let addInf = "<span style=\"display:none\">";
                            for(let keyw in infObj){
                                for(let unq in infObj[keyw]){
                                    addInf += keyw + ":" + unq + " ";
                                }
                            }
                            addInf += "</span>"
                            infDiv = "<i onclick=\"dsp_info_on_merge_data(this)\" class=\"material-icons w3-button w3-text-blue\" style=\"padding:0;font-size:16px\">info</i>"+addInf;
                        }
                        // =>
                        add_tr_to_tbl(tgtTbl,Array(
                            cmpL,cmpR,
                            infDiv,
                            ongo,
                            mtime,
                            prjN,
                            topCellName,
                            uniInf[0],
                            uniInf[1],
                            genEle_PathInode_w_click(coreRegData),
                            genEle_PathInode_w_click(merge1RegData),
                            dummyStr,
                            genEle_PathInode_w_click(thisRegData),
                            noDRC,
                            noLVS,
                            noLVL
                        ));
                        // console.log("tracked merge2: ", infObj)
                    }else if(type === "gds_merge1"){
                        let thisRegData = get_more_from_PI(dataPI);
                        let corePI = undefined;
                        let coreRegData = Array(undefined,"untracked");
                        if(tgtObj[dataPI].hasOwnProperty("inputs")){
                            if(tgtObj[dataPI]["inputs"].hasOwnProperty("core")){
                                corePI = tgtObj[dataPI]["inputs"]["core"];
                            }else{}
                        }else{}
                        if(corePI !== null && corePI !== undefined  ){coreRegData = get_more_from_PI(corePI);}
                        let refUnq = tgtObj[dataPI]["ref"];
                        if(!infObj.hasOwnProperty(type)){infObj[type] = new Object();} ; infObj[type][refUnq] = 1;
                        // => decide the add info
                        if(Object.keys(infObj).length>0){
                            let addInf = "<span style=\"display:none\">";
                            for(let keyw in infObj){
                                for(let unq in infObj[keyw]){
                                    addInf += keyw + ":" + unq + " ";
                                }
                            }
                            addInf += "</span>"
                            infDiv = "<i onclick=\"dsp_info_on_merge_data(this)\" class=\"material-icons w3-button w3-text-blue\" style=\"padding:0;font-size:16px\">info</i>"+addInf;
                        }
                        // =>
                        add_tr_to_tbl(tgtTbl,Array(
                            cmpL,cmpR,
                            infDiv,
                            ongo,
                            mtime,
                            prjN,
                            topCellName,
                            uniInf[0],
                            uniInf[1],
                            genEle_PathInode_w_click(coreRegData),
                            genEle_PathInode_w_click(thisRegData),
                            "none",
                            "none",
                            noDRC,
                            noLVS,
                            noLVL
                        ));
                    }else{
                        //UNKNOWN DATA!!!
                        // => maybe untracked => try to divide into group of unique, assume that there is only "PVitems" under "dataPI"
                        let thisRegData = get_more_from_PI(dataPI);
                        if(thisRegData.length > 0){
                            // console.log("unknown type 1",thisRegData)
                            // => decide the add info
                            if(Object.keys(infObj).length>0){
                                let addInf = "<span style=\"display:none\">";
                                for(let keyw in infObj){
                                    for(let unq in infObj[keyw]){
                                        addInf += keyw + ":" + unq + " ";
                                    }
                                }
                                addInf += "</span>"
                                infDiv = "<i onclick=\"dsp_info_on_merge_data(this)\" class=\"material-icons w3-button w3-text-blue\" style=\"padding:0;font-size:16px\">info</i>"+addInf;
                            }
                            // =>
                            add_tr_to_tbl(tgtTbl,Array(
                                cmpL,cmpR,
                                infDiv,
                                ongo,
                                mtime,
                                prjN,
                                topCellName,
                                uniInf[0],
                                uniInf[1],
                                "uknown",
                                "uknown",
                                "uknown",
                                genEle_PathInode_w_click(thisRegData),
                                noDRC,
                                noLVS,
                                noLVL
                            ));
                        }else{
                            // untracked event the merge data (very old data) => try to divide by the unique key
                            // console.log(tgtObj[dataPI]["PVitems"])
                    if(1){
                            let tmpObj = new Object();
                            for(let item in tgtObj[dataPI]["PVitems"]){
                                for(let unique in tgtObj[dataPI]["PVitems"][item]){
                                    if(!tmpObj.hasOwnProperty(unique)) {tmpObj[unique] = new Object();}
                                    tmpObj[unique][item] = 1;
                                }
                            }
                            console.log("unknown type 2",tgtObj[dataPI])
                            // out the data
                            for(let unique in tmpObj){
                                noDRC = 0;
                                noLVS = 0;
                                noLVL = 0;
                                infObj = new Object();
                                for(let keyw in tmpObj[unique]){
                                    if(/^drc/.test(keyw)){
                                        noDRC++;
                                    }else if(/^lvs/.test(keyw)){
                                        noLVS++;
                                    }else if(/^lvl/.test(keyw)){
                                        noLVL++;
                                    }else{ }
                                    if(!infObj.hasOwnProperty(keyw)){infObj[keyw] = new Object();}
                                    infObj[keyw][unique] = 1;
                                }
                                // =>
                                tmpa = String(unique).split("__");
                                // => decide the add info
                                if(Object.keys(infObj).length>0){
                                    let addInf = "<span style=\"display:none\">";
                                    for(let keyw in infObj){
                                        for(let unq in infObj[keyw]){
                                            addInf += keyw + ":" + unq + " ";
                                        }
                                    }
                                    addInf += "</span>"
                                    infDiv = "<i onclick=\"dsp_info_on_merge_data(this)\" class=\"material-icons w3-button w3-text-blue\" style=\"padding:0;font-size:16px\">info</i>"+addInf;
                                }
                                // =>
                                add_tr_to_tbl(tgtTbl,Array(
                                    cmpL,cmpR,
                                    infDiv,
                                    ongo,
                                    rtn_mydate(tmpa[2]),
                                    prjN,
                                    topCellName,
                                    tmpa[0],
                                    tmpa[1],
                                    undefined,
                                    undefined,
                                    undefined,
                                    genEle_PathInode_w_click(Array(unique,"ut3-" + tmpa[2])),
                                    noDRC,
                                    noLVS,
                                    noLVL
                                ));
                            }
                    }
                        }
                    }
                }
                // default sort this
                sortTblByHeader(tgtTbl.getElementsByTagName("th")[4]);
                // modify some column
                for(let tr of tgtTbl.getElementsByTagName("tr")){
                    if(tr.getElementsByTagName("td").length > 0){
                        tr.getElementsByTagName("td")[6].style.textAlign = "left" ;//the top-cell-name too long
                        tr.getElementsByTagName("td")[6].style.maxWidth = "100px" ;//the top-cell-name too long
                        tr.getElementsByTagName("td")[6].style.overflow = "clip" ;//
                        tr.getElementsByTagName("td")[6].style.textOverflow = "ellipsis" ;//
                    }
                }
            }else{}
            //
            hideEle(document.getElementById("loading"));
            loadingEle.remove();
        }
    };
    xmlhttp.open("GET", "trackByMergeData_dev.php?q="+guidedPrjN+"&maxN="+guidedMaxN, true)
    xmlhttp.send();

    // console.log("finished upTrackByMergeData")
    return 1;
}
function upStt_this_inode(tgtEle){
    if(tgtEle === undefined) {return 0;}
    if(tgtEle.innerText === undefined) {return 0;}
    let tgtAEle = document.getElementById("status");
    while(tgtAEle.childNodes.length>0){tgtAEle.lastChild.remove();}
    let aTbl = document.createElement("table");
    let aBdy = document.createElement("tbody");
    let tr = document.createElement("tr");
    tr.innerHTML = "<td style=\"padding:0;min-width:100px\">data:"+tgtEle.innerText+"</td>" +
                   "<td style=\"padding:0;\">"+tgtEle.nextElementSibling.innerText+"</td>";
    aBdy.appendChild(tr);
    aTbl.appendChild(aBdy);
    tgtAEle.appendChild(aTbl);
    return 1;
}
function upStt_copy_icon(tgtEle){
    if(tgtEle === undefined) {return 0;}
    if(!tgtEle.tagName === "I") {return 0;}
    if(!tgtEle.parentNode.nextElementSibling === undefined) {return 0;}
    let tgtAEle = document.getElementById("status");
    while(tgtAEle.childNodes.length>0){tgtAEle.lastChild.remove();}
    let aTbl = document.createElement("table");
    let aBdy = document.createElement("tbody");
    let tr = document.createElement("tr");
    tr.innerHTML = "<td style=\"padding:0;min-width:100px\">path:</td>" +
                   "<td style=\"padding:0;\">"+tgtEle.parentNode.nextElementSibling.innerText+"</td>";
    aBdy.appendChild(tr);
    aTbl.appendChild(aBdy);
    tgtAEle.appendChild(aTbl);
    // => copy to clipboard
    if(navigator.clipboard !== undefined){
        navigator.clipboard.writeText(tgtEle.parentNode.nextElementSibling.innerText);
    }
    //
    return 1;
}

function upColorByPercent(tgtEle){
    // console.log(tgtEle.innerText)
    if(/[\d\.]+%/.test(tgtEle.innerText)){
        let numb = Number(/([\d+\.]+)%/.exec(tgtEle.innerText)[1])
        if(numb < 50){
            tgtEle.classList.add("w3-green", "w3-round");
        }else if(numb < 75){
            tgtEle.classList.add("w3-yellow", "w3-round");
        }else if(numb < 95){
            tgtEle.classList.add("w3-orange", "w3-round");
        }else if(numb){
            tgtEle.classList.add("w3-red", "w3-round");
        }else{
            // let the color as it is
        }
    }else{}
    return;
}
function add_tr_to_tbl(eleTbl, aoTdTxt,type){
    if(type === undefined) {type = "td"}
    let tr = document.createElement("tr");
    for(let tdTxt of aoTdTxt){
        let td = document.createElement(type); td.innerHTML = tdTxt; tr.appendChild(td); td.style.padding = "1px";
    }
    tr.style.padding = 0;
    eleTbl.appendChild(tr);
    return;
}

function toggleDspId(tgtId){
    let tgtEle = document.getElementById(tgtId)
    if (tgtEle.className.indexOf("w3-show") == -1) {
        tgtEle.className += " w3-show";
    } else { 
        tgtEle.className = tgtEle.className.replace(" w3-show", "");
    }
    return;
}
function toggleDspEle(tgtEle){
    // console.log("toggle", tgtEle, tgtEle.parentNode)
    if (tgtEle.className.indexOf("w3-show") == -1) {
        tgtEle.className += " w3-show";
    } else { 
        tgtEle.className = tgtEle.className.replace(" w3-show", "");
    }
    return;
}
function showEle(tgtEle){
    if (tgtEle.className.indexOf("w3-show") == -1) {
        tgtEle.className += " w3-show";
    } else { 
        // tgtEle.className = tgtEle.className.replace(" w3-show", "");
    }
    return;
}
function hideEle(tgtEle){
    if (tgtEle.className.indexOf("w3-show") == -1) {
        // tgtEle.className += " w3-show";
    } else { 
        tgtEle.className = tgtEle.className.replace(" w3-show", "");
    }
    return;
}

function sortTblByHeader(thTgt){
    let trHead = thTgt.parentNode.getElementsByTagName("th");
    let tgtTbl = thTgt.parentNode.parentNode;
    let indexTH = -1;

    let current_sort_direction = "";
    if(thTgt.getElementsByTagName("i").length >0){
        current_sort_direction = thTgt.getElementsByTagName("i")[0].innerText;
    }
    if(current_sort_direction === "" || current_sort_direction === "shuffle" || current_sort_direction === "arrow_drop_up"){
        current_sort_direction = "arrow_drop_down";
    }else{
        current_sort_direction = "arrow_drop_up";
    }

    // get index of header => get the target content to be compared
    for(let i=0;i<trHead.length;i++){
        if(thTgt === trHead[i]){
            indexTH = i;
        }
    }
    // console.log(tgtTbl.childNodes.length)
    // => arrange table again by indicating array
    let aoTr = tgtTbl.getElementsByTagName("tr");
    let orgAoTr = new Array();
    for(i=0;i<aoTr.length;i++){
        orgAoTr.push(aoTr[i].cloneNode(true));
    }

    // => control the array
    let tmpA = new Array();
    for(let i=1;i<aoTr.length;i++){
        let tmpO = new Object();
        tmpO["index"] = i;
        tmpO["org"] = aoTr[i].getElementsByTagName("td")[indexTH].innerText;
        tmpO["tgtNum"] = /^\d+/.exec(aoTr[i].getElementsByTagName("td")[indexTH].innerText);
        // tmpO["epoch"] = new Date(tmpO["org"]).getTime();
        tmpO["epoch"] = new Date(tmpO["org"]).valueOf();
        if(!/^\d+$/.test(tmpO["tgtNum"])){ //number takes precedence
            if(/^\d+$/.test(tmpO["epoch"])) {tmpO["tgtNum"] = tmpO["epoch"]}
        }
        // =>
        tmpA.push(tmpO);
    }
    // => sorting: sort the indicating array
    if(current_sort_direction === "arrow_drop_down"){
        tmpA.sort(function(a,b){
            if(b.tgtNum === null && a.tgtNum === null){
                x = a.org.toUpperCase();
                y = b.org.toUpperCase();
                if(x < y) { return 1; }
                if(x > y) { return -1; }
                return 0;
            }else{
                return b.tgtNum - a.tgtNum;
            }
        });
    }else{
        tmpA.sort(function(a,b){
            if(b.tgtNum === null && a.tgtNum === null){
                x = a.org.toUpperCase();
                y = b.org.toUpperCase();
                if(x < y) { return -1; }
                if(x > y) { return 1; }
                return 0;
            }else{
                return a.tgtNum - b.tgtNum
            }
        });
    }
    // console.log("index",indexTH, tmpA)

    // remove orginal table
    // while(tgtTbl.childNodes.length > 2){ tgtTbl.lastChild.remove();   }
    while(tgtTbl.getElementsByTagName("tr").length > 1){ tgtTbl.getElementsByTagName("tr")[tgtTbl.getElementsByTagName("tr").length-1].remove()}
    // replace by copied elements
    for(let i=1;i<orgAoTr.length;i++){
        let tgtI = tmpA[i-1]["index"];
        // console.log(i, tgtI, tmpA[i-1]["tgtNum"][0], tmpA[i-1]["srvN"], aoTr[tgtI])
        tgtTbl.appendChild(orgAoTr[tgtI]);
    }
    // update the status show-off
    if(thTgt.getElementsByTagName("i").length >0){
        thTgt.getElementsByTagName("i")[0].innerText = current_sort_direction;
    }
}

function deleteTbl(tgtTbl){
    let aoData = tgtTbl.getElementsByTagName("tr");
    if(aoData.length > 1){
        while(aoData.length > 1){
            aoData[aoData.length-1].remove();
        }
    }
    return;
}

function toggle_the_right(){
    if(dataMerge.style.width == "100%"){
        dataMerge.style.width = "";
        // ongoing.style.width = "";
        problem.style.width = "";
    }else{
        dataMerge.style.width = "100%";
        // ongoing.style.width = "100%";
    }
    toggleDspEle(dataCmp);
    // toggleDspEle(problem);
}

function hide_right_up(){ dataMerge.style.width = "100%"; hideEle(dataCmp);}
function show_right_up(){ dataMerge.style.width = ""    ; showEle(dataCmp);}

function gen_loading_4subEle(tgtE){
    let width =  tgtE.offsetWidth-20;//remove 20 for the scroll if anny
    let height = tgtE.offsetHeight;
    let left = tgtE.offsetLeft;
    let top = tgtE.offsetTop;
    let oEle = document.createElement("div");
    let coreEle = document.createElement("i");
    coreEle.classList.add("w3-display-middle","w3-spin","material-icons");
    coreEle.innerText = "settings";
    coreEle.style.fontSize = "72px";
    coreEle.style.color =  "blue";
    oEle.appendChild(coreEle);
    oEle.classList.add("w3-opacity","w3-light-grey","w3-show","w3-center","w3-display-container","w3-animate-zoom");
    oEle.style.position = "fixed";
    oEle.style.width = width + "px";
    oEle.style.height = height + "px";
    oEle.style.top = top + "px";
    oEle.style.left = left + "px";
    // =>
    tgtE.appendChild(oEle);
    return oEle;
}

function to_hours_from_seconds(secs){
    if(!/^\d+$/.test(secs)) {return secs;}
    let hours = (Number(secs)/3600).toFixed(1);
    return hours + "(h)";
}
function get_sort_runkeys(byKeyw){
    // generate a list of keywords which should be in order (merge1->merge2->....) from a list of input available keywords
    let aoKeyw = new Array();
    let alreadyReg = new Object();
    // sorting keywords
    let tmpa = new Array();
    for(let keyw in byKeyw){
        tmpa.push(keyw)
    }
    tmpa.sort(function(a,b){
        let x = a.toLowerCase();
        let y = b.toLowerCase();
        if(x<y){return -1;}
        if(x>y){return 1;}
        return 0;
    });
    // assign new order
    for(let tmpv of Array("prjN","make_cdl","gds_merge1","dodpo","dmvia","dcod","dwpp","gds_merge2","lvl","lvs_.*","drc_.*")){
        for(let keyw of tmpa){
            if(alreadyReg.hasOwnProperty(keyw)){continue;}
            let pattern = new RegExp("^" + tmpv + "$","i");
            if(pattern.test(keyw)){
                aoKeyw.push(keyw);
                alreadyReg[keyw] = 1;
            }
        }
    }
    //remaining
    for(let i=0;i<tmpa.length;i++){
        let keyw = tmpa[i];
        if(alreadyReg.hasOwnProperty(keyw)){continue;}
        aoKeyw.push(keyw);
    }
    return aoKeyw;
}

function dsp_cmp_or_single_icons(clickedEle){
    // => inform that this element is clicked, and remove status of others on same column
    let theIndex = -1;
    for(let i=0;i<clickedEle.parentNode.parentNode.getElementsByTagName("td").length;i++){
        let tmpId = clickedEle.parentNode.parentNode.getElementsByTagName("td")[i];
        if(tmpId === clickedEle.parentNode) {theIndex = i;}
    }
    // remove all reg-on-status from the info icon
    for(let tr of clickedEle.parentNode.parentNode.parentNode.getElementsByTagName("tr")){
        if(tr.getElementsByTagName('td').length === 0) {continue;}
        if(tr.getElementsByTagName('td')[2].className.search("w3-border") > -1) {
            tr.getElementsByTagName('td')[2].classList.remove("w3-border","w3-border-red");
        }
    }
    if(theIndex === 2){
        // user click on the Info button, taking precedence to display on the right
        clickedEle.parentNode.classList.add("w3-border","w3-border-red");
        // remove the status on from the L-R icons
        for(let tr of clickedEle.parentNode.parentNode.parentNode.getElementsByTagName("tr")){
            if(tr.getElementsByTagName('td').length === 0) {continue;}
            disable_cmp_icon(tr.getElementsByTagName("td")[0].getElementsByTagName("i")[0])
            disable_cmp_icon(tr.getElementsByTagName("td")[1].getElementsByTagName("i")[0])
        }   
    }else{
        // user click on the L-R to compare
    }

    return 1;
}

function dsp_info_on_merge_data(clickedEle){
    // display info more related to execution status than the results to be compared, check dsp_cmp ... for the comparing function
    // console.log("dsp_info (exe) on ", clickedEle.nextElementSibling.innerText);
    let tgtEle = document.getElementById("dataCmp");
    let tgtDetail = tgtEle.getElementsByTagName("div")[0] ;//bigger part holding detail info
    let tgtSum = tgtDetail.nextElementSibling ;//smaller part holding info of unique-session

    // => gather info to send
    let prjN = clickedEle.parentNode.parentNode.childNodes[5].innerText;
    let strUnq = clickedEle.nextElementSibling.innerText;

    let objByUnq = new Object();
    let objByRun = new Object();

    // =>
    while(tgtDetail.childNodes.length > 0){tgtDetail.lastChild.remove();}
    while(tgtSum.childNodes.length > 0){tgtSum.lastChild.remove();}
    while(tgtEle.getElementsByTagName("div").length > 2){tgtEle.lastChild.remove();} //to remove the loading if there is problem with connection

    let aTbl = document.createElement("table");
    let aTBD = document.createElement("tbody");
    for(let tmpv of strUnq.trim().split(" ")){
        let tmpa = tmpv.split(":");
        let runk = tmpa[0];
        let unique = tmpa[1];
        let oStr = "<span onclick=\"dsp_unique_ontop('"+prjN+"','"+unique+"')\" class=\"w3-button w3-brown w3-hover-red\" style=\"padding:0;\">" + unique + "</span>";
        add_tr_to_tbl(aTBD,Array(runk,oStr));
        if(!objByUnq.hasOwnProperty(tmpa[1])){objByUnq[tmpa[1]] = new Object();}
        objByUnq[tmpa[1]][tmpa[0]] = 1;
        if(!objByRun.hasOwnProperty(tmpa[0])){objByRun[tmpa[0]] = new Object();}
        objByRun[tmpa[0]][tmpa[1]] = 1;
    }
    aTbl.classList.add("w3-table-all","w3-hoverable","w3-white")
    aTbl.appendChild(aTBD);
    tgtSum.appendChild(aTbl);

    // =>
    dsp_cmp_or_single_icons(clickedEle);
    
    // =>
    show_right_up();
    tgtDetail.style.height = "65vh";
    showEle(tgtSum);
    flgDspSessions = false;

    let loadingEle = gen_loading_4subEle(tgtEle);

    // again reading the data from server
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            // =>
            allData = JSON.parse(this.responseText);
            // =>
            tgtDetail.appendChild(gen_ele_comInfo(objByRun,allData));
            
            // =>
            // console.log("XXX",objByRun)
            let aoKeyw = get_sort_runkeys(objByRun);
            for(let runk of aoKeyw){
                tgtDetail.appendChild(gen_ele_runkey(runk,objByRun,allData));
            }
             
            loadingEle.remove();
        }else{
            // console.log("state=" + this.readyState + " w/ status=", this.status)
        }
    }
    // console.log("sending ... ", prjN, strUnq)
    xmlhttp.open("POST", "myCritData_getPrjUnqData.php?aloha=ALOHA",true)
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("prjN="+prjN+"&data="+strUnq);

    //

}

function comInfo_init_tmpObj(obj, aoKW, data, regValue ){
    let keyValue = get_deeper_data(aoKW,data);
    if(!obj.hasOwnProperty(keyValue)){obj[keyValue] = new Object()}
    obj[keyValue][regValue] = 1;
    return;
}
function gen_ele_comInfo(aoRK,allData){
    // to generate an element as common info for a comb of runkeys (drc,lvs,...) from array (object) of unique

    let aTbl = document.createElement("table");
    let aTbd = document.createElement("tbody");aTbl.appendChild(aTbd);

    let oEle = document.createElement("fieldset");
    let lgnd = document.createElement("legend");// legend
    lgnd.innerText = "CommonInfo"; lgnd.classList.add("w3-bottombar");

    let comObj = new Object();
    for(let runK in aoRK){
        for(let unq in aoRK[runK]){
            for(let tmpv of Array("PRODUCT","netVer", "ecoVer","WORKINGDIR","RULETYPE","GDSMERGE_TOOLS","DATE", "CHIP_OR_IP","TOP_LAYOUT_NAME")){
                if(!comObj.hasOwnProperty(tmpv)) { comObj[tmpv] = new Object(); }
                comInfo_init_tmpObj(comObj[tmpv],Array(unq,tmpv),allData,unq+":"+runK)
            }
        }
    }
    let aoColors = Array("red","blue","green","aqua","orange","pale-green");
    let tmpi = 0;
    for(let keyw in comObj){
        if(keyw === "WORKINGDIR"){continue;}
        let aDiv = document.createElement("div");
        for(let val in comObj[keyw]){
            if(val === undefined) {continue;}
            if(val === "undefined") {continue;}
            let aSpan = document.createElement("td");
            aSpan.innerText = val;
            aSpan.classList.add("w3-border","w3-round");
            aSpan.style.margin = "3px";
            aSpan.style.padding = "3px";
            aDiv.appendChild(aSpan);
        }
        tmpi++;if(tmpi >= aoColors.length){tmpi=0;}
        aDiv.classList.add("w3-card-4","w3-"+aoColors[tmpi]);
        aDiv.style.display = "inline-block";
        oEle.appendChild(aDiv);
    }
    for(let keyw in comObj){
        if(keyw !== "WORKINGDIR"){continue;}
        for(let val in comObj[keyw]){
            let aDiv = document.createElement("div");
            if(val === undefined) {continue;}
            if(val === "undefined") {continue;}
            aDiv.innerText = val;
            aDiv.classList.add("w3-border","w3-round","w3-card-4");
            aDiv.style.margin = "3px";
            aDiv.style.padding = "3px";
            aDiv.style.wordBreak = "break-word";
            // aDiv.style.wordWrap = "break-word";
            oEle.appendChild(aDiv);
        }
    }

    oEle.appendChild(lgnd);
    return oEle;
}

function gen_ele_runkey(runk,aoRK,allData){
    // to generate an element detailed info of a runkey (drc,lvs,...) from array (object) of unique
    let oEle = document.createElement("fieldset");
    let lgnd = document.createElement("legend");// legend
    lgnd.innerText = runk; lgnd.classList.add("w3-bottombar");

    for(let unq in aoRK[runk]){
        if(unq === "undefined") {continue;}
        let aDiv = document.createElement("div");
        let aTbl = document.createElement("table");
        let aTbd = document.createElement("tbody");
        let aLbl = document.createElement("label");
        let errD = document.createElement("div");errD.classList.add("w3-red");
        aLbl.innerText = unq;
        
        runkMod = runk.toLowerCase();
        if(allData.hasOwnProperty(unq) && !allData[unq].hasOwnProperty("run_"+runkMod)){
            if(allData[unq].hasOwnProperty("run_"+runk)){
                runkMod = runk;//preserve the cases
            }
        }

        let tmpa = unq.split("__");
        add_tr_to_tbl(aTbd,Array("UnqStartAt",(new Date(tmpa[tmpa.length-1] * 1000).toLocaleString())));

        if(!allData.hasOwnProperty(unq)) { errD.innerText = "No unique data (not tracked yet?!) " + runkMod;oEle.appendChild(errD);continue;}
        if(!allData[unq].hasOwnProperty("run_"+runkMod)) { errD.innerText = "No detail data " + runkMod;oEle.appendChild(errD);continue;}
        if(!allData[unq]["run_"+runkMod].hasOwnProperty("subrun")) { errD.innerText = "No subrun data.";oEle.appendChild(errD);continue;}
        if(!allData[unq]["run_"+runkMod]["subrun"].hasOwnProperty(0)) { errD.innerText = "No index 0 data.";oEle.appendChild(errD);continue;}
        if(!allData[unq]["run_"+runkMod]["subrun"][0].hasOwnProperty("moreInfo")) { errD.innerText = "No moreInfo data.";oEle.appendChild(errD);continue;}

        add_tr_to_tbl(aTbd,Array("startAt", (new Date(allData[unq]["run_"+runkMod]["subrun"][0]["startAt"] * 1000).toLocaleString())));
        add_tr_to_tbl(aTbd,Array("TAT/jobSTT", 
            to_hours_from_seconds(allData[unq]["run_"+runkMod]["subrun"][0]["TAT"]) + " / " +
            allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["jobSTT"]
        ));

        let ruletype = allData[unq]["RULETYPE"];
        if(runkMod.match(/drc_/) || runkMod.match(/lvl/)){
            let noExeRules = allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["DRC_noExeRules"];
            let noVioRules = allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["DRC_noVioRules"];
            let noResults = allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["DRC_noResults"];
            // add_tr_to_tbl(aTbd,Array("#exeRules", noExeRules));
            // add_tr_to_tbl(aTbd,Array("#vioRules", noVioRules));
            // add_tr_to_tbl(aTbd,Array("#results", noResults));
            add_tr_to_tbl(aTbd,Array("#exe/vio:results",noExeRules+" / "+noVioRules+" : "+noResults))
        }else if(runkMod.match("lvs_")){
            let noExeRules = allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["ERC_noExeRules"];
            let noVioRules = allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["ERC_noVioRules"];
            let noResults = allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["ERC_noResults"];
            add_tr_to_tbl(aTbd,Array("#exe/vio:results",noExeRules+" / "+noVioRules+" : "+noResults))
            if(!runkMod.match("erc")){
                if(ruletype === "CAL"){
                    add_tr_to_tbl(aTbd,Array("compare", get_deeper_data(Array(unq, "run_"+runkMod, "subrun",1,"moreInfo","compare"),allData)))
                }else{
                    add_tr_to_tbl(aTbd,Array("compare", get_deeper_data(Array(unq, "run_"+runkMod, "subrun",0,"moreInfo","compare"),allData)))
                }
            }
        }else if(runkMod.match(/^d/)){
            // expect the dummy dodpo, dmvia, dcod or dwpp
            // console.log("XXX ", runkMod, allData[unq]["run_"+runkMod])
        }else{}

        // more info about inputs
        if(runkMod.match(/lvl/)){
            add_tr_to_tbl(aTbd,Array("top#1",allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["_inputs_"]["LAYOUT"]["TopCell"]))
            add_tr_to_tbl(aTbd,Array("top#2",allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["_inputs_"]["LAYOUT2"]["TopCell"]))
            add_tr_to_tbl(aTbd,Array("gsd#1",allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["_inputs_"]["LAYOUT"]["path"]))
            aTbd.lastChild.getElementsByTagName("td")[1].style.wordWrap = "break-word";
            aTbd.lastChild.getElementsByTagName("td")[1].style.wordBreak = "break-all";
            add_tr_to_tbl(aTbd,Array("gsd#2",allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["_inputs_"]["LAYOUT2"]["path"]))
            aTbd.lastChild.getElementsByTagName("td")[1].style.wordWrap = "break-word";
            aTbd.lastChild.getElementsByTagName("td")[1].style.wordBreak = "break-all";
        }else{
            if(allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"].hasOwnProperty("_inputs_")){
                for(let inpType in allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["_inputs_"]){
                    add_tr_to_tbl(aTbd,Array("in:"+inpType,allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["_inputs_"][inpType]["path"]));
                    aTbd.lastChild.getElementsByTagName("td")[1].style.wordWrap = "break-word";
                    aTbd.lastChild.getElementsByTagName("td")[1].style.wordBreak = "break-all";
                }
            }else{}
            if(runkMod.match("lvs_") && ruletype === "CAL"){
                if(allData[unq]["run_"+runkMod]["subrun"][1]["moreInfo"].hasOwnProperty("_inputs_")){
                    for(let inpType in allData[unq]["run_"+runkMod]["subrun"][1]["moreInfo"]["_inputs_"]){
                        add_tr_to_tbl(aTbd,Array("in:"+inpType,allData[unq]["run_"+runkMod]["subrun"][1]["moreInfo"]["_inputs_"][inpType]["path"]));
                        aTbd.lastChild.getElementsByTagName("td")[1].style.wordWrap = "break-word";
                        aTbd.lastChild.getElementsByTagName("td")[1].style.wordBreak = "break-all";
                    }
                }else{}
            }else if(runkMod.match("merge")){
                for(let inpType in allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["_outputs_"]){
                    add_tr_to_tbl(aTbd,Array("out:"+inpType,allData[unq]["run_"+runkMod]["subrun"][0]["moreInfo"]["_outputs_"][inpType]["path"]));
                    aTbd.lastChild.getElementsByTagName("td")[1].style.wordWrap = "break-word";
                    aTbd.lastChild.getElementsByTagName("td")[1].style.wordBreak = "break-all";
                }
            }
        }
        
        aTbl.appendChild(aTbd);
        aDiv.appendChild(aLbl);
        aDiv.appendChild(aTbl);

        oEle.appendChild(aDiv);
    }

    oEle.appendChild(lgnd);
    return oEle;
}

function disable_cmp_icon(tgtEle){ tgtEle.classList.remove("w3-text-blue","w3-card-4");    tgtEle.classList.add("w3-light-grey","w3-tiny"); tgtEle.innerText = "visibility_off"; }
function enable_cmp_icon(tgtEle){     tgtEle.classList.add("w3-text-blue","w3-card-4"); tgtEle.classList.remove("w3-light-grey","w3-tiny"); tgtEle.innerText = "visibility";}
function gen_cmpMatch_icon(result){
    let indicator = "<i class=\"material-icons w3-orange\" style=\"font-size:12px\">sync_problem</i>";//default is no-match
    if(result){
        indicator = "<i class=\"material-icons w3-green\" style=\"font-size:12px\">sync</i>";//
    }
    return indicator;
}
function my_up_cmpCallBackInfo(cmpCBInfo,LorR,tr){ //to update the cmpCBInfo object from checking tr (row)
    if(!cmpCBInfo.hasOwnProperty(LorR)){cmpCBInfo[LorR] = new Object();}

    let tmpv = "core"; let tmpn = 9;
    if(!cmpCBInfo[LorR].hasOwnProperty(tmpv)){cmpCBInfo[LorR][tmpv] = new Object();}
    let tmpa = tr.getElementsByTagName("td")[tmpn].getElementsByTagName("span");
    if(tmpa.length<2){ cmpCBInfo[LorR][tmpv] = undefined + ":" + undefined}
        else{ for(let i=0;i<tmpa.length;i++){ i++; cmpCBInfo[LorR][tmpv]+=tmpa[i].innerText + ":" + tmpa[i-1].innerText + ";"; } }

    tmpv = "merge1"; tmpn = 10;
    if(!cmpCBInfo[LorR].hasOwnProperty(tmpv)){cmpCBInfo[LorR][tmpv] = new Object();}
    tmpa = tr.getElementsByTagName("td")[tmpn].getElementsByTagName("span");
    if(tmpa.length<2){ cmpCBInfo[LorR][tmpv] = undefined + ":" + undefined}
        else{ for(let i=0;i<tmpa.length;i++){ i++; cmpCBInfo[LorR][tmpv]+=tmpa[i].innerText + ":" + tmpa[i-1].innerText + ";"; } }

    tmpv = "dummy"; tmpn = 11;
    if(!cmpCBInfo[LorR].hasOwnProperty(tmpv)){cmpCBInfo[LorR][tmpv] = new Object();}
    tmpa = tr.getElementsByTagName("td")[tmpn].getElementsByTagName("span");
    if(tmpa.length<2){ cmpCBInfo[LorR][tmpv] = undefined + ":" + undefined}
        else{ for(let i=0;i<tmpa.length;i++){ i++; cmpCBInfo[LorR][tmpv]+=tmpa[i].innerText + ":" + tmpa[i-1].innerText + ";"; } }

    tmpv = "merge2"; tmpn = 12;
    if(!cmpCBInfo[LorR].hasOwnProperty(tmpv)){cmpCBInfo[LorR][tmpv] = new Object();}
    tmpa = tr.getElementsByTagName("td")[tmpn].getElementsByTagName("span");
    if(tmpa.length<2){ cmpCBInfo[LorR][tmpv] = undefined + ":" + undefined}
        else{ for(let i=0;i<tmpa.length;i++){ i++; cmpCBInfo[LorR][tmpv]+=tmpa[i].innerText + ":" + tmpa[i-1].innerText + ";"; } }

    return;
}
function dsp_compareInfo_on_merge_data(clkEle){
    // enable/disable target icon (for comparing)
    if(clkEle.innerText === "visibility"){
        // disable it
        disable_cmp_icon(clkEle);
    }else{
        // enable it
        enable_cmp_icon(clkEle);
        // disable all the other
        let index = -1;
        // find the index of the clicked icon
        for(let i=0;i<clkEle.parentNode.parentNode.childNodes.length;i++){
            if(clkEle === clkEle.parentNode.parentNode.childNodes[i].getElementsByTagName("i")[0]){ index = i; }
        }
        // disable all the icon on the same column
        for(let tr of clkEle.parentNode.parentNode.parentNode.getElementsByTagName("tr")){
            if(tr.getElementsByTagName("td")[index] === undefined) {continue;}
            if(tr.getElementsByTagName("td")[index].getElementsByTagName("i")[0] === clkEle){
                //ignored
            }else{
                disable_cmp_icon(tr.getElementsByTagName("td")[index].getElementsByTagName("i")[0])
            }
        }
    }
    // gather info and display on the right
    let aoTr = dataMerge.getElementsByTagName("tr");
    let cmpCnt = new Object();
    let cmpPrj = new Object();//involved project names
    let cmpCBInfo = new Object();//call-back info for comparision: core, merge1, merge2, .... info
    let allPrj = new Object();//used for sending to get data
    let allStrKU = new Object();//used for sending to get data (string of keyword-unique)
    for(let tr of aoTr){
        if(tr.getElementsByTagName("td").length === 0) {continue;}
        let prjN = tr.getElementsByTagName("td")[5].innerText;
        let cntRK = tr.getElementsByTagName("td")[2].getElementsByTagName("span")[0].innerText;
        if(tr.getElementsByTagName("td")[0].innerText === "visibility"){ // the line with left-to-compare
            cmpCnt["L"] = cntRK.trim().split(" ");
            if(!cmpPrj.hasOwnProperty("L")){ cmpPrj["L"] = new Object();}
            cmpPrj["L"][prjN] = 1;
            // =>
            if(!allPrj.hasOwnProperty(prjN)) {allPrj[prjN] = 1;}
            for(let comb of cntRK.trim().split(" ")){
                if(!allStrKU.hasOwnProperty(comb)){allStrKU[comb] = 1;}
            }
            // =>
            my_up_cmpCallBackInfo(cmpCBInfo,"L",tr);
        }else{}
        if(tr.getElementsByTagName("td")[1].innerText === "visibility"){ // the line with right-to-compare
            cmpCnt["R"] = cntRK.trim().split(" ");
            if(!cmpPrj.hasOwnProperty("R")){ cmpPrj["R"] = new Object();}
            cmpPrj["R"][prjN] = 1;
            // =>
            if(!allPrj.hasOwnProperty(prjN)) {allPrj[prjN] = 1;}
            for(let comb of cntRK.trim().split(" ")){
                if(!allStrKU.hasOwnProperty(comb)){allStrKU[comb] = 1;}
            }
            // =>
            my_up_cmpCallBackInfo(cmpCBInfo,"R",tr);
        }else{}
    }
    // console.log(cmpCnt, cmpPrj,allStrKU,allPrj,cmpCBInfo);

    if(Object.keys(cmpCnt).length === 0) {return;} //nothing to show

    let tgtEle = document.getElementById("dataCmp");
    let tgtDetail = tgtEle.getElementsByTagName("div")[0] ;//bigger part holding detail info
    let tgtSum = tgtDetail.nextElementSibling ;//smaller part holding info of unique-session

    // =>
    while(tgtDetail.childNodes.length > 0){tgtDetail.lastChild.remove();}
    while(tgtSum.childNodes.length > 0){tgtSum.lastChild.remove();}
    while(tgtEle.getElementsByTagName("div").length > 2){tgtEle.lastChild.remove();} //to remove the loading if there is problem with connection
    
    // => working on the brief info
    let aTbl = document.createElement("table");
    let aTBD = document.createElement("tbody");
    // ---> working on data
    let byKeyw = new Object();
    byKeyw["prjN"] = new Object();
    byKeyw["prjN"]["L"] = (cmpPrj.hasOwnProperty("L")) ? Object.keys(cmpPrj["L"]).join(" ") : "n/a";
    byKeyw["prjN"]["R"] = (cmpPrj.hasOwnProperty("R")) ? Object.keys(cmpPrj["R"]).join(" ") : "n/a";

    if(cmpCnt.hasOwnProperty("L")){
        for(let comb of cmpCnt["L"]){
            let tmpa = comb.split(":");
            let keyw = tmpa[0];
            let session = tmpa[1];
            if(!byKeyw.hasOwnProperty(keyw)) {byKeyw[keyw] = new Object();}
            if(!byKeyw[keyw].hasOwnProperty("L")) {byKeyw[keyw]["L"] = "";}
            if(byKeyw[keyw]["L"] === "n/a") {byKeyw[keyw]["L"] = "";}
            byKeyw[keyw]["L"] += session + " ";
            if(!byKeyw[keyw].hasOwnProperty("R")){ byKeyw[keyw]["R"] = "n/a";}//assign n/a for comparing later
        }
    }else{}
    if(cmpCnt.hasOwnProperty("R")){
        for(let comb of cmpCnt["R"]){
            let tmpa = comb.split(":");
            let keyw = tmpa[0];
            let session = tmpa[1];
            if(!byKeyw.hasOwnProperty(keyw)) {byKeyw[keyw] = new Object();}
            if(!byKeyw[keyw].hasOwnProperty("R")) {byKeyw[keyw]["R"] = "";}
            if(byKeyw[keyw]["R"] === "n/a") {byKeyw[keyw]["R"] = "";}
            byKeyw[keyw]["R"] += session + " ";
            if(!byKeyw[keyw].hasOwnProperty("L")){ byKeyw[keyw]["L"] = "n/a";}//assign n/a for comparing later
        }
    }else{}
    // console.log(byKeyw)
    // ---> gen elements
    for(let keyw in byKeyw){
        byKeyw[keyw]["L"] = byKeyw[keyw]["L"].trim();
        byKeyw[keyw]["R"] = byKeyw[keyw]["R"].trim();
        let valL = byKeyw[keyw]["L"];
        let valR = byKeyw[keyw]["R"];
        // =>
        // valR = (valL===valR) ? "<<<" : valR;
        add_tr_to_tbl(aTBD,Array(gen_cmpMatch_icon(valL===valR),keyw,valL,valR));
        // consider to assign the onclick on the unique
        if(keyw !== "prjN"){
            let tmpa = aTBD.lastChild.getElementsByTagName("td");
            for(let i=2;i<=3;i++){ //2:left; 3:right
                let tmpv = tmpa[i];
                let side = "L";if(i===3){side="R";}
                if(tmpv.innerText !== "n/a"){
                    let aoTgtUnq = tmpv.innerText.split(" ");
                    tmpv.innerText = "";
                    for(let theUnqTxt of aoTgtUnq){
                        let aDiv = document.createElement("div");
                        aDiv.classList.add("w3-brown","w3-button","w3-hover-red");
                        aDiv.style.padding = 0;
                        aDiv.style.marginLeft = "3px";
                        aDiv.innerText = theUnqTxt;
                        aDiv.addEventListener("click",function(){
                            dsp_unique_ontop(byKeyw["prjN"][side],this.innerText);
                        });
                        tmpv.appendChild(aDiv);
                    }
                }else{}
            }
        }
    }
    aTbl.classList.add("w3-table-all","w3-hoverable","w3-white")
    aTbl.appendChild(aTBD);
    tgtSum.appendChild(aTbl);

    // =>
    dsp_cmp_or_single_icons(clkEle);

    // // =>
    show_right_up();
    tgtDetail.style.height = "65vh";
    showEle(tgtSum);
    flgDspSessions = false;

    // => retrieve sessions' info from data and display in detail
    let loadingEle = gen_loading_4subEle(tgtEle);
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            // =>
            allData = JSON.parse(this.responseText);
            // => transfer the core, merge1, merge2, dummy collected info to the comparing layout
            tgtDetail.appendChild(gen_com_data_compare(cmpCBInfo));

            // =>control the displaying order
            let aoKeyw = get_sort_runkeys(byKeyw);
            // =>
            for(let runk of aoKeyw){
                // => scoping the output info, don't need to output redundant info when the Info button can cover
                if(runk.match(/gds_merge/)) {continue}
                if(runk.match(/^d/i)) { if(!runk.match(/drc_/)){continue} }
                tgtDetail.appendChild(gen_ele_runkey_compare(runk,byKeyw,allData));
            }
            // =>
            loadingEle.remove();
        }else{
            // console.log("state=" + this.readyState + " w/ status=", this.status)
        }
    }
    // => gather info to send
    let prjN = Object.keys(allPrj).join(" ");
    let strUnq = Object.keys(allStrKU).join(" ");
    // console.log("sending ... ", prjN, strUnq)

    xmlhttp.open("POST", "myCritData_getPrjUnqData.php?aloha=ALOHA",true)
    xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xmlhttp.send("prjN="+prjN+"&data="+strUnq);

    return;
}

function get_deeper_data(aoKeyw,data,modFnc){
    //
    if(typeof(data) === "object") {
        if(typeof(aoKeyw) === "object"){
            let tgtKey = aoKeyw.shift();
            if(Object.keys(aoKeyw).length === 0) {
                if(modFnc === undefined){
                    return data[tgtKey];
                }else{
                    return modFnc(data[tgtKey]);
                }
            }else{
                return get_deeper_data(aoKeyw,data[tgtKey],modFnc);
            }
        }else{
            if(data.hasOwnProperty(aoKeyw)){
                if(modFnc === undefined){
                    return data[aoKeyw];
                }else{
                    return modFnc(data[aoKeyw]);
                }
            }else{}
        }
    }else{}
    return undefined;
}
function gen_cmp_tr_from_deeper_data(aTbd,dspKeyw,unqL,unqR,aoKeyw,data,modFnc){
    let aL = new Array(unqL); for(let tmpv of aoKeyw){aL.push(tmpv);};
    let aR = new Array(unqR); for(let tmpv of aoKeyw){aR.push(tmpv);};
    let valL = get_deeper_data(aL, data, modFnc);
    let valR = get_deeper_data(aR, data, modFnc);
    add_tr_to_tbl(aTbd,Array(gen_cmpMatch_icon(valL===valR),dspKeyw,valL,valR));
    return 1;
}
function gen_com_data_compare(cmpCBInfo){
    // to generate element of comparing data of core, merge1, merge2, ... which were call-backed from the table of all info
    let oEle = document.createElement("fieldset");
    let lgnd = document.createElement("legend");// legend
    lgnd.innerText = "ComInfo#1"; lgnd.classList.add("w3-bottombar");
    oEle.appendChild(lgnd);
    // =>
    let comKeyw = new Object();
    for(let tmpv in cmpCBInfo){
        for(let keyw in cmpCBInfo[tmpv]){
            if(!comKeyw.hasOwnProperty(keyw)) {comKeyw[keyw] = 1;}
        }
    }
    // =>
    // compare keyword by keyword: core, merge1, ....
    let aDiv = document.createElement("div");
    let aTbl = document.createElement("table");
    let aTbd = document.createElement("tbody");
    let aLbl = document.createElement("label");
    let errD = document.createElement("div");errD.classList.add("w3-red");
    // aLbl.innerText = "ALOHA";
    for(let keyw in comKeyw){
        if(keyw === "dummy"){
            let valL = get_deeper_data(Array("L",keyw),cmpCBInfo); let oInfoL = new Object(); if(valL !== undefined){let tmpa = valL.split(";");for(let tmpv of tmpa){let tmpa1 = tmpv.split(":");if(tmpa1[1] !== undefined) {oInfoL[tmpa1[1]] = tmpa1[0];}}}
            let valR = get_deeper_data(Array("R",keyw),cmpCBInfo); let oInfoR = new Object(); if(valR !== undefined){let tmpa = valR.split(";");for(let tmpv of tmpa){let tmpa1 = tmpv.split(":");if(tmpa1[1] !== undefined) {oInfoR[tmpa1[1]] = tmpa1[0];}}}
            let oAllType = new Object();for(let tmpv in oInfoL){oAllType[tmpv] = 1;};for(let tmpv in oInfoR){oAllType[tmpv] = 1;};
            for(let type in oAllType){
                if(type === undefined || type === "undefined") {continue;}
                let valIndL = get_deeper_data(Array(type),oInfoL); if(valIndL !== undefined){valIndL = valIndL.replace(/.*\/([^\/]+)$/,function(match,$1,offset,orginal){return $1;});}
                let valIndR = get_deeper_data(Array(type),oInfoR); if(valIndR !== undefined){valIndR = valIndR.replace(/.*\/([^\/]+)$/,function(match,$1,offset,orginal){return $1;});}
                add_tr_to_tbl(aTbd,Array(gen_cmpMatch_icon(valIndL===valIndR),type,valIndL,valIndR));
                aTbd.lastChild.getElementsByTagName("td")[2].style.wordWrap = "break-word";aTbd.lastChild.getElementsByTagName("td")[2].style.wordBreak = "break-word";
                aTbd.lastChild.getElementsByTagName("td")[3].style.wordWrap = "break-word";aTbd.lastChild.getElementsByTagName("td")[3].style.wordBreak = "break-word";
            }

        }else{
            let valL = get_deeper_data(Array("L",keyw),cmpCBInfo); let valLPath = valL; let valLInode = undefined;
            let valR = get_deeper_data(Array("R",keyw),cmpCBInfo); let valRPath = valR; let valRInode = undefined;
            if(valL !== undefined){ tmpa = valL.split(":"); valLPath = tmpa[0]; valLInode = tmpa[1]; valLPath = valLPath.replace(/.*\/([^\/]+)$/,function(match,$1,offset,orginal){return $1;});}
            if(valR !== undefined){ tmpa = valR.split(":"); valRPath = tmpa[0]; valRInode = tmpa[1]; valRPath = valRPath.replace(/.*\/([^\/]+)$/,function(match,$1,offset,orginal){return $1;});}
            // console.log(keyw, valLPath, valRPath)
            if((valLPath === undefined || valLPath === "undefined") && (valRPath === undefined || valRPath === "undefined")) {continue;}
            add_tr_to_tbl(aTbd,Array(gen_cmpMatch_icon(valLPath===valRPath),keyw+"/Path",valLPath,valRPath));
            aTbd.lastChild.getElementsByTagName("td")[2].style.wordWrap = "break-word";aTbd.lastChild.getElementsByTagName("td")[2].style.wordBreak = "break-word";
            aTbd.lastChild.getElementsByTagName("td")[3].style.wordWrap = "break-word";aTbd.lastChild.getElementsByTagName("td")[3].style.wordBreak = "break-word";
            // add_tr_to_tbl(aTbd,Array(gen_cmpMatch_icon(valLInode===valRInode),keyw+"/Inode",valLInode,valRInode));
        }
    }
    // =>
    aDiv.classList.add("w3-border-bottom");
    aTbl.style.width = "100%";
    // =>
    aTbl.appendChild(aTbd);
    aDiv.appendChild(aLbl);
    aDiv.appendChild(aTbl);
    oEle.appendChild(aDiv);

    return oEle;
}
function get_detail_results(unqL,unqR,aoKeyw,data){
    let oO = new Object();
    let aL = new Array(unqL); for(let tmpv of aoKeyw){aL.push(tmpv);};
    let aR = new Array(unqR); for(let tmpv of aoKeyw){aR.push(tmpv);};
    let valL = get_deeper_data(aL, data);
    let valR = get_deeper_data(aR, data);
    if(valL !== undefined){
        for(let errN in valL){
            if(!oO.hasOwnProperty(errN)) {oO[errN] = new Object();}
            oO[errN]["L"] = valL[errN];
        }
    }else{}
    if(valR !== undefined){
        for(let errN in valR){
            if(!oO.hasOwnProperty(errN)) {oO[errN] = new Object();}
            oO[errN]["R"] = valR[errN];
        }
    }else{}
    return oO;
}
function gen_ele_runkey_compare(runk,aoRK,allData){
    // to generate an element detailed info of a runkey (drc,lvs,...) from array (object) of unique
    let oEle = document.createElement("fieldset");
    let lgnd = document.createElement("legend");// legend
    lgnd.innerText = runk; lgnd.classList.add("w3-bottombar");
    oEle.appendChild(lgnd);
    // console.log("working on ", runk, aoRK[runk]);
    // -> maybe need to sort the unique here (to put the latest at first)
    let aoUnqL = aoRK[runk]["L"].split(" "); aoUnqL.sort(); aoUnqL.reverse();
    let aoUnqR = aoRK[runk]["R"].split(" "); aoUnqR.sort(); aoUnqR.reverse();
    aoUnqL = aoUnqL
    let maxI = aoUnqL.length; if(aoUnqR.length > maxI) {maxI = aoUnqR.length;}
    // RESERVED
    // <-
    for(let i=0;i<maxI;i++){
        // compare unique by unique
        let aDiv = document.createElement("div");
        let aTbl = document.createElement("table");
        let aTbd = document.createElement("tbody");
        // let aLbl = document.createElement("label");
        // let errD = document.createElement("div");errD.classList.add("w3-red");
        // aLbl.innerText = "ALOHA";

        runkMod = runk.toLowerCase();

        // => header of each comparing unique pair
        let dspKeyw = runk; if(runk !== "prjN"){dspKeyw = "Session"}
        let valL = aoUnqL[i]; let valR = aoUnqR[i];
        add_tr_to_tbl(aTbd,Array(gen_cmpMatch_icon(valL===valR),dspKeyw,valL,valR));
        aTbd.lastChild.getElementsByTagName("td")[0].style.width = "12px";
        aTbd.lastChild.getElementsByTagName("td")[1].style.width = "60px";
        aTbd.lastChild.classList.add("w3-card-4");

        // =>
        aDiv.classList.add("w3-border-bottom");
        aTbl.style.width = "100%";
        // =>
        aTbl.appendChild(aTbd);
        // aDiv.appendChild(aLbl);
        aDiv.appendChild(aTbl);
        oEle.appendChild(aDiv);

        // =>
        if(runk === "prjN") {
            // => try to get some common info: TOP_LAYOUT_NAME, 
            let chkUnqL = aoRK["gds_merge1"]["L"].split(" ")[0];
            let chkUnqR = aoRK["gds_merge1"]["L"].split(" ")[1];
            //RESERVED
            // =>
            break;
        }

        // => in case the runkMod lowerCase got wrong intention
        if(allData.hasOwnProperty(valL)){
            if(!allData[valL].hasOwnProperty("run_"+runkMod)){
                if(allData[valL].hasOwnProperty("run_"+runk)){
                    runkMod = runk;//preserve the cases
                }
            }else{}
        }else if(allData.hasOwnProperty(valR)){
            if(!allData[valR].hasOwnProperty("run_"+runkMod)){
                if(allData[valR].hasOwnProperty("run_"+runk)){
                    runkMod = runk;//preserve the cases
                }
            }else{}      
        }else{
            //something wrong, there is no uniuqe
            // console.log("WARNING: unique unknown, L-R: ", valL, valR)
        }

        // => content#1
        gen_cmp_tr_from_deeper_data(aTbd,"TAT",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "TAT"),allData,undefined);
        gen_cmp_tr_from_deeper_data(aTbd,"startAt",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "startAt"),allData,function(inNumb){return new Date(Number(inNumb) * 1000).toLocaleString();});
        gen_cmp_tr_from_deeper_data(aTbd,"jobSTT",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","jobSTT"),allData,undefined);

        // => content#2
        if(runkMod.match(/drc_/) || runkMod.match(/lvl/)){
            gen_cmp_tr_from_deeper_data(aTbd,"RULEFILE",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","rulefile"),allData,undefined);
            // -> special mod on word-break
            aTbd.lastChild.getElementsByTagName("td")[2].style.wordWrap = "break-word";aTbd.lastChild.getElementsByTagName("td")[2].style.wordBreak = "break-all";
            aTbd.lastChild.getElementsByTagName("td")[3].style.wordWrap = "break-word";aTbd.lastChild.getElementsByTagName("td")[3].style.wordBreak = "break-all";
            gen_cmp_tr_from_deeper_data(aTbd,"#exeRules",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","DRC_noExeRules"),allData,undefined);
            gen_cmp_tr_from_deeper_data(aTbd,"#notExe",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","DRC_noNotExeRule"),allData,undefined);
            gen_cmp_tr_from_deeper_data(aTbd,"#vioRules",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","DRC_noVioRules"),allData,undefined);
            gen_cmp_tr_from_deeper_data(aTbd,"#results",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","DRC_noResults"),allData,undefined);
        }else if(runkMod.match(/lvs_/i)){
            // ERC related
            gen_cmp_tr_from_deeper_data(aTbd,"ERC#exeRules",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","ERC_noExeRules"),allData,undefined);
            gen_cmp_tr_from_deeper_data(aTbd,"ERC#notExe",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","ERC_noNotExeRule"),allData,undefined);
            gen_cmp_tr_from_deeper_data(aTbd,"ERC#vioRules",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","ERC_noVioRules"),allData,undefined);
            gen_cmp_tr_from_deeper_data(aTbd,"ERC#totalErrs",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","ERC_noResults"),allData,undefined);
            // EXTraction related
            gen_cmp_tr_from_deeper_data(aTbd,"EXT#VitualConnect",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","EXT_noVirtualConnect"),allData,undefined);
            gen_cmp_tr_from_deeper_data(aTbd,"EXT#InvalidPathChk",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","EXT_noInvalidPathChk"),allData,undefined);
            gen_cmp_tr_from_deeper_data(aTbd,"EXT#UnAttPort",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","EXT_noUnAttPort"),allData,undefined);
            gen_cmp_tr_from_deeper_data(aTbd,"EXT#Short",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","EXT_noShort"),allData,undefined);

            // LVS related, depend on ruletype
            if(!runkMod.match(/mainerc/i)){
                let rtypeL = get_deeper_data(Array(aoUnqL[i],"RULETYPE"),allData)
                let rtypeR = get_deeper_data(Array(aoUnqR[i],"RULETYPE"),allData)
                // console.log("RULETYPE: ", rtypeL, rtypeR)
                if((rtypeL === "ICV" && rtypeR === "ICV")
                || (rtypeL === "ICV" && rtypeR === undefined)
                || (rtypeL === undefined && rtypeR === "ICV")
                ){
                    gen_cmp_tr_from_deeper_data(aTbd,"Compare",aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","compare"),allData,undefined);
                }else{
                    let resCmpL = undefined;
                    let resCmpR = undefined;
                    if(rtypeL === "ICV") {resCmpL = get_deeper_data(Array(aoUnqL[i],"run_"+runkMod, "subrun", 0, "moreInfo","compare"),allData)}else{resCmpL = get_deeper_data(Array(aoUnqL[i],"run_"+runkMod, "subrun", 1, "moreInfo","compare"),allData)}
                    if(rtypeR === "ICV") {resCmpR = get_deeper_data(Array(aoUnqR[i],"run_"+runkMod, "subrun", 0, "moreInfo","compare"),allData)}else{resCmpR = get_deeper_data(Array(aoUnqR[i],"run_"+runkMod, "subrun", 1, "moreInfo","compare"),allData)}
                    add_tr_to_tbl(aTbd,Array(gen_cmpMatch_icon(resCmpL===resCmpR),dspKeyw,resCmpL,resCmpR));
                }
            }else{}
        }
        
        // => content #3 (more detail into error rules)
        if(runkMod.match(/drc_/) || runkMod.match(/lvl/)){
            let oRes = get_detail_results(aoUnqL[i],aoUnqR[i],Array("run_"+runkMod, "subrun", 0, "moreInfo","DRC_Errors"),allData);
            if(Object.keys(oRes).length > 0) {
                let aTbl2 = document.createElement("table");
                let aTbd2 = document.createElement("tbody");
                let aLbl2 = document.createElement("div");
                aLbl2.innerText = "clickme to show/hide results";
                aLbl2.classList.add("w3-button","w3-block","w3-yellow")
                aLbl2.style.paddingTop = 0;
                aLbl2.style.paddingBottom = 0;
                aLbl2.addEventListener("click",function(evt){toggleDspEle(evt.target.nextElementSibling)})
                add_tr_to_tbl(aTbd2,Array(
                    "-",
                    "<input type=\"text\" onkeyup=\"filter_the_next_element(this)\" placehoder=\"filter...\">",
                    "-",
                    "-"
                ),"th");
                // => update the header to be sortable
                let aoTh = aTbd2.lastChild.getElementsByTagName("th");
                for(let tmpi of Array(0,2,3)){
                    aoTh[tmpi].innerHTML = "<span style=\"padding:0\">-</span><i style=\"vertical-align: middle\" class=\"w3-small material-icons\">shuffle</i>"
                    aoTh[tmpi].classList.add("w3-button");
                    aoTh[tmpi].setAttribute("onclick","sortTblByHeader(this)");
                }

                // <<<
                let aoErr = Object.keys(oRes)
                aoErr.sort();
                let aoColors = Array("red","blue","green","aqua","orange","pale-green","white");
                let i=-1;
                for(let errN of aoErr){
                    add_tr_to_tbl(aTbd2,Array(gen_cmpMatch_icon(oRes[errN]["L"]===oRes[errN]["R"]),errN,oRes[errN]["L"],oRes[errN]["R"]));
                    i++;
                    if(i>=aoColors.length){i=0;}
                    aTbd2.lastChild.classList.add("w3-hover-"+aoColors[i], "w3-animate-opacity")
                }
                // aTbd2.style.width = "100%";
                // aTbl2.style.width = "100%";
                aTbd2.classList.add("w3-table");
                // aTbd2.style.width = "100%";
                // aTbd2.style.display = "table";
                aTbl2.classList.add("w3-bordered");
                aTbl2.appendChild(aTbd2);
                aTbl2.style.display = 'none';
                aDiv.appendChild(aLbl2);
                aDiv.appendChild(aTbl2);
                oEle.appendChild(aDiv);
            }else{}
        }else{}
    }
    return oEle;
}

function upDspSessions(){
    if(flgDspSessions === true){
        dsp_sessions_onright();
    }else{}
    return;
}

function dsp_sessions_onright(){
    // display the sessions in order of starting time to the right panel (similar to the original upDetail)
    let tgtEle = document.getElementById("dataCmp");
    let tgtDetail = tgtEle.getElementsByTagName("div")[0] ;//bigger part holding detail info
    let tgtSum = tgtDetail.nextElementSibling ;//smaller part holding info of unique-session
    // dont need the Summary part;

    let guidedPrjN = globalShowedPrjN.value;

    // =>
    while(tgtDetail.childNodes.length > 0){tgtDetail.lastChild.remove();}
    while(tgtSum.childNodes.length > 0){tgtSum.lastChild.remove();}
    while(tgtEle.getElementsByTagName("div").length > 2){tgtEle.lastChild.remove();} //to remove the loading if there is problem with connection

    // =>
    show_right_up();
    tgtSum.style.display = 'none';
    tgtDetail.style.height = "75vh";
    hideEle(tgtSum);

    let loadingEle = gen_loading_4subEle(tgtEle);

    // again reading the data from server
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            // =>
            tgtDetail.innerHTML = this.responseText;
            // => mod the generated table
            tgtDetail.getElementsByTagName("table")[0].classList.remove("w3-small");
            tgtDetail.getElementsByTagName("table")[0].classList.add("w3-tiny","w3-white");
            for(let tmpE of tgtDetail.getElementsByTagName("td")){
                tmpE.style.padding = 0;
                tmpE.style.maxWidth = "35px";
            }
            for(let tmpE of tgtDetail.getElementsByTagName("tr")){
                if(/myUpDetail2/.test(tmpE.getAttribute("onclick"))){
                    let tmpa = tmpE.getElementsByTagName("td")[1].innerText.split(" / ");
                    let chkPrjN = tmpa[1];
                    let unique = tmpE.getElementsByTagName("td")[0].innerText.replace(/\s+/g, "__");
                    tmpE.setAttribute("onclick","dsp_unique_ontop(\"" + chkPrjN + "\",\"" + unique + "\")") ;//remove the original function (from old web) to control by this web
                };
                if(tmpE.getElementsByTagName("td").length > 0){
                    tmpE.getElementsByTagName("td")[0].style.maxWidth = "100px";
                    tmpE.getElementsByTagName("td")[2].style.maxWidth = "100px";
                    tmpE.getElementsByTagName("td")[2].style.paddingTop = "10px";
                    tmpE.getElementsByTagName("td")[5].classList.add("w3-center");
                    tmpE.getElementsByTagName("td")[4].style.display = "none";
                    tmpE.getElementsByTagName("td")[3].style.maxWidth = "60px";
                    tmpE.getElementsByTagName("td")[3].innerText = tmpE.getElementsByTagName("td")[3].innerText.replace("_"," ");
                    tmpE.getElementsByTagName("td")[3].classList.add("w3-text-deep-purple","w3-center","w3-border-right");
                }else if(tmpE.getElementsByTagName("th").length){
                    tmpE.getElementsByTagName("th")[4].style.display = "none";
                    tmpE.getElementsByTagName("th")[3].style.width = "60px";
                    tmpE.getElementsByTagName("th")[3].style.padding = 0;
                }
                for(let i=0;i<tmpE.getElementsByTagName("td").length;i++){
                    if(i % 2 === 0){
                        // tmpE.getElementsByTagName("td")[i].classList.add("w3-card-2");
                    }
                }
            }
            for(let i=0;i<tgtDetail.getElementsByClassName("w3-badge").length;i++){
                let tmpE = tgtDetail.getElementsByClassName("w3-badge")[i];
                if(tmpE.classList.contains("w3-large")){tmpE.classList.remove("w3-large");tmpE.classList.add("w3-small");}
                for(let tmpE2 of tmpE.parentNode.getElementsByClassName("w3-black")){
                    tmpE2.parentNode.classList.add("w3-black");
                    if(i > tgtDetail.parentNode.getElementsByClassName("w3-badge").length/2){
                        tmpE2.parentNode.parentNode.style.bottom = "70%";
                        tmpE2.parentNode.parentNode.style.top = "";
                    }
                }
                // tmpE.style.padding = 0;
            }
            for(let tmpE of tgtDetail.getElementsByTagName("th")){
                if(tmpE.style.minWidth === "60px"){tmpE.style.minWidth = "";tmpE.style.width="20px";}
                tmpE.style.padding = 0;
                tmpE.classList.add("w3-border");
                if(tmpE.innerText.search(/Done/) > -1){ tmpE.innerText = tmpE.innerText.replace("Done?","exe"); }
                tmpE.removeAttribute("onclick");
            }
            for(let tmpE of tgtDetail.getElementsByTagName("img")){
                // tmpE.style.width = "20px";
                tmpE.nextElementSibling.style.display="none";
            }
            for(let tmpE of tgtDetail.getElementsByTagName("div")){
                if(tmpE.style.minWidth === "60px"){tmpE.style.minWidth = "";tmpE.style.width="100%";}
                tmpE.style.padding = 0;
            }
            for(let tmpE of tgtDetail.getElementsByTagName("span")){
                if(tmpE.classList.contains("w3-badge")) {continue;}
                if(tmpE.parentNode.parentNode.parentNode.tagName.toLowerCase() === "td"){
                    // dummy gds
                    tmpE.parentNode.style.position = "relative";
                    tmpE.parentNode.classList.remove("w3-center");
                    tmpE.style.position = "absolute";
                    tmpE.style.top = 0;
                    tmpE.style.left = "5px";
                    if(tmpE.previousElementSibling !== null){
                        tmpE.previousElementSibling.style.textAlign = "left";
                    }
                }else if(tmpE.parentNode.parentNode.tagName.toLowerCase() === "td"){
                    // normal casees
                    tmpE.parentNode.style.position = "relative";
                    tmpE.style.position = "absolute";
                    tmpE.style.top = 0;
                    tmpE.style.left = 0;
                }
            }
            for(let tmpE of tgtDetail.getElementsByTagName("i")){
                if(tmpE.innerText !== "pool"){ tmpE.classList.add("w3-small"); }
                tmpE.style.padding = 0;
            }
            // =>
            loadingEle.remove();
        }else{
            // console.log("state=" + this.readyState + " w/ status=", this.status)
        }
    }
    // console.log("sending ... ", prjN, strUnq)
    xmlhttp.open("GET", "upDetailPVPI.php?q="+guidedPrjN,true)
    xmlhttp.send("");
    //
    flgDspSessions = true;
    return 1;
}

function dsp_unique_ontop(tgtPrjN, sessionUnique){
    // core function to call php and update the target div.
    // console.log(tgtPrjN,sessionUnique)

    let eleOntop =  undefined;
    let loadingEle  = undefined;
    if(window.innerWidth < 1320){
        eleOntop = document.getElementById("ontop");
        eleOntop.style.display = "block";
        loadingEle = gen_loading_4subEle(eleOntop);
    }else{
        // console.log("window inner width : " + window.innerWidth, dataMerge.offsetHeight, dataMerge.offsetWidth, dataMerge.offsetTop, dataMerge.offsetLeft)
        // console.log(dataMerge.scrollTop)
        // => remove previous if needed
        let tmpa =  dataMerge.getElementsByClassName("myCntOnTop")
        for(let tmpv of tmpa){tmpv.remove();}
        // => create new
        eleOntop = document.createElement("div");
        eleOntop.classList.add("w3-black","w3-block","myCntOnTop");
        eleOntop.style.width = "100%";
        eleOntop.style.height = "100%";
        // eleOntop.style.position = "absolute";
        // eleOntop.style.top = -dataMerge.scrollTop;

        // follow the structure of on-top
        let aD1 = document.createElement("div"); aD1.classList.add("w3-responsive");
        aD1.style.width = "100%";
        aD1.style.height = "100%";
        aD1.style.paddingTop = "30px";
        let aD2 = document.createElement("div"); aD2.classList.add("w3-white");
        let aSpan = document.createElement("span");
        aSpan.classList.add("w3-text-white", "w3-hover-text-grey", "w3-container", "w3-display-topright", "w3-large", "w3-button", "w3-orange", "w3-round-large");
        aSpan.style.paddingTop = "30px";
        aSpan.style.top = "-10px";
        aSpan.addEventListener("click",function(){
            // dataMerge.style.overflow = "";
            dataMerge.getElementsByTagName("table")[0].style.display = "";
            eleOntop.remove();
        });
        aSpan.style.zIndex = 4;
        aSpan.innerText = "x";
        
        // =>
        aD1.appendChild(aD2);
        eleOntop.appendChild(aD1);
        eleOntop.appendChild(aSpan);
        dataMerge.appendChild(eleOntop);

        // disable the scroll on dataMerge
        // dataMerge.style.overflow = "hidden";
        dataMerge.getElementsByTagName("table")[0].style.display = "none";
    }
   
    // -> make an http request()
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            // let tgtE = document.getElementById("detailSession");
            let tgtE = eleOntop.getElementsByTagName("div")[0].getElementsByTagName("div")[0];
            // => get html content
            tgtE.innerHTML = this.responseText;
            if(tgtE.getElementsByTagName("p").length > 0){
                // => modify the format (smaller)
                tgtE.getElementsByTagName("p")[0].style.margin = 0;
                tgtE.getElementsByTagName("p")[0].classList.add("w3-tiny","w3-text-grey");
                let aoTd = tgtE.getElementsByTagName("td");
                for(let td of aoTd) {
                    td.style.paddingTop = "2px";
                    td.style.paddingBottom = "2px";
                    td.classList.add("w3-tiny");
                }
            }else{
                tgtE.innerHTML = "<p class=\"w3-large\">Nothing to show here</p>";
            }
            // => remove the loading 
            if(loadingEle !== undefined) {loadingEle.remove()};
        }
    };
    xmlhttp.open("GET", "upDetailPVPI_session.php?prjN="+tgtPrjN+"&unique="+sessionUnique, true)
    xmlhttp.send();
    // console.log("finished responseText")
    // console.log("aloha : ", "unique='" + sessionUnique + "'", "tgtPrjN=" + tgtPrjN + "'")
    return;
}

function filter_the_next_element(theInp){
    let thisTd = theInp.parentNode;
    let theCol = -1;
    document.createElement("div").tag
    let type = thisTd.tagName;
    let aoTdThisTr = thisTd.parentNode.getElementsByTagName(type);
    for(let i=0;i<aoTdThisTr.length;i++){
        if(aoTdThisTr[i] === thisTd) {theCol = i;}
    }
    let aoTr = thisTd.parentNode.parentNode.getElementsByTagName("tr");
    let flgGo = false
    let aoTrRm = new Array();
    for(let tr of aoTr){
        if(tr === thisTd.parentNode) {flgGo = true;continue;}
        if(flgGo === false) {continue;}
        if(theInp.value === ""){
            tr.style.display = '';
            tr.style.opacity = "1";
        }else{
            if(tr.getElementsByTagName("td")[theCol].innerText.toLowerCase().search(theInp.value.toLowerCase()) > -1){
                tr.style.display = '';
                tr.style.opacity = "1";
            }else{
                tr.style.transitionProperty = "opacity";
                tr.style.transitionDuration = "1s";
                tr.style.opacity = "0";
                setTimeout(function(){tr.style.display = "none";},1000)
            }
        }
        // console.log("compare:",theInp.value,tr.getElementsByTagName("td")[theCol].innerText)
    }
}

function first_load_project_names(){
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.open("GET", "trackByMergeData_dev.php?q=getListPrjNamesOnly", false)
    xmlhttp.send();
    if(xmlhttp.responseText !== null){
        oPrjNvsTopCell = JSON.parse(xmlhttp.responseText)
        for(let prjN in oPrjNvsTopCell){
            let tmpE = document.createElement("option"); tmpE.value  = prjN; tmpE.innerText = prjN;
            globalShowedPrjN.insertBefore(tmpE,globalShowedPrjN.childNodes[0]);
            if(Object.keys(oPrjNvsTopCell[prjN]).length === 0){
                tmpE.disabled = true;//there is no top-cell to display, then this project should be disabled
                continue;
            }else{}
            // let dumpE = document.createElement("option"); dumpE.value  = "-"; dumpE.innerText = "["+prjN+"]"; dumpE.disabled = true;
            // globalShowedTopCell.insertBefore(dumpE,globalShowedTopCell.childNodes[0]);
            for(let topCell in oPrjNvsTopCell[prjN]){
                let tmpE2 = document.createElement("option"); tmpE2.value  = topCell; tmpE2.innerText = "[" + prjN + "] " + topCell;
                globalShowedTopCell.insertBefore(tmpE2,globalShowedTopCell.childNodes[0]);
            }
        }
    }else{}
}

function load_merge_data(){
    upTrackByMergeData();
}

function up_list_topcell(){
    let guidedPrjN = globalShowedPrjN.value;
    let aoEleTopcellOption = globalShowedTopCell.getElementsByTagName("option");
    // => remove options in topcell (except 'all')
    let i = aoEleTopcellOption.length;
    while(i>0){
        i--;
        if(aoEleTopcellOption[i].value === "all") {continue;}
        aoEleTopcellOption[i].remove();
    }
    // => make new list of options
    for(let prjN in oPrjNvsTopCell){
        if(guidedPrjN !== "all" && prjN !== guidedPrjN) {continue;}
        for(let topCell in oPrjNvsTopCell[prjN]){
            let tmpE2 = document.createElement("option"); tmpE2.value  = topCell; tmpE2.innerText = "[" + prjN + "] " + topCell;
            globalShowedTopCell.insertBefore(tmpE2,globalShowedTopCell.childNodes[0]);
        }
    }

    // default to point to 'all'
    globalShowedTopCell.lastChild.selected = true;
}

function filter_by_topcell(){
    let aoTr = dataMerge.getElementsByTagName("tr");
    for(let i = 1; i<aoTr.length;i++){
        if((globalShowedTopCell.value === "all") || (aoTr[i].getElementsByTagName("td")[6].innerText === globalShowedTopCell.value)){
            // keep
            aoTr[i].style.display = '';
        }else{
            aoTr[i].style.display = 'none';
        }
    }
}

function toggle_problem_view(clickedEle){
    if(problem.style.height === "25vh"){
        problem.style.height = "100vh";
        problem.style.width = "100%";
        problem.style.position = "absolute";
        problem.style.top = "0";
        problem.style.right = "0";
        problem.style.left = "0";
        problem.style.paddingTop = "32px";
        problem.style.paddingBottom = "20px";
        problem.style.backgroundColor = "white";
        clickedEle.getElementsByTagName("i")[0].innerText = "view_compact";
    }else{
        problem.style.height = "25vh";
        problem.style.width = "";
        problem.style.position = "";
        // problem.style.top = "0";
        // problem.style.right = "0";
        // problem.style.left = "0";
        problem.style.paddingTop = "";
        problem.style.paddingBottom = "";
        problem.style.backgroundColor = "";
        clickedEle.getElementsByTagName("i")[0].innerText = "zoom_out_map";
    }
}

FILE:: .//src_modules/PVPI_insider/trackByMergeData.php
<?php
    // ini_set('display_errors', 1);
    // ini_set('display_startup_errors', 1);
    // error_reporting(E_ALL);

    $tgtD = "../../data/PVPI_org";

    $tgtPrjN = $_GET["q"];
    $maxPerTopCell = $_GET["maxN"];
    if($tgtPrjN === null) $tgtPrjN = "all";
    if($maxPerTopCell === null) $maxPerTopCell = 4;
    // print_r($_GET);

    $sumData = null;
    $dataByMerge = array();
    $limitNoFiles = -1;#limit the sweeping data by number of swept files, specify 0 or -1 to get all files
    $limitNoSwept = -1;#limit the sweeping data by number of detected merge data, specify 0 or -1 to get all files
                      #notice: each data file include ~20 sessions
    $limitRegDataByTopCell = array();#
    
    // -> json file interacting
    if($fh = fopen("$tgtD/sumAll.json", "r")){
        $sumData = json_decode(fread($fh, filesize("$tgtD/sumAll.json")), true);
        fclose($fh);
    } else { }

    foreach ($sumData as $prjN => $sumInf) {
        if($tgtPrjN === "getListPrjNamesOnly"){
            // specially get prjN
            if(!array_key_exists($prjN,$dataByMerge)) $dataByMerge[$prjN] = array();
        }else{}
        if($tgtPrjN !== "all" && $prjN !== $tgtPrjN && $tgtPrjN !== "getListPrjNamesOnly") continue;
        $aoChkF = glob("$tgtD/". $prjN ."_PVexeOngoingLog_updated.json");
        $aoChkF = array_merge($aoChkF, glob("$tgtD/detailInd_" . $prjN ."_PVexe*.json"));
        rsort($aoChkF);#sort to get the latest data (from submision time) firstly
        $i_valid = 0;#number of valid data file were swept
        for ($i=0;$i<count($aoChkF);$i++) {
            // echo "dbg:: $prjN --- $i --- $aoChkF[$i]\n";
            // if($limitNoFiles > 0 && $i>$limitNoFiles) break;#don't break here, not sure that we can get valid data just in several first data file, need to check the valid mergeData
            if($limitNoSwept > 0 && $i_valid>$limitNoSwept) break;#don't break here, not sure that we can get valid data just in several first data file, need to check the valid mergeData
            $tgtf = $aoChkF[$i];
            $tmpData = null;
            $flgOngo = false;
            if($fh = fopen($tgtf, "r")){
                $tmpData = json_decode(fread($fh, filesize($tgtf)), true);
                fclose($fh);
                if(preg_match("/OngoingLog/",$tgtf)){
                    // register some critical top-info
                    $tmpDataOngo = $tmpData["ongoing"];
                    $tmpData = $tmpData["ongoingdone"];
                    foreach($tmpData as $unique => $session){
                        if(array_key_exists($unique,$tmpDataOngo)){
                            foreach($tmpDataOngo[$unique] as $keyw => $detail){
                                if(preg_match("/^run_/",$keyw)) continue;
                                if(preg_match("/^\d+$/",$keyw)) continue;
                                if($keyw === "running") continue;
                                if(!preg_match("/^run_/",$keyw)){
                                    $tmpData[$unique][$keyw] = $detail;
                                }
                            }
                        }
                    }
                    $flgOngo = true;
                }else{}
                # =>
                // echo("\ndbg::" . $tgtf . "\n");
                foreach ($tmpData as  $unique => $session) {
                    $ongoStr = "Done";
                    if($flgOngo) {$ongoStr = "Ongo";}
                    if($tgtPrjN === "getListPrjNamesOnly"){
                        // specially get top-cell name
                        if(array_key_exists("TOP_LAYOUT_NAME",$session)){
                            if(!array_key_exists($session["TOP_LAYOUT_NAME"],$dataByMerge[$prjN])) $dataByMerge[$prjN][$session["TOP_LAYOUT_NAME"]] = 0;
                            $dataByMerge[$prjN][$session["TOP_LAYOUT_NAME"]]++;
                        }else{}
                    }else{
                        get_in_out_data($dataByMerge, $session, $unique,$ongoStr,$prjN,$limitRegDataByTopCell,$maxPerTopCell);
                    }
                }
            } else { }
            // echo("\ndbg::" . $tgtf . "\n");
        }
    }
    // var_dump($sumData);
    // print_r($limitRegDataByTopCell);echo "==========================================\n\n";
    // print_r($dataByMerge);
    echo(json_encode($dataByMerge));
    // var_dump($dataByMerge);

    //////////////////////////////////
    function get_data($aoKey,$tgtArr){
        if(!is_array($tgtArr) && !is_object($tgtArr)) return null;
        if(is_array($aoKey) || is_object($aoKey)){
            if(count($aoKey) > 1){
                $lastK = array_shift($aoKey);
                if(array_key_exists($lastK,$tgtArr)){
                    return get_data($aoKey,$tgtArr[$lastK]);
                }else{
                    return null;
                }
            }else{
                $lastK = array_shift($aoKey);
                if(array_key_exists($lastK,$tgtArr)) return($tgtArr[$lastK]);
                return null;
            }
        }else{
            if(array_key_exists($aoKey,$tgtArr)) return $tgtArr[$aoKey];
            return null;
        }
    }

    //////////////////////////////////
    function get_basic_data($session,$tgtArr){
        foreach(array("TOP_LAYOUT_NAME","CHIP_OR_IP","ecoVer") as $keyw){
            $tgtArr["_".$keyw."_"] = get_data(array($keyw),$session);
        }
        return 1;
    }

    ///////////////////////////////////
    function getPathInode($data){
        $path = get_data("path",$data);
        $inode = get_data("inode",$data);
        if($path === null) return "";
        if($inode === null) return "";
        return "$path:$inode";
    };
    //////////////////////////////////
    function get_in_out_data(&$dataByMerge, $session, $unique, $flgOngo,$prjN,&$limRegData,$maxPerTopCell){
        $topCellName = get_data(array("TOP_LAYOUT_NAME"),$session);
        // limit data to register >>>
        if(!array_key_exists($prjN,$limRegData)) $limRegData[$prjN] = array();
        if(!array_key_exists($topCellName,$limRegData[$prjN])) $limRegData[$prjN][$topCellName] = array();
        if(!array_key_exists("data",$limRegData[$prjN][$topCellName])) $limRegData[$prjN][$topCellName]["data"] = array();
        if(!array_key_exists("number",$limRegData[$prjN][$topCellName])) $limRegData[$prjN][$topCellName]["number"] = 0;
        if($limRegData[$prjN][$topCellName]["number"] > $maxPerTopCell) return;
        // <<<<<
        foreach ($session as $keyw => $detail){
            $type = preg_replace("/run_/","",$keyw);
            if($keyw === "run_gds_merge1"){
                $data = getPathInode(get_data(array("subrun",0,"moreInfo","_outputs_","LAYOUT"),$detail));
                $mtime = get_data(array("subrun",0,"moreInfo","_outputs_","LAYOUT","mtime"),$detail);
                if($data === "") continue;#this merge got error (no output), or not tracked

                // reg the data
                $dataByMerge[$data]["prjN"] = $prjN;
                $dataByMerge[$data]["ongo"] = $flgOngo;
                $dataByMerge[$data]["ref"] = $unique;
                $dataByMerge[$data]["type"] = $type;
                $dataByMerge[$data]["mtime"] = $mtime;
                $dataByMerge[$data]["TOP_LAYOUT_NAME"] = $topCellName;

                $core = getPathInode(get_data(array("subrun",0,"moreInfo","_inputs_","LAYOUT"),$detail));
                $dataByMerge[$data]["inputs"]["core"] = $core;

                $limRegData[$prjN][$topCellName]["number"]++;
                $limRegData[$prjN][$topCellName]["data"][$data] = 1;
            }elseif($keyw === "run_gds_merge2"){
                $topCellName = get_data(array("TOP_LAYOUT_NAME"),$session);
                $data = getPathInode(get_data(array("subrun",0,"moreInfo","_outputs_","LAYOUT"),$detail));
                $mtime = get_data(array("subrun",0,"moreInfo","_outputs_","LAYOUT","mtime"),$detail);
                if($data === "") continue;#this merge got error (no output), or not tracked

                // reg the data
                $dataByMerge[$data]["prjN"] = $prjN;
                $dataByMerge[$data]["ongo"] = $flgOngo;
                $dataByMerge[$data]["ref"] = $unique;
                $dataByMerge[$data]["type"] = $type;
                $dataByMerge[$data]["mtime"] = $mtime;
                $dataByMerge[$data]["TOP_LAYOUT_NAME"] = $topCellName;

                $gds1 = getPathInode(get_data(array("subrun",0,"moreInfo","_inputs_","LAYOUT"),$detail));
                $dataByMerge[$data]["inputs"]["gds_merge1"] = $gds1;

                if($gds1 !== ""){
                    $moreinputs = get_data(array("subrun",0,"moreInfo","_inputs_"),$detail);
                    foreach ($moreinputs as $intype => $moreInfo) {
                        if($intype === "LAYOUT") continue;
                        $dataByMerge[$data]["inputs"][$intype] = getPathInode($moreInfo);
                    }
                }
                
                $limRegData[$prjN][$topCellName]["number"]++;
                $limRegData[$prjN][$topCellName]["data"][$data] = 1;
            }elseif(preg_match("/^run_/", $keyw)){
                if(preg_match("/^run_drc/",$keyw) || preg_match("/^run_lvs/",$keyw) || preg_match("/^run_lvl/",$keyw)){
                    // check if this run is valid (logf)
                    if($detail["logStatus"] === "logInd=NA") continue;

                    //drc, lvs, lvl
                    $chkData = getPathInode(get_data(array("subrun",0,"moreInfo","_inputs_","LAYOUT"),$detail));
                    if($chkData === ""){
                        if(array_key_exists("run_gds_merge2",$session)){
                            $topwkdir = $session["WORKINGDIR"];
                            $topCellName = get_data(array("TOP_LAYOUT_NAME"),$session);
                            $indwkdir = get_data(array("run_gds_merge2","subrun",0,"exeDir"),$session);
                            $tmpv   = get_data(array("run_gds_merge2","subrun",0,"moreInfo","output"),$session);
                            $output = $tmpv;
                            if($tmpv !== ""){
                                $tmpa = explode(" ",$tmpv);
                                $output = $tmpa[0];
                            }else{}
                            if($output === "n/a"){
                                #believe that this record worked on an error merge2 => ignored
                                continue;
                            }
                            # -> get starting time for the unique (instead of inode)
                            $staT = get_data(array("run_gds_merge2","subrun",0,"moreInfo","startAt"),$session);
                            $rptT = get_data(array("run_gds_merge2","subrun",0,"moreInfo","reportAt"),$session);
                            $chkData = $topwkdir . "/" . $indwkdir . "/" . $output . ":ut-" . $staT;
                            // echo "detected noData '$keyw', track merge2, chkData='$chkData'\n";

                            // reg the data
                            $dataByMerge[$chkData]["prjN"] = $prjN;
                            $dataByMerge[$chkData]["ongo"] = "untrack";
                            $dataByMerge[$chkData]["ref"] = $unique;
                            $dataByMerge[$chkData]["type"] = "gds_merge2";
                            $dataByMerge[$chkData]["mtime"] = $rptT;
                            $dataByMerge[$chkData]["TOP_LAYOUT_NAME"] = $topCellName ;

                            # => add inputs merge1 if existed
                            if(array_key_exists("run_gds_merge1",$session)){
                                $indwkdir = get_data(array("run_gds_merge2","subrun",0,"exeDir"),$session);
                                $tmpv   = get_data(array("run_gds_merge2","subrun",0,"moreInfo","output"),$session);
                                $output = $tmpv;
                                if($tmpv !== ""){
                                    $tmpa = explode(" ",$tmpv);
                                    $output = $tmpa[0];
                                }else{}
                                if($output === "n/a"){
                                    #believe that this record worked on an error merge2 => ignored
                                    continue;
                                }
                                $staT = get_data(array("run_gds_merge1","subrun",0,"moreInfo","startAt"),$session);
                                $rptT = get_data(array("run_gds_merge1","subrun",0,"moreInfo","reportAt"),$session);
                                $gds1 = $topwkdir . "/" . $indwkdir . "/" . $output . ":ut-" . $staT;
                                # => reg as input
                                $dataByMerge[$chkData]["inputs"]["gds_merge1"] = $gds1;
                                # => reg as an item
                                $dataByMerge[$gds1]["ref"] = $unique;
                            }else{}
                            $limRegData[$prjN][$topCellName]["number"]++;
                            $limRegData[$prjN][$topCellName]["data"][$chkData] = 1;
                        }elseif(array_key_exists("run_gds_merge1",$session)){
                            $topwkdir = $session["WORKINGDIR"];
                            $topCellName = get_data(array("TOP_LAYOUT_NAME"),$session);
                            $indwkdir = get_data(array("run_gds_merge1","subrun",0,"exeDir"),$session);
                            $tmpv   = get_data(array("run_gds_merge1","subrun",0,"moreInfo","output"),$session);
                            $output = $tmpv;
                            if($tmpv !== ""){
                                $tmpa = explode(" ",$tmpv);
                                $output = $tmpa[0];
                            }else{}
                            if($output === "n/a"){
                                #believe that this record worked on an error merge2 => ignored
                                continue;
                            }
                            # -> get starting time for the unique (instead of inode)
                            $staT = get_data(array("run_gds_merge1","subrun",0,"moreInfo","startAt"),$session);
                            $rptT = get_data(array("run_gds_merge1","subrun",0,"moreInfo","reportAt"),$session);
                            $chkData = $topwkdir . "/" . $indwkdir . "/" . $output . ":ut-" . $staT;
                            // echo "detected noData '$keyw', track merge2, chkData='$chkData'\n";

                            // reg the data
                            $dataByMerge[$chkData]["prjN"] = $prjN;
                            $dataByMerge[$chkData]["ongo"] = "untrack";
                            $dataByMerge[$chkData]["ref"] = $unique;
                            $dataByMerge[$chkData]["type"] = "gds_merge1";
                            $dataByMerge[$chkData]["mtime"] = $rptT;
                            $dataByMerge[$chkData]["TOP_LAYOUT_NAME"] = $topCellName ;
                            $limRegData[$prjN][$topCellName]["number"]++;
                            $limRegData[$prjN][$topCellName]["data"][$chkData] = 1;
                        }else{
                            // untrack pv item, and run without run_merge1 or run_merge2 => get the directory for tracking
                            $topwkdir = $session["WORKINGDIR"];
                            $topCellName = get_data(array("TOP_LAYOUT_NAME"),$session);
                            $indwkdir = get_data(array($keyw,"subrun",0,"exeDir"),$session);
                            $tmpa = explode("/",$indwkdir);
                            array_pop($tmpa);
                            $chkwkdir = implode("/",$tmpa);
                            $tmpa = explode("__",$unique);
                            $tmpUnq = array_pop($tmpa);
                            $chkData = "$topwkdir/$chkwkdir:ut2-$tmpUnq";

                            // reg the data
                            # => registering
                            $dataByMerge[$chkData]["prjN"] = $prjN;
                            $dataByMerge[$chkData]["ongo"] = "untrack";
                            $dataByMerge[$chkData]["ref"] = $unique;
                            $dataByMerge[$chkData]["type"] = "gds_merge2";
                            $dataByMerge[$chkData]["mtime"] = $tmpUnq;
                            $dataByMerge[$chkData]["TOP_LAYOUT_NAME"] = $topCellName ;
                            $limRegData[$prjN][$topCellName]["number"]++;
                            $limRegData[$prjN][$topCellName]["data"][$chkData] = 1;
                        }
                        # try to sweep the data for run_merge2, then run_merge1
                        // print_r($detail);
                    }else{
                    }
                    $dataByMerge[$chkData]["PVitems"][$type][$unique] = 1;

                    if(!array_key_exists("prjN",$dataByMerge[$chkData])){
                        $dataByMerge[$chkData]["prjN"] = $prjN;
                    }else{
                        if( preg_match("/$prjN/",$dataByMerge[$chkData]["prjN"])){
                        }else{
                            $dataByMerge[$chkData]["prjN"] .= ";" . $prjN;
                        }
                    }

                    if(preg_match("/^run_lvl/",$keyw)){
                        $chkData2 = getPathInode(get_data(array("subrun",0,"moreInfo","_inputs_","LAYOUT2"),$detail));
                        if($chkData2 !== ""){
                            $dataByMerge[$chkData2]["PVitems"][$type][$unique] = 1;
                            if(!array_key_exists("prjN",$dataByMerge[$chkData2])){
                                $dataByMerge[$chkData2]["prjN"] = $prjN;
                            }else{
                                if(preg_match("/$prjN/",$dataByMerge[$chkData2]["prjN"])){
                                }else{
                                    $dataByMerge[$chkData2]["prjN"] .= ";" . $prjN;
                                }
                            }
                        }else{}
                    }

                }else{
                    //dummy
                    $data = getPathInode(get_data(array("subrun",0,"moreInfo","_outputs_","LAYOUT"),$detail));
                    $gds1 = getPathInode(get_data(array("subrun",0,"moreInfo","_inputs_","LAYOUT"),$detail));
                    if($data === "") continue; #this merge got error (no output), or not tracked, try to get the status and track the unique instead of inode

                    $dataByMerge[$data]["ref"] = $unique;
                    $dataByMerge[$data]["type"] = $type;
                    $dataByMerge[$data]["inputs"]["gds_merge1"] = $gds1;
                }
            }else{}
        }
        return 1;
    }
?>

FILE:: .//src_modules/PVPI_insider/trackOngoingData.php
<?php
    // ini_set('display_errors', 1);
    // ini_set('display_startup_errors', 1);
    // error_reporting(E_ALL);

    $tgtD = "../../data/PVPI_org";

    $tgtPrjN = $_GET["q"];
    if($tgtPrjN === null) $tgtPrjN = "all";
    
    $sumData = null;
    $oData = array();#output data
    
    // -> json file interacting
    if($fh = fopen("$tgtD/sumAll.json", "r")){
        $sumData = json_decode(fread($fh, filesize("$tgtD/sumAll.json")), true);
        fclose($fh);
    } else { }

    foreach ($sumData as $prjN => $sumInf) {
        if($tgtPrjN !== "all" && $prjN !== $tgtPrjN) continue;
        $aoChkF = array_merge(glob("$tgtD/". $prjN ."_PVexeOngoingLog_updated.json"));
        krsort($aoChkF);#sort to get the latest data (from submision time) firstly
        $i_valid = 0;#number of valid data file were swept
        for ($i=0;$i<count($aoChkF);$i++) {
            $tgtf = $aoChkF[$i];
            $tmpData = null;
            if($fh = fopen($tgtf, "r")){
                $tmpData = json_decode(fread($fh, filesize($tgtf)), true);
                fclose($fh);
                # =>
                if(!array_key_exists("ongoing", $tmpData)) continue;
                // echo("\ndbg::" . $tgtf . "\n");
                foreach ($tmpData["ongoing"] as $unique => $ongoSess) {
                    // $regRunningCWD = $ongoSess["running"]["sub_cwd"];
                    // echo "  > $unique: [running] $regRunningCWD\n";
                    foreach ($ongoSess as $runk => $content) {
                        if(!preg_match("/^\d+$/",$runk) && $runk !== "running") continue;
                        $regJobCWD = $content["sub_cwd"];
                        $startTime = "";
                        if($content["time_start"] !== "n/a") $startTime = strtotime($content["time_start"]);
                        if(!array_key_exists($regJobCWD,$oData)) $oData[$regJobCWD] = array();
                        if(!array_key_exists($runk,$oData[$regJobCWD])) $oData[$regJobCWD][$runk] = $content;
                        // var_dump($content);
                        $oData[$regJobCWD]["session"] = $unique;
                        $oData[$regJobCWD]["prjN"] = $prjN;
                        if($startTime !== ""){
                            if(!array_key_exists("time_start",$oData[$regJobCWD])){
                                $oData[$regJobCWD]["time_start"] = $startTime;
                            }else{
                                if($oData[$regJobCWD]["time_start"] > $startTime){
                                    $oData[$regJobCWD]["time_start"] = $startTime;
                                }
                            }
                        }
                    }
                    // echo "dbg:: " . get_data(array("run_gds_merge2","subrun",0,"moreInfo","_outputs_","LAYOUT","user"),$tmpData[$unique]);
                    // check if there is not 'running' for some cwd, this is because parallel exePV were not tracked fully (opportunity to improve)
                }
                foreach($oData as $regJobCWD => $content){
                    if(!array_key_exists("running",$oData[$regJobCWD])){
                        // make a fake running
                        $oData[$regJobCWD]["running"]["ongoStt"] = "unTrackParallel";
                        $oData[$regJobCWD]["session"] = $unique;
                        $oData[$regJobCWD]["prjN"] = $prjN;
                    }else{}
                }
                // foreach ($tmpData as  $unique => $session) {
                //     var_dump($session);
                // }
            } else { }
            // echo("\ndbg::" . $tgtf . "\n");
        }
    }
    // var_dump($sumData);
    // print_r($oData);
    echo(json_encode($oData));

    //////////////////////////////////
    function get_data($aoKey,$tgtArr){
        if(count($aoKey) > 1){
            $lastK = array_shift($aoKey);
            if(array_key_exists($lastK,$tgtArr)){
                return get_data($aoKey,$tgtArr[$lastK]);
            }else{
                return null;
            }
        }else{
            $lastK = array_shift($aoKey);
            if(array_key_exists($lastK,$tgtArr)) return($tgtArr[$lastK]);
            return null;
        }
    }

    //////////////////////////////////
    function get_basic_data($session,$tgtArr){
        foreach(array("TOP_LAYOUT_NAME","CHIP_OR_IP","ecoVer") as $keyw){
            $tgtArr["_".$keyw."_"] = get_data(array($keyw),$session);
        }
        return 1;
    }

?>

FILE:: .//src_modules/PVPI_insider/trackProblemData.php
<?php
    // ini_set('display_errors', 1);
    // ini_set('display_startup_errors', 1);
    // error_reporting(E_ALL);

    $tgtD = "../../data/PVPI_org";

    $tgtPrjN = $_GET["q"];
    if($tgtPrjN === null) $tgtPrjN = "all";
    
    $sumData = null;
    $oData = array();#output data
    
    // -> json file interacting
    if($fh = fopen("$tgtD/sumAll.json", "r")){
        $sumData = json_decode(fread($fh, filesize("$tgtD/sumAll.json")), true);
        fclose($fh);
    } else { }

    foreach ($sumData as $prjN => $sumInf) {
        if($tgtPrjN !== "all" && $prjN !== $tgtPrjN) continue;
        $aoChkF = array_merge(glob("$tgtD/". $prjN ."_PVexeOngoingLog_updated.json"));
        $aoChkF = array_merge($aoChkF, glob("$tgtD/detailInd_" . $prjN ."_PVexe*.json"));
        krsort($aoChkF);#sort to get the latest data (from submision time) firstly
        $i_valid = 0;#number of valid data file were swept
        for ($i=0;$i<count($aoChkF);$i++) {
            $tgtf = $aoChkF[$i];
            $tmpData = null;
            $tmpDataOngo = null;
            $flgOngo = false;
            $flgOngoDone = false;
            if($fh = fopen($tgtf, "r")){
                $tmpData = json_decode(fread($fh, filesize($tgtf)), true);
                fclose($fh);
                if(preg_match("/OngoingLog/",$tgtf)){
                    // register some critical top-info
                    $tmpDataOngo = $tmpData["ongoing"];
                    $tmpData = $tmpData["ongoingdone"];
                    foreach($tmpData as $unique => $session){
                        if(array_key_exists($unique,$tmpDataOngo)){
                            foreach($tmpDataOngo[$unique] as $keyw => $detail){
                                if(preg_match("/^run_/",$keyw)) continue;
                                if(preg_match("/^\d+$/",$keyw)) continue;
                                if($keyw === "running") continue;
                                if(!preg_match("/^run_/",$keyw)){
                                    $tmpData[$unique][$keyw] = $detail;
                                }
                            }
                        }
                    }
                    $flgOngo = true;
                }else{}
                # => treating the ongoing job, inform as problem if pending (too long?!)
                if($tmpDataOngo !== null){
                    foreach ($tmpDataOngo as $unique => $session){
                        $ongoStr = "Ongo";
                        $probObj = get_prob_info_ongo($session);
                        if(count(array_keys($probObj)) > 0){
                            if(!array_key_exists($unique,$oData)){$oData[$unique] = array();}
                            $oData[$unique] = $probObj;
                            if(!array_key_exists("_prjN_",$oData[$unique])) $oData[$unique]["_prjN_"] = $prjN;
                        }else{}
                        // print_r(get_prob_info_ongo($session));
                    }
                }else{}
                # =>
                // echo("\ndbg::" . $tgtf . "\n");
                foreach ($tmpData as  $unique => $session) {
                    $ongoStr = "Done";
                    if($flgOngo) {$ongoStr = "OngoDone";}
                    $probObj = get_prob_info_done($session,$ongoStr);
                    if(count(array_keys($probObj)) > 0){
                        if(!array_key_exists($unique,$oData)){$oData[$unique] = array();}
                        $oData[$unique] = $probObj;
                        if(!array_key_exists("_prjN_",$oData[$unique])) $oData[$unique]["_prjN_"] = $prjN;
                    }else{}
                }
            } else { }
            // echo("\ndbg::" . $tgtf . "\n");
        }
    }
    // var_dump($sumData);
    // print_r($oData);
    echo(json_encode($oData));

    //////////////////////////////////
    function get_data($aoKey,$tgtArr){
        if(count($aoKey) > 1){
            $lastK = array_shift($aoKey);
            if(array_key_exists($lastK,$tgtArr)){
                return get_data($aoKey,$tgtArr[$lastK]);
            }else{
                return null;
            }
        }else{
            $lastK = array_shift($aoKey);
            if(array_key_exists($lastK,$tgtArr)) return($tgtArr[$lastK]);
            return null;
        }
    }

    //////////////////////////////////
    function get_prob_info_ongo($session){
        $oObj = array();
        if(count(array_keys($session)) === 0) return $oObj;
        $tmpO = array();
        $unknPID = array();#unknown (not tracked the parallel jobs) PID by checking CWD
        // => get object of master running jobs
        foreach($session as $pid => $detail){
            if(preg_match("/^running/",$pid)){
                // reg by cwd
                $tmpO[$detail["sub_cwd"]] = array();
                $tmpO[$detail["sub_cwd"]]["#jobsAll"] = 0;
                $tmpO[$detail["sub_cwd"]]["#jobsPend"] = 0;
                $tmpO[$detail["sub_cwd"]]["jnames"] = "";
            }
        }
        // => assign jobs to master running jobs (same cwd, same PV item)
        foreach($session as $pid => $detail){
            if(!preg_match("/^\d+$/",$pid)) continue;
            $cwd = $detail["sub_cwd"];
            if(!array_key_exists($cwd,$tmpO)){
                // reg the problem(untracked parallel) cwd
                if(!array_key_exists($cwd,$unknPID)){
                    $unknPID[$cwd] = array();
                    $unknPID[$cwd]["#jobsAll"] = 0;
                    $unknPID[$cwd]["jnames"] = "";
                }else{}
                $unknPID[$cwd]["#jobsAll"]++;
                $unknPID[$cwd]["jnames"] .= $detail["job_name"] . ";";
            }else{
                //
                $submitOn = $detail["time_submit"];
                $startedOn = $detail["time_start"];
                $jobN = $detail["job_name"];
                $tmpO[$cwd]["#jobsAll"]++;
                if($startedOn === "-"){
                    $tmpO[$cwd]["#jobsPend"]++;
                }
                $tmpO[$cwd]["jnames"] .= $jobN . ";";
            }
        }
        // => decide problem [1]
        foreach($unknPID as $cwd => $detail){
            $regN = mod_keyw_when_existed(reduce_runk_from_cwd($cwd,$detail["jnames"]),$oObj);
            // => register
            $oObj[$regN]["problem"] = "[Ongo] Untracked ongoing run-key.";
            $oObj[$regN]["cwd"] = $cwd;
            $oObj[$regN]["#jobsAll"] = $detail["#jobsAll"];
            $oObj[$regN]["jnames"] = $detail["jnames"];
        }

        // => decide problem [2]
        foreach($tmpO as $cwd => $detail){
            $regN = mod_keyw_when_existed(reduce_runk_from_cwd($cwd,$detail["jnames"]),$oObj);
            $probStr = "";
            // =>
            if($detail["#jobsAll"] === 0){
                $probStr = "[Ongo] No jobs deployed.";
            }elseif($detail["#jobsPend"] > 0){
                $probStr = "[Ongo] PENDING " . $detail["#jobsPend"] . "/" . $detail["#jobsAll"] .  " jobs.";
            }else{}
            if($probStr !== ""){
                $oObj[$regN]["problem"] = $probStr;
                $oObj[$regN]["cwd"] = $cwd;
                $oObj[$regN]["#jobsAll"] = $detail["#jobsAll"];
                $oObj[$regN]["jnames"] = $detail["jnames"];
            }else{}
        }
        return $oObj;
    }

    //////////////////////////////////
    function get_prob_info_done($session,$ongoStr){
        $oObj = array();
        if(count(array_keys($session)) === 0) return $oObj;
        $topWkdir = $session["WORKINGDIR"];
        $noTotalSubRun = 0;
        $noLogNA = 0;
        $allRun = "";
        foreach($session as $runk => $detail){
            if(preg_match("/^run_/",$runk)){
                $noTotalSubRun++;
                $regProbRunk = $runk;
                if($detail["logStatus"] !== "logInd=OK"){
                    $oObj[$regProbRunk]["problem"] = "[$ongoStr] " . $detail["logStatus"];
                    $oObj[$regProbRunk]["cwd"] = $topWkdir;
                    $noLogNA++;
                    $dspRunK = preg_replace("/^run_/","",$runk);
                    $allRun .= $dspRunK . ",";
                    // $oObj[$runk]["#jobsAll"] = $detail["#jobsAll"];
                    // $oObj[$runk]["jnames"] = $detail["jnames"];
                }else{
                    foreach($detail["subrun"] as $subrun){
                        $regProbRunk = $subrun['sortKey'];
                        if(!array_key_exists("moreInfo",$subrun)){
                            if($subrun['sortKey'] === "NW2LEAF") {continue;};#oK since this is just a script
                            $oObj[$regProbRunk]["problem"] = "[$ongoStr] moreInfo not found.";
                            $oObj[$regProbRunk]["cwd"] = $topWkdir . "/"  . $subrun["exeDir"];
                        }elseif(array_key_exists("_problem_",$subrun["moreInfo"])){
                            $oObj[$regProbRunk]["problem"] = "[$ongoStr] found tracked problem (FAILED flag).";
                            foreach($subrun["moreInfo"]["_problem_"] as $probStr){
                                $probStr = preg_replace("/\\n/","<br>",$probStr);
                                $oObj[$regProbRunk]["problem"] .= "<br>" . $probStr;
                            }
                            $oObj[$regProbRunk]["cwd"] = $topWkdir . "/"  . $subrun["exeDir"];
                        }else{
                            // echo "\nXXXXXXXXXXXXXXXXXXXXXXXXXXX $runk/" . $subrun['sortKey'] . ": " . $subrun["moreInfo"]["jobSTT"] ."\n"; print_r($detail);
                        }
                    }
                }
            }else{}
        }
        if($noTotalSubRun === $noLogNA){
            $allRun = preg_replace("/,$/","",$allRun);
            $oObj = array();
            $oObj["all"]["problem"] = "[$ongoStr] " . "Session failed: " . $allRun;
            $oObj["all"]["cwd"] = $topWkdir;
        }else{}
        // =>
        return $oObj;
    }

    ////////////////////////////////////
    function reduce_runk_from_cwd($cwd,$jname){
        $runk = $cwd;#preserved incase of problem
        $tmpa = preg_split("/\/+/",$cwd);
        $name = array_pop($tmpa);
        $tmpa1 = preg_split("/_+/",$name);
        if(preg_match("/^\d+$/",$tmpa1[0])) {
            // return $tmpa1[1];
            $runk = $tmpa1[1];
        }else{
            // return $tmpa1[0];
            $runk = $tmpa1[0];
        }
        // => take care the case of script executed  under the <DATE> directory => regN is just strign of 2 digits
        if(preg_match("/^\d\d$/",$runk)){
            if($jname !== null && $jname !== ""){
                $jname = preg_replace(",$","",$jname);
                $runk = $jname;
            }else{
                $runk = $cwd;
            }
        }
        return $runk;
    }
    
    ////////////////////////////////////
    function mod_keyw_when_existed($regN,$tmpO){
        $regNMod = $regN;
        if(array_key_exists($regN,$tmpO)){
            $tmpv = 0;
            while(array_key_exists($regN . "_" . $tmpv, $tmpO)){
                $tmpv++;
            }
            $regNMod = $regN . "_" . $tmpv;
        }else{}
        return $regNMod;
    }
?>

FILE:: .//src_modules/PVPI_insider/upSumPVPI.php
<?php
    //// Sub-function
    function outSum1 ($content,$flgDisabling) {
        echo "<div class=\"w3-container w3-responsive w3-stretch\">";
        echo    "<div class=\"w3-container w3-card-2 w3-hoverable w3-light-grey\">";
        ksort($content);
        foreach ($content as $keyw => $value) {
            if($keyw === "number_ongoing_sessions") { continue; }
            // ->
            echo    "<div class=\"w3-row w3-padding w3-hover-shadow w3-border\">";
            if($keyw === "ongoing_sessions"){
                echo    "<div class=\"w3-col s12 m12 l6\" style=\"min-width:100px\">";
                echo        "<span>$keyw<span>";
                echo        "<span class=\"w3-badge\" style=\"margin-left:10px\">" . count(array_keys($value)) . "<span>";
                echo    "</div>";
            }else{
                echo    "<div class=\"w3-col s12 m12 l6\" style=\"min-width:100px\">$keyw</div>";
            }
            if($keyw === "ongoing_sessions"){
                echo        "<div class=\"w3-col s12 m12 l6\" style=\"padding-left:10px;white-space:nowrap;overflow-x:scroll\">";
            }else{
                echo        "<div class=\"w3-col s12 m12 l6\" style=\"padding-left:10px;\">";
            }
            if($keyw === "ongoing_sessions"){
                if(count(array_keys($value)) > 0) {
                    foreach ($value as $unique => $tmpv) {
                        if($flgDisabling === false){
                            echo "<div onclick=\"myUpDetail2(this); document.getElementById('observer3').style.display='block'\" class=\"w3-card-2 my-dsp-unique\">$unique</div>";
                        }else{
                            echo "<div class=\"w3-card-2 my-dsp-unique\">$unique</div>";
                        }
                    }
                }else{
                    echo    "<span>-</span>";    
                }
            } else {
                if($keyw === "latest_finished_sesson"){
                    if($flgDisabling === false){
                        echo "<div onclick=\"myUpDetail2(this); document.getElementById('observer3').style.display='block'\" class=\"w3-card-2 my-dsp-unique\">$value</div>";
                    }else{
                        echo "<div class=\"w3-card-2 my-dsp-unique\">$value</div>";
                    }
                }else{
                    echo "<span class=\"w3-right\" style=\"text-align:center;white-space:nowrap\">$value</span>";
                }
            }
            echo        "</div>";
            echo    "</div>";
        }
        echo    "</div>";
        echo "</div>";
        // echo "</div>";
        return;
    }

    function outSum2 ($content,$flgDisabling, $flgType3=false) {
        # => header
        // $cntOutHead = array("LVS", "FEOL", "BEOL", "ANTENNA");
        $aoOMerged = array();#array of merged items (e.g.: FEOL will include FEOL and 01_FEOL, ...)
        ksort($content);
        foreach ($content as $IPName => $results){
            foreach ($results as $PVitem => $indRes){
                $dspStr = $PVitem;
                $tmpa = null;
                if(preg_match_all("/^[\d_]+(.*)/", $PVitem, $tmpa)){
                    $dspStr = $tmpa[1][0];
                }else{}
                if(! array_key_exists($dspStr, $aoOMerged)){
                    $aoOMerged[$dspStr] = array();
                }
                if(! array_key_exists($PVitem, $aoOMerged[$dspStr])){
                    $aoOMerged[$dspStr][] = $PVitem;
                }
            }
        }
        $cntOutHead = array_keys($aoOMerged);
        $aoFirstItem = array("LVS", "ERC", "FEOL", "BEOL", "ANTENNA");
        foreach ($aoFirstItem as $firstItem){
            if(array_key_exists($firstItem,$aoOMerged)){
                array_splice($cntOutHead, array_search($firstItem,$cntOutHead), 1);
            }else{}
        }
        sort($cntOutHead);
        array_splice($cntOutHead,0,0,$aoFirstItem);

        # =>
        echo "<div class=\"w3-container w3-responsive w3-stretch\">";
        // echo    "<div class=\"w3-container w3-card-4\">";
        echo    "<table class=\"w3-table-all w3-card-4 w3-gray\">";
        # => header goes firstly
        echo        "<tr>";
        echo        "<th class=\"w3-cell w3-border\">" . "CHIP/IP" . "</th>";
        foreach ($cntOutHead as $PVitem){
            #-> some mod for better view
            $PVitem = strtoupper($PVitem);
            if($PVitem === "ANTENNA") $PVitem = "ANT";
            if($PVitem === "ESDLUP") $PVitem = "ESD LUP";
            if($PVitem === "MAINDRC") $PVitem = "MDRC";
            if($PVitem === "WELLANT") $PVitem = "WELL ANT";
            if($PVitem === "MULTIVIA") $PVitem = "M-VIA";
            $fontSize = 100 * 3 / strlen($PVitem);
            if($fontSize < 50) $fontSize = 50;
            $fontSize = $fontSize . "%";
            $PVitem = preg_replace("/_/"," ", $PVitem);
            // echo        "<th class=\"w3-cell w3-border w3-center\" style=\"vertical-align:bottom;font-size:$fontSize\"><div style=\"width:40px;align:center;vertical-align:bottom;word-wrap:break-word\">" . $PVitem . "</div></th>";
            echo        "<th class=\"w3-cell w3-border w3-center\" style=\"vertical-align:bottom;\"><div class=\"w3-center\" style=\"align:center;vertical-align:bottom;word-wrap:break-word\">" . $PVitem . "</div></th>";
        }
        echo        "</tr>";
        # => content for each IP/CHIP
        $aoIP = array_keys($content);
        if($flgType3 === true){
            // dont involve CHIP keyword if there is top-cell-name only
        }else{
            if(array_key_exists("CHIP", $content)){
                array_splice($aoIP, array_search("CHIP", $aoIP),1);
            }else{}
            sort($aoIP);
            array_unshift($aoIP, "CHIP");
        }
        foreach ($aoIP as $IPname) {
            $aoRes = $content[$IPname];
            echo    "<tr>";
            echo        "<td class=\"w3-cell w3-hover-shadow\" style=\"min-width:100px;max-width:200px;overflow:hidden;text-overflow:ellipsis\">$IPname</td>";
            foreach ($cntOutHead as $dspStr){
                $latestSubmitTime = 0;
                $latestTgtPVitem = "";#in short
                $PVitem = "no-any-valid-found";
                foreach ($aoOMerged[$dspStr] as $chkPVitem){
                    if(! array_key_exists("unique", $aoRes[$chkPVitem])) continue;
                    $tmpa = preg_split("/__/", $aoRes[$chkPVitem]["unique"]);
                    // $latestSubmitTime = $aoRes[$chkPVitem]["unique"];
                    if($latestSubmitTime < $tmpa[2]){
                        $latestSubmitTime = $tmpa[2];
                        $PVitem = $chkPVitem;
                    }else{}
                }
                # each dspStr may include many PVitem
                if(array_key_exists($PVitem, $aoRes)){
                    $output = $aoRes[$PVitem]["output"];
                    $oStr = $output;
                    if($output === "CORRECT" || $output === "PASS") $oStr = "<i class=\"material-icons w3-text-green\">sentiment_very_satisfied</i>";
                    if($output === "INCORRECT" || $output === "FAIL") $oStr = "<i class=\"material-icons w3-text-purple\">sentiment_very_dissatisfied</i>";
                    if($flgDisabling === false){
                        echo "<td class=\"w3-cell w3-border w3-center mytooltip\" onclick=\"myUpDetail2_2(this); document.getElementById('observer3').style.display='block'\">";
                    }else{
                        echo "<td class=\"w3-cell w3-border w3-center mytooltip\">";
                    }
                    echo        "<span>$oStr</span>";
                    echo        "<span style=\"display:none\">" . $aoRes[$PVitem]["unique"] . "</span>";
                    echo        "<span class=\"mytooltiptext\">" . $aoRes[$PVitem]["tooltip"] . "<br>" . $PVitem . "</span>";
                    echo "</td>";
                }else{
                    // echo "<td class=\"w3-cell w3-border w3-center\">" . "<i class=\"material-icons w3-text-gray\">remove_circle</i>" . "</td>";
                    echo "<td class=\"w3-cell w3-border w3-center\" style=\"background-color:gray\">". $latestSubmitTime  . "</td>";
                }
            }
            echo    "</tr>";
        }
        echo    "</table>";
        echo "</div>";
        return;
    }

    /////////////// MAIN

    $dataDir = "../../data/PVPI_org";
    $dataDirManual = "../../data_manual/PVPI_org";

    $outText = "Nothing to show";
    $finPrj = null;#finished projects
    $outData1 = null;
    $outData2 = null;
    $outData3 = null;
    $type = $_GET["q"];
    if($type === "undefined" || $type === "" || $type === null) $type = 2;
    
    //exec("whoami", $outText, $retval);
    //exec("scripts/simpleSubs.pl", $outText, $retval);
    //exec("scripts/tracking.csh", $outText,$retval);
    //exec("scripts/copying.csh", $outText,$retval);

    // -> json file interacting
    if($fh = fopen("$dataDirManual/finished_projects.json","r")){
        $finPrj = json_decode(fread($fh, filesize("$dataDirManual/finished_projects.json")),true);
        fclose($fh);
    }else{}
    if($fh = fopen("$dataDir/sumAll.json", "r")){
        $outData1 = json_decode(fread($fh, filesize("$dataDir/sumAll.json")), true);
        fclose($fh);
        $outText = "";#reset
    } else {
        $outText = "<div><p>Cannot read from file 1</p></div>";
    }
    if($outText === ""){
        if($fh = fopen("$dataDir/sumAllLatest.json", "r")){
            $outData2 = json_decode(fread($fh, filesize("$dataDir/sumAllLatest.json")), true);
            fclose($fh);
            $outText = "";#reset
        } else {
            $outText = "<div><p>Cannot read from file 2</p></div>";
        }
    }
    if($outText === ""){
        if($fh = fopen("$dataDir/sumAllLatest_TOP_LAYOUT_NAME.json", "r")){
            $outData3 = json_decode(fread($fh, filesize("$dataDir/sumAllLatest_TOP_LAYOUT_NAME.json")), true);
            fclose($fh);
            $outText = "";#reset
        } else {
            $outText = "<div><p>Cannot read from file 3</p></div>";
        }
    }

    // -> manipulate data for output string (innerHTML? or a div)
    if($outText === ""){
        foreach ($outData1 as $prjN => $content) {
            if(array_key_exists($prjN,$finPrj)) continue;
            echo "<div class=\"w3-card-2 w3-padding w3-col s12 m6 w3-animate-zoom\">";
            # => the header including prjName and some buttons
            echo    "<div class=\"w3-margin-bottom w3-display-container\">";
            echo        "<div class=\"w3-hover-black w3-hover-shadow w3-container\" style=\"background-color:#06418c;color:white;min-height:115px\">";
            echo            "<h1 class=\"w3-left\" style='white-space: nowrap;'>$prjN</h1>";
            echo            "<div class=\"w3-right\">";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-left:0;padding-right:0;padding-bottom:0;\" onclick=\"myChangeSumView(this.parentNode.parentNode.parentNode,'down')\"><i class=\"material-icons\">first_page</i></div>";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-bottom:0\" onclick=\"myExpandWidth(this.parentNode.parentNode.parentNode)\"><i class=\"material-icons\">zoom_out_map</i></div>";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-left:0;padding-right:0;padding-bottom:0;\" onclick=\"myChangeSumView(this.parentNode.parentNode.parentNode,'up')\"><i class=\"material-icons\">last_page</i></div>";
            echo                "<hr style=\"margin:0\">";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-top:0;padding-bottom:0\" onclick=\"myUpDetail(this.parentNode.parentNode)              ; document.getElementById('observer2').style.display='block'\"><i class=\"material-icons\">view_list</i></div>";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-top:0;padding-bottom:0\" onclick=\"myUpDetail4ChartsWrapper(this.parentNode.parentNode); document.getElementById('observer2').style.display='block'\"><i class=\"material-icons\">insert_chart</i></div>";
            echo            "</div>";
            echo        "</div>";
            
            # => content 1
            if($type == 2){
                echo        "<div style=\"min-height:320px;display:none\">";
            }else{
                echo        "<div style=\"min-height:320px\">";
            }
            echo            outSum1($content,false);
            echo        "</div>";
            # -> content 2
            if($type == 2){
                echo        "<div>";
            }else{
                echo        "<div style=\"display:none\">";
            }
            echo            outSum2($outData2[$prjN],false);
            echo        "</div>";
            # -> content 3
            if($type == 3){
                echo        "<div>";
            }else{
                echo        "<div style=\"display:none\">";
            }
            echo            outSum2($outData3[$prjN],false,true);
            echo        "</div>";

            echo    "</div>";
            echo "</div>";
        }
        ///// for tape-out as latest
        foreach ($outData1 as $prjN => $content) {
            if(!array_key_exists($prjN,$finPrj)) continue;
            echo "<div class=\"w3-card-2 w3-padding w3-col s12 m6 w3-animate-zoom\">";
            # => the header including prjName and some buttons
            echo    "<div class=\"w3-margin-bottom w3-display-container\">";
            echo        "<div class=\"w3-hover-black w3-hover-shadow w3-container\" style=\"background-color:#06418c;color:white;min-height:115px\">";
            echo            "<h1 class=\"w3-left\" style='white-space: nowrap;'>$prjN (Taped-Out)</h1>" . $finPrj[$prjN];
            echo            "<div class=\"w3-right\">";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-left:0;padding-right:0;padding-bottom:0;\" onclick=\"myChangeSumView(this.parentNode.parentNode.parentNode,'down')\"><i class=\"material-icons\">first_page</i></div>";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-bottom:0\" onclick=\"myExpandWidth(this.parentNode.parentNode.parentNode)\"><i class=\"material-icons\">zoom_out_map</i></div>";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-left:0;padding-right:0;padding-bottom:0;\" onclick=\"myChangeSumView(this.parentNode.parentNode.parentNode,'up')\"><i class=\"material-icons\">last_page</i></div>";
            // echo                "<hr style=\"margin:0\">";
            // echo                "<div class=\"w3-button w3-cell\" style=\"padding-top:0;padding-bottom:0\" onclick=\"myUpDetail(this.parentNode.parentNode)              ; document.getElementById('observer2').style.display='block'\"><i class=\"material-icons\">view_list</i></div>";
            // echo                "<div class=\"w3-button w3-cell\" style=\"padding-top:0;padding-bottom:0\" onclick=\"myUpDetail4ChartsWrapper(this.parentNode.parentNode); document.getElementById('observer2').style.display='block'\"><i class=\"material-icons\">insert_chart</i></div>";
            echo            "</div>";
            echo        "</div>";
            
            # => content 1
            if($type == 2){
                echo        "<div style=\"min-height:320px;display:none\">";
            }else{
                echo        "<div style=\"min-height:320px\">";
            }
            echo            outSum1($content,true);
            echo        "</div>";
            # -> content 2
            if($type == 2){
                echo        "<div>";
            }else{
                echo        "<div style=\"display:none\">";
            }
            echo            outSum2($outData2[$prjN],true);
            echo        "</div>";
            # -> content 3
            if($type == 3){
                echo        "<div>";
            }else{
                echo        "<div style=\"display:none\">";
            }
            echo            outSum2($outData3[$prjN],true,true);
            echo        "</div>";

            echo    "</div>";
            echo "</div>";
        }
    }else{}
    //var_dump($outText);
    //print_r($outText);
    echo $outText;
?>

FILE:: .//src_modules/PVPI_org/PVPI_org.js
// https://stackoverflow.com/questions/881515/how-do-i-declare-a-namespace-in-javascript
// https://developer.mozilla.org/en-US/docs/Glossary/IIFE

(function(){

    // => load css for PVPI
    my_add_css("ss_google_icon","https://fonts.googleapis.com/icon?family=Material+Icons");
    my_add_css("ss_PVPI_org","css/PVPI_org.css");


    // => public methods
    //////////////////////////////////////////

    // =>
    PVPI_org.up_sum_PVPI = function(rtnO){
        // console.log(rtnO);
        // =>
        if(document.getElementById("PVPI_org_top") === null
        ){
            while(mainSide.childNodes.length>0){mainSide.lastChild.remove();}
        }
        // =>
        let outSum = null;
        if(document.getElementById("PVPI_org_top") === null){
            outSum = my_create("div",undefined,["w3-row"],{"paddingTop":"10px"},{id:"PVPI_org_top"})
        }else{
            outSum = document.getElementById("PVPI_org_top")
        }
        outSum.innerHTML = rtnO;
        let aoI = Array.prototype.slice.call(outSum.querySelectorAll(".myCnt-PVPI-sum-prj-top"),0)
        aoI.sort(function(a,b){
            let aTitle = a.getElementsByTagName("h1")[0].innerText;
            let bTitle = b.getElementsByTagName("h1")[0].innerText;
            if(aTitle > bTitle) return 1;
            if(aTitle < bTitle) return -1;
            return 0;
        })
        for(let i=aoI.length-1;i>-1;i--){
            let tmpe = aoI[i];
            outSum.insertBefore(tmpe,outSum.firstChild)
        }
        // =>
        mainSide.appendChild(outSum);
        // => 
        myUpdateTblSumPVPI(outSum);
        // => bind some events for top buttons
        for(let tmpe of outSum.getElementsByTagName("i")){
            if(tmpe.innerText === "last_page"
            || tmpe.innerText === "first_page"
            || tmpe.innerText === "zoom_out_map"
            || tmpe.innerText === "view_list"
            || tmpe.innerText === "insert_chart"
            ){
                // remove original binding
                tmpe.parentNode.removeAttribute("onclick");
                // add new
                tmpe.parentNode.addEventListener("click",function(){
                    if(tmpe.innerText === "last_page"){
                        myChangeSumView(tmpe.parentNode.parentNode.parentNode.parentNode,'up');
                    }else if (tmpe.innerText === "first_page") {
                        myChangeSumView(tmpe.parentNode.parentNode.parentNode.parentNode,'down');
                    }else if (tmpe.innerText === "zoom_out_map"){
                        myExpandWidth(tmpe.parentNode.parentNode.parentNode.parentNode);
                    }else if (tmpe.innerText === "view_list"){
                        PVPI_org.dsp_sum_sessions_on_top(tmpe.parentNode.parentNode.parentNode.getElementsByTagName("h1")[0].innerText);
                    }else if (tmpe.innerText === "insert_chart"){
                        PVPI_org.dsp_chart_wrapper_on_top(tmpe.parentNode.parentNode.parentNode.getElementsByTagName("h1")[0].innerText);
                    }else{}
                })
            }else{}
        }
        // => default view (3 views of summary, let the first one viewed as default)

        // => bind some events for clickable button inside the table of sum #1
        for(let tmpe of outSum.getElementsByClassName("my-dsp-unique")){
            // remove original click hard binding
            tmpe.style.cursor = 'pointer';
            tmpe.removeAttribute("onclick")
            tmpe.addEventListener("click",function(){
                let prjN = this.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByTagName("h1")[0].innerText
                let unique = this.innerText
                // =>
                PVPI_org.dsp_detail_session_on_top(prjN,unique)
            })
        }

        // => bind some events for clickable button (some number/ pass) inside the table of sum #2,#3
        for(let tmpe of outSum.getElementsByClassName('myCnt-dsp-unique2')){
            tmpe.style.cursor = 'pointer';
            tmpe.removeAttribute('onclick')
            tmpe.addEventListener('click',function(){
                let prjN = this.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.getElementsByTagName("h1")[0].innerText
                let unique = this.getElementsByTagName("span")[1].innerText
                // =>
                PVPI_org.dsp_detail_session_on_top(prjN,unique)
            })
        }
    };

    // =>
    PVPI_org.dsp_detail_session_on_top = function(prjN,unique){
        if(document.getElementById("mainSide") === null) return 0;//

        let eTop = null;
        if(document.getElementById("PVPI_dsp_unq_ontop") === null){
            let modal = my_create("div",undefined,["w3-modal","w3-show"],{"padding-top":"54px"})
            let modalC = my_create("div",undefined,["w3-modal-content"],{"width":"100%"})
            eTop = my_create("div",undefined,["w3-animate-top"],{},{id:"PVPI_dsp_unq_ontop"})
            modalC.appendChild(eTop)
            modal.appendChild(modalC)
            mainSide.appendChild(modal);
        }else{
            eTop = document.getElementById("PVPI_dsp_unq_ontop");
        }
        while(eTop.childNodes.length > 0) { eTop.lastChild.remove() }
        // => for some controlling variables
        eTop.appendChild(my_create("span",prjN,["myCnt-PVPI-prjN"],{"display":"none"}))
        eTop.appendChild(my_create("span",unique,["myCnt-PVPI-unique"],{"display":"none"}))
        // =>
        let eTitle = my_create("h3",
            "PVPI session info: " + prjN + " / " + unique,
            ["w3-yellow"],
            {"position":"sticky","top":"-54px"},
            {});
        // => add a closing button
        eTitle.appendChild(my_create("span","X",["w3-container","w3-display-topright","w3-hover-red"],{},{"onclick":"this.parentNode.parentNode.parentNode.parentNode.remove()"}))

        eTop.appendChild(eTitle);

        let eUnq = my_create("div","Updating, please wait ...",["w3-animate-fading"])

        // =>
        let eWait = dsp_wait();
        my_ajax_get("src_modules/PVPI_org/upDetailPVPI_session.php",[{prjN:prjN,unique:unique}],function(strHTML){
            eUnq.classList.remove("w3-animate-fading")
            eUnq.outerHTML = strHTML;
            // modify 
            if(eUnq.getElementsByTagName("p").length > 0){
                // => modify the format (smaller)
                eUnq.getElementsByTagName("p")[0].style.margin = 0;
                eUnq.getElementsByTagName("p")[0].classList.add("w3-tiny","w3-text-grey");
                let aoTd = eUnq.getElementsByTagName("td");
                for(let td of aoTd) {
                    td.style.paddingTop = "2px";
                    td.style.paddingBottom = "2px";
                    td.classList.add("w3-tiny");
                }

            }else{
                eUnq.innerHTML = "<p class=\"w3-large\">Nothing to show here</p>";
            }
            eWait.remove();
        });

        eTop.appendChild(eUnq)
        return 1;
    }

    // =>
    PVPI_org.dsp_sum_sessions_on_top = function(prjN){
        if(prjN === undefined || prjN === null || prjN === "") return 0;
        if(document.getElementById("mainSide") === null) return 0;//

        let eTop = null;
        if(document.getElementById("PVPI_dsp_sum_prj_ontop") === null){
            let modal = my_create("div",undefined,["w3-modal","w3-show"],{"padding-top":"54px"})
            let modalC = my_create("div",undefined,["w3-modal-content"],{"width":"100%"})
            eTop = my_create("div",undefined,["w3-animate-top"],{},{id:"PVPI_dsp_sum_prj_ontop"})
            modalC.appendChild(eTop)
            modal.appendChild(modalC)
            mainSide.appendChild(modal);
        }else{
            eTop = document.getElementById("PVPI_dsp_sum_prj_ontop");
        }
        while(eTop.childNodes.length > 0) { eTop.lastChild.remove() }
        // => for some controlling variables
        eTop.appendChild(my_create("span",prjN,["myCnt-PVPI-prjN"],{"display":"none"}))
        // =>
        let eTitle = my_create("h3",
            "PVPI sessions info: " + prjN,
            ["w3-yellow"],
            {"position":"sticky","top":"-54px"},
            {});
        // => add a closing button
        eTitle.appendChild(my_create("span","X",["w3-container","w3-display-topright","w3-hover-red"],{},{"onclick":"this.parentNode.parentNode.parentNode.parentNode.remove()"}))

        eTop.appendChild(eTitle);

        let eUnq = my_create("div","Updating, please wait ...",["w3-animate-fading"])

        // =>
        let eWait = dsp_wait();
        my_ajax_get("src_modules/PVPI_org/upDetailPVPI.php",[{q:prjN}],function(strHTML){
            eUnq.classList.remove("w3-animate-fading")
            eUnq.innerHTML = strHTML;
            // modify 
            if(eUnq.getElementsByTagName("tr").length > 0){
                // =>
                for(let tmpe of eUnq.getElementsByTagName("tr")){
                    if(tmpe.getElementsByTagName("td").length === 0) continue;// the header row
                    tmpe.removeAttribute("onclick")
                    tmpe.style.cursor = "pointer";
                    tmpe.addEventListener("click",function(){
                        // => scroll to the first element
                        document.getElementById("PVPI_dsp_sum_prj_ontop").parentNode.parentNode.scrollTop = Number(tmpe.offsetTop) + 80
                        // =>
                        let unique = this.getElementsByTagName("td")[0].innerText.replace(/\s+/g,"__");
                        // let prjN = this.getElementsByTagName("span")[1].innerText
                        // =>
                        PVPI_org.dsp_detail_session_on_top(prjN,unique)
                    })
                }
            }else{
                eUnq.innerHTML = "<p class=\"w3-large\">Nothing to show here</p>";
            }
            eWait.remove();
        });

        eTop.appendChild(eUnq);
        return 1;
    }

    // =>
    PVPI_org.dsp_chart_wrapper_on_top = function(prjN){
        if(prjN === undefined || prjN === null || prjN === "") return 0;
        if(document.getElementById("mainSide") === null) return 0;//

        let eTop = null;
        if(document.getElementById("PVPI_dsp_chart_wrapper_ontop") === null){
            let modal = my_create("div",undefined,["w3-modal","w3-show"],{"padding-top":"54px"})
            let modalC = my_create("div",undefined,["w3-modal-content"],{"width":"100%"})
            eTop = my_create("div",undefined,["w3-animate-top"],{},{id:"PVPI_dsp_chart_wrapper_ontop"})
            modalC.appendChild(eTop)
            modal.appendChild(modalC)
            mainSide.appendChild(modal);
        }else{
            eTop = document.getElementById("PVPI_dsp_chart_wrapper_ontop");
        }
        while(eTop.childNodes.length > 0) { eTop.lastChild.remove() }
        // => for some controlling variables
        eTop.appendChild(my_create("span",prjN,["myCnt-PVPI-prjN"],{"display":"none"}))
        // =>
        let eTitle = my_create("h3",
            "PVPI charts in: " + prjN,
            ["w3-yellow"],
            {"position":"sticky","top":"-54px"},
            {});
        // => add a closing button
        eTitle.appendChild(my_create("span","X",["w3-container","w3-display-topright","w3-hover-red"],{},{"onclick":"this.parentNode.parentNode.parentNode.parentNode.remove()"}))

        eTop.appendChild(eTitle);

        let eUnq = my_create("div","Updating, please wait ...",["w3-animate-fading"])

        // =>
        let eWait = dsp_wait();
        my_ajax_get("src_modules/PVPI_org/upDetailPVPI4ChartsWrapper.php",[{q:prjN}],function(strHTML){
            eUnq.classList.remove("w3-animate-fading")
            eUnq.outerHTML = strHTML;
            // modify 
            // => get all button, checkbox, input ... to modify the event listener
            for(let tmpe of document.getElementById("PVPI_dsp_chart_wrapper_ontop").getElementsByTagName("div")){
                if(tmpe.getAttribute("onclick") === null) continue;
                if(tmpe.getAttribute("onclick").search(/myGenCharts/) > -1){
                    tmpe.removeAttribute("onclick");
                    tmpe.addEventListener("click",function(){
                        myGenCharts()
                    });
                }else if(tmpe.getAttribute("onclick").search(/upChartsScale/) > -1){
                    tmpe.removeAttribute("onclick");
                    tmpe.addEventListener("click",function(){
                        upChartsScale(this);
                    });
                }else if(tmpe.getAttribute("onclick").search(/upChartsIntersect/) > -1){
                    tmpe.removeAttribute("onclick");
                    tmpe.addEventListener("click",function(){
                        upChartsIntersect(this);
                    });
                }else if(tmpe.getAttribute("onclick").search(/upChartsToBeforeDays/) > -1){
                    if(tmpe.innerText === "1Week"){
                        tmpe.removeAttribute("onclick");
                        tmpe.addEventListener("click",function(){
                            upChartsToBeforeDays(7);
                        });
                    }else if(tmpe.innerText === "2Weeks"){
                        tmpe.removeAttribute("onclick");
                        tmpe.addEventListener("click",function(){
                            upChartsToBeforeDays(14);
                        });
                    }else if(tmpe.innerText === "1Month"){
                        tmpe.removeAttribute("onclick");
                        tmpe.addEventListener("click",function(){
                            upChartsToBeforeDays(30);
                        });
                    }else if(tmpe.innerText === "2Months"){
                        tmpe.removeAttribute("onclick");
                        tmpe.addEventListener("click",function(){
                            upChartsToBeforeDays(60);
                        });
                    }else{}
                }else{
                    console.log(tmpe,tmpe.getAttribute("onclick"))
                }
            }
            for(let tmpe of document.getElementById("PVPI_dsp_chart_wrapper_ontop").getElementsByTagName("button")){
                if(tmpe.getAttribute("onclick") === null) continue;
                if(tmpe.getAttribute("onclick").search(/myUpdateInside/) > -1){
                    let tgtLbl = tmpe.parentNode.getElementsByTagName("label")[0].innerText
                    tmpe.addEventListener("click",function(){
                        if(tgtLbl === "IP/CHIP"){
                            tmpe.removeAttribute("onclick");
                            myUpdateInside(this,'chart_sel_IPName');
                        }else if(tgtLbl === "PV items"){
                            tmpe.removeAttribute("onclick");
                            myUpdateInside(this,'chart_sel_PVitem');
                        }else if(tgtLbl === "netVer"){
                            tmpe.removeAttribute("onclick");
                            myUpdateInside(this,'chart_sel_netVer');
                        }else if(tgtLbl === "userLogin"){
                            tmpe.removeAttribute("onclick");
                            myUpdateInside(this,'chart_sel_userLogin');
                        }else if(tgtLbl === "ecoVer"){
                            tmpe.removeAttribute("onclick");
                            myUpdateInside(this,'chart_sel_ecoVer');
                        }else{
                            console.log(tmpe,tmpe.getAttribute("onclick"))
                        }
                    });
                }else{
                    console.log(tmpe,tmpe.getAttribute("onclick"))
                }
            }
            for(let tmpe of document.getElementById("PVPI_dsp_chart_wrapper_ontop").getElementsByTagName("input")){
                if(tmpe.getAttribute("onchange") === null) continue;
                if(tmpe.getAttribute("onchange").search(/upChartsByDates/) > -1){
                    tmpe.removeAttribute("onchange");
                    tmpe.addEventListener("change",function(){
                        upChartsByDates();
                    });
                }else{
                    console.log(tmpe,tmpe.getAttribute("onchange"))
                }
            }
            for(let tmpe of document.getElementById("PVPI_dsp_chart_wrapper_ontop").getElementsByTagName("label")){
                if(tmpe.getAttribute("onclick") === null) continue;
                if(tmpe.getAttribute("onclick").search(/myToggleInside/) > -1){
                    tmpe.removeAttribute("onclick");
                    tmpe.addEventListener("click",function(){
                        myToggleInside(this.parentNode);
                    });
                }else{
                    console.log(tmpe,tmpe.getAttribute("onclick"))
                }
            }

            eWait.remove();
        });

        eTop.appendChild(eUnq);
        return 1;
    }

    // => private methods
    //////////////////////////////////////////
    // =>
    function myUpdateTblSumPVPI(tgtDivPrj){
        for(let tblOfData of tgtDivPrj.getElementsByTagName("tbody")){                                                                   
            let aoTr = tblOfData.getElementsByTagName("tr");
            if(aoTr.length < 10) {continue;} //don't make it overwhelmed
            //notice: this method should works on a sorted array of names                                                                
            let aoNames = new Array();
            for(let i=1;i<aoTr.length;i++){aoNames.push(aoTr[i].getElementsByTagName("td")[0].innerText)}                                
            // console.log(groupSimilarStarters(aoNames))                                                                                
            let aoSimGrp = groupSimilarStarters(aoNames);                                                                                
            for(let tgtArr of aoSimGrp){
                if(tgtArr.length === 1) {continue;}
                aoNames.findIndex(function(curVal,curIndex){                                                                             
                    if(curVal === tgtArr[0]){                                                                                        
                        // => add an icon
                        aoTr[curIndex+1].getElementsByTagName("td")[0].innerHTML += "<i class=\"material-icons\">expand_more</i>";   
                        aoTr[curIndex+1].getElementsByTagName("td")[0].classList.add("w3-button","w3-hover-border-red");             
                        // => hide some next rows
                        for(let i=curIndex+2;i<curIndex+2+tgtArr.length-1;i++){                                                      
                            aoTr[i].style.display = "none";
                            aoTr[i].classList.add("w3-animate-opacity");                                                             
                        }
                        // => assign a click on to
                        aoTr[curIndex+1].getElementsByTagName("td")[0].addEventListener("click",function(event){                     
                            toggle_next_some_row(event.target, curIndex+1, tgtArr.length - 1)                                        
                        })
                    }else{}                                                                                                          
                },tgtArr);                                                                                                           
            }                                                                                                                            
        }
        return 1;                                                                                                                        
    } 

    function groupSimilarStarters(iArr){
        let oArr = [];
        oArr = iArr.reduce((acc, val, ind) => {
            const firstChar = el => {
               return (el || '').split('_')[0];
            }
            if(firstChar(val) === firstChar(iArr[ind - 1])){
               acc[acc.length - 1].push(val);
            }else{
               acc.push([val]);
            };
            return acc;
        },[]);
        return oArr;
    }

    function toggle_next_some_row(clickedEle,curIndex, noNextEles){
        let tgtEle = clickedEle;
        if(clickedEle.tagName.toUpperCase() === "I"){ tgtEle = clickedEle.parentNode.parentNode; }
        let aoTr = tgtEle.parentNode.parentNode.getElementsByTagName("tr");
        for(i=curIndex+1;i<curIndex+1+noNextEles;i++){
            if(tgtEle.getElementsByTagName("i")[0].innerText === "expand_more"){
                aoTr[i].style.display = '';
            }else{
                aoTr[i].style.display = 'none';
            }
        }
        if(tgtEle.getElementsByTagName("i")[0].innerText === "expand_more"){
            tgtEle.getElementsByTagName("i")[0].innerText = "expand_less";
        }else{
            tgtEle.getElementsByTagName("i")[0].innerText = "expand_more";
        }
    }

    function myChangeSumView(tgtEle,direction){
        // notice:leave the index 0 as it is the header
        let aoTgtDiv = new Array();
        for(let tmpDiv of tgtEle.childNodes){
            if (tmpDiv.tagName.toUpperCase() === "DIV"){
                aoTgtDiv.push(tmpDiv);
            }else{}
        }
        let indexOn = -1;
        for(let i=1;i<aoTgtDiv.length;i++){
            if(aoTgtDiv[i].style.display === ""){
                if(direction === "up"){
                    indexOn = i+1;
                    if(indexOn === aoTgtDiv.length){indexOn = 1;}else{}
                }else{
                    indexOn = i-1;
                    if(indexOn === 0){indexOn = aoTgtDiv.length-1;}else{}
                }
            }else{}
        }
        for(let i=1;i<aoTgtDiv.length;i++){
            if(i===indexOn){
                aoTgtDiv[i].style.display = "";
            }else{
                aoTgtDiv[i].style.display = "none";
            }
        }
        return;
    }

    function myChangeAllSumView(cntKey) {
        let tgtEles = document.getElementById("outSum").childNodes;
        if(cntKey === "allBig"){
            for (let tgtEle of tgtEles){
                if(tgtEle.nodeName !== "DIV") continue;
                if(tgtEle.childNodes.length !== 1) continue;
                if(tgtEle.style != undefined){
                    if(tgtEle.style.width==="") tgtEle.style.width = "100%";
                }
            }
        }else if(cntKey === "allSmall" ) {
            for (let tgtEle of tgtEles){
                if(tgtEle.nodeName !== "DIV") continue;
                if(tgtEle.childNodes.length !== 1) continue;
                if(tgtEle.style != undefined){
                    if(tgtEle.style.width==="100%") tgtEle.style.width = "";
                }
            }
        }else if(cntKey === "sum#1" ) {
            for(let tgtDiv of tgtEles){
                myChangeSumView(tgtDiv.getElementsByTagName("div")[0],"down");
            }
        }else if(cntKey === "sum#2" ) {
            for(let tgtDiv of tgtEles){
                myChangeSumView(tgtDiv.getElementsByTagName("div")[0],"up");
            }
        }else{}
        console.log("finished: myChangeAllSumView : " + cntKey + " : done")
    }

    function myExpandWidth(tgtEle){
        if(tgtEle.parentNode.style.width === ""){
            tgtEle.parentNode.style.width = "100%";
        }else{
            tgtEle.parentNode.style.width = "";
        }
        return;
    }

    function myGenCharts(){
        const allData = JSON.parse(document.getElementById("dataFrServer").innerHTML);
        // console.log(allData);
        // => 
        let selIPName = myGetCheckBoxLabelPair(document.getElementById("chart_sel_IPName").getElementsByTagName("div"));
        let selPVItem = myGetCheckBoxLabelPair(document.getElementById("chart_sel_PVitem").getElementsByTagName("div"));
        let selNetVer = myGetCheckBoxLabelPair(document.getElementById("chart_sel_netVer").getElementsByTagName("div"));
        let selUserLg = myGetCheckBoxLabelPair(document.getElementById("chart_sel_userLogin").getElementsByTagName("div"));
        let selEcoVer = myGetCheckBoxLabelPair(document.getElementById("chart_sel_ecoVer").getElementsByTagName("div"));
        
        let wrapperDOM = document.getElementById("charts_wrapper");
        // clean up the target wrapper
        if(wrapperDOM.hasChildNodes){
            while(wrapperDOM.firstChild){
                wrapperDOM.removeChild(wrapperDOM.firstChild);
            }
        }
    
        // making element
        for (let i=0;i<selIPName.length;i++){
            let ipName = selIPName[i];
            if(ipName === "" || ipName === undefined) continue;
            
            let indChartWrapper = document.createElement("div");
            let sttP    = document.createElement("div"); sttP.textContent = ipName;
                sttP.classList.add("w3-button", "w3-hover-blue", "w3-padding-small", "w3-block");
                sttP.addEventListener("click", function(){myExpandWidth(this);});
            let canvas  = document.createElement("canvas"); canvas.textContent = "Your browser does not support canvas.";
            canvas.addEventListener("click",function(evt){
                myListenChartClick(this, evt);
            });
           
            let data = {};
    
            // -> gather info from allData
            let allTimeLine = [];
            for (let unique in allData){
                let tmpA = unique.split("__");
                let timeStamp = tmpA[2];
                if(allData[unique] === null || allData[unique] === undefined){
                    // console.log("ingore:", unique)
                // } else if(allData[unique]["CHIP_OR_IP"] === ipName){
                } else if(allData[unique]["TOP_LAYOUT_NAME"] === ipName){
                    allTimeLine.push({"unique":unique, "timeStamp":timeStamp, "flgGo" : false});
                    // console.log(unique, tmpA[2])
                }else{}
            }
            allTimeLine.sort(function(a,b){return a.timeStamp - b.timeStamp});
            // console.log(allTimeLine)
    
            data.datasets = [];
            let aoColor = ['#A52A2A', '#00FFFF', '#0000FF', '#8A2BE2', '#7FFF00', '#FF7F50', '#00008B', '#8B008B', '#FFD700', '#008000', '#4B0082', '#00FF00', '#191970', '#FF4500', '#FFFF00'];
            for (let i=0;i<selPVItem.length;i++){
                let color = aoColor[i % (aoColor.length-1)];
                let pvItem = selPVItem[i];
                let entry = {};
                let flgGoEntry = false;
                entry.label = pvItem;
                entry.data = [];
                // >>>>>>> options
                entry.borderColor = color;
                entry.spanGaps = true;
                entry.hoverBorderWidth = 10;
                // entry.pointHoverRadius = 10;
                // <<<<<<<
                for(let j=0;j<allTimeLine.length;j++){
                    let unique = allTimeLine[j]["unique"];
                    let tmpA = unique.split("__");
                    let userLogin = tmpA[0];
                    let thisNetVer = allData[unique]["netVer"];
                    let thisEcoVer = allData[unique]["ecoVer"];
                    let flgGo = false;
                    for(let tmpv of selNetVer){ if(thisNetVer == tmpv) flgGo = true ;}
                    if(flgGo === false) continue; flgGo = false;
                    for(let tmpv of selUserLg){ if(userLogin == tmpv) flgGo = true ;}
                    if(flgGo === false) continue; flgGo = false;
                    for(let tmpv of selEcoVer){ if(thisEcoVer == tmpv) flgGo = true ;}
                    if(flgGo === false) continue; flgGo = false;
                    let theDate = new Date(allTimeLine[j].timeStamp * 1000);
                    if(allData[unique][pvItem] === null){
                        // entry.data.push({x: theDate , y: undefined, unique: unique});
                    }else{
                        if(pvItem.match("COMPARISON")){
                            let pvItemBrother = pvItem.replace("COMPARISON", "EXTRACTION");
                            let tmpv = allData[unique][pvItemBrother];
                            let realTmpv = allData[unique][pvItem];
                            // => change the type and some options of the charts
                            entry.type = "bubble";
                            if(entry.pointStyle === undefined){
                                entry.pointStyle  = [];
                                entry.backgroundColor  = [];
                                entry.borderColor  = [];
                                entry.hoverBackgroundColor = [];
                                entry.pointHoverRadius = [];
                            }else{}
                            if(realTmpv === "CORRECT"){
                                // let img = new Image(30,30); img.src = "assets/CORRECT_2.svg";
                                // entry.pointStyle.push(img);
                                entry.pointStyle.push("circle");
                                entry.backgroundColor.push("#7CBB00"); //green like
                                entry.borderColor.push("#7CBB00");
                                entry.hoverBackgroundColor.push(undefined);
                            }else if (realTmpv === "INCORRECT"){
                                // let img = new Image(30,30); img.src = "assets/INCORRECT_2.svg";
                                // entry.pointStyle.push(img);
                                entry.pointStyle.push("triangle");
                                entry.backgroundColor.push("#7B0099");// purple like
                                entry.borderColor.push("#7B0099");
                            }else{
                                entry.pointStyle.push("crossRot");
                                entry.backgroundColor.push("gray");
                                entry.borderColor.push("gray");
                            }
                            entry.data.push({x: theDate, y: tmpv, r: 10, unique: unique, other: realTmpv});
                            flgGoEntry = true;
                            allTimeLine[j]["flgGo"] = true;
                        }else{
                            let tmpv = allData[unique][pvItem];
                            entry.data.push({x: theDate, y: tmpv, unique: unique});
                            flgGoEntry = true;
                            allTimeLine[j]["flgGo"] = true;
                        }
                    }
                }
                if(flgGoEntry === false){
                }else{
                    // console.log(entry.data);
                    data.datasets.push(entry);
                }
            }
    
            // consider to add label (the x axis values) // don't need if the data holding the x, y, ... for parsing
            data.labels = [];
            for(let i=0;i<allTimeLine.length;i++){
                if(allTimeLine[i]["flgGo"] === true){
                    let theDate = new Date(allTimeLine[i].timeStamp * 1000);
                    // data.labels.push(allTimeLine[i].timeStamp);
                    data.labels.push(theDate);
                }else{}
            }
    
            // Chart.js initialize, data, option ....
            let chartLinearOrLog = document.getElementById("chartLinearOrLog").textContent;
            if(chartLinearOrLog === "LinearScale"){
                chartLinearOrLog = "linear";
            }else{
                chartLinearOrLog = "logarithmic";
            }
            let chartIntersect = document.getElementById("chartIntersect").textContent;
            if(chartIntersect === "byPoint"){
                chartIntersect = "nearest";
            }else{
                chartIntersect = "index";
            }
            let ctx = canvas.getContext('2d');
            const myChart = new Chart(ctx, {
                type: 'line',
                options: {
                    responsive: true,
                    animations: {
                        radius: {
                          duration: 400,
                          easing: 'linear',
                          loop: (context) => context.active
                        }
                    },
                    hoverRadius: 12,
                    cubicInterpolationMode: 'monotone',
                    interaction:{
                        intersect: false,
                        mode: chartIntersect,
                    },
                    parsing: {
                        xAxisKey: 'x',
                        yAxisKey: 'y'
                    },
                    scales: {
                        yAxis: {
                            beginAtZero: true,
                            type: chartLinearOrLog,
                            ticks:{
                                mirror: true,
                                callback: function(value, index, ticks){
                                    let divider = [1, 1e+3, 1e+6, 1e+9, 1e+12];
                                    let unit    = ["", "K", "M", "B", "T"];
                                    let oStr = value;
                                    for(let i=0;i<divider.length;i++){
                                        oStr = value/divider[i];
                                        // oStr = oStr.toPrecision(1);
                                        oStr += unit[i];
                                        if(value/divider[i+1]<1){
                                            break;
                                        }else{}
                                    }
                                    return oStr;
                                }
                            }
                        },
                        xAxis: {
                            type: 'time',
                        }
                    },
                    plugins: {
                        legend: {
                            display: true,
                            labels: {
                                font : {
                                    size: 8,
                                },
                                boxWidth:10,
                            }
                        },
                        tooltip:{
                            enabled: true,
                            //usePointStyle: true,
                            onClick: myTest,
                            callbacks: {
                                label: function(context){
                                    let labelMulti = [];
                                    let label = context.dataset.label || '';
                                    // let unique = context.dataset.data[context.dataIndex].unique;
                                    let otherStr = context.dataset.data[context.dataIndex].other;
                                    if(label){
                                        label = label.replace("DRC_", "");
                                        label = label.replace("LVS_", "");
                                        label = label.replace("COMPARISON", "CMP");
                                        label = label.replace("EXTRACTION", "ERC");
                                        label = label.replace("MAINLVS", "LVS");
                                        if(otherStr === undefined){
                                            label += ":" + context.parsed.y;
                                        }else{
                                            label += ":" + otherStr;
                                        }
                                        labelMulti.push(label);
                                    
                                        // let tmpA = unique.split("__");
                                        // let userN = tmpA[0];
                                        // labelMulti.push("User:"+userN);
                                        // labelMulti.push("netVer:"+allData[unique]["netVer"]);
                                        // labelMulti.push("ecoVer:"+allData[unique]["ecoVer"]);
                                        // labelMulti.push("DATE:"+allData[unique]["DATE"]);
                                    }else{
                                        return "n/a";
                                    }
                                    // console.log(context.dataset.data[context.dataIndex].unique)
                                    return labelMulti;
                                },
                                footer: function(tooltipItems){
                                    // get the first item is enough
                                    let unique = tooltipItems[0].dataset.data[tooltipItems[0].dataIndex].unique;
                                    let aoStr = [];
                                    let tmpA = unique.split("__");
                                    let userN = tmpA[0];
                                    aoStr.push("User:"+userN);
                                    aoStr.push("netVer:"+allData[unique]["netVer"]);
                                    aoStr.push("ecoVer:"+allData[unique]["ecoVer"]);
                                    aoStr.push("DATE:"+allData[unique]["DATE"]);
                                    return aoStr;
                                },
                                //labelPointStyle: function(context) {
                                //    return {
                                //        pointStyle: 'triangle',
                                //        rotation: 0
                                //    };
                                //}
                            }
                        }
                    }
                }
            });
    
            // update chart's data
            myChart.data = data;
    
            // => constructure to wrapper the HTML components
            indChartWrapper.appendChild(sttP);
            indChartWrapper.appendChild(canvas);
    
            // =>
            indChartWrapper.classList.add("w3-margin-bottom", "w3-white", "w3-col", "s12", "m12", "l6");
            canvas.style.minWidth = "300px";
            canvas.style.minHeight = "200px";
    
            // =>
            wrapperDOM.appendChild(indChartWrapper);
        }
    
        // =>
        console.log("myGenCharts: finished.");
        return;
    }

    function myGetCheckBoxLabelPair(tgtEles){
        let aoO = [];
        for(let i=0;i<tgtEles.length;i++){
            if (tgtEles[i].getElementsByTagName("input")[0].checked === false) continue;
            if (tgtEles[i].getElementsByTagName("span")[0] === undefined){
                aoO.push(tgtEles[i].getElementsByTagName("label")[0].textContent);
            }else{
                for(let j=0;j<tgtEles[i].getElementsByTagName("span").length;j++){
                    aoO.push(tgtEles[i].getElementsByTagName("span")[j].textContent);
                }
                // aoO.push(tgtEles[i].getElementsByTagName("span")[0].textContent);
            }
        }
        console.log("myGetCheckBoxLabelPair : finished")
        return aoO;
    }
    
    function myGetCheckBoxLabelPairAllTypes(tgtEles){
        let aoO = [];
        for(let i=0;i<tgtEles.length;i++){
            let stt = "none";
            let label = tgtEles[i].getElementsByTagName("label")[0].textContent;
            if (tgtEles[i].getElementsByTagName("input")[0].checked === false){
                stt = "none";
            }else{
                stt = "checked";
            }
            aoO[label] = stt;
        }
        console.log("myGetCheckBoxLabelPairAllTypes : finished")
        return aoO;
    }

    
function myToggleInside(tgtEle){
    console.log("myToggleInside", tgtEle.tagName)
    for(let i in tgtEle.childNodes){
        if(tgtEle.childNodes[i].checked === true){
            tgtEle.childNodes[i].checked = false;
        }else{
            tgtEle.childNodes[i].checked = true;
        }
    }
    return;
}

function myUpdateInside(curEle, tgtID){
    console.log("myUpdateInside", curEle.tagName)
    let tgtEle = document.getElementById(tgtID);
    if(tgtEle){
        let tgtAoInputs = tgtEle.getElementsByTagName("input");
        if(curEle.textContent === "AllOff"){
            for(let i in tgtAoInputs){
                tgtAoInputs[i].checked = false;
            }
        }else if(curEle.textContent === "AllOn"){
            for(let i in tgtAoInputs){
                tgtAoInputs[i].checked = true;
            }
        }else{
            for(let i in tgtAoInputs){
                if(tgtAoInputs[i].checked === false){
                    tgtAoInputs[i].checked = true;
                }else{
                    tgtAoInputs[i].checked = false;
                }
            }
        }
    }else{}
    return;
}

function upChartsScale(tgtEle){
    let mode = tgtEle.textContent;
    let realMode = 'linear';
    // update status
    if(mode === "LogScale"){
        mode = "LinearScale";
        realMode = 'linear';
    }else{
        mode = "LogScale";
        realMode = 'logarithmic';
    }
    // callback
    tgtEle.textContent = mode;
    let tgtEles = document.getElementsByTagName("canvas")
    for(let i=0;i<tgtEles.length;i++){
        let ctx = tgtEles[i].getContext('2d');
        let chart = Chart.getChart(ctx);
        chart.options.scales.yAxis.type = realMode;
        chart.update();
    }
    console.log("upChartsScale : finished, cur. mode=", mode)
    return;
}

function upChartsIntersect(tgtEle){
    let mode = tgtEle.textContent;
    let realMode = 'nearest';
    // update status
    if(mode === "byPoint"){
        mode = "byTime";
        realMode = 'index';
    }else{
        mode = "byPoint";
        realMode = 'nearest';
    }
    // callback
    tgtEle.textContent = mode;
    let tgtEles = document.getElementsByTagName("canvas")
    for(let i=0;i<tgtEles.length;i++){
        let ctx = tgtEles[i].getContext('2d');
        let chart = Chart.getChart(ctx);
        chart.options.interaction.intersect = false;
        chart.options.interaction.mode = realMode;
        chart.update();
    }
    console.log("upChartsInteract : finished, cur. mode=", mode)
    return;
}

function upChartsByDates(){
    let startDT = document.getElementById("filterStartDate").value;
    let endDT = document.getElementById("filterEndDate").value;
    console.log(startDT, endDT)
    let tgtEles = document.getElementsByTagName("canvas")
    for(let i=0;i<tgtEles.length;i++){
        let ctx = tgtEles[i].getContext('2d');
        let chart = Chart.getChart(ctx);
        // if(startDT !== ""){ chart.options.scales.xAxis.suggestedMin = startDT; }
        // if(endDT !== ""){ chart.options.scales.xAxis.suggestedMax = endDT; }
        if(startDT !== ""){ chart.options.scales.xAxis.min = startDT; }
        if(endDT !== ""){ chart.options.scales.xAxis.max = endDT; }
        chart.update();
    }
    console.log("upChartsByDates : finished.")
    return;
}

function upChartsToBeforeDays(days){
    let tgtEles = document.getElementsByTagName("canvas")
    for(let i=0;i<tgtEles.length;i++){
        let ctx = tgtEles[i].getContext('2d');
        let chart = Chart.getChart(ctx);
        // console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
        if(chart.data.datasets.length > 1){
            let maxDateTime = chart.data.datasets[0].data[chart.data.datasets[0].data.length-1].x;
            let minDateTime = maxDateTime;
            for(let i=1;i<chart.data.datasets.length;i++){
                // console.log("  Compares: ", maxDateTime, chart.data.datasets[i].data[chart.data.datasets[i].data.length-1].x)
                if(maxDateTime < chart.data.datasets[i].data[chart.data.datasets[i].data.length-1].x){
                    maxDateTime = chart.data.datasets[i].data[chart.data.datasets[i].data.length-1].x;
                }else{}
            }
            // console.log("max/minTime:", typeof(maxDateTime), maxDateTime, minDateTime)
            minDateTime = new Date(maxDateTime.getTime() - days*(24+8)*60*60*1000)
            chart.options.scales.xAxis.min = minDateTime;
            chart.update();
        }else{}
    }
    console.log("upChartsToBeforeDays : finished.")
    return;
}

function myListenChartClick(tgtCanvas, evt){
    let ctx = tgtCanvas.getContext('2d');
    let chart = Chart.getChart(ctx);
    let actPoints = chart.getElementsAtEventForMode(evt, 'nearest', chart.options);

    if(actPoints.length == 0) return;

    let firstPoint = actPoints[0];
    let dsI = firstPoint.datasetIndex;
    let dI = firstPoint.index;
    let unique = chart.data.datasets[dsI].data[dI].unique;
    let prjN = document.getElementsByClassName("myCnt-PVPI-prjN")[0].textContent
    ////
    
    PVPI_org.dsp_detail_session_on_top(prjN,unique)

    ////
    console.log("myListenChartClick : clicked.")
    return;
}


}(window.PVPI_org = window.PVPI_org || {}));

FILE:: .//src_modules/PVPI_org/simpleFunctions.js
function chkMaintenance(){
    // check if it needs a redirection to the _maintanence page
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.open("GET", "chkMaintenance.php", false);
    xmlhttp.send();

    if(xmlhttp.responseText !== ""){
        location.replace("http://172.29.143.148/VMS/cgi-bin/PVPI/_mainternance.html");
    }else{
        location.replace("http://172.29.143.148/VMS/cgi-bin/PVPI/just4you");
    }
    return;
}

function chkNotification(){
    // check if it needs a redirection to the _maintanence page
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200){
            if(this.responseText !== null && this.responseText !== ""){
                while(firstStatus.childNodes.length > 0){firstStatus.lastChild.remove();}

                let oStr = this.responseText;
                

                let e_marquee = document.createElement("marquee");
                e_marquee.setAttribute("direction","left");
                e_marquee.setAttribute("behaviour","scroll");
                e_marquee.setAttribute("scrollamount","5");
                e_marquee.setAttribute("delay","1");
                e_marquee.innerHTML = oStr;

                let e_standstill = document.createElement("div");
                // e_standstill.style.position = "relative";
                // e_standstill.style.bottom = "23px";
                e_standstill.style.display = "none";
                e_standstill.innerHTML = oStr;

                firstStatus.classList.add("w3-show");
                firstStatus.appendChild(e_marquee);
                firstStatus.appendChild(e_standstill);

                if(firstStatus.getAttribute("onmouseover") === null){
                    firstStatus.setAttribute("onmouseover","this.firstChild.style.display='none';this.lastChild.style.display='';")
                    firstStatus.setAttribute("onmouseleave","this.firstChild.style.display='';this.lastChild.style.display='none';")
                }
            }else{}
        }
    };
    xmlhttp.open("GET", "chkNotification.php", true)
    xmlhttp.send();
}

function onload4document (){
    // console.log("ALOHA upSumPVPI")
    // -> check if there needs maintenances
    let xmlhttp0 = new XMLHttpRequest();
    xmlhttp0.open("GET", "chkMaintenance.php", false);
    xmlhttp0.send();
    if(xmlhttp0.responseText !== ""){
        location.replace("http://172.29.143.148/VMS/cgi-bin/PVPI/_mainternance.html");
    }else{
    }
    // -> go for it
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            let tgtObj = document.createElement("div");
            tgtObj.innerHTML = this.responseText;
            document.getElementById("observation_nav").appendChild(tgtObj);
            // console.log("finished responseText")
        }
    };
    xmlhttp.open("GET", "upObserverList.php", true)
    xmlhttp.send();

    // check for notification
    chkNotification();

    // special 
    // update1stStt4Ongoing("RH850_U2B10");
    // setInterval(function(){update1stStt4Ongoing("RH850_U2B10")}, 600000);

    // auto upSum
    upSumPVPI(1);

    // slide show if any
    getPictures();

    console.log("finished onload4document")
    return ;
}

function update1stStt4Ongoing(tgtPrj){
    //applied for special status, in which there is a project is taping out
    let xmlhttp2 = new XMLHttpRequest();
    xmlhttp2.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            let tgtObj = document.createElement("div");
            tgtObj.innerHTML = this.responseText;
            // console.log(tgtObj)
            if(document.getElementById("firstStatus").getElementsByTagName("P")[0].childNodes.length > 0){
                while(document.getElementById("firstStatus").getElementsByTagName("P")[0].childNodes.length > 1){
                    document.getElementById("firstStatus").getElementsByTagName("P")[0].lastChild.remove();
                }
            }else{}
            for (let tr of tgtObj.getElementsByTagName("TR")){
                for(let i=0;i<tr.childNodes.length;i++){
                    if(tr.childNodes[i].tagName === "TD") {
                        if(tr.childNodes[i].getElementsByTagName("IMG").length > 0){
                            if(tr.childNodes[i].getElementsByTagName("IMG")[0].getAttribute("alt") === "ONGO"){
                                // console.log(tr.childNodes[i].getElementsByTagName("SPAN")[0].innerText)
                                tr.childNodes[i].getElementsByTagName("SPAN")[0].style = "";
                                tr.childNodes[i].getElementsByTagName("SPAN")[0].classList.add("w3-card-2");
                                document.getElementById("firstStatus").getElementsByTagName("P")[0].appendChild(tr.childNodes[i].getElementsByTagName("SPAN")[0])
                                // console.log(document.getElementById("firstStatus").getElementsByTagName("P")[0].innerText)
                            }
                        }
                    }else{}
                }
            }
            document.getElementById("firstStatus").getElementsByTagName("P")[0].style.width = (document.getElementById("firstStatus").getElementsByTagName("P")[0].innerText.length / 1.50) + "%";
        }
    };
    xmlhttp2.open("GET", "upDetailPVPI.php?q=" + tgtPrj + "&ongoingOnly=yes", true)
    xmlhttp2.send();
    console.log("update1stStt4Ongoing .... " + tgtPrj)
}

function myManualCollapase(){
    if(document.getElementById("navbarResponsive").classList.contains("show")){
        document.getElementById("navbarResponsive").classList.remove("show")
    }
    return;
}

function upSumPVPI(type){
    // close some div if needed
    let aoChkID = ["observer", "observer2", "observer3", "myHelp"];
    for(let i=0;i<aoChkID.length;i++){
            document.getElementById(aoChkID[i]).style.display = "none";
            document.getElementById("counter_stat").style.display = "none";
    }
    // console.log("ALOHA upSumPVPI")
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            document.getElementById("outSum").innerHTML = this.responseText;
            // update some action (grouping by IP) in the sum-type2/3
            for(let divByPrj of document.getElementById("outSum").childNodes){
                myUpdateTblSumPVPI(divByPrj);
                // console.log(divByPrj)
            }
            // console.log("finished responseText")
        }
    };
    xmlhttp.open("GET", "upSumPVPI.php?q="+type, true)
    xmlhttp.send();
    console.log("finished upSumPVPI", type, new Date())
    return ;
}

function myUpdateTblSumPVPI(tgtDivPrj){
    for(let tblOfData of tgtDivPrj.getElementsByTagName("tbody")){
        let aoTr = tblOfData.getElementsByTagName("tr");
        if(aoTr.length < 10) {continue;} //don't make it overwhelmed
        //notice: this method should works on a sorted array of names
        let aoNames = new Array();
        for(let i=1;i<aoTr.length;i++){aoNames.push(aoTr[i].getElementsByTagName("td")[0].innerText)}
        // console.log(groupSimilarStarters(aoNames))
        let aoSimGrp = groupSimilarStarters(aoNames);
        for(let tgtArr of aoSimGrp){
            if(tgtArr.length === 1) {continue;}
            aoNames.findIndex(function(curVal,curIndex){
                    if(curVal === tgtArr[0]){
                        // => add an icon
                        aoTr[curIndex+1].getElementsByTagName("td")[0].innerHTML += "<i class=\"material-icons\">expand_more</i>";
                        aoTr[curIndex+1].getElementsByTagName("td")[0].classList.add("w3-button","w3-hover-border-red");
                        // => hide some next rows
                        for(let i=curIndex+2;i<curIndex+2+tgtArr.length-1;i++){
                            aoTr[i].style.display = "none";
                            aoTr[i].classList.add("w3-animate-opacity");
                        }
                        // => assign a click on to
                        aoTr[curIndex+1].getElementsByTagName("td")[0].addEventListener("click",function(event){
                            toggle_next_some_row(event.target, curIndex+1, tgtArr.length - 1)
                        })
                    }else{}
                },tgtArr);
        }
    }
    return 1;
}

function toggle_next_some_row(clickedEle,curIndex, noNextEles){
    let tgtEle = clickedEle;
    if(clickedEle.tagName.toUpperCase() === "I"){ tgtEle = clickedEle.parentNode.parentNode; }
    let aoTr = tgtEle.parentNode.parentNode.getElementsByTagName("tr");
    for(i=curIndex+1;i<curIndex+1+noNextEles;i++){
        if(tgtEle.getElementsByTagName("i")[0].innerText === "expand_more"){
            aoTr[i].style.display = '';
        }else{
            aoTr[i].style.display = 'none';
        }
    }
    if(tgtEle.getElementsByTagName("i")[0].innerText === "expand_more"){
        tgtEle.getElementsByTagName("i")[0].innerText = "expand_less";
    }else{
        tgtEle.getElementsByTagName("i")[0].innerText = "expand_more";
    }
}

function groupSimilarStarters(iArr){
    let oArr = [];
    oArr = iArr.reduce((acc, val, ind) => {
        const firstChar = el => {
           return (el || '').split('_')[0];
        }
        if(firstChar(val) === firstChar(iArr[ind - 1])){
           acc[acc.length - 1].push(val);
        }else{
           acc.push([val]);
        };
        return acc;
    },[]);
    return oArr;
}

function myUpCounter(){
    // update counter for web visit statistic
    // -> make an http request()
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            document.getElementById("counter_stat").style.display = "block";
            document.getElementById("counter_stat").innerHTML = this.responseText;
            // console.log("Finished: get from myUpCounter");
        }
    };
    xmlhttp.open("GET", "counter.php", true);
    xmlhttp.send();
    return;
}

function myUpDetail(tgtEle){
    console.log("myUpDetail")
    if(tgtEle !== undefined) {
        let tgtPrjN = tgtEle.childNodes[0].innerHTML;
        if(tgtPrjN === undefined){
            tgtPrjN = document.getElementById("detailProject").innerHTML;
        }

        // -> update the title of detailTable
        // console.log(tgtEle.childNodes[0].innerHTML)
        document.getElementById("detailProject").innerHTML = tgtPrjN;
        document.getElementById("detailProject").setAttribute("onclick", "myUpDetail(this)");
        document.getElementById("detailProject").setAttribute("class", "w3-btn w3-block w3-indigo");
        // -> disable some common inputs
        document.getElementById("filterName").style.display='';
        document.getElementById("filterCHIPIP").style.display='';
        // document.getElementById("loading").style.display='block';
        document.getElementById("outDetail").innerHTML = "<p class=\"w3-center w3-jumbo\"><i class=\"material-icons w3-spin w3-jumbo\">refresh</i></p>";

        // -> make an http request()
        let xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function(){
            if(this.readyState == 4 && this.status == 200) {
                // document.getElementById("loading").style.display='none';
                document.getElementById("outDetail").innerHTML = this.responseText;
                console.log("myUpDetail: got resonseText")
                // counter triggered
                myUpCounter();
                // collap the navigator if needed
                myManualCollapase();
                // filterSessions applied if there existed already the keywords
                filterSession();
                // console.log("finished responseText")
            }
        };
        xmlhttp.open("GET", "upDetailPVPI.php?q="+tgtPrjN, true)
        xmlhttp.send();
        // console.log("finished responseText")
    }else{
        console.log("myUpTitleDetail::undefined tgtEle"); console.log(tgtEle);
    }
    console.log("finished myUpDetail")
    return ;
}

function myUpDetail4ChartsWrapper(tgtEle){
    console.log("myUpDetail4ChartsWrapper")
    if(tgtEle !== undefined) {
        let tgtPrjN = tgtEle.childNodes[0].innerHTML;
        if(tgtPrjN === undefined){
            tgtPrjN = document.getElementById("detailProject").innerHTML;
        }

        // -> update the title of detailTable
        // console.log(tgtEle.childNodes[0].innerHTML)
        document.getElementById("detailProject").innerHTML = tgtPrjN;
        document.getElementById("detailProject").setAttribute("onclick", "myUpDetail4ChartsWrapper(this)");
        document.getElementById("detailProject").setAttribute("class", "w3-btn w3-block w3-indigo");
        // -> disable some common inputs
        document.getElementById("filterName").style.display='none';
        document.getElementById("filterCHIPIP").style.display='none';
        // document.getElementById("loading").style.display='block';
        document.getElementById("outDetail").innerHTML = "<p class=\"w3-center w3-jumbo\"><i class=\"material-icons w3-spin w3-jumbo\">refresh</i></p>";

        // -> make an http request()
        let xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function(){
            if(this.readyState == 4 && this.status == 200) {
                // document.getElementById("loading").style.display='none';
                document.getElementById("outDetail").innerHTML = this.responseText;
                console.log("myUpDetail: got resonseText")
                // consider cookies
                myGetCookiesForQuickSetting();//before genChart
                // charting this data
                myGenCharts();
                // counter triggered
                myUpCounter();
                // collap the navigator if needed
                myManualCollapase();
                // console.log("finished responseText")
            }
        };
        xmlhttp.open("GET", "upDetailPVPI4ChartsWrapper.php?q="+tgtPrjN, true)
        xmlhttp.send();
        // console.log("finished responseText")
    }else{
        console.log("myUpDetail4ChartsWrapper::undefined tgtEle"); console.log(tgtEle);
    }
    console.log("finished myUpDetail4ChartsWrapper")
    return ;
}

function myGetCheckBoxLabelPair(tgtEles){
    let aoO = [];
    for(let i=0;i<tgtEles.length;i++){
        if (tgtEles[i].getElementsByTagName("input")[0].checked === false) continue;
        if (tgtEles[i].getElementsByTagName("span")[0] === undefined){
            aoO.push(tgtEles[i].getElementsByTagName("label")[0].textContent);
        }else{
            for(let j=0;j<tgtEles[i].getElementsByTagName("span").length;j++){
                aoO.push(tgtEles[i].getElementsByTagName("span")[j].textContent);
            }
            // aoO.push(tgtEles[i].getElementsByTagName("span")[0].textContent);
        }
    }
    console.log("myGetCheckBoxLabelPair : finished")
    return aoO;
}

function myGetCheckBoxLabelPairAllTypes(tgtEles){
    let aoO = [];
    for(let i=0;i<tgtEles.length;i++){
        let stt = "none";
        let label = tgtEles[i].getElementsByTagName("label")[0].textContent;
        if (tgtEles[i].getElementsByTagName("input")[0].checked === false){
            stt = "none";
        }else{
            stt = "checked";
        }
        aoO[label] = stt;
    }
    console.log("myGetCheckBoxLabelPairAllTypes : finished")
    return aoO;
}

function myGenCharts(){
    const allData = JSON.parse(document.getElementById("dataFrServer").innerHTML);
    // console.log(allData);
    // => 
    let selIPName = myGetCheckBoxLabelPair(document.getElementById("chart_sel_IPName").getElementsByTagName("div"));
    let selPVItem = myGetCheckBoxLabelPair(document.getElementById("chart_sel_PVitem").getElementsByTagName("div"));
    let selNetVer = myGetCheckBoxLabelPair(document.getElementById("chart_sel_netVer").getElementsByTagName("div"));
    let selUserLg = myGetCheckBoxLabelPair(document.getElementById("chart_sel_userLogin").getElementsByTagName("div"));
    let selEcoVer = myGetCheckBoxLabelPair(document.getElementById("chart_sel_ecoVer").getElementsByTagName("div"));
    
    let wrapperDOM = document.getElementById("charts_wrapper");
    // clean up the target wrapper
    if(wrapperDOM.hasChildNodes){
        while(wrapperDOM.firstChild){
            wrapperDOM.removeChild(wrapperDOM.firstChild);
        }
    }

    // making element
    for (let i=0;i<selIPName.length;i++){
        let ipName = selIPName[i];
        if(ipName === "" || ipName === undefined) continue;
        
        let indChartWrapper = document.createElement("div");
        let sttP    = document.createElement("div"); sttP.textContent = ipName;
            sttP.classList.add("w3-button", "w3-hover-blue", "w3-padding-small", "w3-block");
            sttP.addEventListener("click", function(){myExpandWidth(this);});
        let canvas  = document.createElement("canvas"); canvas.textContent = "Your browser does not support canvas.";
        canvas.addEventListener("click",function(evt){
            myListenChartClick(this, evt);
        });
       
        let data = {};

        // -> gather info from allData
        let allTimeLine = [];
        for (let unique in allData){
            let tmpA = unique.split("__");
            let timeStamp = tmpA[2];
            if(allData[unique] === null || allData[unique] === undefined){
                // console.log("ingore:", unique)
            // } else if(allData[unique]["CHIP_OR_IP"] === ipName){
            } else if(allData[unique]["TOP_LAYOUT_NAME"] === ipName){
                allTimeLine.push({"unique":unique, "timeStamp":timeStamp, "flgGo" : false});
                // console.log(unique, tmpA[2])
            }else{}
        }
        allTimeLine.sort(function(a,b){return a.timeStamp - b.timeStamp});
        // console.log(allTimeLine)

        data.datasets = [];
        let aoColor = ['#A52A2A', '#00FFFF', '#0000FF', '#8A2BE2', '#7FFF00', '#FF7F50', '#00008B', '#8B008B', '#FFD700', '#008000', '#4B0082', '#00FF00', '#191970', '#FF4500', '#FFFF00'];
        for (let i=0;i<selPVItem.length;i++){
            let color = aoColor[i % (aoColor.length-1)];
            let pvItem = selPVItem[i];
            let entry = {};
            let flgGoEntry = false;
            entry.label = pvItem;
            entry.data = [];
            // >>>>>>> options
            entry.borderColor = color;
            entry.spanGaps = true;
            entry.hoverBorderWidth = 10;
            // entry.pointHoverRadius = 10;
            // <<<<<<<
            for(let j=0;j<allTimeLine.length;j++){
                let unique = allTimeLine[j]["unique"];
                let tmpA = unique.split("__");
                let userLogin = tmpA[0];
                let thisNetVer = allData[unique]["netVer"];
                let thisEcoVer = allData[unique]["ecoVer"];
                let flgGo = false;
                for(let tmpv of selNetVer){ if(thisNetVer == tmpv) flgGo = true ;}
                if(flgGo === false) continue; flgGo = false;
                for(let tmpv of selUserLg){ if(userLogin == tmpv) flgGo = true ;}
                if(flgGo === false) continue; flgGo = false;
                for(let tmpv of selEcoVer){ if(thisEcoVer == tmpv) flgGo = true ;}
                if(flgGo === false) continue; flgGo = false;
                let theDate = new Date(allTimeLine[j].timeStamp * 1000);
                if(allData[unique][pvItem] === null){
                    // entry.data.push({x: theDate , y: undefined, unique: unique});
                }else{
                    if(pvItem.match("COMPARISON")){
                        let pvItemBrother = pvItem.replace("COMPARISON", "EXTRACTION");
                        let tmpv = allData[unique][pvItemBrother];
                        let realTmpv = allData[unique][pvItem];
                        // => change the type and some options of the charts
                        entry.type = "bubble";
                        if(entry.pointStyle === undefined){
                            entry.pointStyle  = [];
                            entry.backgroundColor  = [];
                            entry.borderColor  = [];
                            entry.hoverBackgroundColor = [];
                            entry.pointHoverRadius = [];
                        }else{}
                        if(realTmpv === "CORRECT"){
                            // let img = new Image(30,30); img.src = "assets/CORRECT_2.svg";
                            // entry.pointStyle.push(img);
                            entry.pointStyle.push("circle");
                            entry.backgroundColor.push("#7CBB00"); //green like
                            entry.borderColor.push("#7CBB00");
                            entry.hoverBackgroundColor.push(undefined);
                        }else if (realTmpv === "INCORRECT"){
                            // let img = new Image(30,30); img.src = "assets/INCORRECT_2.svg";
                            // entry.pointStyle.push(img);
                            entry.pointStyle.push("triangle");
                            entry.backgroundColor.push("#7B0099");// purple like
                            entry.borderColor.push("#7B0099");
                        }else{
                            entry.pointStyle.push("crossRot");
                            entry.backgroundColor.push("gray");
                            entry.borderColor.push("gray");
                        }
                        entry.data.push({x: theDate, y: tmpv, r: 10, unique: unique, other: realTmpv});
                        flgGoEntry = true;
                        allTimeLine[j]["flgGo"] = true;
                    }else{
                        let tmpv = allData[unique][pvItem];
                        entry.data.push({x: theDate, y: tmpv, unique: unique});
                        flgGoEntry = true;
                        allTimeLine[j]["flgGo"] = true;
                    }
                }
            }
            if(flgGoEntry === false){
            }else{
                // console.log(entry.data);
                data.datasets.push(entry);
            }
        }

        // consider to add label (the x axis values) // don't need if the data holding the x, y, ... for parsing
        data.labels = [];
        for(let i=0;i<allTimeLine.length;i++){
            if(allTimeLine[i]["flgGo"] === true){
                let theDate = new Date(allTimeLine[i].timeStamp * 1000);
                // data.labels.push(allTimeLine[i].timeStamp);
                data.labels.push(theDate);
            }else{}
        }

        // Chart.js initialize, data, option ....
        let chartLinearOrLog = document.getElementById("chartLinearOrLog").textContent;
        if(chartLinearOrLog === "LinearScale"){
            chartLinearOrLog = "linear";
        }else{
            chartLinearOrLog = "logarithmic";
        }
        let chartIntersect = document.getElementById("chartIntersect").textContent;
        if(chartIntersect === "byPoint"){
            chartIntersect = "nearest";
        }else{
            chartIntersect = "index";
        }
        let ctx = canvas.getContext('2d');
        const myChart = new Chart(ctx, {
            type: 'line',
            options: {
                responsive: true,
                animations: {
                    radius: {
                      duration: 400,
                      easing: 'linear',
                      loop: (context) => context.active
                    }
                },
                hoverRadius: 12,
                cubicInterpolationMode: 'monotone',
                interaction:{
                    intersect: false,
                    mode: chartIntersect,
                },
                parsing: {
                    xAxisKey: 'x',
                    yAxisKey: 'y'
                },
                scales: {
                    yAxis: {
                        beginAtZero: true,
                        type: chartLinearOrLog,
                        ticks:{
                            mirror: true,
                            callback: function(value, index, ticks){
                                let divider = [1, 1e+3, 1e+6, 1e+9, 1e+12];
                                let unit    = ["", "K", "M", "B", "T"];
                                let oStr = value;
                                for(let i=0;i<divider.length;i++){
                                    oStr = value/divider[i];
                                    // oStr = oStr.toPrecision(1);
                                    oStr += unit[i];
                                    if(value/divider[i+1]<1){
                                        break;
                                    }else{}
                                }
                                return oStr;
                            }
                        }
                    },
                    xAxis: {
                        type: 'time',
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        labels: {
                            font : {
                                size: 8,
                            },
                            boxWidth:10,
                        }
                    },
                    tooltip:{
                        enabled: true,
                        //usePointStyle: true,
                        onClick: myTest,
                        callbacks: {
                            label: function(context){
                                let labelMulti = [];
                                let label = context.dataset.label || '';
                                // let unique = context.dataset.data[context.dataIndex].unique;
                                let otherStr = context.dataset.data[context.dataIndex].other;
                                if(label){
                                    label = label.replace("DRC_", "");
                                    label = label.replace("LVS_", "");
                                    label = label.replace("COMPARISON", "CMP");
                                    label = label.replace("EXTRACTION", "ERC");
                                    label = label.replace("MAINLVS", "LVS");
                                    if(otherStr === undefined){
                                        label += ":" + context.parsed.y;
                                    }else{
                                        label += ":" + otherStr;
                                    }
                                    labelMulti.push(label);
                                
                                    // let tmpA = unique.split("__");
                                    // let userN = tmpA[0];
                                    // labelMulti.push("User:"+userN);
                                    // labelMulti.push("netVer:"+allData[unique]["netVer"]);
                                    // labelMulti.push("ecoVer:"+allData[unique]["ecoVer"]);
                                    // labelMulti.push("DATE:"+allData[unique]["DATE"]);
                                }else{
                                    return "n/a";
                                }
                                // console.log(context.dataset.data[context.dataIndex].unique)
                                return labelMulti;
                            },
                            footer: function(tooltipItems){
                                // get the first item is enough
                                let unique = tooltipItems[0].dataset.data[tooltipItems[0].dataIndex].unique;
                                let aoStr = [];
                                let tmpA = unique.split("__");
                                let userN = tmpA[0];
                                aoStr.push("User:"+userN);
                                aoStr.push("netVer:"+allData[unique]["netVer"]);
                                aoStr.push("ecoVer:"+allData[unique]["ecoVer"]);
                                aoStr.push("DATE:"+allData[unique]["DATE"]);
                                return aoStr;
                            },
                            //labelPointStyle: function(context) {
                            //    return {
                            //        pointStyle: 'triangle',
                            //        rotation: 0
                            //    };
                            //}
                        }
                    }
                }
            }
        });

        // update chart's data
        myChart.data = data;

        // => constructure to wrapper the HTML components
        indChartWrapper.appendChild(sttP);
        indChartWrapper.appendChild(canvas);

        // =>
        indChartWrapper.classList.add("w3-margin-bottom", "w3-white", "w3-col", "s12", "m12", "l6");
        canvas.style.minWidth = "300px";
        canvas.style.minHeight = "200px";

        // =>
        wrapperDOM.appendChild(indChartWrapper);
    }

    // =>
    console.log("myGenCharts: finished.");
    return;
}

function myUpDetail_session_core(tgtPrjN, sessionUnique, addEle){
    // core function to call php and update the target div.
    document.getElementById("sessionUnique").innerHTML = tgtPrjN + "/" + sessionUnique;
    // document.getElementById("loading").style.display='block';
    document.getElementById("outDetail2").innerHTML = "<p class=\"w3-center w3-jumbo\"><i class=\"material-icons w3-spin w3-jumbo\">refresh</i></p>";
    
    // -> make an http request()
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            document.getElementById("outDetail2").innerHTML = this.responseText;
            console.log("myUpDetail_session_core : received responseText")
            // console.log("observer3 ====================================");
            // console.log("diplay='" + document.getElementById("observer3").style.display + "'");
            if(addEle !== undefined){
                // => suppose that the addEle is the row of table of summary
                let headerEle = addEle.parentNode.childNodes[0];
                let insEle = document.createElement("table");
                insEle.appendChild(document.createElement("tr"));
                insEle.appendChild(document.createElement("tr"));
                for (let i=0;i<headerEle.childNodes.length;i++){
                    console.log(i, headerEle.childNodes[i].textContent)
                    if(headerEle.childNodes[i].textContent === "Done?"
                    || headerEle.childNodes[i].textContent === "prOut"
                    || headerEle.childNodes[i].textContent === "cdlcat"
                    || headerEle.childNodes[i].textContent === "merge1"
                    || headerEle.childNodes[i].textContent === "dmyGDS"
                    || headerEle.childNodes[i].textContent === "merge2"
                    || headerEle.childNodes[i].textContent === "FEOL"
                    || headerEle.childNodes[i].textContent === "BEOL"
                    || headerEle.childNodes[i].textContent === "LVS"
                    || headerEle.childNodes[i].textContent === "Others"
                    ){
                        insEle.childNodes[0].appendChild(headerEle.childNodes[i].cloneNode(true));
                        insEle.childNodes[1].appendChild(addEle.childNodes[i].cloneNode(true));
                    }else{}
                }
                document.getElementById("outDetail2").insertBefore(insEle, document.getElementById("outDetail2").childNodes[1]);
            }else{
                console.log("not reg an addEle")
            }
        }
    };
    xmlhttp.open("GET", "upDetailPVPI_session.php?prjN="+tgtPrjN+"&unique="+sessionUnique, true)
    xmlhttp.send();
    // console.log("finished responseText")
    console.log("aloha : ", "unique='" + sessionUnique + "'", "tgtPrjN=" + tgtPrjN + "'")
    return;
}

function myUpDetail2(tgtEle){
    // Raise the detail of a session which was clicked from sum table or an item (running or last finished)
    if(tgtEle !== undefined) {
        let sessionUnique = tgtEle.childNodes[0].innerHTML;
        let tgtPrjN = document.getElementById("detailProject").innerHTML;
        if(sessionUnique === undefined){
            // -> incase user click from sum table
            sessionUnique = tgtEle.innerHTML.replace(/^\s+|\s+$/gm,"");
            // tgtPrjN = tgtEle.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.childNodes[0].childNodes[0].innerHTML
            tgtPrjN = tgtEle.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.childNodes[0].childNodes[0].textContent
        }
        sessionUnique = sessionUnique.replace(/\s+/g, "__");
        // console.log(addEle)
        myUpDetail_session_core(tgtPrjN, sessionUnique, tgtEle);
    }else{
        console.log("myUpTitleDetail2::undefined tgtEle"); console.log(tgtEle);
    }
    console.log("finished myUpDetail2")
    return ;
}

function myUpDetail2_2(tgtEle){
    // similar to myUpDetail2 but this is clicked from the table sum type#2, in which the target unique and tgtPrjN are differently extracted
    if(tgtEle !== undefined) {
        let sessionUnique = tgtEle.childNodes[1].innerHTML;
        let tgtPrjN = tgtEle.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode.childNodes[0].childNodes[0].textContent
        // -> make an http request() to get summary info firstly
        let xmlhttp = new XMLHttpRequest();
        xmlhttp.onreadystatechange = function(){
            if(this.readyState == 4 && this.status == 200) {
                let sumStr = this.responseText;
                //
                let addEle = document.createElement("div");
                addEle.innerHTML = sumStr;
                // update for the detail session (unique)
                console.log(addEle.childNodes[0].getElementsByTagName("tr")[1])
                myUpDetail_session_core(tgtPrjN, sessionUnique, addEle.childNodes[0].getElementsByTagName("tr")[1]);
            }
        };
        xmlhttp.open("GET", "upDetailPVPI.php?q="+tgtPrjN+"&unique="+sessionUnique, true)
        xmlhttp.send();
    }else{
        console.log("myUpTitleDetail2::undefined tgtEle"); console.log(tgtEle);
    }
    console.log("finished myUpDetail2")
    return ;
}

function filterSession(){
    // filter as method#1 when searching texts are typed
    let patName = document.getElementById("filterName").value.toUpperCase();
    let patCHIPIP = document.getElementById("filterCHIPIP").value.toUpperCase();
    let tgtTable = document.getElementById("outDetail");
    let tgtAoTR = tgtTable.getElementsByTagName("tr");
    for(let i=1,maxI=tgtAoTR.length; i<maxI; i++){
        // starting from 1, ignore 0 as header
        let tgtChkName = tgtAoTR[i].getElementsByTagName("td")[0].innerHTML;
        let tgtChkCHIPIP = tgtAoTR[i].getElementsByTagName("td")[2].innerHTML;
        if((tgtChkName.toString().toUpperCase().indexOf(patName) > -1) && 
           (tgtChkCHIPIP.toString().toUpperCase().indexOf(patCHIPIP) > -1)) {
            tgtAoTR[i].style.display = "";
        }else{
            tgtAoTR[i].style.display = "none";
        }
        console.log(tgtChkName, patName, tgtChkCHIPIP, patCHIPIP)
    }
    console.log("finished filterSession")
    return ;
}

let preSelHead = "";
function filterSession2(headStr, flg, index){
    // filter as method#2 when enable/disable a header's items (to select executing type)
    let tgtTable = document.getElementById("outDetail");
    let tgtAoTR = tgtTable.getElementsByTagName("tr");
    let disableStr = "remove_circle";
    if(headStr === "Done?"){
        disableStr = "pool";
    }
    
    // -------
    filterSession();
    // -------

    for(let i=1,maxI=tgtAoTR.length; i<maxI; i++){
        // starting from 1, ignore 0 as header
        let tgtTD = tgtAoTR[i].getElementsByTagName("td")[index];
        let chkText = tgtTD.innerHTML;
        if(preSelHead !== headStr){
            if(tgtTD.parentNode.style.display !== ""){
                continue;
            }
        }else{}
        if(tgtTD.parentNode.style.display !== ""){
            continue;
        }
        // console.log("   => ", tgtTD.innerHTML)
        if(flg === false){
            if(chkText.search(disableStr) > -1){
                tgtTD.parentNode.style.display = "";
            }else{
                tgtTD.parentNode.style.display = "none";
            }
        }else{
            if(chkText.search(disableStr) > -1){
                tgtTD.parentNode.style.display = "none";
            }else{
                tgtTD.parentNode.style.display = "";
            }
        }
    }
    console.log("finished filterSession2: ", headStr, flg, index, preSelHead);
    preSelHead = headStr;
    return ;
}

function myUpFilter(tgtEle){
    // =>
    if(tgtEle === undefined){ return ;}
    // find index
    let index = 0;
    let aoTH = tgtEle.parentNode.getElementsByTagName("th");
    for(let i=0,maxI=aoTH.length;i<maxI;i++){
        tgtValue = aoTH[i].textContent || aoTH[i].innerText;
        if(tgtValue === tgtEle.innerHTML){
            index = i;
            // console.log(i, " to ", tgtValue)
            break
        }else{}
    }
    
    // => update status
    let curClass = tgtEle.getAttribute("class").toString();
    let upClass = curClass;
    let flgON = false;
    if(curClass.search("w3-text-black") > -1){
        // currently selected
        upClass = curClass.replace("w3-text-black", "w3-text-gray");
        flgON = false;
    }else if(curClass.search("w3-text-gray") > -1){
        // currently deslected
        upClass = curClass.replace("w3-text-gray", "w3-text-black");
        flgON = true;
    }else{
        // error, don't know this case
    }
    tgtEle.className = upClass;

    // call the active filtering
    filterSession2(tgtEle.innerHTML, flgON, index);

    console.log("myUpFilter: finished")
    return;
}

function myChangeSumView_old(tgtEle, indexOn, indexOff){
    // 
    if(tgtEle.childNodes[indexOn].style.display === "none"){
        tgtEle.childNodes[indexOn].style.display = "";
        tgtEle.childNodes[indexOff].style.display = "none";
    }else{}
    // console.log(tgtEle.childNodes[indexOn].style.display)
    return;
}

function myChangeSumView(tgtEle,direction){
    // notice:leave the index 0 as it is the header
    let aoTgtDiv = new Array();
    for(let tmpDiv of tgtEle.childNodes){
        if (tmpDiv.tagName.toUpperCase() === "DIV"){
            aoTgtDiv.push(tmpDiv);
        }else{}
    }
    let indexOn = -1;
    for(let i=1;i<aoTgtDiv.length;i++){
        if(aoTgtDiv[i].style.display === ""){
            if(direction === "up"){
                indexOn = i+1;
                if(indexOn === aoTgtDiv.length){indexOn = 1;}else{}
            }else{
                indexOn = i-1;
                if(indexOn === 0){indexOn = aoTgtDiv.length-1;}else{}
            }
        }else{}
    }
    for(let i=1;i<aoTgtDiv.length;i++){
        if(i===indexOn){
            aoTgtDiv[i].style.display = "";
        }else{
            aoTgtDiv[i].style.display = "none";
        }
    }
    return;
}

function myExpandWidth(tgtEle){
    console.log(tgtEle.parentNode.style.width)
    if(tgtEle.parentNode.style.width === ""){
        tgtEle.parentNode.style.width = "100%";
    }else{
        tgtEle.parentNode.style.width = "";
    }
    console.log("myExpandWidth: finished.");
    return;
}

function myChangeAllSumView(cntKey) {
    let tgtEles = document.getElementById("outSum").childNodes;
    if(cntKey === "allBig"){
        for (let tgtEle of tgtEles){
            if(tgtEle.nodeName !== "DIV") continue;
            if(tgtEle.childNodes.length !== 1) continue;
            if(tgtEle.style != undefined){
                if(tgtEle.style.width==="") tgtEle.style.width = "100%";
            }
        }
    }else if(cntKey === "allSmall" ) {
        for (let tgtEle of tgtEles){
            if(tgtEle.nodeName !== "DIV") continue;
            if(tgtEle.childNodes.length !== 1) continue;
            if(tgtEle.style != undefined){
                if(tgtEle.style.width==="100%") tgtEle.style.width = "";
            }
        }
    }else if(cntKey === "sum#1" ) {
        for(let tgtDiv of tgtEles){
            myChangeSumView(tgtDiv.getElementsByTagName("div")[0],"down");
        }
    }else if(cntKey === "sum#2" ) {
        for(let tgtDiv of tgtEles){
            myChangeSumView(tgtDiv.getElementsByTagName("div")[0],"up");
        }
    }else{}
    console.log("finished: myChangeAllSumView : " + cntKey + " : done")
}

function myToggleInside(tgtEle){
    console.log("myToggleInside", tgtEle.tagName)
    for(let i in tgtEle.childNodes){
        if(tgtEle.childNodes[i].checked === true){
            tgtEle.childNodes[i].checked = false;
        }else{
            tgtEle.childNodes[i].checked = true;
        }
    }
    return;
}

function myUpdateInside(curEle, tgtID){
    console.log("myUpdateInside", curEle.tagName)
    let tgtEle = document.getElementById(tgtID);
    if(tgtEle){
        let tgtAoInputs = tgtEle.getElementsByTagName("input");
        if(curEle.textContent === "AllOff"){
            for(let i in tgtAoInputs){
                tgtAoInputs[i].checked = false;
            }
        }else if(curEle.textContent === "AllOn"){
            for(let i in tgtAoInputs){
                tgtAoInputs[i].checked = true;
            }
        }else{
            for(let i in tgtAoInputs){
                if(tgtAoInputs[i].checked === false){
                    tgtAoInputs[i].checked = true;
                }else{
                    tgtAoInputs[i].checked = false;
                }
            }
        }
    }else{}
    return;
}

function upChartsScale(tgtEle){
    let mode = tgtEle.textContent;
    let realMode = 'linear';
    // update status
    if(mode === "LogScale"){
        mode = "LinearScale";
        realMode = 'linear';
    }else{
        mode = "LogScale";
        realMode = 'logarithmic';
    }
    // callback
    tgtEle.textContent = mode;
    let tgtEles = document.getElementsByTagName("canvas")
    for(let i=0;i<tgtEles.length;i++){
        let ctx = tgtEles[i].getContext('2d');
        let chart = Chart.getChart(ctx);
        chart.options.scales.yAxis.type = realMode;
        chart.update();
    }
    console.log("upChartsScale : finished, cur. mode=", mode)
    return;
}

function upChartsIntersect(tgtEle){
    let mode = tgtEle.textContent;
    let realMode = 'nearest';
    // update status
    if(mode === "byPoint"){
        mode = "byTime";
        realMode = 'index';
    }else{
        mode = "byPoint";
        realMode = 'nearest';
    }
    // callback
    tgtEle.textContent = mode;
    let tgtEles = document.getElementsByTagName("canvas")
    for(let i=0;i<tgtEles.length;i++){
        let ctx = tgtEles[i].getContext('2d');
        let chart = Chart.getChart(ctx);
        chart.options.interaction.intersect = false;
        chart.options.interaction.mode = realMode;
        chart.update();
    }
    console.log("upChartsInteract : finished, cur. mode=", mode)
    return;
}

function upChartsByDates(){
    let startDT = document.getElementById("filterStartDate").value;
    let endDT = document.getElementById("filterEndDate").value;
    console.log(startDT, endDT)
    let tgtEles = document.getElementsByTagName("canvas")
    for(let i=0;i<tgtEles.length;i++){
        let ctx = tgtEles[i].getContext('2d');
        let chart = Chart.getChart(ctx);
        // if(startDT !== ""){ chart.options.scales.xAxis.suggestedMin = startDT; }
        // if(endDT !== ""){ chart.options.scales.xAxis.suggestedMax = endDT; }
        if(startDT !== ""){ chart.options.scales.xAxis.min = startDT; }
        if(endDT !== ""){ chart.options.scales.xAxis.max = endDT; }
        chart.update();
    }
    console.log("upChartsByDates : finished.")
    return;
}

function upChartsToBeforeDays(days){
    let tgtEles = document.getElementsByTagName("canvas")
    for(let i=0;i<tgtEles.length;i++){
        let ctx = tgtEles[i].getContext('2d');
        let chart = Chart.getChart(ctx);
        // console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
        if(chart.data.datasets.length > 1){
            let maxDateTime = chart.data.datasets[0].data[chart.data.datasets[0].data.length-1].x;
            let minDateTime = maxDateTime;
            for(let i=1;i<chart.data.datasets.length;i++){
                // console.log("  Compares: ", maxDateTime, chart.data.datasets[i].data[chart.data.datasets[i].data.length-1].x)
                if(maxDateTime < chart.data.datasets[i].data[chart.data.datasets[i].data.length-1].x){
                    maxDateTime = chart.data.datasets[i].data[chart.data.datasets[i].data.length-1].x;
                }else{}
            }
            // console.log("max/minTime:", typeof(maxDateTime), maxDateTime, minDateTime)
            minDateTime = new Date(maxDateTime.getTime() - days*(24+8)*60*60*1000)
            chart.options.scales.xAxis.min = minDateTime;
            chart.update();
        }else{}
    }
    console.log("upChartsToBeforeDays : finished.")
    return;
}

function myListenChartClick(tgtCanvas, evt){
    let ctx = tgtCanvas.getContext('2d');
    let chart = Chart.getChart(ctx);
    let actPoints = chart.getElementsAtEventForMode(evt, 'nearest', chart.options);

    if(actPoints.length == 0) return;

    let firstPoint = actPoints[0];
    let dsI = firstPoint.datasetIndex;
    let dI = firstPoint.index;
    let unique = chart.data.datasets[dsI].data[dI].unique;
    let prjN = document.getElementById("detailProject").textContent
    ////
    document.getElementById("outDetail2").innerHTML = "THERE IS NOTHING HERE";
    document.getElementById("observer3").style.display = "block";
    
    // -> make an http request() to get summary info firstly
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            let sumStr = this.responseText;
            //
            let addEle = document.createElement("div");
            addEle.innerHTML = sumStr;
            // update for the detail session (unique)
            console.log(addEle.childNodes[0].getElementsByTagName("tr")[1])
            // myUpDetail_session_core(tgtPrjN, sessionUnique, addEle.childNodes[0].getElementsByTagName("tr")[1]);
            myUpDetail_session_core(prjN, unique, addEle.childNodes[0].getElementsByTagName("tr")[1]);
        }
    };
    xmlhttp.open("GET", "upDetailPVPI.php?q="+prjN+"&unique="+unique, true)
    xmlhttp.send();

    ////
    console.log("myListenChartClick : finished.")
    return;
}

// ====================================
function toggle_firstStatus(clkE){
    let topE = clkE.parentNode.parentNode;
    if(clkE.innerText === "chevron_right"){
        clkE.innerText = "chevron_left";
        firstStatus.classList.remove("w3-show");
    }else{
        clkE.innerText = "chevron_right";
        firstStatus.classList.add("w3-show");
    }
}

// ====================================
function setCookie(cname, cvalue, exdays) {
    const d = new Date();
    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
    let expires = "expires="+d.toUTCString();
    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}
  
function getCookie(cname) {
    let name = cname + "=";
    let ca = document.cookie.split(';');
    for(let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
        }
    }
    return "";
}
  
function checkCookie() {
    let user = getCookie("username");
    if (user != "") {
    } else {
        user = prompt("Hi! Who are you?! :", "");
        if (user != "" && user != null) {
            setCookie("username", user, 7);
        } else {
            user = "Poor guy!";
        }
    }
    // update wherever needed
    document.getElementById("userCallName").innerHTML = user ;
}

function myGetCookiesForQuickSetting(){
    // console.log(document.cookie)
    // => for IPName
    let username = getCookie("username");
    if(username === "" || username === "Poor guy!") return; // no affect
    
    let tgtEles = document.getElementById("chart_sel_IPName").getElementsByTagName("div");
    for(let i=0;i<tgtEles.length;i++){
        let label = tgtEles[i].getElementsByTagName("label")[0].textContent;
        let stt = getCookie("ipName::"+label);
        if(stt === "checked"){
            tgtEles[i].getElementsByTagName("input")[0].checked = true;
        }else if(stt === "none"){
            tgtEles[i].getElementsByTagName("input")[0].checked = false;
        }else{
            // donothing as for default
        }
    }
    // => for PVitems
    tgtEles = document.getElementById("chart_sel_PVitem").getElementsByTagName("div");
    for(let i=0;i<tgtEles.length;i++){
        let label = tgtEles[i].getElementsByTagName("label")[0].textContent;
        let stt = getCookie("PVItem::"+label);
        if(stt === "checked"){
            tgtEles[i].getElementsByTagName("input")[0].checked = true;
        }else if(stt === "none"){
            tgtEles[i].getElementsByTagName("input")[0].checked = false;
        }else{
            // donothing as for default
        }
    }
    console.log("myGetCookiesForQuickSetting: finished")
    return;
}

function mySetCookiesForQuickSetting(){
    let sttIPName = myGetCheckBoxLabelPairAllTypes(document.getElementById("chart_sel_IPName").getElementsByTagName("div"));
    let sttPVItem = myGetCheckBoxLabelPairAllTypes(document.getElementById("chart_sel_PVitem").getElementsByTagName("div"));
    let sttNetVer = myGetCheckBoxLabelPairAllTypes(document.getElementById("chart_sel_netVer").getElementsByTagName("div"));
    let sttUserLg = myGetCheckBoxLabelPairAllTypes(document.getElementById("chart_sel_userLogin").getElementsByTagName("div"));
    let sttEcoVer = myGetCheckBoxLabelPairAllTypes(document.getElementById("chart_sel_ecoVer").getElementsByTagName("div"));

    for (let ipName in sttIPName){
        let stt = sttIPName[ipName];
        if(ipName === "" || ipName === undefined) continue;
        setCookie("ipName::"+ipName, stt, 1);
    }

    for (let PVItem in sttPVItem){
        let stt = sttPVItem[PVItem];
        if(PVItem === "" || PVItem === undefined) continue;
        setCookie("PVItem::"+PVItem, stt, 7);
    }

    console.log("mySetCookiesForQuickSetting: finished")
    return;
}
// =====================================

function myTest(){
    console.log("myTest: finished")
    return;
}
// ##################################################### Global events
// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
    let aoChkID = ["observer", "observer2", "observer3", "myHelp"];
    for(let i=0;i<aoChkID.length;i++){
        if(event.target.id === aoChkID[i]
        || event.target.id === "mainNav"
        || event.target.textContent === "About"
        || event.target.textContent === "PVPI Services"
        || event.target.textContent === "Contact"
        ){
            document.getElementById(aoChkID[i]).style.display = "none";
            document.getElementById("counter_stat").style.display = "none";
        }
    }
    // console.log("window clicked on : ", "tag="+event.target.tagName, "id="+event.target.id)
}


// register a interval executing-function
setInterval(function(){upSumPVPI(1)},900000);//globally trigger a interval
setInterval(function(){chkNotification()},10000);//globally trigger a interval

FILE:: .//src_modules/PVPI_org/upDetailPVPI.php
<?php
    ############ function
    ### ->
    function myRtnPVItemLogStt(&$regItems, $dataObj,$itemPat, $cntPrtOut = "or"){
        $outStr = "<div class=\"w3-center\" style=\"min-width:60px\">";
        $flgYes = false;
        foreach ($dataObj as $item => $detail){
            if(! preg_match("/^$itemPat$/", $item)) continue;
            if($dataObj[$item] !== null){
                if($dataObj[$item]["logStatus"] === "logInd=OK" && $dataObj[$item]["simpleOutput"] !== "n/a"){
                    if($dataObj[$item]["simpleOutput"] === "CORRECT"
                    || $dataObj[$item]["simpleOutput"] === "PASS"){
                        $outStr = $outStr .  "<i class=\"material-icons w3-text-green\">sentiment_very_satisfied</i><br><span style=\"display:block;margin:0;font-size:8px\">".$dataObj[$item]["simpleOutput"]."<span>";
                    }elseif($dataObj[$item]["simpleOutput"] === "INCORRECT"
                         || $dataObj[$item]["simpleOutput"] === "FAIL"){
                        $outStr = $outStr .  "<i class=\"material-icons w3-text-purple\">sentiment_very_dissatisfied</i><br><span style=\"display:block;margin:0;font-size:8px\">".$dataObj[$item]["simpleOutput"]."<span>";
                    }else{
                        if($cntPrtOut === "or"){
                            $outStr = $outStr .  "<i class=\"material-icons w3-text-blue\">check_circle</i><br><span style=\"display:block;margin:0;font-size:8px\">".$dataObj[$item]["simpleOutput"]."<span>";
                        }else{
                            $outStr = $outStr .  "<i class=\"material-icons w3-text-blue w3-small\">check_circle</i><span style=\"font-size:8px\">".$dataObj[$item]["simpleOutput"]."<span>";
                        }
                    }
                }else{
                    if($cntPrtOut === "or"){
                        $outStr = $outStr .  "<i class=\"material-icons w3-text-red\">error</i>";
                    }else{
                        $outStr = $outStr .  "<i class=\"material-icons w3-text-red w3-small\">error</i><span style=\"font-size:8px\">".strtoupper(preg_replace("/^run_/","",$item))."<span>";
                    }
                }
            }else{
                $outStr = $outStr . "<i class=\"material-icons w3-text-gray\">remove_circle</i>";#didn't involved
            }
            $regItems[] = $item;#register the item for use of others later
            $flgYes = true;
        }
        if($flgYes === false) {
            $outStr = $outStr . "<i class=\"material-icons w3-text-gray\">remove_circle</i>";#didn't involved
        }else{}
        $outStr = $outStr . "</div>";
        return $outStr;
    }
    ### ->
    function myRtnPVItemLogStt_orItems(&$regItems, $dataObj,$aoItems){
        $finalRtnValue = "n/a";
        foreach ($aoItems as $item){
            $finalRtnValue = myRtnPVItemLogStt($regItems,$dataObj,$item, "or");
            if(preg_match("/remove_circle/",$finalRtnValue)){
                #keep going
            }else{
                break;
            }
        }
        return $finalRtnValue;
    }
    ### ->
    function myRtnPVItemLogStt_andItems(&$regItems, $dataObj,$aoItems){
        $finalRtnValue = "";
        foreach ($aoItems as $item){
            $tmpv = myRtnPVItemLogStt($regItems,$dataObj,$item, "and");
            if(preg_match("/remove_circle/",$tmpv)){
                #keep going
            }else{
                $finalRtnValue = $finalRtnValue . "<div>";
                $finalRtnValue = $finalRtnValue .  $tmpv;
                $finalRtnValue = $finalRtnValue . "</div>";
            }
        }
        if($finalRtnValue === ""){
            $finalRtnValue = "<div class=\"w3-center\" style=\"min-width:60px\">";
            $finalRtnValue = $finalRtnValue . "<i class=\"material-icons w3-text-gray\">remove_circle</i>";
            $finalRtnValue = $finalRtnValue . "</div>";
        }
        return $finalRtnValue;
    }
    ### ->
    function myRtnPVItemLogSttOthers(&$regItems, $dataObj){
        $content = "";
        $numb = 0;
        foreach ($dataObj as $item => $detail){
            if(in_array($item, $regItems)) continue;
            if(! preg_match("/^run_/", $item)) continue;
            $content .= "<div class=\"w3-block\">";
            $dispItem = strtoupper(preg_replace("/^run_/","",$item));
            $dispItem = preg_replace("/^DRC_/","", $dispItem);
            $dispItem = preg_replace("/^LVS_/","", $dispItem);
            if($dataObj[$item] !== null){
                // $content = $content . "<i>$item</i>";#
                if($dataObj[$item]["logStatus"] === "logInd=OK" && $dataObj[$item]["simpleOutput"] !== "n/a"){
                    if($dataObj[$item]["simpleOutput"] === "CORRECT"){
                        $content = $content .  "<i class=\"material-icons w3-text-green\">sentiment_very_satisfied</i><br><span style=\"display:block;margin:0;font-size:8px\">".$dataObj[$item]["simpleOutput"]."<span>";
                    }elseif($dataObj[$item]["simpleOutput"] === "INCORRECT"){
                        $content = $content .  "<i class=\"material-icons w3-text-purple\">sentiment_very_dissatisfied</i><br><span style=\"display:block;margin:0;font-size:8px\">".$dataObj[$item]["simpleOutput"]."<span>";
                    }else{
                        // $content = $content .  "<i class=\"material-icons w3-text-blue w3-small\">check_circle</i><span style=\"font-size:8px\">".$dispItem.":".$dataObj[$item]["simpleOutput"]."<span>";
                        $content = $content .  "<div class=\"w3-cell w3-black\" style=\"min-width:100px\"><i class=\"material-icons w3-text-blue w3-small\">check_circle</i><span style=\"font-size:8px\">".$dispItem.":".$dataObj[$item]["simpleOutput"]."</span></div>";
                    }
                }else{
                    $content = $content .  "<div class=\"w3-cell w3-black\" style=\"min-width:100px\"><i class=\"material-icons w3-text-red w3-small\">error</i><span style=\"font-size:8px\">".$dispItem."</span></div>";
                }
                $numb++;
            }else{
                $content = $content . "<i class=\"material-icons w3-text-gray\">remove_circle</i>";#didn't involved
            }
            $content .= "</div>";
            $regItems[] = $item;#register the item for use of others later
        }
        $outStr = "";
        if($content === ""){
            $outStr  = "<div class=\"w3-center\" style=\"min-width:60px\">";
            $outStr .= "<i class=\"material-icons w3-text-gray\">remove_circle</i>";#didn't involved
            $outStr .= "</div>";
        }else{
            $outStr  = "<div class=\"w3-dropdown-hover w3-margin-left w3-transparent\">";
            $outStr .= "<span class=\"w3-badge w3-yellow w3-cell w3-large\">$numb</span>";
            $outStr .= "<div class=\"w3-dropdown-content w3-align-left w3-animate-opacity w3-round\" style=\"min-width:60px;right:70%;top:70%\">";
            $outStr .= $content;
            $outStr .= "</div></div>";
        }
        return $outStr;
    }
    ### ->
    function myOutDetailSimpleHeader(){
        # -> output the row in table
        echo "<tr>";
        echo "<th>" . "unique" . "</th>";
        echo "<th style=\"display:none\">" . "login name" . "</th>";
        // echo "<th>" . "host" . "</th>";
        echo "<th>" . "Chip/IP" . "</th>";
        echo "<th>" . "DATE" . "</th>";
        echo "<th>" . "startAt" . "</th>";
        echo "<th>" . "TAT(h)" . "</th>";
        echo "<th class=\"w3-tiny w3-center w3-hover-shadow w3-text-black\" style=\"min-width:60px\" onclick=\"myUpFilter(this)\">" . "Done?" ."</th>";
        echo "<th class=\"w3-tiny w3-center w3-hover-shadow w3-text-black\" style=\"min-width:60px\" onclick=\"myUpFilter(this)\">" . "prOut" .  "</th>";
        echo "<th class=\"w3-tiny w3-center w3-hover-shadow w3-text-black\" style=\"min-width:60px\" onclick=\"myUpFilter(this)\">" . "cdlcat" .  "</th>";
        echo "<th class=\"w3-tiny w3-center w3-hover-shadow w3-text-black\" style=\"min-width:60px\" onclick=\"myUpFilter(this)\">" . "merge1" .  "</th>";
        echo "<th class=\"w3-tiny w3-center w3-hover-shadow w3-text-black\" style=\"min-width:60px\" onclick=\"myUpFilter(this)\">" . "dmyGDS" .  "</th>";
        echo "<th class=\"w3-tiny w3-center w3-hover-shadow w3-text-black\" style=\"min-width:60px\" onclick=\"myUpFilter(this)\">" . "merge2" .  "</th>";
        // echo "<th class=\"w3-tiny w3-center w3-hover-shadow w3-text-black\" style=\"min-width:60px\" onclick=\"myUpFilter(this)\">" . "merge3" .  "</th>";
        echo "<th class=\"w3-tiny w3-center w3-hover-shadow w3-text-black\" style=\"min-width:60px\" onclick=\"myUpFilter(this)\">" . "FEOL" .  "</th>";
        echo "<th class=\"w3-tiny w3-center w3-hover-shadow w3-text-black\" style=\"min-width:60px\" onclick=\"myUpFilter(this)\">" . "BEOL" .  "</th>";
        echo "<th class=\"w3-tiny w3-center w3-hover-shadow w3-text-black\" style=\"min-width:60px\" onclick=\"myUpFilter(this)\">" . "LVS" .  "</th>";
        echo "<th class=\"w3-tiny w3-center w3-hover-shadow w3-text-black\" style=\"min-width:60px\" onclick=\"myUpFilter(this)\">" . "Others" .  "</th>";
        echo "</tr>";
    }
    ### ->
    function myOutDetailSimple01($unique, $stt, $detailDone, $detailOngo,$prjN){
        # -> manipulate data
        $tmpa = preg_split("/__/", $unique);
        $userN = $tmpa[0];
        $hostN = $tmpa[1];
        $startAt = $tmpa[2];
        $startAtStr = date("Y-m-d G:i",$startAt);
        $TATinHours = "n/a";
        if($stt === "Ongoing"){
            $TATinHours = sprintf("%.2f",(time() - $startAt)/3600);
        } else {
            $TATinHours = sprintf("%.2f",$detailDone[$unique]["TAT"]/3600);
        }
        $topLayName = "n/a";
        if($detailDone[$unique]["TOP_LAYOUT_NAME"] !== null){
            $topLayName = $detailDone[$unique]["TOP_LAYOUT_NAME"];
        }elseif($detailOngo[$unique]["TOP_LAYOUT_NAME"] !== null){
            $topLayName = $detailOngo[$unique]["TOP_LAYOUT_NAME"];
        }else{}
        $chipIP = "n/a";
        if($detailDone[$unique]["CHIP_OR_IP"] !== null){
            $chipIP = $detailDone[$unique]["CHIP_OR_IP"];
        }elseif($detailOngo[$unique]["CHIP_OR_IP"] !== null){
            $chipIP = $detailOngo[$unique]["CHIP_OR_IP"];
        }else{}
        $DATE = "n/a";#as version of gdsmerge#1
        if($detailDone[$unique]["DATE"] !== null){
            $DATE = $detailDone[$unique]["DATE"];
        }elseif($detailOngo[$unique]["DATE"] !== null){
            $DATE = $detailOngo[$unique]["DATE"];
        }else{}

        $regItems = array();
        $prOut  = myRtnPVItemLogStt_orItems($regItems,$detailDone[$unique], array("run_pr_out_icc2", "run_pr_out_innv"));
        $cdlcat = myRtnPVItemLogStt($regItems,$detailDone[$unique], "run_make_cdl");
        $merge1 = myRtnPVItemLogStt($regItems,$detailDone[$unique], "run_gds_merge1");
        $dmyGDS = myRtnPVItemLogStt_andItems($regItems,$detailDone[$unique], array("run_dodpo", "run_dmvia", "run_dwpp"));
        $merge2 = myRtnPVItemLogStt($regItems,$detailDone[$unique], "run_gds_merge2");
        $merge3 = myRtnPVItemLogStt($regItems,$detailDone[$unique], "run_gds_merge3");
        $feol = myRtnPVItemLogStt($regItems,$detailDone[$unique], "run_drc_.*feol");
        $beol = myRtnPVItemLogStt($regItems,$detailDone[$unique], "run_drc_.*beol");
        $lvs = myRtnPVItemLogStt($regItems,$detailDone[$unique], "run_lvs_.*mainlvs");
        $others = myRtnPVItemLogSttOthers($regItems,$detailDone[$unique]);

        # -> get ongoing 
        $ongoingStr = "";
        if($detailOngo[$unique]["running"] !== null){
            $countOngoingJobId = false;
            $ongoStt     = $detailOngo[$unique]["running"]["ongoStt"];
            foreach ($detailOngo[$unique] as $jobId => $detailInfo){
                if($jobId === "running"){
                }elseif(! preg_match("/^\d+$/",$jobId)){
                }else{
                    $onGoJobName = $detailOngo[$unique][$jobId]["job_name"];
                    if($onGoJobName !== "n/a"){
                        if(preg_match("/^mts.*/", $onGoJobName)){
                        }else{
                            $ongoingStr = $ongoingStr . " " . $onGoJobName;
                            $ongoingStr = $ongoingStr . " " . " ($ongoStt)";
                            # => update necessary variables based on JobName
                            $tmpStr = "<div class=\"w3-center\" style=\"min-width:60px\"><i class=\"material-icons w3-text-yellow\">pool</i></div>";
                            if(preg_match("/feol/i", $onGoJobName)
                            ){
                                $feol = $tmpStr;
                            }elseif(preg_match("/beol/i", $onGoJobName)
                            ){
                                 $beol = $tmpStr;
                            }elseif(preg_match("/merge_1/i", $onGoJobName)
                            ){
                                 $merge1 = $tmpStr;
                            }elseif(preg_match("/dmy_/i", $onGoJobName)
                            ){
                                 $dmyGDS = $tmpStr;
                            }elseif(preg_match("/merge_2/i", $onGoJobName)
                            ){
                                 $merge2 = $tmpStr;
                            }elseif(preg_match("/lvs_comp/i", $onGoJobName)
                                ||  preg_match("/lvs_ext/i", $onGoJobName)
                            ){
                                 $lvs = $tmpStr;
                            }elseif(preg_match("/innv_extraction/i", $onGoJobName)
                                 || preg_match("/ndm_extraction/i", $onGoJobName)
                                ){
                                 $prOut = $tmpStr;
                            }elseif(preg_match("/cdl/i", $onGoJobName)
                                 || preg_match("/v2lvs/i", $onGoJobName)
                                ){
                                 $cdlcat = $tmpStr;
                            }else{}
                            $countOngoingJobId = true;
                        }
                    }else{}
                }
            }
            # => in case there is no registered ongoing jobId, we check on the runningDir
            if($countOngoingJobId === false){
                $runningDir  = $detailOngo[$unique]["running"]["sub_cwd"];#try to get info if there is pending (not submitted-yet job)
                $runningDirIndicator = "";
                if($runningDir !== null){
                    $tmpa = preg_split('/\//', $runningDir);
                    $ind1 = $tmpa[count($tmpa)-1];
                    $ind2 = $tmpa[count($tmpa)-2];
                    $tmpV = "";
                    if(preg_match('/^\d{6}_\d{2}$/',$ind1)){
                        $tmpa = preg_split('/_/', $ind2);
                        $runningDirIndicator = $tmpa[0];
                    }else{
                        $tmpa = preg_split('/_/', $ind1);
                        $runningDirIndicator = $tmpa[0];
                    }
                    # => update necessary variables based on JobName
                    $tmpStr = "<div class=\"w3-center\" style=\"min-width:60px\"><i class=\"material-icons w3-text-yellow\">pool</i></div>";
                    if(preg_match("/feol/i", $runningDirIndicator)){
                        $feol = $tmpStr;
                    }elseif(preg_match("/beol/i", $runningDirIndicator)){
                            $beol = $tmpStr;
                    }elseif(preg_match("/gdsmerge_01/i", $runningDirIndicator)){
                            $merge1 = $tmpStr;
                    }elseif(preg_match("/dummy/i", $runningDirIndicator)){
                            $dmyGDS = $tmpStr;
                    }elseif(preg_match("/gdsmerge_02/i", $runningDirIndicator)){
                            $merge2 = $tmpStr;
                    }elseif(preg_match("/lvs_/i", $runningDirIndicator)){
                            $lvs = $tmpStr;
                    }elseif(preg_match("/pr_out/i", $runningDirIndicator)){
                            $prOut = $tmpStr;
                    }elseif(preg_match("/lvsnet/i", $runningDirIndicator)){
                            $cdlcat = $tmpStr;
                    }else{}
                    $ongoingStr = $ongoingStr . " " . "dir($runningDirIndicator:$ongoStt)";
                }else{}
            }else{}
        }

        # -> output the row in table
        echo "<tr onclick=\"myUpDetail2(this); document.getElementById('observer3').style.display='block'\">";
        echo "<td>" . preg_replace("/__/", " " , $unique) . "</td>";
        echo "<td style=\"display:none\">" . $userN . " / " . $prjN . "</td>";
        // echo "<td>" . $hostN . "</td>";
        echo "<td>" . $chipIP . "</td>";
        echo "<td>" . $DATE . "</td>";
        echo "<td>" . $startAtStr . "</td>";
        echo "<td>" . $TATinHours . "</td>";
        if($stt === "Ongoing"){
            // echo "<td><div class=\"w3-center\" style=\"min-width:60px\"><i class=\"material-icons\">pool</i><span style=\"display:block;margin:0;font-size:8px\">".$ongoingStr."<span></div></td>";
            //echo "<td><div class=\"w3-center\" style=\"min-width:60px\"><img src=\"assets/PVPI/swimming_3.gif\" alt=\"ONGO\" style=\"width:30px\"><span style=\"display:block;margin:0;font-size:8px\">".$ongoingStr."<span></div></td>";
            echo "<td><div class=\"w3-center\" style=\"min-width:60px\">";
                echo "<img src=\"assets/PVPI/ongoing_1.gif\" alt=\"ONGO\" style=\"width:30px\">";
                echo "<span style=\"display:block;margin:0;font-size:8px\">".$ongoingStr."<span>";
            echo "</div></td>";
        }else{
            echo "<td><div class=\"w3-center\" style=\"min-width:60px\"><i class=\"material-icons\">event_available</i></div></td>";
        }
        #echo "<td><i class=\"material-icons\">" . (($stt === "Ongoing") ? "pool" : "event_available") ."</i></td>";
        echo "<td>" . $prOut .  "</td>";
        echo "<td>" . $cdlcat .  "</td>";
        echo "<td>" . $merge1 .  "</td>";
        echo "<td>" . $dmyGDS .  "</td>";
        echo "<td>" . $merge2 .  "</td>";
        // echo "<td>" . $merge3 .  "</td>";
        echo "<td>" . $feol .  "</td>";
        echo "<td>" . $beol .  "</td>";
        echo "<td>" . $lvs .  "</td>";
        echo "<td>" . $others .  "</td>";
        echo "</tr>";
    }

    ############ MAIN
    $outText = "Nothing to show";
    $tmpText = "";#to control some temp text
    $outData = null;
    $flgDataFinished = false;
    $flgDataOngoing = false;
    $tgtd = "../../data/PVPI_org";

    $prjN = $_GET["q"];//
    $tgtUnique = $_GET["unique"];//
    $ongoingOnly = $_GET["ongoingOnly"];//
    $maxN = $_GET["maxN"];
    // echo "HELLO '$tgtUnique'";

    // default value if not specified
    if($prjN === null) $prjN = "all";
    if($maxN === null) $maxN = 100;

    // $aoTgtf = glob("$tgtd/detailSum_${prjN}_PVexeLog.json");
    // $aoOngoingf = glob("$tgtd/${prjN}_PVexeOngoingLog_updated.json");
    if($prjN === "all"){
        $aoTgtf = glob("$tgtd/detailSum_*_PVexeLog.json");
        $aoOngoingf = glob("$tgtd/*_PVexeOngoingLog_updated.json");
    }else{
        $aoTgtf = glob("$tgtd/detailSum_{$prjN}_PVexeLog.json");
        $aoOngoingf = glob("$tgtd/{$prjN}_PVexeOngoingLog_updated.json");
    }
    $outText = ""; #reset
    echo "<table class=\"w3-table-all w3-card-4 w3-hoverable w3-small\">";
    myOutDetailSimpleHeader();

    # => working with ongoing sessions
    if(count($aoOngoingf) > 0){
        for($i=0;$i<count($aoOngoingf);$i++){
            $ongoingf = $aoOngoingf[$i];
            if($fh = fopen($ongoingf, "r")) {
                $tmpText = $tmpText . $ongoingf . "<br>";
                $dspPrjN = $prjN;
                if($prjN === "all"){
                    $dspPrjN = preg_replace('/data\//', "", $ongoingf);
                    $dspPrjN = preg_replace('/_PVexeOngoingLog_updated.json/', "", $dspPrjN);
                }
                // -> json file interacting
                $outData = json_decode(fread($fh, filesize($ongoingf)), true);
                fclose($fh);
                foreach ($outData as $cntKey => $tmpInf) {
                    if($cntKey === "ongoing"){
                        foreach ($tmpInf as $unique => $detailEachSession){
                            if($tgtUnique === null || $tgtUnique === ""){
                                myOutDetailSimple01($unique,"Ongoing",$outData["ongoingdone"], $outData["ongoing"],$dspPrjN);
                            }else{
                                if($unique === $tgtUnique){
                                    myOutDetailSimple01($unique,"Ongoing",$outData["ongoingdone"], $outData["ongoing"],$dspPrjN);
                                }else{}
                            }
                        }
                    }else{}
                }
                $flgDataOngoing = true;
            }else{}
        }
    }else{}

    if($ongoingOnly === "yes"){ return; }

    # => working with finished sessions
    if (count($aoTgtf) > 0) {
        for($i=0;$i<count($aoTgtf);$i++){
            $tmpText = $tmpText . $aoTgtf[$i] . "<br>";
            // -> json file interacting
            if($fh = fopen($aoTgtf[$i], "r")){
                $fWholeStr = fread($fh, filesize($aoTgtf[$i]));
                // $fWholeStr = "{";
                // while(!feof($fh)){
                //     $lineStr = fgets($fh);
                //     if(preg_match('/^{$/', $lineStr) > 0){ 
                //         continue;
                //     }else{}
                //     $lineStr = preg_replace('/^}$/', ",", $lineStr);
                //     $fWholeStr = $fWholeStr . $lineStr;
                // }
                fclose($fh);
            } else {
                echo "<div><p>Cannot read from file</p></div>";
                continue;
            }
            // $fWholeStr = preg_replace('/,\s*$/',"",$fWholeStr);
            // $fWholeStr = $fWholeStr . "}";
            // $outText = $outText . $fWholeStr;
            $dspPrjN = $prjN;
            if($prjN === "all"){
                $dspPrjN = preg_replace('/data\/detailSum_/', "", $aoTgtf[$i]);
                $dspPrjN = preg_replace('/_PVexeLog.json/', "", $dspPrjN);
            }
            $tmpO = json_decode($fWholeStr, true);//decode the data
            foreach ($tmpO as $unique => $detail){
                $outData[$unique] = $detail;
                $outData[$unique]["_prjN_"] = $dspPrjN;
            }
        }
        // -> try to make a sorted data by submitting-time
        $sortOutData = null;
        foreach ($outData as $unique => $detailEachSession){
            $aoInfo1 = preg_split("/__/", $unique);
            $sortOutData["$unique"] = $aoInfo1[2];
        }
        arsort($sortOutData);

        // -> out info
        $counted = 0;
        foreach ($sortOutData as $unique => $sortedValue){
            if($tgtUnique === null || $tgtUnique === ""){
                $counted = $counted + 1;
                if($counted > $maxN) {break;}
                myOutDetailSimple01($unique,"Done",$outData, null,$outData[$unique]["_prjN_"]);
            }else{
                if($unique === $tgtUnique){
                    $counted = $counted + 1;
                    // if($counted > 10) {break;}
                    myOutDetailSimple01($unique,"Done",$outData, null,$outData[$unique]["_prjN_"]);
                }else{}
            }
        }
        $flgDataFinished = true;
    }else{ }

    if($flgDataFinished === false && $flgDataOngoing === false) {
        echo "<div><p>Cannot find any data for $prjN</p></div>";
    } else {
        echo "</table>";
    }

    // echo $outText;
    return;
?>

FILE:: .//src_modules/PVPI_org/upDetailPVPI4ChartsWrapper.php
<?php
    // ini_set('display_errors', 1);
    // ini_set('display_startup_errors', 1);
    // error_reporting(E_ALL);

    ############ function
    function myUpKeyCount($key, &$arr){
        if(! array_key_exists($key, $arr)) $arr[$key] = 0;
        $arr[$key] = $arr[$key] +1 ;
        return;
    }

    ############ MAIN
    $prjN = $_GET["q"];//
    $outData = null;
    # => init the control data required
    $cntData = array();
    $cntData["netVer"] = array();
    $cntData["ecoVer"] = array();
    $cntData["ipName"] = array();
    $cntData["PVitem"] = array();
    $cntData["userLogin"] = array();
    $noSessions = 0;
    $noSessionsValid = 0;#got any meaningful result
    $tgtd = "../../data/PVPI_org";

    # #### get data from detailSum for controlling output selecting part
    // $aoTgtf = glob("data/detailSum_${prjN}_PVexeLog.json");
    // # => working with finished sessions --- extracting data
    // if (count($aoTgtf) > 0) {
    //     for($i=0;$i<count($aoTgtf);$i++){
    //         // -> json file interacting
    //         if($fh = fopen($aoTgtf[$i], "r")){
    //             $fWholeStr = fread($fh, filesize($aoTgtf[$i]));
    //             fclose($fh);
    //         } else {
    //             echo "<div><p>Cannot read from file</p></div>";
    //         }
    //     }
    //     $outData = json_decode($fWholeStr, true);

    //     #### -> update control data
    //     # ->
    //     foreach (array("netVer", "ecoVer") as $tmpv){
    //         if(array_key_exists($outData[$unique][$tmpv], $outData[$unique])) myUpKeyCount($outData[$unique][$tmpv], $cntData[$tmpv]);
    //     }
    //     # ->
    //     foreach ($outData as $unique => $info){
    //         $noSessions = $noSessions + 1;
    //         $chipOrIP = $info["CHIP_OR_IP"];
    //         if($chipOrIP === "") {
    //             echo "<p>dbg: unique='$unique'</p>";
    //             $chipOrIP = $info["TOP_LAYOUT_NAME"];
    //         }
    //         if($chipOrIP === "") $chipOrIP = $info["PRODUCT"];
    //         myUpKeyCount($chipOrIP,$cntData["ipName"]);
    //         foreach ($info as $runK => $detailSession){
    //             if(preg_match("/^run_/",$runK)){
    //                 myUpKeyCount($runK, $cntData["PVitem"]);
    //             }elseif($runK === "netVer"
    //                 ||  $runK === "ecoVer"
    //             ){
    //                 myUpKeyCount($detailSession, $cntData[$runK]);
    //             }else{}
    //         }
    //     }
    // }else{ }
    // var_dump($cntData);

    # #### get all detail data for detail displaying purpose
    $dataDetail = null;
    $aoTgtf = glob("$tgtd/detailInd_{$prjN}_PVexeLog_*");
    if (count($aoTgtf) > 0) {
        for($i=0;$i<count($aoTgtf);$i++){
            // -> json file interacting
            if($fh = fopen($aoTgtf[$i], "r")){
                $fWholeStr = fread($fh, filesize($aoTgtf[$i]));
                fclose($fh);
                # => make it json data
                $tmpData = json_decode($fWholeStr, true);
                if($tmpData === null) continue;
                # => filter only neccessary info
                foreach ($tmpData as $unique => $detail){
                    if($unique === null) continue;
                    # =>
                    if($dataDetail !== null &&  array_key_exists($unique, $dataDetail)){
                        #only register first met, maybe this one was reg many times (due to time-line)
                    }else{
                        $noSessions = $noSessions+1;
                        $flgValidSession = false;
                        # -> common info
                        foreach (array("CHIP_OR_IP", "TOP_LAYOUT_NAME", "netVer", "ecoVer", "DATE") as $keyw){
                            if(array_key_exists($keyw, $detail)){
                                $dataDetail[$unique][$keyw] = $detail[$keyw];
                            }else{
                                $dataDetail[$unique][$keyw] = "n/a";
                            }
                        }
                        $tmpa = preg_split("/__/", $unique);
                        $userLogin = $tmpa[0];
                        # -> run_*
                        foreach ($detail as $runK => $detail2){
                            if(! (preg_match("/^run_drc/",$runK) || preg_match("/^run_lvs/",$runK) || preg_match("/^run_lvl/", $runK) ) ) continue;
                            # only nececesary info (PRESERVER)
                            if(! array_key_exists("subrun", $detail2)) continue;
                            if(count($detail2["subrun"])<=0) continue;
                            if(preg_match("/^run_drc/",$runK) || preg_match("/^run_lvl/",$runK)){
                                if(! array_key_exists("moreInfo", $detail2["subrun"][0])) continue;
                                $sortK = $detail2["subrun"][0]["sortKey"];
                                if(preg_match("/run_lvl_fx/", $runK)) $sortK .= "_FX";
                                if(! array_key_exists("DRC_noResults", $detail2["subrun"][0]["moreInfo"])) continue;
                                $tmpv = $detail2["subrun"][0]["moreInfo"]["DRC_noResults"];
                                if(preg_match_all("/\d+/", $tmpv, $matches)){
                                    if(count($matches) > 0){
                                        // $dataDetail[$unique][$sortK] = $matches[0][1];
                                        $dataDetail[$unique][$sortK] = $matches[0][0];
                                    }else{
                                        $dataDetail[$unique][$sortK] = $tmpv;
                                    }
                                }else{
                                    $dataDetail[$unique][$sortK] = $tmpv;
                                }
                                myUpKeyCount($sortK,$cntData["PVitem"]);
                                $flgValidSession = true;
                            }else{
                                foreach ($detail2["subrun"] as $subrun){
                                    if (! array_key_exists("moreInfo", $subrun)) continue;
                                    $sortK = $subrun["sortKey"];
                                    if(preg_match("/COMP/",$sortK)){
                                        $dataDetail[$unique][$sortK] = $subrun["moreInfo"]["compare"];
                                        myUpKeyCount($sortK,$cntData["PVitem"]);
                                        $flgValidSession = true;
                                    }else{
                                        $tmpv = $subrun["moreInfo"]["ERC_noResults"];
                                        if(preg_match_all("/\d+/", $tmpv, $matches)){
                                            if(count($matches) > 0){
                                                // $dataDetail[$unique][$sortK] = $matches[0][1];
                                                $dataDetail[$unique][$sortK] = $matches[0][0];
                                            }else{
                                                $dataDetail[$unique][$sortK] = $tmpv;
                                            }
                                        }else{
                                            $dataDetail[$unique][$sortK] = $tmpv;
                                        }
                                        myUpKeyCount($sortK,$cntData["PVitem"]);
                                        $flgValidSession = true;
                                    }
                                }
                            }
                        }
                        if($flgValidSession===true){
                            // myUpKeyCount($detail["CHIP_OR_IP"],$cntData["ipName"]); // use TOP_LAYOUT_NAME for sure
                            myUpKeyCount($detail["TOP_LAYOUT_NAME"],$cntData["ipName"]);
                            myUpKeyCount($detail["netVer"],$cntData["netVer"]);
                            myUpKeyCount($detail["ecoVer"],$cntData["ecoVer"]);
                            myUpKeyCount($userLogin,$cntData["userLogin"]);
                            $noSessionsValid=$noSessionsValid+1;
                        }else{
                            $dataDetail[$unique] = null;
                        }
                    }

                    # => register the info
                }
            } else {
                echo "<div><p>Cannot read from file</p></div>";
            }
        }
    }else{ }

    ### => output the wrapper
    # -> stat
    echo "<div class=\"w3-row w3-border-top w3-border-bottom w3-light-grey w3-block\" style=\"margin:0;padding:0;font-size:10px\">";
    echo    "<div class=\"w3-col s2 w3-center\" style=\"min-width:40px\">Total #sessions/valid: ". $noSessions . "/" . $noSessionsValid . "</div>";
    echo    "<div class=\"w3-col s2 w3-center\" style=\"min-width:40px\">Total #IP/CHIP: ". count(array_keys($cntData["ipName"])) . "</div>";
    echo    "<div class=\"w3-col s2 w3-center\" style=\"min-width:40px\">Total #netVers: ". count(array_keys($cntData["netVer"])) . "</div>";
    echo    "<div class=\"w3-col s2 w3-center\" style=\"min-width:40px\">Total #users: ". count(array_keys($cntData["userLogin"])) . "</div>";
    echo    "<div class=\"w3-col s2 w3-center\" style=\"min-width:40px\">Total #ecoVers: ". count(array_keys($cntData["ecoVer"])) . "</div>";
    echo    "<div class=\"w3-col s2 w3-center\" style=\"min-width:40px\">Total #PVitems: ". count(array_keys($cntData["PVitem"])) . "</div>";
    echo "</div>";
    
    # starting 3rt part
    echo "<div class=\"w3-block w3-row\">";
    ####################
    #       -> buttons/ checkbox/ at the left...
    echo    "<div class=\"w3-col s12 m12 l2\">";
    #           -> 2 buttons
    echo        "<div class=\"w3-center w3-row\">";
    // echo            "<div class=\"w3-button w3-col s6\"><i class=\"material-icons\">file_download</i></div>";
    echo            "<div class=\"w3-button w3-col s12\" onclick=\"myGenCharts();mySetCookiesForQuickSetting()\"><i class=\"material-icons\">sync</i></div>";
    echo        "</div>";
    echo        "<div class=\"w3-center w3-row\">";
    echo            "<div class=\"w3-button w3-border w3-tiny w3-padding-small w3-col s6\" onclick=\"upChartsScale(this)\" id=\"chartLinearOrLog\">LinearScale</div>";
    echo            "<div class=\"w3-button w3-border w3-tiny w3-padding-small w3-col s6\" onclick=\"upChartsIntersect(this)\" id=\"chartIntersect\">byPoint</div>";
    echo        "</div>";
    echo        "<div class=\"w3-center w3-row\">";
    echo            "<div class=\"w3-button w3-border w3-tiny w3-padding-small w3-col s3\" onclick=\"upChartsToBeforeDays(7)\">1Week</div>";
    echo            "<div class=\"w3-button w3-border w3-tiny w3-padding-small w3-col s3\" onclick=\"upChartsToBeforeDays(14)\">2Weeks</div>";
    echo            "<div class=\"w3-button w3-border w3-tiny w3-padding-small w3-col s3\" onclick=\"upChartsToBeforeDays(30)\">1Month</div>";
    echo            "<div class=\"w3-button w3-border w3-tiny w3-padding-small w3-col s3\" onclick=\"upChartsToBeforeDays(60)\">2Months</div>";
    echo        "</div>";
    echo        "<div class=\"w3-center w3-row\">";
    echo            "<input class=\"w3-block w3-small\" type=\"datetime-local\" placeholder=\"start\" id=\"filterStartDate\" onchange=\"upChartsByDates()\">";
    echo            "<input class=\"w3-block w3-small\" type=\"datetime-local\" placeholder=\"end\" id=\"filterEndDate\" onchange=\"upChartsByDates()\">";
    echo        "</div>";
    echo        "<hr style=\"margin:0;color:red\">";
    #           -> ipName ########################
    echo        "<div class=\"w3-black w3-block\"><label>IP/CHIP</label><button onclick=\"myUpdateInside(this,'chart_sel_IPName')\" class=\"w3-button w3-padding-small w3-hover-red w3-tiny w3-right\">AllOn</button><button onclick=\"myUpdateInside(this,'chart_sel_IPName')\" class=\"w3-button w3-padding-small w3-hover-purple w3-right w3-tiny\">AllOff</button><button onclick=\"myUpdateInside(this,'chart_sel_IPName')\" class=\"w3-button w3-padding-small w3-hover-aqua w3-right w3-tiny\">Toggle</button></div>";
    echo        "<div class=\"w3-row\" id=\"chart_sel_IPName\">";
    ksort($cntData["ipName"]);
    foreach ($cntData["ipName"] as $ipName => $numb){
        // echo        "<div class=\"w3-col s3 m3 l6 w3-hover-shadow\"><input type=\"checkbox\" checked=\"checked\"><label onclick=\"myToggleInside(this.parentNode)\" class=\"w3-tiny w3-hover-red\" style=\"margin-right:3px\">$ipName</label></div>";
        echo        "<div class=\"w3-col s3 m3 l12 w3-hover-shadow w3-border-bottom w3-border-left\" style=\"overflow:hidden;text-overflow:ellipsis\"><input class=\"w3-left\" type=\"checkbox\"><label onclick=\"myToggleInside(this.parentNode)\" class=\"w3-tiny w3-hover-red\" style=\"margin-right:3px;overflow:hidden;text-overflow:ellipsis\">$ipName</label></div>";
    }; 
    echo        "</div>";
    echo        "<hr style=\"margin:0;\">";
    #           -> PV items
    echo        "<div class=\"w3-black w3-block\"><label>PV items</label><button onclick=\"myUpdateInside(this,'chart_sel_PVitem')\" class=\"w3-button w3-padding-small w3-hover-red w3-tiny w3-right\">AllOn</button><button onclick=\"myUpdateInside(this,'chart_sel_PVitem')\" class=\"w3-button w3-padding-small w3-hover-purple w3-right w3-tiny\">AllOff</button><button onclick=\"myUpdateInside(this,'chart_sel_PVitem')\" class=\"w3-button w3-padding-small w3-hover-aqua w3-right w3-tiny\">Toggle</button></div>";
    echo        "<div class=\"w3-row\" id=\"chart_sel_PVitem\">";
    ksort($cntData["PVitem"]);
    $aoItemDspVsReal = array();#array of info of displaying vs. real
    foreach ($cntData["PVitem"] as $PVitem => $numb){
        $dspStr = preg_replace("/^DRC_/","",$PVitem);
        $dspStr = preg_replace("/^LVS_/","",$dspStr);
        $dspStr = strtoupper($dspStr);
        $dspStr = preg_replace("/MAINLVS/", "LVS", $dspStr);
        $dspStr = preg_replace("/COMPARISON/", "CMP", $dspStr);
        $dspStr = preg_replace("/EXTRACTION/", "EXT", $dspStr);
        $tmpa = null;
        if(preg_match_all("/^[\d_]+(.*)/", $dspStr, $tmpa)){
            $dspStr = $tmpa[1][0];
        }else{}
        $aoItemDspVsReal[$dspStr][] = $PVitem;
    }
    
    foreach ($aoItemDspVsReal as $dspStr => $aoPVitem){
        if(preg_match("/FEOL|BEOL|LVS/",$dspStr)){
            // echo        "<div class=\"w3-col s3 m3 l6 w3-hover-shadow\"><input type=\"checkbox\" checked=\"checked\">";
            echo        "<div class=\"w3-col s3 m3 l6 w3-hover-shadow\"><input type=\"checkbox\">";
        }else{
            echo        "<div class=\"w3-col s3 m3 l6 w3-hover-shadow\"><input type=\"checkbox\">";
        }
        for($i=0;$i<count($aoPVitem);$i++){
            echo        "<span style=\"display:none\">$aoPVitem[$i]</span>";
            // echo        "<span class=\"w3-tiny\">[" . $i . "]" . $aoPVitem[$i] . "</span><br>";
        }
        echo        "<label class=\"w3-tiny\" style=\"margin-right:3px\">$dspStr</label></div>";
    }
    echo        "</div>";
    #           -> netVer
    echo        "<div class=\"w3-black w3-block\"><label>netVer</label><button onclick=\"myUpdateInside(this,'chart_sel_netVer')\" class=\"w3-button w3-padding-small w3-hover-red w3-tiny w3-right\">AllOn</button><button onclick=\"myUpdateInside(this,'chart_sel_netVer')\" class=\"w3-button w3-padding-small w3-hover-purple w3-right w3-tiny\">AllOff</button><button onclick=\"myUpdateInside(this,'chart_sel_netVer')\" class=\"w3-button w3-padding-small w3-hover-aqua w3-right w3-tiny\">Toggle</button></div>";
    echo        "<div class=\"w3-row\" id=\"chart_sel_netVer\">";
    ksort($cntData["netVer"]);
    foreach ($cntData["netVer"] as $netVer => $numb){
        echo        "<div class=\"w3-col s3 m3 l6 w3-hover-shadow\"><input type=\"checkbox\" checked=\"checked\"><label class=\"w3-tiny\">$netVer</label></div>";
    }; 
    echo        "</div>";
    echo        "<hr style=\"margin:0;\">";
    #           -> userLogin
    echo        "<div class=\"w3-black w3-block\"><label>userLogin</label><button onclick=\"myUpdateInside(this,'chart_sel_userLogin')\" class=\"w3-button w3-padding-small w3-hover-red w3-tiny w3-right\">AllOn</button><button onclick=\"myUpdateInside(this,'chart_sel_userLogin')\" class=\"w3-button w3-padding-small w3-hover-purple w3-right w3-tiny\">AllOff</button><button onclick=\"myUpdateInside(this,'chart_sel_userLogin')\" class=\"w3-button w3-padding-small w3-hover-aqua w3-right w3-tiny\">Toggle</button></div>";
    echo        "<div class=\"w3-row\" id=\"chart_sel_userLogin\">";
    ksort($cntData["userLogin"]);
    foreach ($cntData["userLogin"] as $userLogin => $numb){
        echo        "<div class=\"w3-col s3 m3 l6 w3-hover-shadow\"><input type=\"checkbox\" checked=\"checked\"><label class=\"w3-tiny\">$userLogin</label></div>";
    }; 
    echo        "</div>";
    echo        "<hr style=\"margin:0;\">";
    #           -> ecoVer
    echo        "<div class=\"w3-black w3-block\"><label>ecoVer</label><button onclick=\"myUpdateInside(this,'chart_sel_ecoVer')\" class=\"w3-button w3-padding-small w3-hover-red w3-tiny w3-right\">AllOn</button><button onclick=\"myUpdateInside(this,'chart_sel_ecoVer')\" class=\"w3-button w3-padding-small w3-hover-purple w3-right w3-tiny\">AllOff</button><button onclick=\"myUpdateInside(this,'chart_sel_ecoVer')\" class=\"w3-button w3-padding-small w3-hover-aqua w3-right w3-tiny\">Toggle</button></div>";
    echo        "<div class=\"w3-row\" id=\"chart_sel_ecoVer\">";
    krsort($cntData["ecoVer"]);
    foreach ($cntData["ecoVer"] as $ecoVer => $numb){
        echo        "<div class=\"w3-col s3 m3 l6 w3-hover-shadow\"><input  type=\"checkbox\" checked=\"checked\"><label class=\"w3-tiny\" style=\"margin-right:3px\">$ecoVer</label></div>";
    }; 
    echo        "</div>";
    echo        "<hr style=\"margin:0;\">";
    echo    "</div>";

    ####################
    #       -> charts/graphs at the right
    echo    "<div class=\"w3-col s12 m12 l10\" id=\"charts_wrapper\">";
    echo        "<div class=\"w3-display-top-center\">";
    // echo            "<img src=\"assets/57-server-outline.gif\" style=\"width:300px\"/>";
    echo        "</div>";
    echo    "</div>";
    # finished 3rt part
    echo "</div>";

    # starting 4th part, holding data for JS working
    echo "<div id=\"dataFrServer\" class=\"w3-tiny\" style=\"display:none\">";
    echo(json_encode($dataDetail));
    echo "</div>";

    return;
?>

FILE:: .//src_modules/PVPI_org/upDetailPVPI_session.php
<?php
    // ini_set('display_errors', 1);
    // ini_set('display_startup_errors', 1);
    // error_reporting(E_ALL);
    ############ function
    function cnvToHMfrSec($sec){
        $oStr = $sec . "(s)";
        $h = (int)($sec / 3600);
        $sec %= 3600;
        $m = (int)($sec/60);
        $sec %= 60;
        if($h>0){
            $oStr = $h . "h " . ($m+1) . "m";
        }elseif($m>0){
            $oStr = $m . "m " . ($sec) . "s";
        }else{
            $oStr = $sec . "s";
        }
        return $oStr;
    }

    function myPrintDoneSubRun(&$dataAll, $pattern, &$aoRegCntKey, $aoKeywOut){
        ksort($dataAll);
        foreach($dataAll as $cntKey => $detailInfo){
            if(! preg_match("/$pattern/",$cntKey)){
                continue;
            }else{}
            if(array_key_exists($cntKey, $aoRegCntKey)){
                continue;
            }else{}
            $aoRegCntKey[$cntKey] = "register";
            echo "<tr><td>$cntKey</td>";
            if($detailInfo["subrun"] === null){
                echo "<td>" . "FAILED to execute." . "</td>";
            } else {
                echo "<td>";
                echo "<div>";
                foreach ($detailInfo["subrun"] as $subrun){
                    $waitTime = 0;
                    if($subrun["moreInfo"] !== null){
                        $waitTime = $waitTime - $subrun["startAt"] + $subrun["moreInfo"]["startAt"];
                    }else{}
                    if($waitTime > 0){
                        // $waitTime = " -$waitTime";
                        $waitTime = " -" . cnvToHMfrSec($waitTime);
                    }else{
                        $waitTime = "";
                    }
                    echo "<div class=\"w3-container w3-blue w3-bottombar\">";
                    echo "  <div class=\"w3-left\" style=\"width:200px\">";
                    echo      "<div class=\"w3-green w3-center\">" . $subrun["sortKey"] . "</div>";
                    echo      "<div class=\"w3-purple w3-center\">" . cnvToHMfrSec($subrun["TAT"]) . $waitTime  . "</div>";
                    echo      "<div class=\"w3-center\">" . $subrun["moreInfo"]["-os"] . "</div>";
                    echo "  </div>";
                    if($subrun["moreInfo"] !== null){
                        # => get data
                        $tmpa = preg_split('/\s+/', $subrun["moreInfo"]["-M"]);
                        $memAsk = sprintf("%dG", $tmpa[0]/1000);
                        $maxMem = $subrun["moreInfo"]["MaxMem"];
                        $maxMem2 = $subrun["moreInfo"]["mtfMMasterMax2"];
                            if($maxMem2 > $maxMem){
                                $maxMem = sprintf("%dG",$maxMem2/1000);
                            }else{
                                $maxMem = sprintf("%dG",$maxMem/1000);
                            }
                        $masterHost = $subrun["moreInfo"]["sender"];
                        $masterCpuUsed = $subrun["moreInfo"]["numberHost"];
                        
                        # => print out
                        echo "<div class=\"w3-left w3-card\" style=\"width:100px\">";
                        echo    "<div class=\"w3-center\">" . "<span>" . $memAsk . " (ask)</span>" . "</div>";
                        echo    "<div class=\"w3-center\">" . "<span>" . $maxMem . " (max)</span>" . "</div>";
                        echo    "<div class=\"w3-center\">" . "<span>{$masterHost}*{$masterCpuUsed}</span>" . "</div>";
                        echo "</div>";

                        if($subrun["moreInfo"]["mtfHyperTurbo"] !== null ){
                            echo "<div class=\"w3-left w3-card\" style=\"width:100px\">";
                            echo    "<div class=\"w3-center\">";
                            echo        "<span>" . $subrun["moreInfo"]["mtfMode"] . "*</span>";
                            echo        "<span>" . sprintf("%dG", $subrun["moreInfo"]["mtfMSlave"]/1000) . " (ask)</span>";
                            echo    "</div>";
                            $maxMSlave = $subrun["moreInfo"]["mtfMSlaveMax1"];
                            // if($subrun["moreInfo"]["mtfMSlaveMax2"] > $maxMSlave){ #mtfMSlaveMax2 was recorded wrongly => ignore this number
                            //     $maxMSlave = $subrun["moreInfo"]["mtfMSlaveMax2"];
                            // }
                            echo    "<div class=\"w3-center\">";
                            echo        "<span>" . $subrun["moreInfo"]["mtfMode"] . "*</span>";
                            echo        "<span>" . sprintf("%dG", $maxMSlave/1000) . " (max)</span>";
                            echo    "</div>";
                            echo    "<div class=\"w3-center\">";
                            echo        "<span>" . $subrun["moreInfo"]["mtfMode"] . "* slave*</span>";
                            echo        "<span>" . $subrun["moreInfo"]["mtfNoSlave"] . "</span>";
                            echo    "</div>";
                            echo "</div>";
                        }

                        foreach ($aoKeywOut as $subRunPattern => $outKeywContent){
                            if(preg_match("/$subRunPattern/", $subrun["sortKey"])){
                                # ->
                                echo "<div class=\"\" style=\"margin:0px;padding:0px;\">";
                                echo "  <div>bsSource: " . $subrun["moreInfo"]["-source"] . "</div>";
                                echo "  <div>RuleFile: " . $subrun["moreInfo"]["rulefile"] . "</div>";
                                echo "  <div>Output: " . $subrun["moreInfo"]["output"] . "</div>";                                
                                # ->
                                $aoKeywOutInd = null;
                                if(is_array($outKeywContent)){
                                    $aoKeywOutInd = $outKeywContent;
                                }else{
                                    $aoKeywOutInd = array($outKeywContent);
                                }
                                echo    "  <div class=\"w3-row\" style=\"margin-left:200px;padding:0px\">";
                                $aHalf = "";
                                if(count($aoKeywOutInd) > 1){
                                    $aHalf = "w3-half";
                                }
                                foreach ($aoKeywOutInd as $keywOut){
                                    if(is_array($keywOut)){
                                        $outV = extractInfo_from_aoGuide($keywOut,$subrun["moreInfo"]);
                                        if($keywOut[count($keywOut)-1] === "mtime") $outV .= " (" . date("Y-m-d G:i",$outV) . ")";
                                        echo    "    <div class=\"$aHalf w3-row w3-hover-red w3-border\" style=\"padding:1px 10px\">" 
                                                .      "<div class=\"w3-col w3-left-align\">". join("|",$keywOut) . "</div>"
                                                .      "<div class=\"w3-col w3-hover-yellow w3-hover-border-blue\" style=\"word-break:break-all\">" . $outV . "</div>" 
                                                .    "</div>";
                                    }else{
                                        if(is_array($subrun["moreInfo"][$keywOut])){
                                            // echo    "<span class=\"w3-hide\">" . $keywOut . " : </span>";
                                            $tmpData = $subrun["moreInfo"][$keywOut];
                                            if(count($tmpData) > 1){$aHalf = "w3-half";}
                                            ksort($tmpData);
                                            foreach ($tmpData as $keyw => $value){
                                                echo    "    <div class=\"$aHalf w3-row w3-hover-red w3-border\" style=\"padding:1px 10px\">" . "<div class=\"w3-col s6 l8 w3-left-align\">$keyw</div>" . "<div class=\"w3-col s6 l4 w3-right-align w3-hover-yellow w3-hover-border-blue\">" . $subrun["moreInfo"][$keywOut][$keyw] . "</div>" . "</div>";
                                            }
                                        }elseif($subrun["moreInfo"][$keywOut] !== null){
                                            if($aHalf === ""){
                                                echo    "    <div class=\"w3-row w3-hover-red w3-border\" style=\"padding:1px 10px\">" . $keywOut . " => " . $subrun["moreInfo"][$keywOut] . "</div>";
                                            }else{
                                                echo    "    <div class=\"$aHalf w3-row w3-hover-red w3-border\" style=\"padding:1px 10px\">" . "<div class=\"w3-col s6 w3-left-align\">$keywOut</div>" . "<div class=\"w3-col s6 w3-right-align\">" . $subrun["moreInfo"][$keywOut] . "</div>" . "</div>";
                                            }
                                        }else{
                                            // echo    "<div class=\"$aHalf w3-hover-red\" style=\"padding:1px 10px\">" . "<div class=\"w3-half w3-left-align\">$keyw</div>" . "<div class=\"w3-half w3-right-align\">" . "None" . "</div>" . "</div>";
                                            echo    "    <div class=\"$aHalf w3-hover-red w3-border\" style=\"padding:1px 10px\">" . $keywOut . " => " . "None" . "</div>";
                                        }
                                    }
                                }
                                echo "  </div>";
                                echo "</div>";
                            }
                        }
                    }
                    echo "</div>";
                }
                echo "</div>";
                echo "</td>";
            }
            echo "</tr>";
        }
    }
    function myPrintOngoingSubRun($dataAll, $jobId){
        echo "<tr>";
        echo "<td><i class=\"material-icons\">pool</i></td>";
        echo "<td>" . "<table class=\"w3-stretch\">";
        echo "<td style=\"width:200px\">" . $dataAll["job_name"] . "</td>";
        $timeStart = $dataAll["time_start"];
        $maxMem = $dataAll["max_mem"];
        $swapMem = $dataAll["swap"];
        $jobStr = $dataAll["jobStr"];
        $tmpa = preg_split('/\s+/', $jobStr);
        $memAsk = "n/a";
        $cpuAsk = "n/a";
        $osAsk = "n/a";
        for($i=0;$i<count($tmpa);$i++){
            if($tmpa[$i] === "-M"){
                $memAsk = $tmpa[$i+1];
            }elseif($tmpa[$i] === "-n"){
                $cpuAsk = $tmpa[$i+1];
            }elseif($tmpa[$i] === "-os"){
                $osAsk = $tmpa[$i+1];
            }else{}
        }
        if($timeStart === "-"){
            echo "<td>" . $jobId . "</td>";
            echo "<td>" . "Just started" . "</td>";
            echo "<td>" . $jobStr . "</td>";
        }else{
            echo "<td>" . $jobId . "</td>";
            echo "<td>" . $timeStart . "</td>";
            echo "<td>" . "-os" . "</td>"; echo "<td>" . $osAsk . "</td>";
            echo "<td>" . "-n" . "</td>"; echo "<td>" . $cpuAsk . "</td>";
            echo "<td>" . "-M" . "</td>"; echo "<td>" . $memAsk . "</td>";
            echo "<td>" . "MaxMem" . "</td>"; echo "<td>" . $maxMem . "</td>";
            echo "<td>" . "MaxSwap" . "</td>"; echo "<td>" . $swapMem . "</td>";
            // echo "<td>" . $dataAll["jobStr"] . "</td>";
        }
        echo "</table></td>";
        echo "</tr>";
    }
    function mySimplePrintDetailSession($dataDone, $dataOngo, $uniqueStr=""){
        # -> print-out common info
        echo "<table class=\"w3-table-all w3-card-4 w3-hoverable w3-small\">";
        // foreach($dataDone as $cntKey => $detailInfo){
        //     if(preg_match("/^run_.*/",$cntKey)){
        //         continue;
        //     }else{}
        //     echo "<tr><td>$cntKey</td><td>$detailInfo</td></tr>";
        // }
        if($dataOngo === null){
            #### data finished
            # -> common info
            foreach (array("WORKINGDIR","PRODUCT", "CHIP_OR_IP", "TOP_LAYOUT_NAME", "netVer", "ecoVer", "DATE", "RULETYPE", "GDSMERGE_TOOLS") as $keyw1){
                echo "<tr>";
                echo "<td>" . $keyw1 . "</td>";
                echo "<td>" . $dataDone[$keyw1] . "</td>";
                echo  "</tr>";
            }
            # ->
            echo "<tr>"; echo "<td>startAt</td>";  echo "<td>" . date("Y-m-d G:i",$dataDone["startAt"]) . "</td>";
            echo "<tr>"; echo "<td>TAT</td>";  echo "<td>" . date_diff(date_create(date(DATE_W3C, $dataDone["startAt"])), date_create(date(DATE_W3C, $dataDone["startAt"]+$dataDone["TAT"])))->format("%h hour(s) %i min(s)") . "</td>";
        }else{
            #### data ONGOING
            # -> common info
            echo "<tr>";
            echo "<td>" . "WORKINGDIR" . "</td>";
            echo "<td style=\"max-width:600px;overflow-wrap:break-word\">" . $dataOngo["running"]["sub_cwd"] . "</td>";
            echo  "</tr>";
            # ->
            $tmpa = preg_split("/__/", $uniqueStr);
            echo "<tr>"; echo "<td>startAt</td>";  echo "<td>" . date("Y-m-d G:i",$tmpa[2]) . "</td>";
            echo "<tr>"; echo "<td>TAT</td>";  echo "<td>" . date_diff(date_create(date(DATE_W3C, $tmpa[2])), date_create(date(DATE_W3C)))->format("%h hour(s) %i min(s)") . "</td>";
            # ->
            foreach ($dataOngo as $jobId => $detailInfo){
                if($jobId === "running"){
                }elseif(! preg_match("/^\d+$/",$jobId)){
                }else{
                    myPrintOngoingSubRun($detailInfo, $jobId);
                }
            }
        }
        # -> print-out run_xxx info
        $aoReg = null; #array of register item
        myPrintDoneSubRun($dataDone, "^run_pr_out.*"     , $aoReg, array());
        myPrintDoneSubRun($dataDone, "^run_make_cdl.*"   , $aoReg, array("V2LVS" => array(array("_inputs_","SOURCE","mtime"), array("_inputs_","SOURCE","path"))
                                                                        , "CDLCAT" => array(array("_inputs_","SOURCE","mtime"), array("_inputs_","SOURCE","path"))
                                                                        ));
        myPrintDoneSubRun($dataDone, "^run_gds_merge1.*" , $aoReg, array(".*" => array(array("_inputs_","LAYOUT","path"))));
        myPrintDoneSubRun($dataDone, "^run_dodpo.*"      , $aoReg, array(".*" => array(array("_inputs_","LAYOUT","path"))));
        myPrintDoneSubRun($dataDone, "^run_dmvia.*"      , $aoReg, array(".*" => array(array("_inputs_","LAYOUT","path"))));
        myPrintDoneSubRun($dataDone, "^run_dwpp.*"       , $aoReg, array(".*" => array(array("_inputs_","LAYOUT","path"))));
        myPrintDoneSubRun($dataDone, "^run_gds_merge2.*" , $aoReg, array(".*" => array(array("_inputs_","LAYOUT","path"))));
        myPrintDoneSubRun($dataDone, "^run_drc.*"        , $aoReg, array(".*" => "DRC_Errors"));
        myPrintDoneSubRun($dataDone, "^run_lvs.*"        , $aoReg, array(  ".*COMPARISON" => array("compare", "ERC_Errors"),
                                                                            ".*EXTRACTION" => array("output", "ERC_noResults", "EXT_noVirtualConnect", "EXT_noInvalidPathChk","EXT_noUnAttPort", "EXT_noShort", "ERC_Errors")
                                                        ));
        // myPrintDoneSubRun($dataDone, "^run_lvl.*"        , &$aoReg, array(".*" => array( array("_inputs_","LAYOUT")
        //                                                                                 ,array("_inputs_","LAYOUT2","Path")
        //                                                                                 ,"DRC_Errors")));
        myPrintDoneSubRun($dataDone, "^run_lvl.*"        , $aoReg, array(".*" => array( array("_inputs_","LAYOUT","path")
                                                                                        ,array("_inputs_","LAYOUT2","path")
                                                                                        ,array("_inputs_","LAYOUT","TopCell")
                                                                                        ,array("_inputs_","LAYOUT2","TopCell")
                                                                                        ,"DRC_Errors")));
        # -> remaining run_xxx if valid
        myPrintDoneSubRun($dataDone, "^run_.*"           , $aoReg, array(".*" => "output"));
        # ######## PRESERVED
        echo "</table>";
    }
    function extractInfo_from_aoGuide($aoLvl,$topData){
        if(!is_array($aoLvl)) return $topData[$aoLvl];
        $top = array_shift($aoLvl);
        // echo "\n\nworking on ".count($aoLvl)." -- $top ---\n"; var_dump($topData[$top]);
        if($aoLvl === null || $aoLvl === "" || count($aoLvl) === 0) return $topData[$top];
        return extractInfo_from_aoGuide($aoLvl,$topData[$top]);
    }

    ############ MAIN
    $outText = "Nothing to show";
    $tmpText = "";#to control some temp text
    $outData = null;
    $flgDataFinished = false;
    $flgDataOngoing = false;
    $tgtd = "../../data/PVPI_org";

    $prjN = $_GET["prjN"];//
    $tgtUnique = $_GET["unique"];//

    $aoTgtf = glob("$tgtd/detailInd_{$prjN}_PVexeLog_*.json");
    $ongoingf = "$tgtd/{$prjN}_PVexeOngoingLog.json";
    $outText = ""; #reset

    # => working with ongoing sessions
    if($fh = fopen($ongoingf, "r")) {
        $tmpText = $tmpText . $ongoingf . "<br>";
        // -> json file interacting
        $outData = json_decode(fread($fh, filesize($ongoingf)), true);
        fclose($fh);
        foreach ($outData as $cntKey => $tmpInf) {
            if($cntKey === "ongoing"){
                foreach ($tmpInf as $unique => $detailEachSession){
                    if($unique === $tgtUnique){
                        echo "<p>FOUND ONGOING $unique</p>";
                        mySimplePrintDetailSession($outData["ongoingdone"][$unique], $outData["ongoing"][$unique], $unique);
                        // var_dump($outData["ongoingdone"][$unique]);
                        break;
                    }
                }
            }else{}
        }
        $flgDataOngoing = true;
    }else{}

    # => working with finished sessions
    if (count($aoTgtf) > 0) {
        $flgFound = false;
        for($i=0;$i<count($aoTgtf);$i++){
            if($flgFound === true) {break;}
            $tmpText = $tmpText . $aoTgtf[$i] . "<br>";
            $tmpa = preg_split("/_/", preg_replace('/.json$/', "", $aoTgtf[$i]));
            $minSat = $tmpa[count($tmpa)-2];
            $maxSat = $tmpa[count($tmpa)-1];
            $tmpa = preg_split("/__/", $tgtUnique);
            $tgtSat = $tmpa[2];
            if($tgtSat >= $minSat && $tgtSat <= $maxSat ){
                // -> json file interacting
                if($fh = fopen($aoTgtf[$i], "r")){
                    $fWholeStr = fread($fh, filesize($aoTgtf[$i]));
                    fclose($fh);
                    $outData = json_decode($fWholeStr, true);
                    // -> out info
                    foreach ($outData as $unique => $detailEachSession){
                        if($unique === $tgtUnique){
                            echo "<p>FOUND FINISHED $unique in $aoTgtf[$i]</p>";
                            mySimplePrintDetailSession($outData[$unique], null);
                            // var_dump($outData[$unique]);
                            $flgFound = true;
                            break;
                        }
                    }
                } else {
                    echo "<div><p>Cannot read from file</p></div>";
                }
            }else{}
        }
        $flgDataFinished = true;
    }else{ }

    if($flgDataFinished === false && $flgDataOngoing === false) {
        echo "<div><p>Cannot found any data for $prjN</p></div>";
    } else {
    }

    // echo $outText;
    return;
?>

FILE:: .//src_modules/PVPI_org/upSumPVPI.php
<?php
    //// Sub-function
    function outSum1 ($content,$flgDisabling) {
        echo "<div class=\"w3-container w3-responsive w3-stretch\">";
        echo    "<div class=\"w3-container w3-card-2 w3-hoverable w3-light-grey\">";
        ksort($content);
        foreach ($content as $keyw => $value) {
            if($keyw === "number_ongoing_sessions") { continue; }
            // ->
            echo    "<div class=\"w3-row w3-padding w3-hover-shadow w3-border\">";
            if($keyw === "ongoing_sessions"){
                echo    "<div class=\"w3-col s12 m12 l6\" style=\"min-width:100px\">";
                echo        "<span>$keyw<span>";
                echo        "<span class=\"w3-badge\" style=\"margin-left:10px\">" . count(array_keys($value)) . "<span>";
                echo    "</div>";
            }else{
                echo    "<div class=\"w3-col s12 m12 l6\" style=\"min-width:100px\">$keyw</div>";
            }
            if($keyw === "ongoing_sessions"){
                echo        "<div class=\"w3-col s12 m12 l6\" style=\"padding-left:10px;white-space:nowrap;overflow-x:scroll\">";
            }else{
                echo        "<div class=\"w3-col s12 m12 l6\" style=\"padding-left:10px;\">";
            }
            if($keyw === "ongoing_sessions"){
                if(count(array_keys($value)) > 0) {
                    foreach ($value as $unique => $tmpv) {
                        if($flgDisabling === false){
                            echo "<div onclick=\"myUpDetail2(this); document.getElementById('observer3').style.display='block'\" class=\"w3-card-2 my-dsp-unique\">$unique</div>";
                        }else{
                            echo "<div class=\"w3-card-2 my-dsp-unique\">$unique</div>";
                        }
                    }
                }else{
                    echo    "<div style='height:28px'>-</div>";
                }
            } else {
                if($keyw === "latest_finished_sesson"){
                    if($flgDisabling === false){
                        echo "<div onclick=\"myUpDetail2(this); document.getElementById('observer3').style.display='block'\" class=\"w3-card-2 my-dsp-unique\">$value</div>";
                    }else{
                        echo "<div class=\"w3-card-2 my-dsp-unique\">$value</div>";
                    }
                }else{
                    echo "<span class=\"w3-right\" style=\"text-align:center;white-space:nowrap\">$value</span>";
                }
            }
            echo        "</div>";
            echo    "</div>";
        }
        echo    "</div>";
        echo "</div>";
        // echo "</div>";
        return;
    }

    function outSum2 ($content,$flgDisabling, $flgType3=false) {
        # => header
        // $cntOutHead = array("LVS", "FEOL", "BEOL", "ANTENNA");
        $aoOMerged = array();#array of merged items (e.g.: FEOL will include FEOL and 01_FEOL, ...)
        ksort($content);
        foreach ($content as $IPName => $results){
            foreach ($results as $PVitem => $indRes){
                $dspStr = $PVitem;
                $tmpa = null;
                if(preg_match_all("/^[\d_]+(.*)/", $PVitem, $tmpa)){
                    $dspStr = $tmpa[1][0];
                }else{}
                if(! array_key_exists($dspStr, $aoOMerged)){
                    $aoOMerged[$dspStr] = array();
                }
                if(! array_key_exists($PVitem, $aoOMerged[$dspStr])){
                    $aoOMerged[$dspStr][] = $PVitem;
                }
            }
        }
        $cntOutHead = array_keys($aoOMerged);
        $aoFirstItem = array("LVS", "ERC", "FEOL", "BEOL", "ANTENNA");
        foreach ($aoFirstItem as $firstItem){
            if(array_key_exists($firstItem,$aoOMerged)){
                array_splice($cntOutHead, array_search($firstItem,$cntOutHead), 1);
            }else{}
        }
        sort($cntOutHead);
        array_splice($cntOutHead,0,0,$aoFirstItem);

        # =>
        echo "<div class=\"w3-container w3-responsive w3-stretch\">";
        // echo    "<div class=\"w3-container w3-card-4\">";
        echo    "<table class=\"w3-table-all w3-card-4 w3-gray\">";
        # => header goes firstly
        echo        "<tr>";
        echo        "<th class=\"w3-cell w3-border\">" . "CHIP/IP" . "</th>";
        foreach ($cntOutHead as $PVitem){
            #-> some mod for better view
            $PVitem = strtoupper($PVitem);
            if($PVitem === "ANTENNA") $PVitem = "ANT";
            if($PVitem === "ESDLUP") $PVitem = "ESD LUP";
            if($PVitem === "MAINDRC") $PVitem = "MDRC";
            if($PVitem === "WELLANT") $PVitem = "WELL ANT";
            if($PVitem === "MULTIVIA") $PVitem = "M-VIA";
            $fontSize = 100 * 3 / strlen($PVitem);
            if($fontSize < 50) $fontSize = 50;
            $fontSize = $fontSize . "%";
            $PVitem = preg_replace("/_/"," ", $PVitem);
            // echo        "<th class=\"w3-cell w3-border w3-center\" style=\"vertical-align:bottom;font-size:$fontSize\"><div style=\"width:40px;align:center;vertical-align:bottom;word-wrap:break-word\">" . $PVitem . "</div></th>";
            echo        "<th class=\"w3-cell w3-border w3-center\" style=\"vertical-align:bottom;\"><div class=\"w3-center\" style=\"align:center;vertical-align:bottom;word-wrap:break-word\">" . $PVitem . "</div></th>";
        }
        echo        "</tr>";
        # => content for each IP/CHIP
        $aoIP = array_keys($content);
        if($flgType3 === true){
            // dont involve CHIP keyword if there is top-cell-name only
        }else{
            if(array_key_exists("CHIP", $content)){
                array_splice($aoIP, array_search("CHIP", $aoIP),1);
            }else{}
            sort($aoIP);
            array_unshift($aoIP, "CHIP");
        }
        foreach ($aoIP as $IPname) {
            $aoRes = $content[$IPname];
            echo    "<tr>";
            echo        "<td class=\"w3-cell w3-hover-shadow\" style=\"min-width:100px;max-width:200px;overflow:hidden;text-overflow:ellipsis\">$IPname</td>";
            foreach ($cntOutHead as $dspStr){
                $latestSubmitTime = 0;
                $latestTgtPVitem = "";#in short
                $PVitem = "no-any-valid-found";
                foreach ($aoOMerged[$dspStr] as $chkPVitem){
                    if(! array_key_exists("unique", $aoRes[$chkPVitem])) continue;
                    $tmpa = preg_split("/__/", $aoRes[$chkPVitem]["unique"]);
                    // $latestSubmitTime = $aoRes[$chkPVitem]["unique"];
                    if($latestSubmitTime < $tmpa[2]){
                        $latestSubmitTime = $tmpa[2];
                        $PVitem = $chkPVitem;
                    }else{}
                }
                # each dspStr may include many PVitem
                if(array_key_exists($PVitem, $aoRes)){
                    $output = $aoRes[$PVitem]["output"];
                    $oStr = $output;
                    if($output === "CORRECT" || $output === "PASS") $oStr = "<i class=\"material-icons w3-text-green\">sentiment_very_satisfied</i>";
                    if($output === "INCORRECT" || $output === "FAIL") $oStr = "<i class=\"material-icons w3-text-purple\">sentiment_very_dissatisfied</i>";
                    if($flgDisabling === false){
                        echo "<td class=\"w3-cell w3-border w3-center mytooltip myCnt-dsp-unique2\" onclick=\"myUpDetail2_2(this); document.getElementById('observer3').style.display='block'\">";
                    }else{
                        echo "<td class=\"w3-cell w3-border w3-center mytooltip\">";
                    }
                    echo        "<span>$oStr</span>";
                    echo        "<span style=\"display:none\">" . $aoRes[$PVitem]["unique"] . "</span>";
                    echo        "<span class=\"mytooltiptext\">" . $aoRes[$PVitem]["tooltip"] . "<br>" . $PVitem . "</span>";
                    echo "</td>";
                }else{
                    // echo "<td class=\"w3-cell w3-border w3-center\">" . "<i class=\"material-icons w3-text-gray\">remove_circle</i>" . "</td>";
                    echo "<td class=\"w3-cell w3-border w3-center\" style=\"background-color:gray\">". $latestSubmitTime  . "</td>";
                }
            }
            echo    "</tr>";
        }
        echo    "</table>";
        echo "</div>";
        return;
    }

    /////////////// MAIN

    $dataDir = "../../data/PVPI_org";
    $dataDirManual = "../../data_manual/PVPI_org";

    $outText = "Nothing to show";
    $finPrj = null;#finished projects
    $outData1 = null;
    $outData2 = null;
    $outData3 = null;
    $type = $_GET["q"];
    if($type === "undefined" || $type === "" || $type === null) $type = 2;
    
    //exec("whoami", $outText, $retval);
    //exec("scripts/simpleSubs.pl", $outText, $retval);
    //exec("scripts/tracking.csh", $outText,$retval);
    //exec("scripts/copying.csh", $outText,$retval);

    // -> json file interacting
    if($fh = fopen("$dataDirManual/finished_projects.json","r")){
        $finPrj = json_decode(fread($fh, filesize("$dataDirManual/finished_projects.json")),true);
        fclose($fh);
    }else{}
    if($fh = fopen("$dataDir/sumAll.json", "r")){
        $outData1 = json_decode(fread($fh, filesize("$dataDir/sumAll.json")), true);
        fclose($fh);
        $outText = "";#reset
    } else {
        $outText = "<div><p>Cannot read from file 1</p></div>";
    }
    if($outText === ""){
        if($fh = fopen("$dataDir/sumAllLatest.json", "r")){
            $outData2 = json_decode(fread($fh, filesize("$dataDir/sumAllLatest.json")), true);
            fclose($fh);
            $outText = "";#reset
        } else {
            $outText = "<div><p>Cannot read from file 2</p></div>";
        }
    }
    if($outText === ""){
        if($fh = fopen("$dataDir/sumAllLatest_TOP_LAYOUT_NAME.json", "r")){
            $outData3 = json_decode(fread($fh, filesize("$dataDir/sumAllLatest_TOP_LAYOUT_NAME.json")), true);
            fclose($fh);
            $outText = "";#reset
        } else {
            $outText = "<div><p>Cannot read from file 3</p></div>";
        }
    }

    // -> manipulate data for output string (innerHTML? or a div)
    if($outText === ""){
        foreach ($outData1 as $prjN => $content) {
            if(array_key_exists($prjN,$finPrj)) continue;
            echo "<div class=\"w3-card-2 w3-padding w3-col s12 m6 w3-animate-zoom myCnt-PVPI-sum-prj-top\">";
            # => the header including prjName and some buttons
            echo    "<div class=\"w3-margin-bottom w3-display-container\">";
            echo        "<div class=\"w3-hover-black w3-hover-shadow w3-container\" style=\"background-color:#06418c;color:white;min-height:115px\">";
            echo            "<h1 class=\"\" style='white-space: nowrap; overflow: visible'>$prjN</h1>";
            echo            "<div class=\"\" style='position:absolute;top:0;right:0'>";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-left:0;padding-right:0;padding-bottom:0;\" onclick=\"myChangeSumView(this.parentNode.parentNode.parentNode,'down')\"><i class=\"material-icons\">first_page</i></div>";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-bottom:0\" onclick=\"myExpandWidth(this.parentNode.parentNode.parentNode)\"><i class=\"material-icons\">zoom_out_map</i></div>";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-left:0;padding-right:0;padding-bottom:0;\" onclick=\"myChangeSumView(this.parentNode.parentNode.parentNode,'up')\"><i class=\"material-icons\">last_page</i></div>";
            echo                "<hr style=\"margin:0\">";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-top:0;padding-bottom:0\" onclick=\"myUpDetail(this.parentNode.parentNode)              ; document.getElementById('observer2').style.display='block'\"><i class=\"material-icons\">view_list</i></div>";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-top:0;padding-bottom:0\" onclick=\"myUpDetail4ChartsWrapper(this.parentNode.parentNode); document.getElementById('observer2').style.display='block'\"><i class=\"material-icons\">insert_chart</i></div>";
            echo            "</div>";
            echo        "</div>";
            
            # => content 1
            if($type == 2){
                echo        "<div style=\"min-height:320px;display:none\">";
            }else{
                echo        "<div style=\"min-height:320px\">";
            }
            echo            outSum1($content,false);
            echo        "</div>";
            # -> content 2
            if($type == 2){
                echo        "<div>";
            }else{
                echo        "<div style=\"display:none\">";
            }
            echo            outSum2($outData2[$prjN],false);
            echo        "</div>";
            # -> content 3
            if($type == 3){
                echo        "<div>";
            }else{
                echo        "<div style=\"display:none\">";
            }
            echo            outSum2($outData3[$prjN],false,true);
            echo        "</div>";

            echo    "</div>";
            echo "</div>";
        }
        ///// for tape-out as latest
        foreach ($outData1 as $prjN => $content) {
            if(!array_key_exists($prjN,$finPrj)) continue;
            echo "<div class=\"w3-card-2 w3-padding w3-col s12 m6 w3-animate-zoom\">";
            # => the header including prjName and some buttons
            echo    "<div class=\"w3-margin-bottom w3-display-container\">";
            echo        "<div class=\"w3-hover-black w3-hover-shadow w3-container\" style=\"background-color:#06418c;color:white;min-height:115px\">";
            echo            "<h1 class=\"\" style='white-space: nowrap;overflow:visible'>$prjN (Taped-Out)</h1>" . "<span style=\"position:relative;bottom:15px;float:left;width:40px;overflow:visible;white-space:nowrap\">" . $finPrj[$prjN] . "</span>";
            echo            "<div class=\"\" style='position:absolute;top:0;right:0'>";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-left:0;padding-right:0;padding-bottom:0;\" onclick=\"myChangeSumView(this.parentNode.parentNode.parentNode,'down')\"><i class=\"material-icons\">first_page</i></div>";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-bottom:0\" onclick=\"myExpandWidth(this.parentNode.parentNode.parentNode)\"><i class=\"material-icons\">zoom_out_map</i></div>";
            echo                "<div class=\"w3-button w3-cell\" style=\"padding-left:0;padding-right:0;padding-bottom:0;\" onclick=\"myChangeSumView(this.parentNode.parentNode.parentNode,'up')\"><i class=\"material-icons\">last_page</i></div>";
            // echo                "<hr style=\"margin:0\">";
            // echo                "<div class=\"w3-button w3-cell\" style=\"padding-top:0;padding-bottom:0\" onclick=\"myUpDetail(this.parentNode.parentNode)              ; document.getElementById('observer2').style.display='block'\"><i class=\"material-icons\">view_list</i></div>";
            // echo                "<div class=\"w3-button w3-cell\" style=\"padding-top:0;padding-bottom:0\" onclick=\"myUpDetail4ChartsWrapper(this.parentNode.parentNode); document.getElementById('observer2').style.display='block'\"><i class=\"material-icons\">insert_chart</i></div>";
            echo            "</div>";
            echo        "</div>";
            
            # => content 1
            if($type == 2){
                echo        "<div style=\"min-height:320px;display:none\">";
            }else{
                echo        "<div style=\"min-height:320px\">";
            }
            echo            outSum1($content,true);
            echo        "</div>";
            # -> content 2
            if($type == 2){
                echo        "<div>";
            }else{
                echo        "<div style=\"display:none\">";
            }
            echo            outSum2($outData2[$prjN],true);
            echo        "</div>";
            # -> content 3
            if($type == 3){
                echo        "<div>";
            }else{
                echo        "<div style=\"display:none\">";
            }
            echo            outSum2($outData3[$prjN],true,true);
            echo        "</div>";

            echo    "</div>";
            echo "</div>";
        }
    }else{}
    //var_dump($outText);
    //print_r($outText);
    echo $outText;
?>

FILE:: .//src_modules/chkServers/chkExeSrvs.php
<?php
    // ini_set('display_errors', 1);
    // ini_set('display_startup_errors', 1);
    // error_reporting(E_ALL);

    $tgtD = "../../data/PVPI_org";

    // ##########
    $output = array();
    $tgtSite = $_GET["q"];
    if($tgtSite === null || $tgtSite === ""){
        // ########## EXECUTION to get string of info
        exec("./chkExeSrvs_extracting_info.csh", $output, $retval);
        // echo "xxx " . " return: " . $retval .  " output: " . var_dump($output);
    }else{
        if(file_exists("$tgtD/{$tgtSite}_copiedFile.txt")){
            $fh = fopen("$tgtD/{$tgtSite}_copiedFile.txt","r");
            while(!feof($fh)){
                array_push($output,trim(fgets($fh)));
            }
            fclose($fh);
        }else{}
    }

    $oO = array();
    // reg siteName for call-back later in JS
    $oO["_siteName_"] = $tgtSite;


    $keyw = "";
    foreach ($output as $line) {
        $aoMatches = array();
        if(preg_match("/^START\s+(\S+)/",$line,$aoMatches)) {
            $keyw = $aoMatches[1];
            // echo "starting ... $keyw ... <br>\n";
            continue;
        }
        if(preg_match("/^END\s+(\S+)/",$line,$aoMatches))  $keyw = "";
        if($keyw === "") continue;

        #############################################
        if($keyw === "hostname"){
            if(! array_key_exists("_thishost_",$oO))   $oO["_thishost_"] = array();
            $oO["_thishost_"]["hostname"] = $line;
        #############################################
        }elseif($keyw === "top"){
            if(! array_key_exists("_thishost_",$oO))   $oO["_thishost_"] = array();
            if(preg_match("/^top/", $line)){
                $oO["_thishost_"]["summary"] = $line;
            }elseif(preg_match("/^(\S+):\s+(.*)/", $line, $aoMatches)){
                $oO["_thishost_"][$aoMatches[1]] = $aoMatches[2];
            }else{
                // echo "top: out-of-scope: '$line'<br>\n";
            }
        #############################################
        }elseif($keyw === "bmgroup"){
            if(preg_match_all("/\S+/",$line,$aoMatches)){
                if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                if(! array_key_exists("_byHostGroup_",$oO))   $oO["_byHostGroup_"] = array();
                if($aoMatches[0][0] === "GROUP_NAME") continue; #this is header line
                for($i=1;$i<count($aoMatches[0]);$i++){
                    if(! array_key_exists($aoMatches[0][0], $oO["_byHostGroup_"]))   $oO["_byHostGroup_"][$aoMatches[0][0]] = array();
                    if(! array_key_exists($aoMatches[0][$i], $oO["_byHost_"]))   $oO["_byHost_"][$aoMatches[0][$i]] = array();
                    if(! array_key_exists("_hostGroup", $oO["_byHost_"][$aoMatches[0][$i]]))   $oO["_byHost_"][$aoMatches[0][$i]]["_hostGroup_"] = "";
                    $oO["_byHost_"][$aoMatches[0][$i]]["_hostGroup_"] .= $aoMatches[0][0];
                    $oO["_byHostGroup_"][$aoMatches[0][0]][$aoMatches[0][$i]] = 1;
                }
            }else{}
        #############################################
        }elseif($keyw === "lshosts"){
            if(preg_match_all("/\S+/",$line,$aoMatches)){
                if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                if(! array_key_exists("_byOS_",$oO))   $oO["_byOS_"] = array();
                if($aoMatches[0][0] === "HOST_NAME") continue; #this is header line
                if(! array_key_exists($aoMatches[0][0], $oO["_byHost_"])) $oO["_byHost_"][$aoMatches[0][0]] = array();
                if(! array_key_exists("lshosts_os", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_os"]        = "";
                if(! array_key_exists("lshosts_model", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_model"]     = "";
                if(! array_key_exists("lshosts_cpuf", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_cpuf"]      = "";
                if(! array_key_exists("lshosts_ncpus", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_ncpus"]     = "";
                if(! array_key_exists("lshosts_maxmem", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_maxmem"]    = "";
                if(! array_key_exists("lshosts_maxswp", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_maxswp"]    = "";
                if(! array_key_exists("lshosts_exeServer", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_exeServer"] = "";

                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_os"] .= $aoMatches[0][1];#type
                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_model"] .= $aoMatches[0][2];
                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_cpuf"] .= $aoMatches[0][3];
                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_ncpus"] .= $aoMatches[0][4];
                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_maxmem"] .= $aoMatches[0][5];
                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_maxswp"] .= $aoMatches[0][6];
                $oO["_byHost_"][$aoMatches[0][0]]["lshosts_exeServer"] .= $aoMatches[0][7];
                $oO["_byOS_"][$aoMatches[0][1]][$aoMatches[0][0]] = 1;
            }else{}
        #############################################
        }elseif($keyw === "lsload"){
            if(preg_match_all("/\S+/",$line,$aoMatches)){
                if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                if($aoMatches[0][0] === "HOST_NAME") continue; #this is header line
                if(! array_key_exists($aoMatches[0][0], $oO["_byHost_"])) $oO["_byHost_"][$aoMatches[0][0]] = array();
                if(! array_key_exists("lsload_status", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_status"]  = "";
                if(! array_key_exists("lsload_r15s", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_r15s"]    = "";
                if(! array_key_exists("lsload_r1m", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_r1m"]     = "";
                if(! array_key_exists("lsload_r15m", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_r15m"]    = "";
                if(! array_key_exists("lsload_ut", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_ut"]      = "";
                if(! array_key_exists("lsload_pg", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_pg"]      = "";
                if(! array_key_exists("lsload_ls", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_ls"]      = "";
                if(! array_key_exists("lsload_it", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_it"]      = "";
                if(! array_key_exists("lsload_tmp", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_tmp"]     = "";
                if(! array_key_exists("lsload_swp", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_swp"]     = "";
                if(! array_key_exists("lsload_mem", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_mem"]     = "";

                $oO["_byHost_"][$aoMatches[0][0]]["lsload_status"] .= (count($aoMatches[0]) > 1) ? $aoMatches[0][1] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["lsload_r15s"]   .= (count($aoMatches[0]) > 2) ? $aoMatches[0][2] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["lsload_r1m"]    .= (count($aoMatches[0]) > 3) ? $aoMatches[0][3] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["lsload_r15m"]   .= (count($aoMatches[0]) > 4) ? $aoMatches[0][4] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["lsload_ut"]     .= (count($aoMatches[0]) > 5) ? $aoMatches[0][5] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["lsload_pg"]     .= (count($aoMatches[0]) > 6) ? $aoMatches[0][6] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["lsload_ls"]     .= (count($aoMatches[0]) > 7) ? $aoMatches[0][7] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["lsload_it"]     .= (count($aoMatches[0]) > 8) ? $aoMatches[0][8] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["lsload_tmp"]    .= (count($aoMatches[0]) > 9) ? $aoMatches[0][9] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["lsload_swp"]    .= (count($aoMatches[0]) > 10) ?  $aoMatches[0][10] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["lsload_mem"]    .= (count($aoMatches[0]) > 11) ?  $aoMatches[0][11] : "";
            }else{}
        #############################################
        }elseif($keyw === "bhosts"){
            if(preg_match_all("/\S+/",$line,$aoMatches)){
                if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                if($aoMatches[0][0] === "HOST_NAME") continue; #this is header line
                if(! array_key_exists($aoMatches[0][0], $oO["_byHost_"])) $oO["_byHost_"][$aoMatches[0][0]] = array();
                if(! array_key_exists("bhosts_status" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_status"] = "";
                if(! array_key_exists("bhosts_JL/U" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_JL/U"]   = "";
                if(! array_key_exists("bhosts_MAX" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_MAX"]    = "";
                if(! array_key_exists("bhosts_NJOBS" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_NJOBS"]  = "";
                if(! array_key_exists("bhosts_RUN" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_RUN"]    = "";
                if(! array_key_exists("bhosts_SSUSP" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_SSUSP"]  = "";
                if(! array_key_exists("bhosts_USUSP" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_USUSP"]  = "";
                if(! array_key_exists("bhosts_RSV" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_RSV"]    = "";
                
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_status"]  .= (count($aoMatches[0]) > 1) ? $aoMatches[0][1] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_JL/U"]    .= (count($aoMatches[0]) > 2) ? $aoMatches[0][2] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_MAX"]     .= (count($aoMatches[0]) > 3) ? $aoMatches[0][3] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_NJOBS"]   .= (count($aoMatches[0]) > 4) ? $aoMatches[0][4] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_RUN"]     .= (count($aoMatches[0]) > 5) ? $aoMatches[0][5] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_SSUSP"]   .= (count($aoMatches[0]) > 6) ? $aoMatches[0][6] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_USUSP"]   .= (count($aoMatches[0]) > 7) ? $aoMatches[0][7] : "";
                $oO["_byHost_"][$aoMatches[0][0]]["bhosts_RSV"]     .= (count($aoMatches[0]) > 8) ? $aoMatches[0][8] : "";
            }else{}
        #############################################
        }elseif($keyw === "SP_HOST_DIR"){
            if(file_exists($line)){
                foreach (glob("$line/*") as $file){
                    if(is_file($file)){
                        $host = basename($file);
                        if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                        if(! array_key_exists($host,$oO["_byHost_"]))   $oO["_byHost_"][$host] = array();
                        foreach (file($file) as $txtLine){
                            if(! array_key_exists("dedicated_head",$oO["_byHost_"][$host]))   $oO["_byHost_"][$host]["dedicated_head"] = array();
                            if(! array_key_exists("dedicated_users",$oO["_byHost_"][$host]))  $oO["_byHost_"][$host]["dedicated_users"] = array();
                            if(preg_match("/^#/", $txtLine)){
                                array_push($oO["_byHost_"][$host]["dedicated_head"], $txtLine);
                            }else{
                                array_push($oO["_byHost_"][$host]["dedicated_users"], $txtLine);
                            }
                        }
                    }
                }
            }else{}
        #############################################
        }elseif($keyw === "bjobs"){
            if(preg_match_all("/[^;]+/",$line,$aoMatches)){
                if(preg_match_all("/[^:]+/", $aoMatches[0][0], $aoHosts)){
                    $aoUnqHosts = array_unique($aoHosts[0]);
                    $unqHostWnumber = array();
                    if(count($aoUnqHosts) > 1){
                        // echo "dbg: WARNING: not same host: $line\n";
                    }
                    foreach ($aoHosts[0] as $host){
                        if(! array_key_exists($host, $unqHostWnumber)) $unqHostWnumber[$host] = 0;
                        $unqHostWnumber[$host]++;
                    }
                    foreach ($aoUnqHosts as $host){
                        if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                        if($host === "EXEC_HOST") continue; #this is header line
                        if(! array_key_exists($host, $oO["_byHost_"])) $oO["_byHost_"][$host] = array();
                        if(! array_key_exists($aoMatches[0][1], $oO["_byHost_"][$host])) {
                            $oO["_byHost_"][$host][$aoMatches[0][1]] = array();
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["stat"] = "";
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["user"] = "";
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["queue"] = "";
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["run_time"] = "";
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["cmd"] = "";
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["resreq"] = "";
                            $oO["_byHost_"][$host][$aoMatches[0][1]]["#hosts"] = -1;
                        }
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["stat"] .= $aoMatches[0][2];
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["user"] .= $aoMatches[0][3];
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["queue"] .= $aoMatches[0][4];
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["run_time"] .= $aoMatches[0][5];
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["cmd"] .= $aoMatches[0][6];
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["resreq"] .= $aoMatches[0][count($aoMatches[0])-1] . " " . $aoMatches[0][count($aoMatches[0])-2];
                        $oO["_byHost_"][$host][$aoMatches[0][1]]["#hosts"] = $unqHostWnumber[$host];
                    }
                }
            }else{}
        #############################################
        }else{
            #out-of-scope
        }
    }
 
    echo json_encode($oO);
    // var_dump($oO);

    return;
?>

FILE:: .//src_modules/chkServers/chkExeSrvs_extracting_info.csh
#!/bin/csh

source /common/lsftool/RBS/dotfiles/lsf_cshrc_cbs;
# -> notice: the order is important to shortent the workload and time for server script
echo "START hostname"     ; hostname; echo "END hostname";
echo "START top"          ; top -b -n 1 | head -5 ; echo "END top";
echo "START bmgroup"      ; bmgroup -w            ; echo "END bmgroup";
echo "START lshosts"      ; lshosts -w            ; echo "END lshosts";
echo "START lsload"       ; lsload -w             ; echo "END lsload";
echo "START bhosts"       ; bhosts -w             ; echo "END bhosts";
echo "START SP_HOST_DIR"  ; echo "/common/lsftool/RBS/attrib/SP_HOSTS_DIR"; echo "END SP_HOST_DIR";
echo "START bjobs"        ; bjobs -u all -o "exec_host jobid stat user queue run_time cmd combined_resreq effective_resreq delimiter=';'"; echo "END bjobs";

FILE:: .//src_modules/chkServers/chkServers.js
// https://developer.mozilla.org/en-US/docs/Glossary/IIFE

(function(){

    // => load css for PVPI
    my_add_css("ss_google_icon","https://fonts.googleapis.com/icon?family=Material+Icons");
    // my_add_css("ss_PVPI_org","css/PVPI_org.css");

    

    ///////////////////////////////////////////
    // => private properties/ variables
    ///////////////////////////////////////////
    var tgtObj = {};

    ///////////////////////////////////////////
    // => public properties/ variables
    ///////////////////////////////////////////

    ///////////////////////////////////////////
    // => public methods
    ///////////////////////////////////////////
    /// =>
    exeServers.dsp_top_view = function(rtnO){
        console.log(rtnO);
        if(rtnO.length === 0){
            dsp_notification("No data retrieved, ignore to update dsp_top_view","Error");
            return 0;
        }

        // => update data
        tgtObj = rtnO;

        // => create enough elements
        if(document.getElementById("srvApache") === null){
            while(mainSide.childNodes.length>0){mainSide.lastChild.remove();}
            // =>
            mainSide.appendChild(gen_filter());
            mainSide.appendChild(gen_main_holder());
            mainSide.appendChild(gen_right_side());
        }else{}

        // => reset the content
        const topSrvApache = document.getElementById("srvApache");
        const topSrvExes = document.getElementById("srvExes");
        const topSrvNotExes = document.getElementById("srvNotExes");

        //update the guiding part
        document.getElementsByClassName("myCnt-siteName")[0].innerText = rtnO["_siteName_"];

        // empty the container firstly
        while(topSrvApache.childNodes.length > 0){topSrvApache.lastChild.remove();}
        while(topSrvExes.childNodes.length > 0){topSrvExes.lastChild.remove();}
        while(topSrvNotExes.childNodes.length > 0){topSrvNotExes.lastChild.remove();}
        
        let eleNotExeTop = document.createElement("div");
        let eleExeTop = document.createElement("div");
        let eleApache = document.createElement("div");
        let eleExeTop_cnt = new Object();//controlled by 

        ////
        eleApache.appendChild(dspSrvApache(tgtObj["_thishost_"]["hostname"], tgtObj["_byHost_"], tgtObj["_thishost_"]["summary"]));

        let aoHostNames = Object.keys(tgtObj["_byHost_"]);
        aoHostNames.sort().reverse();
        
        // -> separate the login servers
        for (let hostname of aoHostNames) {
            // console.log(hostname, tgtObj["_byHost_"][hostname]["lshosts_exeServer"])
            if(tgtObj["_byHost_"][hostname]["lshosts_exeServer"] === "No"){
                eleNotExeTop.appendChild(dspSrvNotExe(hostname, tgtObj["_byHost_"]))
            }else if(tgtObj["_byHost_"][hostname]["lshosts_exeServer"] === "Yes"){
                let os = tgtObj["_byHost_"][hostname]["lshosts_os"];
                let hgrp = tgtObj["_byHost_"][hostname]["_hostGroup_"];
                if(! eleExeTop_cnt.hasOwnProperty(os)) {eleExeTop_cnt[os] = new Object();}
                if(! eleExeTop_cnt[os].hasOwnProperty(hgrp)) {eleExeTop_cnt[os][hgrp] = new Array();}
                let addE = dspSrvExe(hostname, tgtObj);
                eleExeTop_cnt[os][hgrp].push(addE);
                // update the left hand if there existed
                if(document.getElementById("indSrv").classList.contains("w3-show")){
                    let dspHostName = indSrv.getElementsByTagName("div")[0].getElementsByTagName("div")[0].textContent;
                    if(dspHostName === hostname){
                        showDetailInfo(addE);
                    }else{}
                }else{}
            }else{
                //UNKNOWN type of server
                // console.log("WARN:: UNKNOWN server", hostname)
            }
        }

        //
        for(let os in eleExeTop_cnt){
            let eleOSGrp = document.createElement("fieldset");
            eleOSGrp.appendChild(document.createElement("legend"))
            eleOSGrp.childNodes[0].textContent = os;
            for(let hgrp in eleExeTop_cnt[os]){
                let eleHGrp = document.createElement("fieldset");
                eleHGrp.appendChild(document.createElement("legend"))
                eleHGrp.childNodes[0].textContent = hgrp;
                for(let aEle of eleExeTop_cnt[os][hgrp]){
                    eleHGrp.appendChild(aEle);
                }
                eleHGrp.style.padding = 0;
                eleOSGrp.appendChild(eleHGrp);
            }
            eleOSGrp.classList.add("w3-margin-top", "w3-bottombar", "w3-leftbar", "w3-round");
            eleOSGrp.style.paddingLeft = "2px";
            eleOSGrp.style.paddingRight = "2px";
            eleOSGrp.classList.add("w3-card-2");
            eleExeTop.appendChild(eleOSGrp)
        }

        // -> some format
        eleExeTop.classList.add("w3-row");

        // -> involve to document
        topSrvApache.appendChild(eleApache);
        topSrvExes.appendChild(eleExeTop);
        // topSrvNotExes.appendChild(eleNotExeTop);

        // => update status of some button
        dspFull.getElementsByTagName("span")[0].innerText = document.getElementsByClassName("srvSumInf_full").length;
        dspUnavai.getElementsByTagName("span")[0].innerText = document.getElementsByClassName("srvSumInf_unavai").length;
        dspOK.getElementsByTagName("span")[0].innerText = document.getElementsByClassName("srvSumInf_OK").length;
        dspUnknown.getElementsByTagName("span")[0].innerText = document.getElementsByClassName("srvSumInf_unknown").length;
        dspDedicated.getElementsByTagName("span")[0].innerText = document.getElementsByClassName("srvSumInf_dedicated").length;

        // => display servers based on the status of the displaying buttons (from the 2nd times updating), realtime updated
        filterSrvExe();

        // => rightside?!
        gen_sum_jobs_and_list_servers();

        // =>
        return 1;
    };

    /// =>
    exeServers.dsp_sum_view = function(rtnO){
        // =>
        let eTop = null;
        let eSlt = null;//selector for the in-scoped OS
        if(document.getElementById("srvExesSum") === null){
            while(mainSide.childNodes.length>0){mainSide.lastChild.remove();}
            // =>
            eSlt = my_create("div",undefined,[],{},{id:"srvExesSum_selector"});
            eTop = my_create("div",undefined,[],{},{id:"srvExesSum"});
            eSlt.appendChild(my_create("select",undefined,["w3-select","w3-black"]))
            mainSide.appendChild(eSlt);
            mainSide.appendChild(eTop);

            // =>
            eSlt.getElementsByTagName("select")[0].addEventListener("change",function(){
                exeServers.dsp_sum_view(rtnO);
            });
        }else{
            eTop = document.getElementById("srvExesSum");
            eSlt = document.getElementById("srvExesSum_selector");
        }


        // => clear all contents
        while(eTop.childNodes.length > 0){eTop.lastChild.remove();}
        // console.log(rtnO)

        // => get all selector avaliable (byOS=...)
        let oSlt = {};
        for(let siteName in rtnO){
            for(let slt in rtnO[siteName]["exeServers"]){
                oSlt[slt] = 1;
            }
        }
        for(tmpe of Object.keys(oSlt).sort()){
            let flgGo = true;
            for(let tmpe2 of eSlt.getElementsByTagName("option")){
                if(tmpe2.value === tmpe){
                    flgGo = false;
                    break;
                }
            }
            if(flgGo === true) eSlt.getElementsByTagName("select")[0].appendChild(my_create("option",tmpe,[],{"value":tmpe}))
        }

        // =>
        for(let siteName in rtnO){
            if(siteName.search(/problem_/) > -1) continue;
            let eSite = my_create("div",undefined,["w3-cell-row","w3-card-2","w3-light-gray"],{"margin-bottom":"10px"});
            let eTitle = my_create("div",siteName,["w3-cell"],{"width":"50px"})
            let eContent = my_create("div",undefined,["w3-cell"])

            let eLine = my_create("div",undefined,["w3-cell-row"])
            eLine.appendChild(gen_cell_w_brief("#jobs: "))
            eLine.appendChild(gen_cell_w_brief(get_value_from_object(rtnO,[siteName,"byJobs","byStatus","RUN"],"-"),"RUN"))
            eLine.appendChild(gen_cell_w_brief(get_value_from_object(rtnO,[siteName,"byJobs","byStatus","PEND"],"-"),"PEND"))
            eLine.appendChild(gen_cell_w_brief(get_value_from_object(rtnO,[siteName,"byJobs","byStatus","UNKWN"],"-"),"UNKWN"))
            eContent.appendChild(eLine)

            eLine = my_create("div",undefined,["w3-cell-row"]);
            eLine.appendChild(gen_cell_w_brief("Exe-servers"))
            eLine.appendChild(gen_cell_w_brief(get_value_from_object(rtnO,[siteName,"exeServers",eSlt.getElementsByTagName("select")[0].value,"#server"],"-"),"#all"))
            eLine.appendChild(gen_cell_w_brief(get_value_from_object(rtnO,[siteName,"exeServers",eSlt.getElementsByTagName("select")[0].value,"#server_OK"],"-"),"#OK"))
            eLine.appendChild(gen_cell_w_brief(get_value_from_object(rtnO,[siteName,"exeServers",eSlt.getElementsByTagName("select")[0].value,"#slots_all"],"-"),"#slots_MAX"))
            eLine.appendChild(gen_cell_w_brief(Number(get_value_from_object(rtnO,[siteName,"exeServers",eSlt.getElementsByTagName("select")[0].value,"maxmem"],"-")).toFixed(1),"maxmem"))
            eLine.appendChild(gen_cell_w_brief(Number(get_value_from_object(rtnO,[siteName,"exeServers",eSlt.getElementsByTagName("select")[0].value,"maxswap"],"-")).toFixed(1),"maxswap"))
            eContent.appendChild(eLine)

            eLine = my_create("div",undefined,["w3-cell-row"]);
            eLine.appendChild(gen_cell_w_brief("Job's occupied"))
            eLine.appendChild(gen_cell_w_brief(get_value_from_object(rtnO,[siteName,"exeServers",eSlt.getElementsByTagName("select")[0].value,"#server_has_jobs"],"-"),"#all"))
            eLine.appendChild(gen_cell_w_brief(get_value_from_object(rtnO,[siteName,"exeServers",eSlt.getElementsByTagName("select")[0].value,"#server_has_jobs_OK"],"-"),"#OK"))
            eLine.appendChild(gen_cell_w_brief(get_value_from_object(rtnO,[siteName,"exeServers",eSlt.getElementsByTagName("select")[0].value,"#slots_RUN"],"-"),"#slots_RUN"))
            eLine.appendChild(gen_cell_w_brief(Number(get_value_from_object(rtnO,[siteName,"exeServers",eSlt.getElementsByTagName("select")[0].value,"askedmem"],"-")).toFixed(1),"askedMEM"))
            eLine.appendChild(gen_cell_w_brief("n/a","-"))
            eContent.appendChild(eLine)

            eSite.appendChild(eTitle)
            eSite.appendChild(eContent)
            eTop.appendChild(eSite)
        }

    }

    exeServers.dsp_jobs_inscope_on_top = function(prjN,stat){
        let eWait = dsp_wait();
        console.log(prjN,stat)
        my_ajax_get("src_modules/chkServers/rtn_jobs_info_by_prj_setting.php",[{prjN:prjN,stat:stat}],function(rtnO){
            // console.log(rtnO)
            if(Object.keys(rtnO).length === 0){
                dsp_notification("Nothing to show","Warning");
                eWait.remove();
                return 0;
            }else{}

            let eTop = null;
            if(document.getElementById("jobs_in_scope_on_top") === null){
                eTop = my_create("div",undefined,
                    ["w3-display-container","w3-sand"],
                    {"position":"fixed","bottom":0,"height":"300px","width":"calc(100vw - 250px - 16px - 15px)"},
                    {id:"jobs_in_scope_on_top"})
                mainSide.appendChild(eTop); //
            }else{
                eTop = document.getElementById("jobs_in_scope_on_top");
            }
            while(eTop.childNodes.length>0){eTop.lastChild.remove()}

            eTop.appendChild(my_create("span",prjN,["myCnt-prjN-for-jobs"],{display:"none"},{}))
            eTop.appendChild(my_create("span",stat,["myCnt-stat-for-jobs"],{display:"none"},{}))

            let eTitle = my_create("h3",
                "Jobs info in: " + prjN + " stat='" + stat + "'",
                ["w3-yellow","myCnt-title"],
                {"position":"sticky","top":0},
                {});
            // => add a closing button, and title
            eX = my_create("span","X",["w3-container","w3-display-topright","w3-hover-red"]);
            eX.addEventListener("click",function(){
                eTop.remove();
                // modify the style of the relevant elements if needed
                // if(topE !== undefined && topE !== null) topE.style.paddingBottom = "initial";
            })
            eTop.appendChild(eTitle);
            eTop.appendChild(eX);
            
            // => manipulate data for content
            let oHeads = {};
            for(let site in rtnO){
                for(let unq in rtnO[site]){
                    for(let head in rtnO[site][unq]){
                        oHeads[head] = 1;
                    }
                }
            }
            let aHead = ["site","jobid","user","queue"]
            for(let tmpv in oHeads){
                if(aHead.indexOf(tmpv) === -1){
                    if(tmpv.search(/resreq/) > -1) continue;
                    aHead.push(tmpv)
                }
            }

            // => elements
            let eTblTop = my_create("div",undefined,["w3-responsive"],{"height":"80%"})
            let eTbl = my_create("table",undefined,["w3-table-all"])
            let eTbd = my_create("tbody",undefined,["w3-tiny"])

            // header
            eTbd.appendChild(my_add_row(aHead,"th",{"padding":0}))

            // content
            for(let site in rtnO){
                for(let unq in rtnO[site]){
                    let data = [];
                    for(let head of aHead){
                        // => manipulate the value
                        let val = "-";
                        if(rtnO[site][unq].hasOwnProperty(head)) val = rtnO[site][unq][head];
                        if(head === "site"){
                            val = site
                        }else if(head === "hosts"){
                            val = val.split(/:/).length
                        }else{}
                        // =>
                        data.push(val)
                    }
                    // =>
                    eTbd.appendChild(my_add_row(data,"td",{"padding":0}))
                }
            }

            eTbl.appendChild(eTbd)
            eTblTop.appendChild(eTbl)
            eTop.appendChild(eTblTop)
            // =>
            eWait.remove();
        })
        return 1;
    }

    ///////////////////////////////////////////
    // => private methods
    ///////////////////////////////////////////
    function get_value_from_object(obj,aoK,defV){
        if(obj === undefined || obj === null) return defV;
        if(typeof(obj) !== "object") return obj;
        if(aoK.length === 1){
            if(defV !== undefined && obj[aoK[0]] === undefined){
                return defV;
            }else{
                return obj[aoK[0]];
            }
        }
        let first = aoK.shift();
        return get_value_from_object(obj[first],aoK,defV);
    }

    function gen_cell_w_brief(mainContent,subContent){
        let eTop = my_create("div",undefined,["w3-cell","w3-display-container"],{"min-width":"80px","height":"32px"})
        if(subContent === undefined){
            eTop.appendChild(my_create("span",mainContent,["w3-display-right"]))
        }else{
            eTop.appendChild(my_create("span",mainContent,["w3-display-bottomright"]))
            eTop.appendChild(my_create("span",subContent,["w3-display-topright","w3-tiny"]))
        }
        return eTop;
    }

    function gen_filter(){
        let eTop = my_create("div",undefined,["w3-white","w3-small"],{"height":"30px","position":"sticky","top":0},{"id":"filter"});

        // => for toggle the left side
        let btn = my_create("div","toggleLeft",["w3-button","w3-card-4"],{"padding":"3px"})
        btn.addEventListener("click",function(){toggleDspId("indSrv")});
        eTop.appendChild(btn);
        // => for selection of types of servers
        eTop.appendChild(gen_eye("dspDedicated","w3-purple","visibility"));
        eTop.appendChild(gen_eye("dspFull","w3-red","visibility"));
        eTop.appendChild(gen_eye("dspUnavai","w3-black","visibility_off"));
        eTop.appendChild(gen_eye("dspOK","w3-green","visibility"));
        eTop.appendChild(gen_eye("dspUnknown","w3-transparent","visibility"));
        // => for toggle the right side
        btn = my_create("div","toggleRight",["w3-button","w3-card-4"],{"padding":"3px"})
        btn.addEventListener("click",function(){toggleDspId("rightEle")});
        eTop.appendChild(btn);

        // => a seprated line
        eTop.appendChild(my_create("div",undefined,["w3-leftbar","w3-border-indigo"],{"height":"30px","display":"inline","margin":"0 10px 0 10px"}))

        // => btn for listing servers (w/ LSF jobs info)
        eTop.appendChild(gen_btn_listing_servers());

        // => a seprated line
        eTop.appendChild(my_create("div",undefined,["w3-leftbar","w3-border-indigo"],{"height":"30px","display":"inline","margin":"0 10px 0 10px"}))

        // // => user input name
        // let inpL = my_create("label","Users:")
        // let inpE = my_create("input",undefined,["w3-card-2"],{"padding":"3px"},{"id":"somebody","placeholder":"usernames (seperated by space)"})
        // eTop.appendChild(inpL)
        // eTop.appendChild(inpE)

        // => this server
        eTop.appendChild(my_create("div",undefined,["w3-blue","w3-bottombar"],{},{"id":"srvApache"}));
        // =>
        return eTop;
    }

    function gen_main_holder(){
        let eTop = my_create("div",undefined,["w3-row","w3-small"],{},{id:"exeSrv_at_site"});
        let eLeft = my_create("div","Click on any server to see more info here.",["w3-col","s6","m4","l2","w3-animate-left"],{"padding-bottom":"30px","top":"100px","display":"none","position":"sticky"},{"id":"indSrv"})
        let eMain = my_create("div",undefined,["w3-rest","w3-border-bottom","w3-row"],{"padding-bottom":"30px","margin-top":"30px"})
        eMain.appendChild(my_create("span",undefined,["myCnt-siteName"],{"display":"none"},{}))
        eMain.appendChild(my_create("div",undefined,[],{"width":"100%"},{"id":"srvExes"}))
        eMain.appendChild(my_create("div",undefined,["w3-yellow"],{"width":"100%"},{"id":"srvNotExes"}))
        eTop.appendChild(eLeft)
        eTop.appendChild(eMain)
        return eTop;
    }

    function gen_right_side(){
        let eTop = my_create("div",undefined,["w3-animate-right","w3-light-grey","w3-round","w3-card-4"],{"display":"none","position":"fixed","bottom":0,"right":0,"padding":"5px 5px 15px 5px"},{"id":"rightEle"})
        return eTop;
    }

    function gen_eye(id,color,iconTxt){
        let eTop = my_create("div",undefined,
            ["w3-button","w3-round","w3-card-4",color],
            {"padding":0,"display":"inline-block","width":"30px","height":"30px","position":"relative"},
            {"id":id}
        );
        eTop.appendChild(my_create("i",iconTxt,["material-icons"],{"padding":0,"width":"24px","margin":"auto"}))
        eTop.appendChild(my_create("span","-",["w3-tiny"],{"position":"absolute","right":"2px","bottom":0}))
        eTop.addEventListener("click",function(){toggleDspServerType(eTop)})
        return eTop;
    }

    function gen_btn_listing_servers(){
        let eTop = my_create("div",undefined,
            ["w3-round","w3-card-4","my-tooltip"],
            {"padding":0,"display":"inline-block","width":"30px","height":"30px","position":"relative"},
        );
        eTop.appendChild(my_create("i","view_list",["material-icons","w3-button"],{"padding":"3px","width":"30px","margin":"auto"}))
        eTop.appendChild(my_create("div","List servers in table, and LSF jobs info",["my-tooltip-content"]))
        eTop.addEventListener("click",function(){
            if(document.getElementById("rightEle") === null) return;//there is no right-side, structure seems broken
            // => toggle the right side
            toggleDspEle(rightEle);

            // =>
            gen_sum_jobs_and_list_servers();

            return;
        })
        return eTop;
    }

    function gen_sum_jobs_and_list_servers(){
        if(document.getElementById("rightEle") === null) return;
        // => don't do when there is no right-side
        if(! rightEle.classList.contains("w3-show")) return;
        let aDiv1 = null;
        // gen new or re-use
        if(document.getElementById("remaining_resources") === null){
            while(rightEle.childNodes.length > 0){ rightEle.lastChild.remove(); }
            aDiv1 = my_create("div",undefined,
                            ["w3-responsive","w3-card-4"],
                            {   "max-height":"600px","height":"70vh",
                                "max-width":"800px",
                                "padding":"5px"
                            },
                            {"id":"remaining_resources"}
                        );
            // layout
            rightEle.appendChild(aDiv1);
        }else{
            aDiv1 = document.getElementById("remaining_resources");
        }

        while(aDiv1.childNodes.length>0){aDiv1.lastChild.remove()}

        // info of LSF jobs run
        aDiv1.appendChild(gen_ele_jobs());

        // table of listing serveres
        aDiv1.appendChild(gen_ele_remaining_resources());

        // => auto sorting for first look
        sortTblByHeader(aDiv1.getElementsByTagName("th")[4]);
        
        return;
    }

    function toggleDspId(tgtId){
        let tgtEle = document.getElementById(tgtId)
        console.log(tgtId,tgtEle)
        if(tgtEle === null) return;
        if (tgtEle.className.indexOf("w3-show") == -1) {
            tgtEle.className += " w3-show";
        } else { 
            tgtEle.className = tgtEle.className.replace(" w3-show", "");
        }
        return;
    }
    function toggleDspEle(tgtEle){
        // console.log("toggle", tgtEle, tgtEle.parentNode)
        if (tgtEle.className.indexOf("w3-show") == -1) {
            tgtEle.className += " w3-show";
        } else { 
            tgtEle.className = tgtEle.className.replace(" w3-show", "");
        }
        return;
    }
    function showEle(tgtEle){
        if (tgtEle.className.indexOf("w3-show") == -1) {
            tgtEle.className += " w3-show";
        } else { 
            // tgtEle.className = tgtEle.className.replace(" w3-show", "");
        }
        return;
    }

    function dspSrvApache(hostname,data_byHost, summary){
        let ele = document.createElement("div");
        // -> content
        ele.innerHTML = hostname + " / " + summary + " / ut=" + data_byHost[hostname]["lsload_ut"];
        // -> format
        ele.className += "w3-cell";
        ele.style.minWidth = "60px";
        return ele;
    }
    
    function dspSrvNotExe(hostname,data_byHost){
        let ele = document.createElement("div");
        // -> content
        ele.innerHTML = hostname;
        // -> format
        ele.className += "w3-cell";
        ele.style.minWidth = "60px";
        return ele;
    }
    
    function dspSrvExe(hostname,tgtObj){
        let data_byHost = null;
        if(tgtObj.hasOwnProperty("_byHost_")) data_byHost = tgtObj["_byHost_"];
        if(data_byHost === null) return;
        if(data_byHost[hostname] === undefined) {return;}
    
        let ele = document.createElement("div");
        let head = document.createElement("div");
        let content = document.createElement("div");
        let stt_stt = document.createElement("div"); //status
        let stt_ut = document.createElement("div"); //lsload_ut
        let stt_p_njobs = document.createElement("div"); //percent of NJOBS/MAX
        let stt_p_mem = document.createElement("div"); //percent of sum-memory / lsload_mem (lsload_swp)
    
        // -> header
        head.innerText = hostname;
        if(data_byHost[hostname]["dedicated_head"] !== undefined){
            head.classList.add("w3-purple");
        }
    
        // stt_stt
        stt_stt.innerHTML = data_byHost[hostname]["bhosts_status"];
    
        // stt_ut
        stt_ut.innerHTML = "n/a";
        if(data_byHost[hostname]["lsload_ut"] !== "") { stt_ut.innerHTML = data_byHost[hostname]["lsload_ut"]};
    
        // njobs
        let blk1 = document.createElement("div");
        // let blk2 = document.createElement("div");
        
        blk1.innerHTML = (100 * data_byHost[hostname]["bhosts_NJOBS"] / data_byHost[hostname]["bhosts_MAX"] ).toFixed(0) + "%";
        // blk2.innerHTML = "";
        // blk2.innerHTML += "<span>" + "bhosts_MAX:" + data_byHost[hostname]["bhosts_MAX"] + "</span>"; 
        // blk2.innerHTML += "<span>" + "bhosts_NJOBS:" + data_byHost[hostname]["bhosts_NJOBS"] + "</span>"; 
        let noExeJobs = 0;
        let noExeCPU = 0;
        for(let jobid in data_byHost[hostname]){
            if(/^\d+$/.test(jobid)){
                noExeCPU += data_byHost[hostname][jobid]["#hosts"];
                noExeJobs += 1;
            }
        }
        // blk2.innerHTML += "<span>" + "#Jobs:" + noExeJobs + "</span>"; 
        // blk2.innerHTML += "<span>" + "#cpu:" + noExeCPU + "</span>"; 
    
        stt_p_njobs.appendChild(blk1);
        // stt_p_njobs.appendChild(blk2);
    
        // mem
        blk1 = document.createElement("div");
        // blk2 = document.createElement("div");
    
        //let lsloadmem = /\d+/.exec(data_byHost[hostname]["lsload_mem"]);
        // let lsloadmem = getMem(data_byHost[hostname]["lsload_mem"]);
        let lsloadmem = getMem(data_byHost[hostname]["lshosts_maxmem"]);//change method to get max-mem to lshosts
        let usedmem = 0;
        for(let jobid in data_byHost[hostname]){
            if(/^\d+$/.test(jobid)){
                let askMem = 1.0;
                if(data_byHost[hostname][jobid].hasOwnProperty("resreq")){
                    if(/use_mem_size/.test(data_byHost[hostname][jobid]["resreq"])){
                        askMem = /use_mem_size=([\d\.]+)/.exec(data_byHost[hostname][jobid]["resreq"])[1];
                    }
                }
                usedmem += Number(askMem);
            }
        }
        blk1.innerHTML = (100 * usedmem / lsloadmem ).toFixed(0) + "%";
        // blk1.innerHTML = usedmem + "/" + lsloadmem;
    
        stt_p_mem.appendChild(blk1);
        // stt_p_mem.appendChild(blk2);
    
    
        // -> content
        content.appendChild(stt_stt);
        content.appendChild(stt_ut);
        content.appendChild(stt_p_njobs);
        content.appendChild(stt_p_mem);
        ele.appendChild(head);
        ele.appendChild(content);
    
        // -> last format => consider the current view also (if view_comfy then need special care)
        head.classList.add("w3-border-bottom","w3-round")
        head.style.overflow = "auto";
        content.classList.add("w3-cell-row");
        stt_stt.classList.add("w3-cell", "w3-border-right");
        stt_ut.classList.add("w3-cell", "w3-border-right");
        stt_p_njobs.classList.add("w3-cell", "w3-border-right");
        stt_p_mem.classList.add("w3-cell", "w3-border-right");
    
        content.classList.add("w3-tiny");
    
        // -> update color based on status
        if(stt_stt.innerText === "closed_Full")     { stt_stt.style.display='none';   stt_ut.style.display=''     ; stt_p_mem.style.display=''        ; stt_p_njobs.style.display=''      ;   ele.classList.add("w3-red");
        }else if(stt_stt.innerText === "unavail")   { stt_stt.style.display=''    ;   stt_ut.style.display='none' ; stt_p_mem.style.display='none'    ; stt_p_njobs.style.display='none'  ;   ele.classList.add("w3-black");
        }else if(stt_stt.innerText === "undefined") { stt_stt.style.display=''    ;   stt_ut.style.display='none' ; stt_p_mem.style.display='none'    ; stt_p_njobs.style.display='none'  ;   ele.classList.add("w3-black");
        }else if(stt_stt.innerText === "closed_Adm"){ stt_stt.style.display=''    ;   stt_ut.style.display='none' ; stt_p_mem.style.display='none'    ; stt_p_njobs.style.display='none'  ;   ele.classList.add("w3-black");
        }else if(stt_stt.innerText === "ok")        { stt_stt.style.display='none';   stt_ut.style.display=''     ; stt_p_mem.style.display=''        ; stt_p_njobs.style.display=''      ;   ele.classList.add("w3-green");
        }else{}
    
        upColorByPercent(stt_ut);
        upColorByPercent(stt_p_mem);
        upColorByPercent(stt_p_njobs);
        
    
        // => consider the current view also (if view_comfy then need special care)
        // if(dspCompactorComfy.getElementsByTagName("i")[0].innerText === "view_comfy"){
            ele.classList.add("w3-cell","w3-round-large","w3-border-blue");
            ele.style.minWidth = "60px";
            ele.style.display = "inline-block"
            // ele.classList.add("w3-container")
            head.innerHTML = head.innerHTML.replace("rvc-srv","<span style=\"display:none\">rvc-srv</span>");
            head.style.padding = 0;
            head.style.overflow = "hidden";
            for(let tmpv of Array(stt_ut, stt_p_njobs, stt_p_mem)){
                tmpv.style.fontSize = "8px";
                tmpv.innerHTML = tmpv.innerHTML.replace("%","<span style=\"display:none\">%</span>")
            }
        // }else{
        //     ele.classList.add("w3-round-large", "w3-col", "s6", "m2", "l1");
        //     ele.style.minWidth = "60px";
        //     // ele.classList.add("w3-container")
        // }
        ele.style.margin = "0";
        ele.style.padding = "2px";
        ele.classList.add("w3-border", "w3-center", "w3-hover-shadow")
    
        // add listener to display detail info when clicking
        ele.addEventListener("click", function(){showDetailInfo(this,tgtObj)});
    
        // add class for management later
        ele.classList.add("srvSumInf")
    
        if(stt_stt.innerText === "closed_Full")     {ele.classList.add("srvSumInf_full");
        }else if(stt_stt.innerText === "unavail")   {ele.classList.add("srvSumInf_unavai");
        }else if(stt_stt.innerText === "undefined") {ele.classList.add("srvSumInf_unavai");
        }else if(stt_stt.innerText === "closed_Adm"){ele.classList.add("srvSumInf_unavai");
        }else if(stt_stt.innerText === "ok")        {ele.classList.add("srvSumInf_OK");
        }else{                                       ele.classList.add("srvSumInf_unknown");
        }
    
        if(data_byHost[hostname]["dedicated_head"] !== undefined){ ele.classList.add("srvSumInf_dedicated");}
    
        ///
        return ele;
    }

    function showDetailInfo(tgtEle,tgtObj){
        // ->
        // let hostname  = tgtEle.childNodes[0].innerText;
        let hostname = "";
        if(typeof(tgtEle) === "object"){
            hostname  = tgtEle.getElementsByTagName("div")[0].textContent;
        }else{
            hostname = tgtEle;
        }
        let clonedNode = dspSrvExe(hostname, tgtObj);
        clonedNode.classList.remove("w3-col");
        for(let chkClass of clonedNode.classList){
            if(/^srvSumInf/.test(chkClass)){
                clonedNode.classList.remove(chkClass);
            }
        }
    
        // ->
        let eleIndSrv = document.getElementById("indSrv");
        // remove all child for sure
        while(eleIndSrv.childNodes.length > 0){
            eleIndSrv.lastChild.remove();
        }
        let header = document.createElement("h4"); 
        let dedicated = document.createElement("label");
        let status = document.createElement("label");
        let theTbl = document.createElement("table");
        let tblInfo = document.createElement("tbody");
        let topDediInfo = document.createElement("div");
        let topJobsInfo = document.createElement("div");
    
        header.innerText = hostname;
        dedicated.innerText = "Common server.";     if(tgtObj["_byHost_"][hostname]["dedicated_head"] !== undefined){ dedicated.innerText = "Dedicated server."; }
    
        status.innerText = "bhost status: " + tgtObj["_byHost_"][hostname]["bhosts_status"];
    
        add_trd_to_tbl(tblInfo, Array("OS", tgtObj["_byHost_"][hostname]["lshosts_os"]));
        add_trd_to_tbl(tblInfo, Array("Group", tgtObj["_byHost_"][hostname]["_hostGroup_"]));
        add_trd_to_tbl(tblInfo, Array("Utilization", tgtObj["_byHost_"][hostname]["lsload_ut"]));
        add_trd_to_tbl(tblInfo, Array("%slot\nnJOB/MAX", 
            (100 * tgtObj["_byHost_"][hostname]["bhosts_NJOBS"] / tgtObj["_byHost_"][hostname]["bhosts_MAX"] ).toFixed(0) + "%" + "\n" +
            tgtObj["_byHost_"][hostname]["bhosts_NJOBS"] + "/" + tgtObj["_byHost_"][hostname]["bhosts_MAX"]));
        
        let lsloadmem = getMem(tgtObj["_byHost_"][hostname]["lshosts_maxmem"]);
        let usedmem = 0;
        for(let jobid in tgtObj["_byHost_"][hostname]){
            if(/^\d+$/.test(jobid)){
                let askMem = /use_mem_size=([\d\.]+)/.exec(tgtObj["_byHost_"][hostname][jobid]["resreq"])[1];
                usedmem += Number(askMem);
            }
        }
        add_trd_to_tbl(tblInfo, Array("%mem\nAsked/Max", 
        (100 * usedmem / lsloadmem ).toFixed(0) + "%" + "\n" +
            usedmem + "/" + lsloadmem));
    
        for(let keyw of Array(
            "lsload_mem",
            "lshosts_maxmem",
            "lshosts_cpuf",
            "lsload_swp",
            "lsload_tmp",
            "lsload_status",
        )){
            add_trd_to_tbl(tblInfo, Array(keyw,  tgtObj["_byHost_"][hostname][keyw]));
        }
    
        if(dedicated.innerText === "Dedicated server."){
            let dspPart = document.createElement("div");
            let noneDspPart = document.createElement("div");noneDspPart.style.display = "none";
            for(let headStr of tgtObj["_byHost_"][hostname]["dedicated_head"]){
                let span = document.createElement("span");
                span.innerText = headStr;
                span.style.display = "block";
                // span.style.width = "100px";
                span.style.whiteSpace = "nowrap";
                span.style.overflow = "hidden";
                span.style.textOverflow = "ellipsis";
                dspPart.appendChild(span);
            }
            topDediInfo.appendChild(dspPart);
            let btnMore = document.createElement("button"); btnMore.innerText = "who are in the list?";
            btnMore.style.float = "right"; btnMore.style.position = "relative"; btnMore.style.bottom = "20px";
            dspPart.appendChild(btnMore);
            for(let user of tgtObj["_byHost_"][hostname]["dedicated_users"]){
                let span = document.createElement("span");
                span.innerText = user;
                span.style.display = "inline-block";
                span.style.marginLeft = "2px";
                span.style.borderRight = "solid 1px gray";
                span.style.borderBottom = "solid 1px gray";
                noneDspPart.appendChild(span);
            }
            topDediInfo.appendChild(noneDspPart);
            btnMore.addEventListener("click", function(){toggleDspEle(noneDspPart)});
        }else{}
    
        let jobsCount = document.createElement("span"); jobsCount.innerText = "#jobs=";
        let tblTopJobs = document.createElement("table"); let tblJobs = document.createElement("tbody");
        let noJobs = 0;
        for(let jobId in tgtObj["_byHost_"][hostname]){
            if(/^\d+$/.test(jobId)){
                noJobs+=1;
                add_trd_to_tbl(tblJobs, Array(
                    jobId,
                    tgtObj["_byHost_"][hostname][jobId]["#hosts"],
                    tgtObj["_byHost_"][hostname][jobId]["stat"],
                    tgtObj["_byHost_"][hostname][jobId]["queue"],
                    tgtObj["_byHost_"][hostname][jobId]["user"],
                    getHour(tgtObj["_byHost_"][hostname][jobId]["run_time"])
                ));
            }
        }
        jobsCount.innerText += "'" + noJobs + "'";
        tblTopJobs.appendChild(tblJobs);
        topJobsInfo.appendChild(jobsCount);
        topJobsInfo.appendChild(tblTopJobs);
        
        // formatting
        header.style.margin = 0;
        dedicated.classList.add("w3-block", "w3-tiny");
        status.classList.add(   "w3-block", "w3-tiny");
        theTbl.classList.add("w3-table-all", "w3-hoverable")
        tblInfo.classList.add("w3-tiny");
        tblTopJobs.classList.add("w3-hoverable", "w3-responsive", "w3-block", "w3-striped")
        tblJobs.classList.add("w3-tiny");
        eleIndSrv.classList.add("w3-responsive");
        topDediInfo.classList.add("w3-tiny","w3-purple");
    
        // element tree
        eleIndSrv.appendChild(header);
        eleIndSrv.appendChild(dedicated);
        eleIndSrv.appendChild(status);
        eleIndSrv.appendChild(clonedNode);
        theTbl.appendChild(tblInfo);
        eleIndSrv.appendChild(theTbl);
        eleIndSrv.appendChild(topDediInfo);
        eleIndSrv.appendChild(topJobsInfo);
    
        // eleIndSrv.childNodes[0].innerText = hostname;
        showEle(eleIndSrv);
        return;
    }

    function add_trd_to_tbl(eleTbl, aoTdTxt){
        if(aoTdTxt.length === 0) {
            console.log("dbg:: not have any data to update, ignored.");
            return;
        }
        let tr = document.createElement("tr");
        for(let tdTxt of aoTdTxt){
            let td = document.createElement("td"); td.innerHTML = tdTxt; tr.appendChild(td); td.style.padding = "1px";
        }
        tr.style.padding = 0;
        eleTbl.appendChild(tr);
        return;
    }
    function add_trh_to_tbl(eleTbl, aoTdTxt){
        let tr = document.createElement("tr");
        for(let tdTxt of aoTdTxt){
            let td = document.createElement("th"); td.innerHTML = tdTxt; tr.appendChild(td); td.style.padding = "1px";
        }
        tr.style.padding = 0;
        eleTbl.appendChild(tr);
        return;
    }
    
    function upColorByPercent(tgtEle){
        // console.log(tgtEle.innerText)
        if(/[\d\.]+%/.test(tgtEle.innerText)){
            let numb = Number(/([\d+\.]+)%/.exec(tgtEle.innerText)[1])
            if(numb < 50){
                tgtEle.classList.add("w3-green", "w3-round");
            }else if(numb < 75){
                tgtEle.classList.add("w3-yellow", "w3-round");
            }else if(numb < 95){
                tgtEle.classList.add("w3-orange", "w3-round");
            }else if(numb){
                tgtEle.classList.add("w3-red", "w3-round");
            }else{
                // let the color as it is
            }
        }else{}
        return;
    }

    function getMem(iStr){
        // convert a string to be a memory in GB
        let oStr = iStr;
        if(/\d+/.test(iStr)){
            let num = /\d+/.exec(iStr);
            let unit = /[^\d\.]+/.exec(iStr);
            if(unit[0] === "G") {
                oStr = num[0];
            }else if(unit[0] === "M") {
                oStr = (Number(num[0]) / 1024).toFixed(1);
            }else if(unit === "T"){
                oStr = Number(num[0]) * 1024;
            }
        }else{}
        // console.log(iStr, oStr)
        return oStr;
    }
    
    function getHour(iStr){
        // convert a string to be a number in hours (run_time)
        let oStr = iStr;
        if(/\d+/.test(iStr)){
            let num = /\d+/.exec(iStr);
            let unit = /[^\d\.]+/.exec(iStr);
            if(unit[0] === " second(s)") {
                oStr = (Number(num[0])/3600).toFixed(1) + "h";
            }
        }else{}
        // console.log(iStr, oStr)
        return oStr;
    }

    function toggleDspServerType(clickedEle){
        let sttEle = clickedEle.getElementsByTagName("i")[0];
        // change the status
        if(sttEle.innerText === "visibility"){
            sttEle.innerText = "visibility_off";
        }else{
            sttEle.innerText = "visibility";
        }
        // => call the filter
        filterSrvExe();
    }
    
    function filterSrvExe(){
        // srvSumInf_full
        // srvSumInf_unavai
        // srvSumInf_OK
        // srvSumInf_unknown
        // srvSumInf_dedicated
        // mapping for the filtering
        let aoMap = [
            { "dspFull" : "srvSumInf_full" },
            { "dspUnavai" : "srvSumInf_unavai" },
            { "dspOK" : "srvSumInf_OK" },
            { "dspUnknown" : "srvSumInf_unknown" },
            { "dspDedicated" : "srvSumInf_dedicated" },
        ]
        for(let tmpv of aoMap){
            for(let cntId in tmpv){
                let dspClass = tmpv[cntId];
                if(document.getElementsByClassName(dspClass).length > 0){
                    if(document.getElementById(cntId).getElementsByTagName("i")[0].innerText === "visibility"){
                        for(let tmpE of document.getElementsByClassName(dspClass)){
                            tmpE.style.display = "inline-block";
                        }
                    }else{
                        for(let tmpE of document.getElementsByClassName(dspClass)){
                            tmpE.style.display = "none";
                        }
                    }
                }else{}
            }
        }
        // checking if the wrapper (fieldset) need to display or none also
        for(let fsEle of document.getElementsByTagName("fieldset")){
            let flgDsp = false;
            for(let srvEle of fsEle.getElementsByClassName("srvSumInf")){
                if(srvEle.style.display !== "none") flgDsp = true;
            }
            if(flgDsp === false) {
                fsEle.style.display = "none";
            }else{
                fsEle.style.display = "";
            }
        }
        return;
    }

    function gen_ele_remaining_resources(){
        let oEle = document.createElement("table");
        let aTbd = document.createElement("tbody");
        // => header
        add_trh_to_tbl(aTbd,Array(
            "Srv-name",
            "OS-vers",
            "Group",
            "Uti",
            "validSlot",
            "validMem",
            "moreInfo"
        ));
        for(let tgtE of aTbd.lastChild.getElementsByTagName("th")){ tgtE.setAttribute("onclick","sortTblByHeader(this)"); tgtE.classList.add("w3-button","w3-hover-blue")}
        
        // => content
        for(let srvN in tgtObj["_byHost_"]){
            let exeSrv = tgtObj["_byHost_"][srvN]["lshosts_exeServer"]; if(exeSrv !== "Yes") {continue; }
            let stt = tgtObj["_byHost_"][srvN]["bhosts_status"];        if (stt !== "ok") {continue;}
            let os = tgtObj["_byHost_"][srvN]["lshosts_os"];
            let group = tgtObj["_byHost_"][srvN]["_hostGroup_"];
            let ut = tgtObj["_byHost_"][srvN]["lsload_ut"];
            let dedi = ""; if(tgtObj["_byHost_"][srvN]["dedicated_head"] !== undefined){dedi = "Dedicated"}
            let validSlot = tgtObj["_byHost_"][srvN]["bhosts_MAX"] - tgtObj["_byHost_"][srvN]["bhosts_NJOBS"];
            let maxMem = getMem(tgtObj["_byHost_"][srvN]["lshosts_maxmem"]);
            let usedMem = 0;
            for(let jobid in tgtObj["_byHost_"][srvN]){
                if(/^\d+$/.test(jobid)){
                    let askMem = 1.0;
                    if(/use_mem_size/.test(tgtObj["_byHost_"][srvN][jobid]["resreq"])){
                        askMem = /use_mem_size=([\d\.]+)/.exec(tgtObj["_byHost_"][srvN][jobid]["resreq"])[1];
                    }
                    usedMem += Number(askMem);
                }
            }
            let validMem = (maxMem - usedMem).toFixed(0);
    
            // ->
            add_trd_to_tbl(aTbd, Array(
                srvN,
                os,
                group,
                ut,
                validSlot+ "/" + tgtObj["_byHost_"][srvN]["bhosts_MAX"],
                validMem + "/" + Number(maxMem).toFixed(0),
                dedi
            ));
            // mapping the server to left-side action
            aTbd.lastChild.getElementsByTagName("td")[0].setAttribute("onclick","showDetailInfo(this.innerText)");
            aTbd.lastChild.getElementsByTagName("td")[0].classList.add("w3-button","w3-brown");
        }
        // => update some format late for content
        for(let tgtE of aTbd.getElementsByTagName("td")){
            tgtE.style.margin = "1px";
            tgtE.style.border = "solid 1px";
        }
    
        // construction
        oEle.appendChild(aTbd);
        // some format
        aTbd.classList.add("w3-table-all")
        oEle.classList.add("w3-table-all","w3-responsive","w3-hoverable","w3-small")
        oEle.style.width = "100%";
        return oEle;
    }

    function gen_ele_jobs(){
        
        // => content
        let nj_all = 0;//total jobs
        let nj_pend = 0;//
        let nj_run = 0;//
        let nj_unkn = 0;//

        let ncpu_all = 0;//available for all
        let ncpu_run = 0;//run occupied
        let ncpu_ask = 0;//asked by jobs submit, including pending

        let mem_all = 0;
        let mem_ask = 0;

        for(let srvN in tgtObj["_byHost_"]){
            let exeSrv = tgtObj["_byHost_"][srvN]["lshosts_exeServer"];
            // if(exeSrv !== "Yes") {continue; }
            // let stt = tgtObj["_byHost_"][srvN]["bhosts_status"];        if (stt !== "ok") {continue;}
            // let os = tgtObj["_byHost_"][srvN]["lshosts_os"];1
            // let group = tgtObj["_byHost_"][srvN]["_hostGroup_"];
            // let ut = tgtObj["_byHost_"][srvN]["lsload_ut"];
            // let dedi = ""; if(tgtObj["_byHost_"][srvN]["dedicated_head"] !== undefined){dedi = "Dedicated"}

            ncpu_all += cnv_to_int_if_possible(tgtObj["_byHost_"][srvN]["bhosts_MAX"]);
            ncpu_run += cnv_to_int_if_possible(tgtObj["_byHost_"][srvN]["bhosts_NJOBS"]); //
            
            // let maxMem = getMem(tgtObj["_byHost_"][srvN]["lshosts_maxmem"]);
            mem_all += cnv_to_int_if_possible(getMem(tgtObj["_byHost_"][srvN]["lshosts_maxmem"]));

            let usedMem = 0;
            for(let jobid in tgtObj["_byHost_"][srvN]){
                if(/^\d+$/.test(jobid)){
                    let askMem = 0.0;
                    if(tgtObj["_byHost_"][srvN][jobid].hasOwnProperty("resreq") && tgtObj["_byHost_"][srvN][jobid]["resreq"] !== "-"){
                        if(/use_mem_size/.test(tgtObj["_byHost_"][srvN][jobid]["resreq"])){
                            askMem = /use_mem_size=([\d\.]+)/.exec(tgtObj["_byHost_"][srvN][jobid]["resreq"])[1];
                        }else if(/mem=/.test(tgtObj["_byHost_"][srvN][jobid]["resreq"])){
                            askMem = /mem=([\d\.]+)/.exec(tgtObj["_byHost_"][srvN][jobid]["resreq"])[1];
                        }else{
                            console.log("cannot get askedMem from: jobid='"+jobid+"' resreq='"+tgtObj["_byHost_"][srvN][jobid]["resreq"]+"'")
                        }
                    }
                    usedMem += cnv_to_int_if_possible(askMem);

                    // =>
                    nj_all++;
                    if(tgtObj["_byHost_"][srvN][jobid]["stat"] === "RUN"){
                        nj_run+=1;
                    }else if(tgtObj["_byHost_"][srvN][jobid]["stat"] === "PEND"){
                        nj_pend+=1;
                    }else{
                        nj_unkn+=1;
                    }

                    // =>
                    ncpu_ask+=tgtObj["_byHost_"][srvN][jobid]["#hosts"];
                }
            }
            // let validMem = (maxMem - usedMem).toFixed(0);
            mem_ask += usedMem;
        }

        let eTop = my_create("div",undefined,["w3-pink"]);
        eTop.appendChild(my_create("div","#jobs all/pend/run/unkn: " + [nj_all,nj_pend,nj_run,nj_unkn].join(" / ")))
        eTop.appendChild(my_create("div","#slots all/ask/run: " + [ncpu_all,ncpu_ask,ncpu_run].join(" / ")))
        eTop.appendChild(my_create("div","#mem all/ask: " + [mem_all,mem_ask].join(" / ")))
        
        return eTop;
    }

    function cnv_to_int_if_possible(inp){
        if(inp === undefined) return 0;
        if(inp === null) return 0;
        // For booleans, Number() returns 0 or 1.
        // For dates, Number() returns milliseconds since January 1, 1970 00:00:00.
        // For strings, Number() returns a number or NaN.
        if(isNaN(Number(inp))){
            console.log("cannot convert to number: " + inp)
            return 0;
        }else{
            return parseInt(Number(inp))
        }
    }

}(window.exeServers = window.exeServers || {}));

FILE:: .//src_modules/chkServers/rtn_jobs_info_by_prj_setting.php
<?php
    // ini_set('display_errors', 1);
    // ini_set('display_startup_errors', 1);
    // error_reporting(E_ALL);

    if(! isset($_GET["prjN"])) {echo json_encode(array()); return ;}
    if($_GET["prjN"] === "") {echo json_encode(array()); return ;}

    $prjN = $_GET["prjN"];
    $chkStat = "";
    if(isset($_GET["stat"])) $chkStat = $_GET["stat"];

    require_once '../../src_main/my.php';
    require_once("../../src_modules/PLPI_observation/PLPI_obs_sqlite3.class.php");
    register_shutdown_function("my_handler_fatal");
    $obs = new PLPI_observation;
    date_default_timezone_set("Asia/Ho_Chi_Minh");

    $oO = array();
    
    // => get setting of users of project
    $settingStr = convert_arr_to_hash($obs->get_setting_info($prjN))["user_n_cluster_accounts"];
    // $oO["settingStr"] = $setting; // dbg
    $setting = array();
    foreach(preg_split("/,/",$settingStr) as $site_user){
        $tmpa = preg_split("/:/",$site_user);
        $site = $tmpa[0];
        $user = $tmpa[1];
        if(!array_key_exists($site,$setting)) $setting[$site] = array();
        if(!array_key_exists($user,$setting[$site])) $setting[$site][$user] = 0;
        $setting[$site][$user]++;
    }
    
    // => get content of jobs/ servers info
    $tgtD = "../../data/PVPI_org";
    foreach($setting as $site => $users){
        if(file_exists("$tgtD/{$site}_copiedFile.txt")){
            $oO[$site] = extract_servers_info_for_jobs_w_users("$tgtD/{$site}_copiedFile.txt",array_keys($users),$chkStat);
        }else{}
    }
    

    echo json_encode($oO);
    // var_dump($oO);

    // ///////////////////////////////// SUB FUNCTION
    ###
    function extract_servers_info_for_jobs_w_users($tgtf,$users,$chkStat=""){
        // extract servers' info for servers and jobs info later
        $oO = array();
        $output = array();
        if(file_exists($tgtf)){
            // =>
            $fh = fopen($tgtf,"r");
            while(!feof($fh)) {array_push($output,trim(fgets($fh)));}
            fclose($fh);
            // =>
        }else{}

        $keyw = "";
        foreach ($output as $line) {
            $aoMatches = array();
            if(preg_match("/^START\s+(\S+)/",$line,$aoMatches)) {
                $keyw = $aoMatches[1];
                // echo "starting ... $keyw ... <br>\n";
                continue;
            }
            if(preg_match("/^END\s+(\S+)/",$line,$aoMatches))  $keyw = "";
            if($keyw === "") continue;

            #############################################
            if($keyw === "hostname"){
                // ignored
            #############################################
            }elseif($keyw === "top"){
                // ignored
            #############################################
            }elseif($keyw === "bmgroup"){
                // ignored
            #############################################
            }elseif($keyw === "lshosts"){
                // ignored
            #############################################
            }elseif($keyw === "lsload"){
                // ignored
            #############################################
            }elseif($keyw === "bhosts"){
                // ignored
            #############################################
            }elseif($keyw === "SP_HOST_DIR"){
                // ignored
            #############################################
            }elseif($keyw === "bjobs"){
                if(preg_match_all("/[^;]+/",$line,$aoMatches)){
                    $hosts = $aoMatches[0][0];
                    $jobid = $aoMatches[0][1];
                    $stat = $aoMatches[0][2];
                    $user = $aoMatches[0][3];
                    $queue = $aoMatches[0][4];
                    $run_time = $aoMatches[0][5];
                    $cmd = $aoMatches[0][6];
                    $cresreq = $aoMatches[0][count($aoMatches[0])-2];
                    $eresreq = $aoMatches[0][count($aoMatches[0])-1];
                    if(in_array($user,$users)
                    && ($chkStat === ""||  strtoupper($chkStat) === strtoupper($stat))
                    ){
                        if(!array_key_exists($jobid,$oO)) $oO[$jobid] = array();
                        $oO[$jobid]["hosts"] = $hosts;
                        $oO[$jobid]["jobid"] = $jobid;
                        $oO[$jobid]["stat"] = $stat;
                        $oO[$jobid]["user"] = $user;
                        $oO[$jobid]["queue"] = $queue;
                        $oO[$jobid]["run_time"] = $run_time;
                        $oO[$jobid]["cresreq"] = $cresreq;
                        $oO[$jobid]["eresreq"] = $eresreq;
                    }else{}
                }else{}
            #############################################
            }else{
                #out-of-scope
            }
        }

        return $oO;
    }

    ###
    function convert_arr_to_hash($arr){
        // convert from array of 2 items (as output from class) to the hash of header and content in index 1
        $oO = array();
        if(! is_array($arr)) return array();
        if(count($arr) !== 2) return array();
        for($i=0;$i<count($arr[0]);$i++){
            $oO[$arr[0][$i]] = $arr[1][$i];
        }
        return $oO;
    }

    function getMem($iStr){
        if(preg_match("/^(\d+)([^\d]+)$/",$iStr,$matches)){
            if($matches[2] === "G"){
                return floatval($matches[1]);
            }elseif($matches[2] === "M"){
                return floatval($matches[1])/1024;
            }elseif($matches[2] === "K"){
                return floatval($matches[1])/(1024*1024);
            }elseif($matches[2] === "T"){
                return floatval($matches[1])*1024;
            }else{}
        }else{}

        return 0;
    }

    function getMem_asked_from_resreq($iStr){
        if(preg_match("/use_mem_size=([\.\d]+)/",$iStr,$matches)){
            return floatval($matches[1]);
        }elseif(preg_match("/mem=([\.\d]+)/",$iStr,$matches)){
            return floatval($matches[1]);
        }else{}
        return 0;
    }

    return;
?>

FILE:: .//src_modules/chkServers/simpleFunctions_chkExeSrvs.js
let tgtObj = new Object();//global object

setInterval(function(){
    // console.log("trigger ...");
    // =>
    onload4document();
}, 60000);

function onload4document (){
    // console.log("ALOHA")
    let xmlhttp = new XMLHttpRequest();
    let loadingE = gen_loading_4subEle();
    xmlhttp.onreadystatechange = function(){
        if(this.readyState == 4 && this.status == 200) {
            tgtObj = JSON.parse(this.responseText);
            // console.log(tgtObj);

            const topSrvApache = document.getElementById("srvApache");
            const topSrvExes = document.getElementById("srvExes");
            const topSrvNotExes = document.getElementById("srvNotExes");

            // empty the container firstly
            while(topSrvApache.childNodes.length > 0){topSrvApache.lastChild.remove();}
            while(topSrvExes.childNodes.length > 0){topSrvExes.lastChild.remove();}
            while(topSrvNotExes.childNodes.length > 0){topSrvNotExes.lastChild.remove();}
            
            let eleNotExeTop = document.createElement("div");
            let eleExeTop = document.createElement("div");
            let eleApache = document.createElement("div");
            let eleExeTop_cnt = new Object();//controlled by 

            ////
            eleApache.appendChild(dspSrvApache(tgtObj["_thishost_"]["hostname"], tgtObj["_byHost_"], tgtObj["_thishost_"]["summary"]));

            let aoHostNames = Object.keys(tgtObj["_byHost_"]);
            aoHostNames.sort().reverse();
            
            // -> separate the login servers
            for (let hostname of aoHostNames) {
                // console.log(hostname, tgtObj["_byHost_"][hostname]["lshosts_exeServer"])
                if(tgtObj["_byHost_"][hostname]["lshosts_exeServer"] === "No"){
                    eleNotExeTop.appendChild(dspSrvNotExe(hostname, tgtObj["_byHost_"]))
                }else if(tgtObj["_byHost_"][hostname]["lshosts_exeServer"] === "Yes"){
                    let os = tgtObj["_byHost_"][hostname]["lshosts_os"];
                    let hgrp = tgtObj["_byHost_"][hostname]["_hostGroup_"];
                    if(! eleExeTop_cnt.hasOwnProperty(os)) {eleExeTop_cnt[os] = new Object();}
                    if(! eleExeTop_cnt[os].hasOwnProperty(hgrp)) {eleExeTop_cnt[os][hgrp] = new Array();}
                    // eleExeTop.appendChild(dspSrvExe(hostname, tgtObj["_byHost_"]))
                    let addE = dspSrvExe(hostname, tgtObj["_byHost_"]);
                    eleExeTop_cnt[os][hgrp].push(addE);
                    // update the left hand if there existed
                    if(document.getElementById("indSrv").classList.contains("w3-show")){
                        let dspHostName = indSrv.getElementsByTagName("div")[0].getElementsByTagName("div")[0].textContent;
                        if(dspHostName === hostname){
                            showDetailInfo(addE);
                        }else{}
                    }else{}
                }else{
                    //UNKNOWN type of server
                    // console.log("WARN:: UNKNOWN server", hostname)
                }
            }

            //
            for(let os in eleExeTop_cnt){
                let eleOSGrp = document.createElement("fieldset");
                eleOSGrp.appendChild(document.createElement("legend"))
                eleOSGrp.childNodes[0].textContent = os;
                for(let hgrp in eleExeTop_cnt[os]){
                    let eleHGrp = document.createElement("fieldset");
                    eleHGrp.appendChild(document.createElement("legend"))
                    eleHGrp.childNodes[0].textContent = hgrp;
                    for(let aEle of eleExeTop_cnt[os][hgrp]){
                        eleHGrp.appendChild(aEle);
                    }
                    eleHGrp.style.padding = 0;
                    eleOSGrp.appendChild(eleHGrp);
                }
                eleOSGrp.classList.add("w3-margin-top", "w3-bottombar", "w3-leftbar", "w3-round");
                eleOSGrp.style.paddingLeft = "2px";
                eleOSGrp.style.paddingRight = "2px";
                eleOSGrp.classList.add("w3-card-2");
                eleExeTop.appendChild(eleOSGrp)
            }

            // -> some format
            eleExeTop.classList.add("w3-row");

            // -> involve to document
            topSrvApache.appendChild(eleApache);
            topSrvExes.appendChild(eleExeTop);
            // topSrvNotExes.appendChild(eleNotExeTop);

            // => update status of some button
            dspFull.getElementsByTagName("span")[0].innerText = document.getElementsByClassName("srvSumInf_full").length;
            dspUnavai.getElementsByTagName("span")[0].innerText = document.getElementsByClassName("srvSumInf_unavai").length;
            dspOK.getElementsByTagName("span")[0].innerText = document.getElementsByClassName("srvSumInf_OK").length;
            dspUnknown.getElementsByTagName("span")[0].innerText = document.getElementsByClassName("srvSumInf_unknown").length;
            dspDedicated.getElementsByTagName("span")[0].innerText = document.getElementsByClassName("srvSumInf_dedicated").length;

            // => display servers based on the status of the displaying buttons (from the 2nd times updating), realtime updated
            filterSrvExe();
            // => compact or comfy
            if(dspCompactorComfy.getElementsByTagName("i")[0].innerText === "refresh"){
                dspCompactorComfy.getElementsByTagName("i")[0].innerText = "view_compact";
            }
            // => rightside?!
            update_right_side_content();
            // removing loading
            loadingE.remove();
            // complete remove other loading if needed
            for(let tmpE of document.getElementsByClassName("myCnt_loading_element")){
                tmpE.remove();
            }
        }
    };
    let tmpa = location.pathname.split("/");
    let docName = tmpa[tmpa.length-1];
    let strRequest = "";
    if(docName === "chkExeSrvs_Kansai.html") strRequest = "klsl";
    if(docName === "chkExeSrvs_Musashi.html") strRequest = "mesl";
    xmlhttp.open("GET", "chkExeSrvs.php?q="+strRequest, true)
    xmlhttp.send();

    // console.log("finished onload4document")
    return ;
}

function dspSrvApache(hostname,data_byHost, summary){
    let ele = document.createElement("div");
    // -> content
    ele.innerHTML = hostname + " / " + summary + " / ut=" + data_byHost[hostname]["lsload_ut"];
    // -> format
    ele.className += "w3-cell";
    ele.style.minWidth = "60px";
    return ele;
}

function dspSrvNotExe(hostname,data_byHost){
    let ele = document.createElement("div");
    // -> content
    ele.innerHTML = hostname;
    // -> format
    ele.className += "w3-cell";
    ele.style.minWidth = "60px";
    return ele;
}

function dspSrvExe(hostname,data_byHost){
    if(data_byHost[hostname] === undefined) {return;}

    let ele = document.createElement("div");
    let head = document.createElement("div");
    let content = document.createElement("div");
    let stt_stt = document.createElement("div"); //status
    let stt_ut = document.createElement("div"); //lsload_ut
    let stt_p_njobs = document.createElement("div"); //percent of NJOBS/MAX
    let stt_p_mem = document.createElement("div"); //percent of sum-memory / lsload_mem (lsload_swp)

    // -> header
    head.innerText = hostname;
    if(data_byHost[hostname]["dedicated_head"] !== undefined){
        head.classList.add("w3-purple");
    }

    // stt_stt
    stt_stt.innerHTML = data_byHost[hostname]["bhosts_status"];

    // stt_ut
    stt_ut.innerHTML = "n/a";
    if(data_byHost[hostname]["lsload_ut"] !== "") { stt_ut.innerHTML = data_byHost[hostname]["lsload_ut"]};

    // njobs
    let blk1 = document.createElement("div");
    // let blk2 = document.createElement("div");
    
    blk1.innerHTML = (100 * data_byHost[hostname]["bhosts_NJOBS"] / data_byHost[hostname]["bhosts_MAX"] ).toFixed(0) + "%";
    // blk2.innerHTML = "";
    // blk2.innerHTML += "<span>" + "bhosts_MAX:" + data_byHost[hostname]["bhosts_MAX"] + "</span>"; 
    // blk2.innerHTML += "<span>" + "bhosts_NJOBS:" + data_byHost[hostname]["bhosts_NJOBS"] + "</span>"; 
    let noExeJobs = 0;
    let noExeCPU = 0;
    for(let jobid in data_byHost[hostname]){
        if(/^\d+$/.test(jobid)){
            noExeCPU += data_byHost[hostname][jobid]["#hosts"];
            noExeJobs += 1;
        }
    }
    // blk2.innerHTML += "<span>" + "#Jobs:" + noExeJobs + "</span>"; 
    // blk2.innerHTML += "<span>" + "#cpu:" + noExeCPU + "</span>"; 

    stt_p_njobs.appendChild(blk1);
    // stt_p_njobs.appendChild(blk2);

    // mem
    blk1 = document.createElement("div");
    // blk2 = document.createElement("div");

    //let lsloadmem = /\d+/.exec(data_byHost[hostname]["lsload_mem"]);
    // let lsloadmem = getMem(data_byHost[hostname]["lsload_mem"]);
    let lsloadmem = getMem(data_byHost[hostname]["lshosts_maxmem"]);//change method to get max-mem to lshosts
    let usedmem = 0;
    for(let jobid in data_byHost[hostname]){
        if(/^\d+$/.test(jobid)){
            let askMem = 1.0;
            if(data_byHost[hostname][jobid].hasOwnProperty("resreq")){
                if(/use_mem_size/.test(data_byHost[hostname][jobid]["resreq"])){
                    askMem = /use_mem_size=([\d\.]+)/.exec(data_byHost[hostname][jobid]["resreq"])[1];
                }
            }
            usedmem += Number(askMem);
        }
    }
    blk1.innerHTML = (100 * usedmem / lsloadmem ).toFixed(0) + "%";
    // blk1.innerHTML = usedmem + "/" + lsloadmem;

    stt_p_mem.appendChild(blk1);
    // stt_p_mem.appendChild(blk2);


    // -> content
    content.appendChild(stt_stt);
    content.appendChild(stt_ut);
    content.appendChild(stt_p_njobs);
    content.appendChild(stt_p_mem);
    ele.appendChild(head);
    ele.appendChild(content);

    // -> last format => consider the current view also (if view_comfy then need special care)
    head.classList.add("w3-border-bottom","w3-round")
    head.style.overflow = "auto";
    content.classList.add("w3-cell-row");
    stt_stt.classList.add("w3-cell", "w3-border-right");
    stt_ut.classList.add("w3-cell", "w3-border-right");
    stt_p_njobs.classList.add("w3-cell", "w3-border-right");
    stt_p_mem.classList.add("w3-cell", "w3-border-right");

    content.classList.add("w3-tiny");

    // -> update color based on status
    if(stt_stt.innerText === "closed_Full")     { stt_stt.style.display='none';   stt_ut.style.display=''     ; stt_p_mem.style.display=''        ; stt_p_njobs.style.display=''      ;   ele.classList.add("w3-red");
    }else if(stt_stt.innerText === "unavail")   { stt_stt.style.display=''    ;   stt_ut.style.display='none' ; stt_p_mem.style.display='none'    ; stt_p_njobs.style.display='none'  ;   ele.classList.add("w3-black");
    }else if(stt_stt.innerText === "undefined") { stt_stt.style.display=''    ;   stt_ut.style.display='none' ; stt_p_mem.style.display='none'    ; stt_p_njobs.style.display='none'  ;   ele.classList.add("w3-black");
    }else if(stt_stt.innerText === "closed_Adm"){ stt_stt.style.display=''    ;   stt_ut.style.display='none' ; stt_p_mem.style.display='none'    ; stt_p_njobs.style.display='none'  ;   ele.classList.add("w3-black");
    }else if(stt_stt.innerText === "ok")        { stt_stt.style.display='none';   stt_ut.style.display=''     ; stt_p_mem.style.display=''        ; stt_p_njobs.style.display=''      ;   ele.classList.add("w3-green");
    }else{}

    upColorByPercent(stt_ut);
    upColorByPercent(stt_p_mem);
    upColorByPercent(stt_p_njobs);
    

    // => consider the current view also (if view_comfy then need special care)
    if(dspCompactorComfy.getElementsByTagName("i")[0].innerText === "view_comfy"){
        ele.classList.add("w3-cell","w3-round-large","w3-border-blue");
        ele.style.minWidth = "60px";
        ele.style.display = "inline-block"
        // ele.classList.add("w3-container")
        head.innerHTML = head.innerHTML.replace("rvc-srv","<span style=\"display:none\">rvc-srv</span>");
        head.style.padding = 0;
        head.style.overflow = "hidden";
        for(let tmpv of Array(stt_ut, stt_p_njobs, stt_p_mem)){
            tmpv.style.fontSize = "8px";
            tmpv.innerHTML = tmpv.innerHTML.replace("%","<span style=\"display:none\">%</span>")
        }
    }else{
        ele.classList.add("w3-round-large", "w3-col", "s6", "m2", "l1");
        ele.style.minWidth = "60px";
        // ele.classList.add("w3-container")
    }
    ele.style.margin = "0";
    ele.style.padding = "2px";
    ele.classList.add("w3-border", "w3-center", "w3-hover-shadow")

    // add listener to display detail info when clicking
    ele.addEventListener("click", function(){showDetailInfo(this)});

    // add class for management later
    ele.classList.add("srvSumInf")

    if(stt_stt.innerText === "closed_Full")     {ele.classList.add("srvSumInf_full");
    }else if(stt_stt.innerText === "unavail")   {ele.classList.add("srvSumInf_unavai");
    }else if(stt_stt.innerText === "undefined") {ele.classList.add("srvSumInf_unavai");
    }else if(stt_stt.innerText === "closed_Adm"){ele.classList.add("srvSumInf_unavai");
    }else if(stt_stt.innerText === "ok")        {ele.classList.add("srvSumInf_OK");
    }else{                                       ele.classList.add("srvSumInf_unknown");
    }

    if(data_byHost[hostname]["dedicated_head"] !== undefined){ ele.classList.add("srvSumInf_dedicated");}

    ///
    return ele;
}

function upColorByPercent(tgtEle){
    // console.log(tgtEle.innerText)
    if(/[\d\.]+%/.test(tgtEle.innerText)){
        let numb = Number(/([\d+\.]+)%/.exec(tgtEle.innerText)[1])
        if(numb < 50){
            tgtEle.classList.add("w3-green", "w3-round");
        }else if(numb < 75){
            tgtEle.classList.add("w3-yellow", "w3-round");
        }else if(numb < 95){
            tgtEle.classList.add("w3-orange", "w3-round");
        }else if(numb){
            tgtEle.classList.add("w3-red", "w3-round");
        }else{
            // let the color as it is
        }
    }else{}
    return;
}

function showDetailInfo(tgtEle){
    // ->
    // let hostname  = tgtEle.childNodes[0].innerText;
    let hostname = "";
    if(typeof(tgtEle) === "object"){
        hostname  = tgtEle.getElementsByTagName("div")[0].textContent;
    }else{
        hostname = tgtEle;
    }
    let clonedNode = dspSrvExe(hostname, tgtObj["_byHost_"]);
    clonedNode.classList.remove("w3-col");
    for(let chkClass of clonedNode.classList){
        if(/^srvSumInf/.test(chkClass)){
            clonedNode.classList.remove(chkClass);
        }
    }

    // ->
    let eleIndSrv = document.getElementById("indSrv");
    // remove all child for sure
    while(eleIndSrv.childNodes.length > 0){
        eleIndSrv.lastChild.remove();
    }
    let header = document.createElement("h4"); 
    let dedicated = document.createElement("label");
    let status = document.createElement("label");
    let theTbl = document.createElement("table");
    let tblInfo = document.createElement("tbody");
    let topDediInfo = document.createElement("div");
    let topJobsInfo = document.createElement("div");

    header.innerText = hostname;
    dedicated.innerText = "Common server.";     if(tgtObj["_byHost_"][hostname]["dedicated_head"] !== undefined){ dedicated.innerText = "Dedicated server."; }

    status.innerText = "bhost status: " + tgtObj["_byHost_"][hostname]["bhosts_status"];

    add_trd_to_tbl(tblInfo, Array("OS", tgtObj["_byHost_"][hostname]["lshosts_os"]));
    add_trd_to_tbl(tblInfo, Array("Group", tgtObj["_byHost_"][hostname]["_hostGroup_"]));
    add_trd_to_tbl(tblInfo, Array("Utilization", tgtObj["_byHost_"][hostname]["lsload_ut"]));
    add_trd_to_tbl(tblInfo, Array("%slot\nnJOB/MAX", 
        (100 * tgtObj["_byHost_"][hostname]["bhosts_NJOBS"] / tgtObj["_byHost_"][hostname]["bhosts_MAX"] ).toFixed(0) + "%" + "\n" +
        tgtObj["_byHost_"][hostname]["bhosts_NJOBS"] + "/" + tgtObj["_byHost_"][hostname]["bhosts_MAX"]));
    
    let lsloadmem = getMem(tgtObj["_byHost_"][hostname]["lshosts_maxmem"]);
    let usedmem = 0;
    for(let jobid in tgtObj["_byHost_"][hostname]){
        if(/^\d+$/.test(jobid)){
            let askMem = /use_mem_size=([\d\.]+)/.exec(tgtObj["_byHost_"][hostname][jobid]["resreq"])[1];
            usedmem += Number(askMem);
        }
    }
    add_trd_to_tbl(tblInfo, Array("%mem\nAsked/Max", 
    (100 * usedmem / lsloadmem ).toFixed(0) + "%" + "\n" +
        usedmem + "/" + lsloadmem));

    for(let keyw of Array(
        "lsload_mem",
        "lshosts_maxmem",
        "lshosts_cpuf",
        "lsload_swp",
        "lsload_tmp",
        "lsload_status",
    )){
        add_trd_to_tbl(tblInfo, Array(keyw,  tgtObj["_byHost_"][hostname][keyw]));
    }

    if(dedicated.innerText === "Dedicated server."){
        let dspPart = document.createElement("div");
        let noneDspPart = document.createElement("div");noneDspPart.style.display = "none";
        for(let headStr of tgtObj["_byHost_"][hostname]["dedicated_head"]){
            let span = document.createElement("span");
            span.innerText = headStr;
            span.style.display = "block";
            // span.style.width = "100px";
            span.style.whiteSpace = "nowrap";
            span.style.overflow = "hidden";
            span.style.textOverflow = "ellipsis";
            dspPart.appendChild(span);
        }
        topDediInfo.appendChild(dspPart);
        let btnMore = document.createElement("button"); btnMore.innerText = "who are in the list?";
        btnMore.style.float = "right"; btnMore.style.position = "relative"; btnMore.style.bottom = "20px";
        dspPart.appendChild(btnMore);
        for(let user of tgtObj["_byHost_"][hostname]["dedicated_users"]){
            let span = document.createElement("span");
            span.innerText = user;
            span.style.display = "inline-block";
            span.style.marginLeft = "2px";
            span.style.borderRight = "solid 1px gray";
            span.style.borderBottom = "solid 1px gray";
            noneDspPart.appendChild(span);
        }
        topDediInfo.appendChild(noneDspPart);
        btnMore.addEventListener("click", function(){toggleDspEle(noneDspPart)});
    }else{}

    let jobsCount = document.createElement("span"); jobsCount.innerText = "#jobs=";
    let tblTopJobs = document.createElement("table"); let tblJobs = document.createElement("tbody");
    let noJobs = 0;
    for(let jobId in tgtObj["_byHost_"][hostname]){
        if(/^\d+$/.test(jobId)){
            noJobs+=1;
            add_trd_to_tbl(tblJobs, Array(
                jobId,
                tgtObj["_byHost_"][hostname][jobId]["#hosts"],
                tgtObj["_byHost_"][hostname][jobId]["stat"],
                tgtObj["_byHost_"][hostname][jobId]["queue"],
                tgtObj["_byHost_"][hostname][jobId]["user"],
                getHour(tgtObj["_byHost_"][hostname][jobId]["run_time"])
            ));
        }
    }
    jobsCount.innerText += "'" + noJobs + "'";
    tblTopJobs.appendChild(tblJobs);
    topJobsInfo.appendChild(jobsCount);
    topJobsInfo.appendChild(tblTopJobs);
    
    // formatting
    header.style.margin = 0;
    dedicated.classList.add("w3-block", "w3-tiny");
    status.classList.add(   "w3-block", "w3-tiny");
    theTbl.classList.add("w3-table-all", "w3-hoverable")
    tblInfo.classList.add("w3-tiny");
    tblTopJobs.classList.add("w3-hoverable", "w3-responsive", "w3-block", "w3-striped")
    tblJobs.classList.add("w3-tiny");
    eleIndSrv.classList.add("w3-responsive");
    topDediInfo.classList.add("w3-tiny","w3-purple");

    // element tree
    eleIndSrv.appendChild(header);
    eleIndSrv.appendChild(dedicated);
    eleIndSrv.appendChild(status);
    eleIndSrv.appendChild(clonedNode);
    theTbl.appendChild(tblInfo);
    eleIndSrv.appendChild(theTbl);
    eleIndSrv.appendChild(topDediInfo);
    eleIndSrv.appendChild(topJobsInfo);

    // eleIndSrv.childNodes[0].innerText = hostname;
    showEle(eleIndSrv);
    return;
}

function add_trd_to_tbl(eleTbl, aoTdTxt){
    if(aoTdTxt.length === 0) {
        console.log("dbg:: not have any data to update, ignored.");
        return;
    }
    let tr = document.createElement("tr");
    for(let tdTxt of aoTdTxt){
        let td = document.createElement("td"); td.innerHTML = tdTxt; tr.appendChild(td); td.style.padding = "1px";
    }
    tr.style.padding = 0;
    eleTbl.appendChild(tr);
    return;
}
function add_trh_to_tbl(eleTbl, aoTdTxt){
    let tr = document.createElement("tr");
    for(let tdTxt of aoTdTxt){
        let td = document.createElement("th"); td.innerHTML = tdTxt; tr.appendChild(td); td.style.padding = "1px";
    }
    tr.style.padding = 0;
    eleTbl.appendChild(tr);
    return;
}

function list_remaining_resources(){
    let tgtEle = document.getElementById("onTopInfo#1").getElementsByTagName("tbody")[0];
    while(tgtEle.childNodes.length > 2){
        tgtEle.lastChild.remove();
    }

    for(let srvN in tgtObj["_byHost_"]){
        let exeSrv = tgtObj["_byHost_"][srvN]["lshosts_exeServer"]; if(exeSrv !== "Yes") {continue; }
        let stt = tgtObj["_byHost_"][srvN]["bhosts_status"];        if (stt !== "ok") {continue;}
        let os = tgtObj["_byHost_"][srvN]["lshosts_os"];
        let group = tgtObj["_byHost_"][srvN]["_hostGroup_"];
        let ut = tgtObj["_byHost_"][srvN]["lsload_ut"];
        let dedi = ""; if(tgtObj["_byHost_"][srvN]["dedicated_head"] !== undefined){dedi = "Dedicated"}
        let validSlot = tgtObj["_byHost_"][srvN]["bhosts_MAX"] - tgtObj["_byHost_"][srvN]["bhosts_NJOBS"];
        let maxMem = getMem(tgtObj["_byHost_"][srvN]["lshosts_maxmem"]);
        let usedMem = 0;
        for(let jobid in tgtObj["_byHost_"][srvN]){
            if(/^\d+$/.test(jobid)){
                let askMem = 1.0;
                if(/use_mem_size/.test(tgtObj["_byHost_"][srvN][jobid]["resreq"])){
                    askMem = /use_mem_size=([\d\.]+)/.exec(tgtObj["_byHost_"][srvN][jobid]["resreq"])[1];
                }
                usedMem += Number(askMem);
            }
        }
        let validMem = (maxMem - usedMem).toFixed(0);

        // ->
        add_trd_to_tbl(tgtEle, Array(
            srvN,
            os,
            group,
            ut,
            validSlot+ "/" + tgtObj["_byHost_"][srvN]["bhosts_MAX"],
            validMem + "/" + Number(maxMem).toFixed(0),
            dedi
        ));
    }
    // => update some format late
    for(let tgtE of tgtEle.getElementsByTagName("td")){
        tgtE.style.margin = "1px";
        tgtE.style.border = "solid 1px";
    }

    //toggleDspId("onTopInfo");
    showEle(document.getElementById("onTopInfo#1"));
}

function list_resources_by_someone(){
    let somebody = document.getElementById("somebody").value;
    if(somebody === "" || somebody === undefined) {return;}

    let tgtEle = document.getElementById("onTopInfo#2").getElementsByTagName("tbody")[0];
    // console.log(somebody)
    while(tgtEle.childNodes.length > 2){
        tgtEle.lastChild.remove();
    }

    for(let srvN in tgtObj["_byHost_"]){
        let exeSrv = tgtObj["_byHost_"][srvN]["lshosts_exeServer"]; if(exeSrv !== "Yes") {continue; }
        let stt = tgtObj["_byHost_"][srvN]["bhosts_status"];
        let os = tgtObj["_byHost_"][srvN]["lshosts_os"];
        let group = tgtObj["_byHost_"][srvN]["_hostGroup_"];
        let ut = tgtObj["_byHost_"][srvN]["lsload_ut"];
        let dedi = ""; if(tgtObj["_byHost_"][srvN]["dedicated_head"] !== undefined){dedi = "Dedicated"}
        for(let jobid in tgtObj["_byHost_"][srvN]){
            if(/^\d+$/.test(jobid)){
                let user = tgtObj["_byHost_"][srvN][jobid]["user"];
                let flgGo = false;
                for(let tmps of somebody.split(" ")){
                    if(tmps === "") continue;
                    let pattern = new RegExp("^" + tmps + ".*","i")
                    if(pattern.test(user)) flgGo = true;
                }
                if(flgGo === false) continue;
                let jobStt = tgtObj["_byHost_"][srvN][jobid]["stat"];
                let queue = tgtObj["_byHost_"][srvN][jobid]["queue"];
                let uSlot = tgtObj["_byHost_"][srvN][jobid]["#hosts"];
                let askedMem = 1.0;
                if(/use_mem_size/.test(tgtObj["_byHost_"][srvN][jobid]["resreq"])){
                    askedMem = /use_mem_size=([\d\.]+)/.exec(tgtObj["_byHost_"][srvN][jobid]["resreq"])[1];
                }
                let runtime = getHour(tgtObj["_byHost_"][srvN][jobid]["run_time"])
                // let cmd = tgtObj["_byHost_"][srvN][jobid]["cmd"];
                // let resreq = tgtObj["_byHost_"][srvN][jobid]["resreq"];
                // ->
                add_trd_to_tbl(tgtEle, Array(
                    srvN,
                    os,
                    group,
                    stt,
                    ut,
                    jobid,
                    jobStt,
                    queue,
                    user,
                    uSlot,
                    askedMem,
                    runtime,
                    dedi
                ));
            }
        } 
    }
    // => update some format late
    for(let tgtE of tgtEle.getElementsByTagName("td")){
        tgtE.style.margin = "1px";
        tgtE.style.border = "solid 1px";
    }

    //toggleDspId("onTopInfo");
    showEle(document.getElementById("onTopInfo#2"));
}

function list_jobs_by_user(){
    let somebody = document.getElementById("somebody").value;
    if(somebody === "" || somebody === undefined) {return;}

    let tgtEle = document.getElementById("onTopInfo#3").getElementsByTagName("tbody")[0];
    // console.log(somebody)
    while(tgtEle.childNodes.length > 2){
        tgtEle.lastChild.remove();
    }

    showEle(document.getElementById("onTopInfo#3"));

    // get resources, don't AJAX
    let xmlhttp = new XMLHttpRequest();
    xmlhttp.open("GET", "mybjobs4web.php?q="+somebody, false)
    xmlhttp.send();

    let oObj = JSON.parse(xmlhttp.responseText);

    for (let info of oObj){
        add_trd_to_tbl(tgtEle, info);
    }
    //toggleDspId("onTopInfo");
}

function toggleDspId(tgtId){
    let tgtEle = document.getElementById(tgtId)
    if (tgtEle.className.indexOf("w3-show") == -1) {
        tgtEle.className += " w3-show";
    } else { 
        tgtEle.className = tgtEle.className.replace(" w3-show", "");
    }
    return;
}
function toggleDspEle(tgtEle){
    // console.log("toggle", tgtEle, tgtEle.parentNode)
    if (tgtEle.className.indexOf("w3-show") == -1) {
        tgtEle.className += " w3-show";
    } else { 
        tgtEle.className = tgtEle.className.replace(" w3-show", "");
    }
    return;
}
function showEle(tgtEle){
    if (tgtEle.className.indexOf("w3-show") == -1) {
        tgtEle.className += " w3-show";
    } else { 
        // tgtEle.className = tgtEle.className.replace(" w3-show", "");
    }
    return;
}

function getMem(iStr){
    // convert a string to be a memory in GB
    let oStr = iStr;
    if(/\d+/.test(iStr)){
        let num = /\d+/.exec(iStr);
        let unit = /[^\d\.]+/.exec(iStr);
        if(unit[0] === "G") {
            oStr = num[0];
        }else if(unit[0] === "M") {
            oStr = (Number(num[0]) / 1024).toFixed(1);
        }else if(unit === "T"){
            oStr = Number(num[0]) * 1024;
        }
    }else{}
    // console.log(iStr, oStr)
    return oStr;
}

function getHour(iStr){
    // convert a string to be a number in hours (run_time)
    let oStr = iStr;
    if(/\d+/.test(iStr)){
        let num = /\d+/.exec(iStr);
        let unit = /[^\d\.]+/.exec(iStr);
        if(unit[0] === " second(s)") {
            oStr = (Number(num[0])/3600).toFixed(1) + "h";
        }
    }else{}
    // console.log(iStr, oStr)
    return oStr;
}

function sortTblByHeader(thTgt){
    let trHead = thTgt.parentNode.getElementsByTagName("th");
    let tgtTbl = thTgt.parentNode.parentNode;
    let indexTH = -1;

    for(let i=0;i<trHead.length;i++){
        if(thTgt === trHead[i]){
            indexTH = i;
        }
    }
    // console.log(tgtTbl.childNodes.length)
    // traditional sorting, very long time, but less momory
    // // => sort line by line, row by row
    // let stillSwitch = true;
    // let noSweptTime = 0;
    // while(stillSwitch){
    //     noSweptTime++;
    //     console.log("sweeping #", noSweptTime)
    //     stillSwitch = false;
    //     for(let i=1;i<aoTr.length-1;i++){
    //         let var1 = Number(/\d+/.exec(aoTr[i].getElementsByTagName("td")[indexTH].innerText))
    //         let var2 = Number(/\d+/.exec(aoTr[i+1].getElementsByTagName("td")[indexTH].innerText))
    //         if(var1 >= var2){
    //             //don't need to swap
    //         }else{
    //             tgtTbl.insertBefore(aoTr[i+1], aoTr[i])
    //             stillSwitch=true;
    //         }
    //     }
    // }

    
    // => arrange table again by indicating array
    let aoTr = tgtTbl.getElementsByTagName("tr");
    let orgAoTr = new Array();
    for(i=0;i<aoTr.length;i++){
        orgAoTr.push(aoTr[i].cloneNode(true));
    }

    // => control the array
    let tmpA = new Array();
    for(let i=1;i<aoTr.length;i++){
        let tmpO = new Object();
        tmpO["index"] = i;
        tmpO["tgtNum"] = null;
        if(/([\d\.]+)/.exec(aoTr[i].getElementsByTagName("td")[indexTH].innerText) !== null){
            tmpO["tgtNum"] = /([-\d\.]+)/.exec(aoTr[i].getElementsByTagName("td")[indexTH].innerText)[1];
        }
        tmpO["tgtStr"] = aoTr[i].getElementsByTagName("td")[0].innerText;
        tmpA.push(tmpO);
    }
    tmpA.sort(function(a,b){
        if(a.tgtNum === null || b.tgtNum === null){
            let x = a.tgtStr.toUpperCase();
            let y = b.tgtStr.toUpperCase();
            if(x < y) {return 1;}
            if(x > y) {return -1;}
            return 0;
        }else{
            return b.tgtNum - a.tgtNum
        }
    }); // sort the indicating array
    // console.log("index",indexTH, tmpA)

    // remove orginal table
    while(tgtTbl.getElementsByTagName("tr").length > 1){
        tgtTbl.lastChild.remove();
    }
    for(let i=1;i<orgAoTr.length;i++){
        let tgtI = tmpA[i-1]["index"];
        // console.log(i, tgtI, tmpA[i-1]["tgtNum"][0], tmpA[i-1]["srvN"], aoTr[tgtI])
        tgtTbl.appendChild(orgAoTr[tgtI]);
    }
}

function deleteTbl(tgtTbl){
    let aoData = tgtTbl.getElementsByTagName("tr");
    if(aoData.length > 1){
        while(aoData.length > 1){
            aoData[aoData.length-1].remove();
        }
    }
    return;
}

function toggleDspServerType(clickedEle){
    let sttEle = clickedEle.getElementsByTagName("i")[0];
    // change the status
    if(sttEle.innerText === "visibility"){
        sttEle.innerText = "visibility_off";
    }else{
        sttEle.innerText = "visibility";
    }
    // => call the filter
    filterSrvExe();
}

function toggleDsp_CompactorComfy(clickedEle){
    let sttEle = clickedEle.getElementsByTagName("i")[0];
    // change the status
    if(sttEle.innerText === "view_compact"){
        sttEle.innerText = "view_comfy";
    }else if(sttEle.innerText === "view_comfy"){
        sttEle.innerText = "refresh";
    }else{
        sttEle.innerText = "view_compact";
    }
    // => call the filter
    mod_to_compact_or_compfy();
}

function filterSrvExe(){
// srvSumInf_full
// srvSumInf_unavai
// srvSumInf_OK
// srvSumInf_unknown
// srvSumInf_dedicated
    // mapping for the filtering
    let aoMap = [
        { "dspFull" : "srvSumInf_full" },
        { "dspUnavai" : "srvSumInf_unavai" },
        { "dspOK" : "srvSumInf_OK" },
        { "dspUnknown" : "srvSumInf_unknown" },
        { "dspDedicated" : "srvSumInf_dedicated" },
    ]
    for(let tmpv of aoMap){
        for(let cntId in tmpv){
            let dspClass = tmpv[cntId];
            if(document.getElementsByClassName(dspClass).length > 0){
                if(document.getElementById(cntId).getElementsByTagName("i")[0].innerText === "visibility"){
                    for(let tmpE of document.getElementsByClassName(dspClass)){
                        if(dspCompactorComfy.getElementsByTagName("i")[0].innerText === "view_compact"){
                            tmpE.style.display = "";
                        }else{
                            tmpE.style.display = "inline-block";
                        }
                    }
                }else{
                    for(let tmpE of document.getElementsByClassName(dspClass)){
                        tmpE.style.display = "none";
                    }
                }
            }else{}
        }
    }
    // checking if the wrapper (fieldset) need to display or none also
    for(let fsEle of document.getElementsByTagName("fieldset")){
        let flgDsp = false;
        for(let srvEle of fsEle.getElementsByClassName("srvSumInf")){
            if(srvEle.style.display !== "none") flgDsp = true;
        }
        if(flgDsp === false) {
            fsEle.style.display = "none";
        }else{
            fsEle.style.display = "";
        }
    }
    return;
}

function mod_to_compact_or_compfy(){
    //
    if(dspCompactorComfy.getElementsByTagName("i")[0].innerText === "refresh"){
        // location.reload();
        onload4document();
    }else if(dspCompactorComfy.getElementsByTagName("i")[0].innerText === "view_comfy"){
        for(let srvWrapper of document.getElementsByClassName("srvSumInf")){
            // =>
            srvWrapper.classList.remove("w3-col","s6","m2","l1");
            srvWrapper.classList.add("w3-cell","w3-round-large","w3-border-blue");
            // srvWrapper.style.width = "30px";
            if(srvWrapper.style.display !== "none") srvWrapper.style.display = "inline-block";
            // =>
            let div0 = srvWrapper.getElementsByTagName("div")[0];
            div0.innerHTML = div0.innerHTML.replace("rvc-srv","<span style=\"display:none\">rvc-srv</span>");
            div0.style.padding = 0;
            div0.style.overflow = "hidden";
            // =>
            for(let i=2;i<srvWrapper.getElementsByTagName("div").length;i++){
                let tmpE = srvWrapper.getElementsByTagName("div")[i];
                tmpE.style.fontSize = "8px";
                tmpE.innerHTML = tmpE.innerHTML.replace("%","<span style=\"display:none\">%</span>")
            }
        }
    }else{
        // let it be, returning to compact is hard to archieve
    }
    return;
}

function gen_loading_4subEle(tgtE){
    let flgBody = false;
    let width =  0;
    let height = 0;
    let left = 0;
    let top = 0;
    if(tgtE === undefined) {
        tgtE = document.createElement("div");
        tgtE.style.position = "fixed";
        tgtE.style.top = 0;
        tgtE.style.left = 0;
        tgtE.style.width = "100%";
        tgtE.style.height = "100%";
        flgBody = true;
    }else{
        width =  tgtE.offsetWidth-20;//remove 20 for the scroll if anny
        height = tgtE.offsetHeight;
        left = tgtE.offsetLeft;
        top = tgtE.offsetTop;
    }
    let oEle = document.createElement("div");
    let coreEle = document.createElement("i");
    coreEle.classList.add("w3-display-middle","w3-spin","material-icons");
    coreEle.innerText = "settings";
    coreEle.style.fontSize = "72px";
    coreEle.style.color =  "blue";
    oEle.appendChild(coreEle);
    oEle.classList.add("w3-opacity","w3-light-grey","w3-show","w3-center","w3-display-container","w3-animate-zoom");
    oEle.style.position = "fixed";
    if(width === 0){
        oEle.style.width = "100%";
        oEle.style.height = "100%";
        oEle.style.top = top + "px";
        oEle.style.left = left + "px";
    }else{
        oEle.style.width = width + "px";
        oEle.style.height = height + "px";
        oEle.style.top = top + "px";
        oEle.style.left = left + "px";
    }
    // =>
    if(flgBody){
        tgtE.appendChild(oEle);
        document.getElementsByTagName("body")[0].appendChild(tgtE);
        tgtE.classList.add("myCnt_loading_element");
        return tgtE;
    }else{
        tgtE.appendChild(oEle);
        oEle.classList.add("myCnt_loading_element");
        return oEle;
    }
}

function gen_ele_servers_vs_users(){
    if(somebody.value === ""){
        let oEle = document.createElement("div");
        oEle.innerHTML = "<p>No user selected, this table is empty.</p>"
        return oEle;
    }
    let oEle = document.createElement("table");
    let aTbd = document.createElement("tbody");
    // => header
    add_trh_to_tbl(aTbd,Array(
        "username",
        "jobStt",
        "queue",
        "#slot",
        "aMem",
        "TAT",
        "Srv-name",
        "jobid",
        "OS-vers",
        "hostStt",
        "Uti",
        "Group",
        "moreInfo",
    ));
    for(let tgtE of aTbd.lastChild.getElementsByTagName("th")){ tgtE.setAttribute("onclick","sortTblByHeader(this)"); tgtE.classList.add("w3-button","w3-hover-blue")}
    
    // => content
    for(let srvN in tgtObj["_byHost_"]){
        let exeSrv = tgtObj["_byHost_"][srvN]["lshosts_exeServer"]; if(exeSrv !== "Yes") {continue; }
        let stt = tgtObj["_byHost_"][srvN]["bhosts_status"];
        let os = tgtObj["_byHost_"][srvN]["lshosts_os"];
        let group = tgtObj["_byHost_"][srvN]["_hostGroup_"];
        let ut = tgtObj["_byHost_"][srvN]["lsload_ut"];
        let dedi = ""; if(tgtObj["_byHost_"][srvN]["dedicated_head"] !== undefined){dedi = "Dedicated"}
        for(let jobid in tgtObj["_byHost_"][srvN]){
            if(/^\d+$/.test(jobid)){
                let user = tgtObj["_byHost_"][srvN][jobid]["user"];
                // => check if user is in scope
                let flgGo = false;
                if(somebody.value !== ""){
                    for(let userPat of somebody.value.split(" ")){
                        if(userPat === "") continue;
                        let pat = new RegExp("^" + userPat)
                        if(pat.test(user)) flgGo = true;
                    }
                }else{}
                if(flgGo === false) continue;
                // <<<
                let pattern = new RegExp(".*" + somebody + ".*","i")
                if(! pattern.test(user)) {continue;}
                let jobStt = tgtObj["_byHost_"][srvN][jobid]["stat"];
                let queue = tgtObj["_byHost_"][srvN][jobid]["queue"];
                let uSlot = tgtObj["_byHost_"][srvN][jobid]["#hosts"];
                let askedMem = 1.0;
                if(/use_mem_size/.test(tgtObj["_byHost_"][srvN][jobid]["resreq"])){
                    askedMem = /use_mem_size=([\d\.]+)/.exec(tgtObj["_byHost_"][srvN][jobid]["resreq"])[1];
                }
                let runtime = getHour(tgtObj["_byHost_"][srvN][jobid]["run_time"])
                // let cmd = tgtObj["_byHost_"][srvN][jobid]["cmd"];
                // let resreq = tgtObj["_byHost_"][srvN][jobid]["resreq"];
                // ->
                add_trd_to_tbl(aTbd, Array(
                    user,
                    jobStt,
                    queue,
                    uSlot,
                    askedMem,
                    runtime,
                    srvN,
                    jobid,
                    os,
                    stt,
                    ut,
                    group,
                    dedi
                ));
                // mapping the server to left-side action
                aTbd.lastChild.getElementsByTagName("td")[6].setAttribute("onclick","showDetailInfo(this.innerText)");
                aTbd.lastChild.getElementsByTagName("td")[6].classList.add("w3-button","w3-brown");
            }
        } 
    }
    if(aTbd.getElementsByTagName("td").length === 0){
        let oEle2 = document.createElement("div");
        oEle2.innerHTML = "<p>No user got activiy, this table is empty.</p>"
        return oEle2;
    }
    // => update some format late
    for(let tgtE of aTbd.getElementsByTagName("td")){
        tgtE.style.margin = "1px";
        tgtE.style.border = "solid 1px";
    }

    // construction
    oEle.appendChild(aTbd);
    // some format
    aTbd.classList.add("w3-table-all")
    oEle.classList.add("w3-table-all","w3-responsive","w3-hoverable","w3-tiny")
    oEle.style.width = "100%";
    return oEle;
}

function gen_ele_remaining_resources(){
    let oEle = document.createElement("table");
    let aTbd = document.createElement("tbody");
    // => header
    add_trh_to_tbl(aTbd,Array(
        "Srv-name",
        "OS-vers",
        "Group",
        "Uti",
        "validSlot",
        "validMem",
        "moreInfo"
    ));
    for(let tgtE of aTbd.lastChild.getElementsByTagName("th")){ tgtE.setAttribute("onclick","sortTblByHeader(this)"); tgtE.classList.add("w3-button","w3-hover-blue")}
    
    // => content
    for(let srvN in tgtObj["_byHost_"]){
        let exeSrv = tgtObj["_byHost_"][srvN]["lshosts_exeServer"]; if(exeSrv !== "Yes") {continue; }
        let stt = tgtObj["_byHost_"][srvN]["bhosts_status"];        if (stt !== "ok") {continue;}
        let os = tgtObj["_byHost_"][srvN]["lshosts_os"];
        let group = tgtObj["_byHost_"][srvN]["_hostGroup_"];
        let ut = tgtObj["_byHost_"][srvN]["lsload_ut"];
        let dedi = ""; if(tgtObj["_byHost_"][srvN]["dedicated_head"] !== undefined){dedi = "Dedicated"}
        let validSlot = tgtObj["_byHost_"][srvN]["bhosts_MAX"] - tgtObj["_byHost_"][srvN]["bhosts_NJOBS"];
        let maxMem = getMem(tgtObj["_byHost_"][srvN]["lshosts_maxmem"]);
        let usedMem = 0;
        for(let jobid in tgtObj["_byHost_"][srvN]){
            if(/^\d+$/.test(jobid)){
                let askMem = 1.0;
                if(/use_mem_size/.test(tgtObj["_byHost_"][srvN][jobid]["resreq"])){
                    askMem = /use_mem_size=([\d\.]+)/.exec(tgtObj["_byHost_"][srvN][jobid]["resreq"])[1];
                }
                usedMem += Number(askMem);
            }
        }
        let validMem = (maxMem - usedMem).toFixed(0);

        // ->
        add_trd_to_tbl(aTbd, Array(
            srvN,
            os,
            group,
            ut,
            validSlot+ "/" + tgtObj["_byHost_"][srvN]["bhosts_MAX"],
            validMem + "/" + Number(maxMem).toFixed(0),
            dedi
        ));
        // mapping the server to left-side action
        aTbd.lastChild.getElementsByTagName("td")[0].setAttribute("onclick","showDetailInfo(this.innerText)");
        aTbd.lastChild.getElementsByTagName("td")[0].classList.add("w3-button","w3-brown");
    }
    // => update some format late for content
    for(let tgtE of aTbd.getElementsByTagName("td")){
        tgtE.style.margin = "1px";
        tgtE.style.border = "solid 1px";
    }

    // construction
    oEle.appendChild(aTbd);
    // some format
    aTbd.classList.add("w3-table-all")
    oEle.classList.add("w3-table-all","w3-responsive","w3-hoverable","w3-tiny")
    oEle.style.width = "100%";
    return oEle;
}

function update_right_side_content(){
    // => don't do when there is no right-side
    if(! rightEle.classList.contains("w3-show")) return;

    while(rightEle.childNodes.length > 0){ rightEle.lastChild.remove(); }
    // = >
    let aDiv1 = document.createElement("div");
    aDiv1.appendChild(gen_ele_remaining_resources());
    // aDiv1.style.position = "fixed";
    aDiv1.style.top = 0;
    aDiv1.style.height = "50%";
    aDiv1.style.width = "100%";
    aDiv1.style.paddingTop = "50px";
    aDiv1.classList.add("w3-responsive");
    aDiv1.getElementsByTagName("table")[0].style.height = "100%";
    aDiv1.getElementsByTagName("tbody")[0].style.minWidth = "100%";
    rightEle.appendChild(aDiv1);
    // => auto sorting for first look
    sortTblByHeader(aDiv1.getElementsByTagName("th")[4]);
    // => 
    let aDiv2 = document.createElement("div");
    let aEle = gen_ele_servers_vs_users();
    if(aEle.tagName.toLocaleLowerCase() === "div") {
        // there is no user selected
        aDiv2.appendChild(aEle);
        // aDiv2.style.position = "fixed";
        aDiv1.style.height = "90%";
        aDiv2.style.top = "90%";
        // aDiv2.style.paddingBottom = "100px";
        aDiv2.style.height = "10%";
        aDiv2.style.width = "100%";
        aDiv2.style.paddingBottom = "20px";
        rightEle.appendChild(aDiv2);
    }else{
        aDiv2.appendChild(aEle);
        // aDiv2.style.position = "fixed";
        aDiv2.style.top = "50%";
        // aDiv2.style.paddingBottom = "100px";
        aDiv2.style.height = "50%";
        aDiv2.style.width = "100%";
        aDiv2.style.paddingBottom = "20px";
        aDiv2.classList.add("w3-responsive");
        aDiv2.getElementsByTagName("table")[0].style.height = "100%";
        aDiv2.getElementsByTagName("tbody")[0].style.minWidth = "100%";
        rightEle.appendChild(aDiv2);
        sortTblByHeader(aDiv2.getElementsByTagName("th")[5]);
    }
    return;
}

function toggle_right_side(){
    if(rightEle.classList.contains("w3-show")){
        rightEle.classList.remove("w3-show");
        rightEle.previousElementSibling.style.width = "100%";
    }else{
        rightEle.classList.add("w3-show");
        rightEle.previousElementSibling.style.width = "70%";
        update_right_side_content();
    }
}

FILE:: .//src_modules/chkServers/sumExeSrvs.php
<?php
    // ini_set('display_errors', 1);
    // ini_set('display_startup_errors', 1);
    // error_reporting(E_ALL);

    $tgtD = "../../data/PVPI_org";

    // ##########
    $aoF = glob("$tgtD/*_copiedFile.txt");
    
    $oO = array();
    foreach($aoF as $tgtf){
        // => site name
        $tmpa = preg_split("/_/",basename($tgtf,".txt"));
        $siteName = $tmpa[0];
        if($siteName === "") continue;
        if(!array_key_exists($siteName,$oO)) $oO[$siteName] = array();

        // => file content
        $output = array();
        if(file_exists("$tgtf")){
            $fh = fopen("$tgtf","r");
            while(!feof($fh)){
                array_push($output,trim(fgets($fh)));
            }
            fclose($fh);
        }else{}
        
        // => content extraction and grouping
        $oByHost = array();//a temp data holding neccessary info by host-name, later will be extracted for sum
        $oByJobs = array();//a temp data holding neccessary info by job-id
        $keyw = "";
        foreach ($output as $line) {
            $aoMatches = array();
            if(preg_match("/^START\s+(\S+)/",$line,$aoMatches)) {
                $keyw = $aoMatches[1];
                // echo "starting ... $keyw ... <br>\n";
                continue;
            }
            if(preg_match("/^END\s+(\S+)/",$line,$aoMatches))  $keyw = "";
            if($keyw === "") continue;
    
            #############################################
            if($keyw === "hostname"){
                // dont need
            #############################################
            }elseif($keyw === "top"){
               // dont need
            #############################################
            }elseif($keyw === "bmgroup"){
                // dont need
            #############################################
            }elseif($keyw === "lshosts"){
                if(preg_match_all("/\S+/",$line,$aoMatches)){
                    if($aoMatches[0][0] === "HOST_NAME") continue; #this is header line
                    // 
                    $name   = $aoMatches[0][0];
                    $os     = $aoMatches[0][1];
                    $model  = $aoMatches[0][2];
                    $cpuf   = $aoMatches[0][3];
                    $ncpus  = $aoMatches[0][4];
                    $maxmem = $aoMatches[0][5];
                    $maxswp = $aoMatches[0][6];
                    $exeSrv = $aoMatches[0][7];

                    // grouping $os
                    if($os === "REDHATE7") $os = "RHEL7";
                    if($os === "REDHATE6") $os = "RHEL6";
                    if($os === "REDHATE5" || $os === "REDHATE5_0") $os = "RHEL5";
                    if($os === "REDHATE4" || $os === "REDHATE4_0") $os = "RHEL4";
                    if($os === "REDHATE3" || $os === "REDHATE3_0") $os = "RHEL3";


                    if(! array_key_exists($name,$oByHost)) $oByHost[$name] = array();
                    $oByHost[$name]["os"] = $os;
                    $oByHost[$name]["maxmem"] = getMem($maxmem);
                    $oByHost[$name]["maxswp"] = getMem($maxswp);
                    $oByHost[$name]["ncpus"] = $ncpus;
                    $oByHost[$name]["exeServer"] = $exeSrv;

                    // if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                    // if(! array_key_exists("_byOS_",$oO))   $oO["_byOS_"] = array();
                    // if(! array_key_exists($aoMatches[0][0], $oO["_byHost_"])) $oO["_byHost_"][$aoMatches[0][0]] = array();
                    // if(! array_key_exists("lshosts_os", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_os"]        = "";
                    // if(! array_key_exists("lshosts_model", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_model"]     = "";
                    // if(! array_key_exists("lshosts_cpuf", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_cpuf"]      = "";
                    // if(! array_key_exists("lshosts_ncpus", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_ncpus"]     = "";
                    // if(! array_key_exists("lshosts_maxmem", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_maxmem"]    = "";
                    // if(! array_key_exists("lshosts_maxswp", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_maxswp"]    = "";
                    // if(! array_key_exists("lshosts_exeServer", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lshosts_exeServer"] = "";
    
                    // $oO["_byHost_"][$aoMatches[0][0]]["lshosts_os"] .= $aoMatches[0][1];#type
                    // $oO["_byHost_"][$aoMatches[0][0]]["lshosts_model"] .= $aoMatches[0][2];
                    // $oO["_byHost_"][$aoMatches[0][0]]["lshosts_cpuf"] .= $aoMatches[0][3];
                    // $oO["_byHost_"][$aoMatches[0][0]]["lshosts_ncpus"] .= $aoMatches[0][4];
                    // $oO["_byHost_"][$aoMatches[0][0]]["lshosts_maxmem"] .= $aoMatches[0][5];
                    // $oO["_byHost_"][$aoMatches[0][0]]["lshosts_maxswp"] .= $aoMatches[0][6];
                    // $oO["_byHost_"][$aoMatches[0][0]]["lshosts_exeServer"] .= $aoMatches[0][7];
                    // $oO["_byOS_"][$aoMatches[0][1]][$aoMatches[0][0]] = 1;
                }else{}
            #############################################
            }elseif($keyw === "lsload"){
                if(preg_match_all("/\S+/",$line,$aoMatches)){
                    if($aoMatches[0][0] === "HOST_NAME") continue; #this is header line
                    //
                    $name = $aoMatches[0][0];
                    $status = $aoMatches[0][1];
                    $r15s = $aoMatches[0][2];
                    $r5m = $aoMatches[0][3];
                    $r15m = $aoMatches[0][4];
                    $ut = $aoMatches[0][5];
                    $pg = $aoMatches[0][6];
                    $ls = $aoMatches[0][7];
                    $it = $aoMatches[0][8];
                    $tmp = $aoMatches[0][9];
                    $swp = $aoMatches[0][10];
                    $mem = $aoMatches[0][11];

                    if(! array_key_exists($name,$oByHost)) $oByHost[$name] = array();
                    if(array_key_exists("status",$oByHost[$name])){
                        $oByHost[$name]["status"] .= "/" . $status;
                    }else{
                        $oByHost[$name]["status"] = $status;
                    }
                    $oByHost[$name]["mem"] = getMem($mem);
                    $oByHost[$name]["swp"] = getMem($swp);

                //     if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                //     if(! array_key_exists($aoMatches[0][0], $oO["_byHost_"])) $oO["_byHost_"][$aoMatches[0][0]] = array();
                //     if(! array_key_exists("lsload_status", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_status"]  = "";
                //     if(! array_key_exists("lsload_r15s", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_r15s"]    = "";
                //     if(! array_key_exists("lsload_r1m", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_r1m"]     = "";
                //     if(! array_key_exists("lsload_r15m", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_r15m"]    = "";
                //     if(! array_key_exists("lsload_ut", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_ut"]      = "";
                //     if(! array_key_exists("lsload_pg", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_pg"]      = "";
                //     if(! array_key_exists("lsload_ls", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_ls"]      = "";
                //     if(! array_key_exists("lsload_it", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_it"]      = "";
                //     if(! array_key_exists("lsload_tmp", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_tmp"]     = "";
                //     if(! array_key_exists("lsload_swp", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_swp"]     = "";
                //     if(! array_key_exists("lsload_mem", $oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["lsload_mem"]     = "";
    
                //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_status"] .= (count($aoMatches[0]) > 1) ? $aoMatches[0][1] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_r15s"]   .= (count($aoMatches[0]) > 2) ? $aoMatches[0][2] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_r1m"]    .= (count($aoMatches[0]) > 3) ? $aoMatches[0][3] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_r15m"]   .= (count($aoMatches[0]) > 4) ? $aoMatches[0][4] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_ut"]     .= (count($aoMatches[0]) > 5) ? $aoMatches[0][5] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_pg"]     .= (count($aoMatches[0]) > 6) ? $aoMatches[0][6] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_ls"]     .= (count($aoMatches[0]) > 7) ? $aoMatches[0][7] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_it"]     .= (count($aoMatches[0]) > 8) ? $aoMatches[0][8] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_tmp"]    .= (count($aoMatches[0]) > 9) ? $aoMatches[0][9] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_swp"]    .= (count($aoMatches[0]) > 10) ?  $aoMatches[0][10] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["lsload_mem"]    .= (count($aoMatches[0]) > 11) ?  $aoMatches[0][11] : "";
                }else{}
            #############################################
            }elseif($keyw === "bhosts"){
                if(preg_match_all("/\S+/",$line,$aoMatches)){
                    if($aoMatches[0][0] === "HOST_NAME") continue; #this is header line
                    //
                    $name = $aoMatches[0][0];
                    $status = $aoMatches[0][1];
                    $JLperU = $aoMatches[0][2];
                    $MAX = $aoMatches[0][3];
                    $NJOBS = $aoMatches[0][4];
                    $RUN = $aoMatches[0][5];
                    $SSUSP = $aoMatches[0][6];
                    $USUSP = $aoMatches[0][7];
                    $RSV = $aoMatches[0][8];

                    if(! array_key_exists($name,$oByHost)) $oByHost[$name] = array();
                    if(array_key_exists("status",$oByHost[$name])){
                        $oByHost[$name]["status"] .= "/" . $status;
                    }else{
                        $oByHost[$name]["status"] = $status;
                    }
                    $oByHost[$name]["MAX"] = $MAX;
                    $oByHost[$name]["RUN"] = $RUN;

                //     if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                //     if(! array_key_exists($aoMatches[0][0], $oO["_byHost_"])) $oO["_byHost_"][$aoMatches[0][0]] = array();
                //     if(! array_key_exists("bhosts_status" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_status"] = "";
                //     if(! array_key_exists("bhosts_JL/U" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_JL/U"]   = "";
                //     if(! array_key_exists("bhosts_MAX" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_MAX"]    = "";
                //     if(! array_key_exists("bhosts_NJOBS" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_NJOBS"]  = "";
                //     if(! array_key_exists("bhosts_RUN" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_RUN"]    = "";
                //     if(! array_key_exists("bhosts_SSUSP" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_SSUSP"]  = "";
                //     if(! array_key_exists("bhosts_USUSP" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_USUSP"]  = "";
                //     if(! array_key_exists("bhosts_RSV" ,$oO["_byHost_"][$aoMatches[0][0]]))    $oO["_byHost_"][$aoMatches[0][0]]["bhosts_RSV"]    = "";
                    
                //     $oO["_byHost_"][$aoMatches[0][0]]["bhosts_status"]  .= (count($aoMatches[0]) > 1) ? $aoMatches[0][1] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["bhosts_JL/U"]    .= (count($aoMatches[0]) > 2) ? $aoMatches[0][2] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["bhosts_MAX"]     .= (count($aoMatches[0]) > 3) ? $aoMatches[0][3] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["bhosts_NJOBS"]   .= (count($aoMatches[0]) > 4) ? $aoMatches[0][4] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["bhosts_RUN"]     .= (count($aoMatches[0]) > 5) ? $aoMatches[0][5] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["bhosts_SSUSP"]   .= (count($aoMatches[0]) > 6) ? $aoMatches[0][6] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["bhosts_USUSP"]   .= (count($aoMatches[0]) > 7) ? $aoMatches[0][7] : "";
                //     $oO["_byHost_"][$aoMatches[0][0]]["bhosts_RSV"]     .= (count($aoMatches[0]) > 8) ? $aoMatches[0][8] : "";
                }else{}
            #############################################
            }elseif($keyw === "SP_HOST_DIR"){
                // if(file_exists($line)){
                //     foreach (glob("$line/*") as $file){
                //         if(is_file($file)){
                //             $host = basename($file);
                //             if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                //             if(! array_key_exists($host,$oO["_byHost_"]))   $oO["_byHost_"][$host] = array();
                //             foreach (file($file) as $txtLine){
                //                 if(! array_key_exists("dedicated_head",$oO["_byHost_"][$host]))   $oO["_byHost_"][$host]["dedicated_head"] = array();
                //                 if(! array_key_exists("dedicated_users",$oO["_byHost_"][$host]))  $oO["_byHost_"][$host]["dedicated_users"] = array();
                //                 if(preg_match("/^#/", $txtLine)){
                //                     array_push($oO["_byHost_"][$host]["dedicated_head"], $txtLine);
                //                 }else{
                //                     array_push($oO["_byHost_"][$host]["dedicated_users"], $txtLine);
                //                 }
                //             }
                //         }
                //     }
                // }else{}
            #############################################
            }elseif($keyw === "bjobs"){
                if(preg_match_all("/[^;]+/",$line,$aoMatches)){
                    if(preg_match_all("/[^:]+/", $aoMatches[0][0], $aoHosts)){
                        $aoUnqHosts = array_unique($aoHosts[0]);
                        $unqHostWnumber = array();
                        if(count($aoUnqHosts) > 1){
                            // echo "dbg: WARNING: not same host: $line\n";
                        }
                        foreach ($aoHosts[0] as $host){
                            if(! array_key_exists($host, $unqHostWnumber)) $unqHostWnumber[$host] = 0;
                            $unqHostWnumber[$host]++;
                        }
                        
                        // =>
                        $jobid = $aoMatches[0][1];
                        $stat = $aoMatches[0][2];
                        $user = $aoMatches[0][3];
                        $queue = $aoMatches[0][4];
                        $run_time = $aoMatches[0][5];
                        $cmd = $aoMatches[0][6];
                        $resreq = $aoMatches[0][count($aoMatches[0])-1] . " " . $aoMatches[0][count($aoMatches[0])-2];
                        
                        // => reg by jobs
                        if($stat !== "STAT"){
                            if(! array_key_exists("byStatus",$oByJobs)) $oByJobs["byStatus"] = array();
                            if(! array_key_exists($stat,$oByJobs["byStatus"])) $oByJobs["byStatus"][$stat] = 0;
                            $oByJobs["byStatus"][$stat]++;
                        }else{}

                        foreach ($aoUnqHosts as $host){
                            if($host === "EXEC_HOST") continue; #this is header line
                            //
                            $name = $host;
                            $nohosts = $unqHostWnumber[$host];

                            if($name === "-"){
                                // PSUSP: Suspended by its owner or the LSF administrator while in PEND state
                                if($stat !== "PEND"
                                && $stat !== "PSUSP"
                                ){
                                    if(!array_key_exists("problem_nohost",$oO)) $oO["problem_nohost"] = array();
                                    array_push($oO["problem_nohost"],$line);
                                }
                            }

                            $memAsked = getMem_asked_from_resreq($resreq);
                            if($memAsked === 0){
                                if($stat !== "PEND"
                                && $stat !== "PSUSP"
                                ){
                                    if(!array_key_exists("problem_noMem_asked",$oO)) $oO["problem_noMem_asked"] = array();
                                    $oO["problem_noMem_asked"][$jobid] = sprintf("%s:%s:%s:%s",$stat,$queue,$user,$resreq);
                                    $memAsked = 1;//default mem asked if not detected
                                }
                            }else{}

                            // => reg info by host name
                            if(! array_key_exists($name,$oByHost)) $oByHost[$name] = array();
                            if(! array_key_exists("job_#jobs",$oByHost[$name])) $oByHost[$name]["job_#jobs"] = 0;
                            $oByHost[$name]["job_#jobs"]++;
                            if(! array_key_exists("job_#asked_cpu",$oByHost[$name])) $oByHost[$name]["job_#asked_cpu"] = 0;
                            $oByHost[$name]["job_#asked_cpu"]+=$nohosts;
                            if(! array_key_exists("job_asked_mem",$oByHost[$name])) $oByHost[$name]["job_asked_mem"] = 0;
                            $oByHost[$name]["job_asked_mem"]+=$memAsked;

                            if(! array_key_exists("job_jobs",$oByHost[$name])) $oByHost[$name]["job_jobs"] = array();
                            $oByHost[$name]["job_jobs"][$jobid] = sprintf("%s:%s:%s:%s:%s",$stat,$queue,$memAsked,$run_time,$user);

                            // if(! array_key_exists("_byHost_",$oO))   $oO["_byHost_"] = array();
                            // if(! array_key_exists($host, $oO["_byHost_"])) $oO["_byHost_"][$host] = array();
                            // if(! array_key_exists($aoMatches[0][1], $oO["_byHost_"][$host])) {
                            //     $oO["_byHost_"][$host][$aoMatches[0][1]] = array();
                            //     $oO["_byHost_"][$host][$aoMatches[0][1]]["stat"] = "";
                            //     $oO["_byHost_"][$host][$aoMatches[0][1]]["user"] = "";
                            //     $oO["_byHost_"][$host][$aoMatches[0][1]]["queue"] = "";
                            //     $oO["_byHost_"][$host][$aoMatches[0][1]]["run_time"] = "";
                            //     $oO["_byHost_"][$host][$aoMatches[0][1]]["cmd"] = "";
                            //     $oO["_byHost_"][$host][$aoMatches[0][1]]["resreq"] = "";
                            //     $oO["_byHost_"][$host][$aoMatches[0][1]]["#hosts"] = -1;
                            // }
                            // $oO["_byHost_"][$host][$aoMatches[0][1]]["stat"] .= $aoMatches[0][2];
                            // $oO["_byHost_"][$host][$aoMatches[0][1]]["user"] .= $aoMatches[0][3];
                            // $oO["_byHost_"][$host][$aoMatches[0][1]]["queue"] .= $aoMatches[0][4];
                            // $oO["_byHost_"][$host][$aoMatches[0][1]]["run_time"] .= $aoMatches[0][5];
                            // $oO["_byHost_"][$host][$aoMatches[0][1]]["cmd"] .= $aoMatches[0][6];
                            // $oO["_byHost_"][$host][$aoMatches[0][1]]["resreq"] .= $aoMatches[0][count($aoMatches[0])-1];
                            // $oO["_byHost_"][$host][$aoMatches[0][1]]["#hosts"] = $unqHostWnumber[$host];
                        }
                    }else{
                        if(!array_key_exists("test",$oO)) $oO["test"] = array();
                        array_push($oO["test"],$aoMatches);
                    }
                }else{}
            #############################################
            }else{
                #out-of-scope
            }
        }

        // => summarizing
        if(! array_key_exists($siteName,$oO)) $oO[$siteName] = array();
        // => for debugging, output all data
        $oO[$siteName]["byHost"] = $oByHost;
        $oO[$siteName]["byJobs"] = $oByJobs;

        // =>
        foreach($oByHost as $host => $info){
            $os = $info["os"];
            $exeSrv = $info["exeServer"];
            if($host === "-"){
                $os = "UNKNOWN";
                $exeSrv = "No";
            }

            if($exeSrv === "Yes"){
                if(! array_key_exists("exeServers",$oO[$siteName])) $oO[$siteName]["exeServers"] = array();
                // sum all and byOS ===============
                $aoTmp = array("all","byOS=$os");
                foreach($aoTmp as $tmpv){
                    if(! array_key_exists($tmpv    ,$oO[$siteName]["exeServers"]))        $oO[$siteName]["exeServers"][$tmpv] = array();

                    if(! array_key_exists("#server",$oO[$siteName]["exeServers"][$tmpv])) $oO[$siteName]["exeServers"][$tmpv]["#server"] = 0;
                    $oO[$siteName]["exeServers"][$tmpv]["#server"]++;
                    if(! array_key_exists("#server",$oO[$siteName]["exeServers"][$tmpv])) $oO[$siteName]["exeServers"][$tmpv]["#server_OK"] = 0;
                    if($info["status"] === "ok/ok") $oO[$siteName]["exeServers"][$tmpv]["#server_OK"]++;

                    if($info["RUN"] > 0){
                        if(! array_key_exists("#server",$oO[$siteName]["exeServers"][$tmpv])) $oO[$siteName]["exeServers"][$tmpv]["#server_has_jobs"] = 0;
                        $oO[$siteName]["exeServers"][$tmpv]["#server_has_jobs"]++;
                        if(! array_key_exists("#server",$oO[$siteName]["exeServers"][$tmpv])) $oO[$siteName]["exeServers"][$tmpv]["#server_has_jobs_OK"] = 0;
                        if($info["status"] === "ok/ok") $oO[$siteName]["exeServers"][$tmpv]["#server_has_jobs_OK"]++;
                    }

                    if(! array_key_exists("maxmem",$oO[$siteName]["exeServers"][$tmpv])) $oO[$siteName]["exeServers"][$tmpv]["maxmem"] = 0;
                    $oO[$siteName]["exeServers"][$tmpv]["maxmem"] += $info["maxmem"];
                    if(! array_key_exists("maxswap",$oO[$siteName]["exeServers"][$tmpv])) $oO[$siteName]["exeServers"][$tmpv]["maxswap"] = 0;
                    $oO[$siteName]["exeServers"][$tmpv]["maxswap"] += $info["maxswp"];
                    if(! array_key_exists("askedmem",$oO[$siteName]["exeServers"][$tmpv])) $oO[$siteName]["exeServers"][$tmpv]["askedmem"] = 0;
                    $oO[$siteName]["exeServers"][$tmpv]["askedmem"] += $info["job_asked_mem"];

                    if(! array_key_exists("#slots_all",$oO[$siteName]["exeServers"][$tmpv])) $oO[$siteName]["exeServers"][$tmpv]["#slots_all"] = 0;
                    $oO[$siteName]["exeServers"][$tmpv]["#slots_all"] += $info["MAX"];
                    if(! array_key_exists("#slots_RUN",$oO[$siteName]["exeServers"][$tmpv])) $oO[$siteName]["exeServers"][$tmpv]["#slots_RUN"] = 0;
                    $oO[$siteName]["exeServers"][$tmpv]["#slots_RUN"] += $info["RUN"];

                }
            }else{
                // host === - or not an executive host
            }

        }
    }

    echo json_encode($oO);
    // var_dump($oO);

    ///////////////////////////////// SUB FUNCTION
    function getMem($iStr){
        if(preg_match("/^(\d+)([^\d]+)$/",$iStr,$matches)){
            if($matches[2] === "G"){
                return floatval($matches[1]);
            }elseif($matches[2] === "M"){
                return floatval($matches[1])/1024;
            }elseif($matches[2] === "K"){
                return floatval($matches[1])/(1024*1024);
            }elseif($matches[2] === "T"){
                return floatval($matches[1])*1024;
            }else{}
        }else{}

        return 0;
    }

    function getMem_asked_from_resreq($iStr){
        if(preg_match("/use_mem_size=([\.\d]+)/",$iStr,$matches)){
            return floatval($matches[1]);
        }elseif(preg_match("/mem=([\.\d]+)/",$iStr,$matches)){
            return floatval($matches[1]);
        }else{}
        return 0;
    }

    return;
?>

FILE:: .//src_modules/gen_def_passOTP/cmd.gen_def_passOTP.pl
#!/usr/bin/perl -w

use strict;
use lib "/shsv/BackendIO/99_Physical/4_Users/manduong/PROGRAMS/CPAN";

use String::Random;

($#ARGV < 1) && &myQuit(1);
(!-f $ARGV[0]) && &myQuit(2);
(! $ARGV[1]) && &myQuit(3);

my $inf = $ARGV[0];
my $outf = $ARGV[1];

# -> preserve the outfile content before generation
my %hoO = ();
if(-f $outf && open(OUTF,"<$outf")){
    while(<OUTF>){
        (/^\s*#/) && next;# ignore the commented-out
        chomp;
        my @tmpa = split(',');
        $hoO{$tmpa[0]} = $tmpa[1];
    }
    close OUTF;
}else{}

# -> do the job for each account registered
if(-f $inf && open(INF,"<$inf")){
    my $pass = String::Random->new;
    while(<INF>){
        (/^\s*#/) && next;
        chomp;
        (exists $hoO{$_}) && next;
        $hoO{$_} = $pass->randpattern("CCcncnss");
        print "Newly generated for $_ !\n";
    }
    close INF;
}else{}

# -> output
if(scalar keys %hoO && open(OUTF,">$outf")){
    print OUTF "#account,defOTP\n";#header
    foreach my $tmpv (sort keys %hoO){
        print OUTF "$tmpv,$hoO{$tmpv}" . "\n";
    }
    close OUTF;
}else{}


sub myQuit(){
    my $code = 0;
    my $addInf = "";
    (@_) && ($code = shift);
    (@_) && ($addInf = shift);
    print "\n";
    if($code == 1){ print "[E" .sprint("%03d",$code)."] Please input.\n";
    }elsif($code == 2){ print "[E" .sprint("%03d",$code)."] Please input a file.\n";
    }elsif($code == 3){ print "[E" .sprint("%03d",$code)."] Please input an out file path/name.\n";
    }else{ print "Exit by default.\n"; }
    ($addInf) && print $addInf . "\n";
    exit;
}

FILE:: .//src_modules/gen_def_passOTP/zgo.gen_def_paddOTP.csh
#!/bin/csh -f

set tmpf = "./tmpf.txt";
set outf = "../../data_manual/list_user_w_def_OTP.txt";

## -> list of registered accounts
cat <<ENDOFFILE >! $tmpf
man.duong.ym@renesas.com
hac.nguyen.xf@renesas.com
ENDOFFILE

## -> do the job
./cmd.gen_def_passOTP.pl \
    $tmpf \
    $outf \
;

## -> test
cat $outf


## -> clean temp files
rm -f $tmpf

FILE:: .//src_modules/host_info/chmod_file.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once "../../src_modules/login/users_sqlite3_OTP.class.php";
    register_shutdown_function("my_handler_fatal");
    $user = new User_by_sqlite3;

    
    // return control data for generation of login form
    $oO = array();

    if(!isset($_REQUEST) || !isset($_REQUEST["file"])){
        $oO['rtnCode'] = "NG: No specific file.";
    }elseif($user->get_role() !== "Admin" || $user->login_email !== "man.duong.ym@renesas.com"){
        $oO['rtnCode'] = "NG: Not authorized.";
    }else{
        try {
            if(0777 === (fileperms($_REQUEST["file"]) & 0777)){
                $oO["chmod_status"] = chmod($_REQUEST["file"],0644);
            }else{
                $oO["chmod_status"] = chmod($_REQUEST["file"],0777);
            }
            $oO["rtnCode"] = "OK";
        }catch(Exception $e){
            $oO["rtnCode"] = $e;
        }
    }

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/host_info/drop_table.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once "../../src_modules/login/users_sqlite3_OTP.class.php";
    register_shutdown_function("my_handler_fatal");
    $user = new User_by_sqlite3;

    
    // return control data for generation of login form
    $oO = array();

    if(!isset($_REQUEST) || !isset($_REQUEST["file"])){
        $oO['rtnCode'] = "NG: No specific file.";
    }elseif(!isset($_REQUEST) || !isset($_REQUEST["tblName"])){
        $oO['rtnCode'] = "NG: No specific table name.";
    }elseif($user->get_role() !== "Admin" || $user->login_email !== "man.duong.ym@renesas.com"){
        $oO['rtnCode'] = "NG: Not authorized.";
    }else{
        $db = new SQLite3($_REQUEST["file"]);
        if($db){
            if(!$db->exec("DROP TABLE \"".$_REQUEST["tblName"]."\";")){
                $oO["drop_status"] = $db->lastErrorMsg();
                $oO["rtnCode"] = "NG: exec failed.";
            }else{
                $oO["rtnCode"] = "OK";
            }
            $db->close();
        }else{
            $oO["rtnCode"] = "NG: Cannot open db.";
        }
    }

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/host_info/host_info_w_interval.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    register_shutdown_function("my_handler_fatal");

    function my_try_catch_exec($cmd){
        $output = array();
        $rtnCode = null;
        $tmpa = preg_split('/\s+/',$cmd);
        try {
            exec($cmd,$output,$rtnCode);
        }catch(Exception $e){
            array_push($output,"Failed execution.");
        }
        return array($tmpa[0],$output);
    }

    // return control data for generation of login form
    $oO = array();

    array_push($oO,my_try_catch_exec("df -h /tmp"));
    array_push($oO,my_try_catch_exec("finger -s"));
    array_push($oO,my_try_catch_exec("mpstat"));
    // array_push($oO,my_try_catch_exec("top -b -n 1 | head -5"));
    array_push($oO,my_try_catch_exec("hostname;hostname -i"));
    // array_push($oO,my_try_catch_exec("ping -c 4 -q `hostname -i`"));
    // array_push($oO,my_try_catch_exec("hostname -i"));

    array_push($oO,array("REMOTE_ADDR",$_SERVER['REMOTE_ADDR']));
    
    
    // $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/host_info/list_data_files.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    register_shutdown_function("my_handler_fatal");
    date_default_timezone_set("Asia/Ho_Chi_Minh");

    // return control data for generation of login form
    $oO = array();
    
    $oO["cntData"][0] = array("File","Owner","Perm","Size","Last mod.");
    $aoF = array();
    foreach(glob("../../data/*/*") as $file) array_push($aoF,$file);
    foreach($aoF as $file){
        $stat = stat($file);
        $owner = $stat["uid"];
        if(function_exists('posix_getpwuid')){
            $tmpv = posix_getpwuid($stat[4]);
            if($tmpv) $owner = $tmpv["name"];
            // $owner = posix_getpwuid($stat[4])['name'];
        }
        $size = $stat["size"]; $size = sprintf("%.1f",$size/(1024)) . "KB";
        $perm = decoct(fileperms($file) & 0777);
        $mtime = date("M d Y H:i:s",$stat["mtime"]);
        array_push($oO["cntData"],array($file,$owner,$perm,$size,$mtime));
    }
    
    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/host_info/list_data_tables.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    register_shutdown_function("my_handler_fatal");

    // return control data for generation of login form
    $oO = array();
    
    $oO["cntData"][0] = array("File","TableName");
    foreach(glob("../../data/by_sqlite3/*") as $file){
        $db = new SQLite3($file);
        if($db){
            $sql = "SELECT * from sqlite_master WHERE type='table'";
            $query = $db->query($sql);
            if($query){
                while($fA = $query->fetchArray(SQLITE3_ASSOC)){
                    array_push($oO["cntData"],array($file,$fA["tbl_name"]));
                }
            }else{}
            $db->close();
        }else{}
    }
    
    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/host_info/phpinfo.html.php
<?php

// ob_start ();

ob_start ();                              // Capturing
phpinfo ();                               // phpinfo ()
$info = trim (ob_get_clean ());           // output

// Replace white space in ID and NAME attributes... if exists
$info = preg_replace ('/(id|name)(=["\'][^ "\']+) ([^ "\']*["\'])/i', '$1$2_$3', $info);

$imp = new DOMImplementation ();
$dtd = $imp->createDocumentType (
    'html',
    '-//W3C//DTD XHTML 1.0 Transitional//EN',
    'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'
);
$doc = $imp->createDocument (
    'http://www.w3.org/1999/xhtml',
    'html',
    $dtd
);
$doc->encoding = 'utf-8';

$info_doc = new DOMDocument ('1.0', 'utf-8');
/* Parse phpinfo's output
* operator @ used to avoid messages about undefined entities
* or use loadHTML instead
*/
@$info_doc->loadXML ($info);

$doc->documentElement->appendChild ( // Adding HEAD element to HTML
    $doc->importNode (
        $info_doc->getElementsByTagName ('head')->item (0),
        true                         // With all the subtree
    )
);
$doc->documentElement->appendChild ( // Adding BODY element to HTML
    $doc->importNode (
        $info_doc->getElementsByTagName ('body')->item (0),
        true                         // With all the subtree
    )
);

// Now you get a clean output and you are able to validate...
/*
echo ($doc->saveXML ());
//      OR
echo ($doc->saveHTML ());
*/

// By that way it's easy to add some style declaration :
$style = $doc->getElementsByTagName ('style')->item (0);
$style->appendChild (
    $doc->createTextNode (
        '/* SOME NEW CSS RULES TO ADD TO THE FUNCTION OUTPUT */'
    )
);

// to add some more informations to display :
$body = $doc->getElementsByTagName ('body')->item (0);
$element = $doc->createElement ('p');
$element->appendChild (
    $doc->createTextNode (
        'SOME NEW CONTENT TO DISPLAY'
    )
);
$body->appendChild ($element);

// to add a new header :
$head = $doc->getElementsByTagName ('head')->item (0);
$meta = $doc->createElement ('meta');
$meta->setAttribute ('name', 'author');
$meta->setAttribute ('content', 'arimbourg at ariworld dot eu');
$head->appendChild ($meta);

// As you wish, take the rest of the output and add it for debugging
$out = ob_get_clean ();

$pre = $doc->createElement ('div'); // or pre
$pre->setAttribute ('style', 'white-space: pre;'); // for a div element, useless with pre
$pre->appendChild ($doc->createTextNode ($out));
$body->appendChild ($pre);

$doc->formatOutput = true; // For a nice indentation
// echo ($doc->saveXML ());


// my modify the doc DOM content
foreach($doc->getElementsByTagName("table") as $table){
    $table->setAttribute("width","100%");
}


echo ($doc->saveHTML ());

?>

FILE:: .//src_modules/host_info/remove_file.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once "../../src_modules/login/users_sqlite3_OTP.class.php";
    register_shutdown_function("my_handler_fatal");
    $user = new User_by_sqlite3;

    
    // return control data for generation of login form
    $oO = array();

    if(!isset($_REQUEST) || !isset($_REQUEST["file"])){
        $oO['rtnCode'] = "NG: No specific file.";
    }elseif($user->get_role() !== "Admin" || $user->login_email !== "man.duong.ym@renesas.com"){
        $oO['rtnCode'] = "NG: Not authorized.";
    }else{
        try {
            $oO["remove_status"] = unlink($_REQUEST["file"]);
            $oO["rtnCode"] = "OK";
        }catch(Exception $e){
            $oO["rtnCode"] = $e;
        }
    }

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/host_info/working_on_host_info.js
function dsp_simple_table_4_data_files(cntO){
    if(cntO.length === 0) return;
    if(!cntO.hasOwnProperty("cntData")) return;
    if(cntO["cntData"].length === 0) return;
    if(document.getElementById("mainSide") === null) return;
    while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
    console.log(cntO)

    let eTop = my_create("div",undefined,["w3-responsive"],{"position":"relative"},{"id":"tbl_matches_admin"});
    let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable","w3-small"],{"min-width":"100%","font-family":"Courier New"});
    let eTbd = my_create("tbody",undefined,[],{"min-width":"100%"});

    // reg columns
    let regCols = [];
    for(let i=0;i<cntO["cntData"][0].length;i++){
        if(0
        || cntO["cntData"][0][i] === "modify_on"
        || cntO["cntData"][0][i] === "modify_by"
        || cntO["cntData"][0][i] === "register_on"
        || cntO["cntData"][0][i] === "register_by"
        ) continue;
        regCols.push(i);
    }
    // header
    let thData = [];
    for(let i of regCols) { thData.push(cntO["cntData"][0][i]); }
    eTbd.appendChild(my_add_row(thData,"th"));

    // content
    for(let j=1;j<cntO["cntData"].length;j++){
        let tdData = [];
        for(let i of regCols) { tdData.push(cntO["cntData"][j][i]); }
        // => add some more buttons
        tdData.push("<i class='bi bi-trash w3-button w3-hover-orange w3-large w3-round' style='padding:0'></i>")
        tdData.push("<i class='bi bi-bandaid w3-button w3-hover-orange w3-large w3-round' style='padding:0'></i>")
        // =>
        eTbd.appendChild(my_add_row(tdData,"td"));
    }
    for(let tmpe of eTbd.getElementsByClassName("bi-trash")){
        tmpe.addEventListener("click",dsp_del_file_from_del_button);
    }
    for(let tmpe of eTbd.getElementsByClassName("bi-bandaid")){
        tmpe.addEventListener("click",dsp_chmod_file_from_mod_button);
    }

    eTbl.appendChild(eTbd);
    eTop.appendChild(eTbl);
    mainSide.appendChild(eTop);
    return 1;
}

function dsp_del_file_from_del_button(){
    let sf = "src_modules/host_info/remove_file.php";
    let file = this.parentNode.parentNode.getElementsByTagName("td")[0].innerText;
    my_ajax_get(sf,[{file:file}],function(rtnO){
        console.log(rtnO)
        my_ajax_get("./src_modules/host_info/list_data_files.php",[{}],dsp_simple_table_4_data_files);
    });
    return;
}

function dsp_chmod_file_from_mod_button(){
    let sf = "src_modules/host_info/chmod_file.php";
    let file = this.parentNode.parentNode.getElementsByTagName("td")[0].innerText;
    my_ajax_get(sf,[{file:file}],function(rtnO){
        console.log(rtnO)
        my_ajax_get("./src_modules/host_info/list_data_files.php",[{}],dsp_simple_table_4_data_files);
    });
    return;
}

///////////////
function dsp_simple_table_4_data_tables(cntO){
    if(cntO.length === 0) return;
    if(!cntO.hasOwnProperty("cntData")) return;
    if(cntO["cntData"].length === 0) return;
    if(document.getElementById("mainSide") === null) return;
    while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}

    let eTop = my_create("div",undefined,["w3-responsive"],{"position":"relative"},{"id":"tbl_matches_admin"});
    let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable","w3-small"],{"min-width":"100%","font-family":"Courier New"});
    let eTbd = my_create("tbody",undefined,[],{"min-width":"100%"});

    // reg columns
    let regCols = [];
    for(let i=0;i<cntO["cntData"][0].length;i++){
        regCols.push(i);
    }
    // header
    let thData = [];
    for(let i of regCols) { thData.push(cntO["cntData"][0][i]); }
    eTbd.appendChild(my_add_row(thData,"th"));

    // content
    for(let j=1;j<cntO["cntData"].length;j++){
        let tdData = [];
        for(let i of regCols) { tdData.push(cntO["cntData"][j][i]); }
        // => add some more buttons
        tdData.push("<i class='bi bi-trash w3-button w3-hover-orange w3-large w3-round' style='padding:0'></i>")
        // =>
        eTbd.appendChild(my_add_row(tdData,"td"));
    }
    for(let tmpe of eTbd.getElementsByClassName("bi-trash")){
        tmpe.addEventListener("click",dsp_del_table_from_del_button);
    }

    eTbl.appendChild(eTbd);
    eTop.appendChild(eTbl);
    mainSide.appendChild(eTop);
    return 1;
}

function dsp_del_table_from_del_button(){
    let sf = "src_modules/host_info/drop_table.php";
    let file = this.parentNode.parentNode.getElementsByTagName("td")[0].innerText;
    let tblName = this.parentNode.parentNode.getElementsByTagName("td")[1].innerText;
    my_ajax_get(sf,[{file:file,tblName:tblName}],function(rtnO){
        console.log(rtnO)
        my_ajax_get("./src_modules/host_info/list_data_tables.php",[{}],dsp_simple_table_4_data_tables);
    });
    return;
}

////////////////////
function dsp_host_info_w_interval(cntO){
    console.log(cntO)
    if(cntO.length === 0) return;

    // => decide where to go
    let eTop = null;
    if(document.getElementById('host-info-w-interval') === null){
        if(document.getElementById("mainSide") === null) return;
        while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
        eTop = my_create("div",undefined,["w3-small"],{},{id:"host-info-w-interval"})
        mainSide.appendChild(eTop);
    }else{
        eTop = document.getElementById('host-info-w-interval');
    }
    while(eTop.childNodes.length > 0){eTop.lastChild.remove()}

    console.log(eTop)
    // => components
    let eUpTime = my_create("div",Date().toLocaleString());
    eTop.appendChild(eUpTime)

    for(let infItem of cntO){
        let eITop = my_create("div",undefined,["w3-border-bottom"])
        eITop.appendChild(my_create("div",infItem[0],["w3-indigo","w3-text-white"],{"margin-top":"20px"}))

        if(Array.isArray(infItem[1])){
            for(let tmpv of infItem[1]){
                eITop.appendChild(my_create("div",tmpv,["w3-light-grey","w3-monospace"]))
            }
        }else{
            eITop.appendChild(my_create("div",infItem[1],["w3-light-grey","w3-monospace"]))
        }

        eTop.appendChild(eITop);
    }
    
    return 1;
}

FILE:: .//src_modules/login/act_update_user_info.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);
    
    require_once '../../src_main/my.php';
    register_shutdown_function("my_handler_fatal");

    $oO = array();
    $oO["rtnCode"] = "OK";

    if(!isset($_POST)){$oO["rtnCode"] = "NG: no POST";echo("{}");return;}
    if(!isset($_POST["login_email"])){$oO["rtnCode"] = "NG: no POST/login_email";echo("{}");return;}

    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    $user = new User_by_sqlite3;

    $oO["reg_user_status"] = $user->reg_user($_POST["login_email"],$_POST);
    // $oO["testData"]  = $_POST;

    // =>
    echo(json_encode($oO)); //
?>

FILE:: .//src_modules/login/chk_and_rtn_login_user_info.php
<?php
    require_once("../../src_modules/login/users_file.class.php");
    $oO = array();
    $user = new User_by_file;

    if(isset($_GET) && isset($_GET["login_email"]) && $_GET["login_email"] !== $user->login_email){
        $oO["user_info"] = $user->get_user_info($_GET["login_email"]);
        $oO["requested_email"] = $_GET["login_email"];
    }else{
        $oO["user_info"] = $user->get_user_info();
        $oO["requested_email"] = "this";
    }

    $oO["this_user"] = $user->login_email;
    $oO["this_role"] = $user->role;
    echo(json_encode($oO));
?>

FILE:: .//src_modules/login/chk_and_rtn_login_user_info_sqlite.php
<?php
    require_once '../../src_main/my.php';
    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    register_shutdown_function("my_handler_fatal");
    $oO = array();
    $user = new User_by_sqlite3;

    if(isset($_GET) && isset($_GET["login_email"]) && $_GET["login_email"] !== $user->login_email){
        $oO["user_info"] = $user->get_user_info($_GET["login_email"]);
        $oO["requested_email"] = $_GET["login_email"];
    }else{
        $oO["user_info"] = $user->get_user_info();
        $oO["requested_email"] = "this email";
    }

    $oO["this_user"] = $user->login_email;
    $oO["this_role"] = $user->role;
    echo(json_encode($oO));
?>

FILE:: .//src_modules/login/del_user.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    register_shutdown_function("my_handler_fatal");
    $user = new User_by_sqlite3;

    // return control data for generation of login form
    $oO = array();
    if($user->role === "Admin" || $user->login_email === "man.duong.ym@renesas.com"){
        if(isset($_REQUEST) && isset($_REQUEST["user"])){
            $oO["del_status"] = $user->del_user($_REQUEST["user"]);//
        }
        $oO["rtnCode"] = "OK";
    }else{
        $oO["rtnCode"] = "NG: cannot do this.";
    }

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/login/logging.js
function dsp_login_form(byOTP){
    if(byOTP === undefined || byOTP === "" || byOTP === false || byOTP === 0){
        byOTP = "";
    }else{
        byOTP = "OTP";
    }
    let tgtSrc = "./src_modules/login/rtn_data_login_form.php";
    my_ajax_get(tgtSrc,[{"mode":byOTP}],function(rtnO){
        // let tgtForm = gen_login_form(rtnO);
        let tgtForm  = my_gen_form(rtnO,act_after_login_submission);
        // => display the form
        if(tgtForm !== null){
            body.appendChild(tgtForm);
            tgtForm.style.display = "block";
        }
    });
}

function my_logout(){
    my_ajax_get("./src_modules/login/logout.php",[{}],function(rtnO){
        location.reload();
    });
}

function act_after_login_submission(tgtE,rtnO){
    // this is called after login clicking, received data/status from server
    console.log(rtnO)
    let form_return_info = null;
    if(tgtE.getElementsByClassName("form_return_info").length > 0){
        form_return_info = tgtE.getElementsByClassName("form_return_info")[0];
    }
    if(rtnO.hasOwnProperty("OTP")){
        // the form is in OTP method
        if(rtnO["OTP"].search(/^NG/)>-1){
            if(form_return_info !== null){
                form_return_info.style.color = "red";
                form_return_info.innerText = rtnO["OTP"];
            }else{}
        }else if(rtnO["OTP"] === "Sent"){
            if(form_return_info !== null){
                form_return_info.style.color = "initial";
                form_return_info.innerText = "OTP sent, 5min retention from " + (new Date()).toString();
            }else{}
        }else if(rtnO["OTP"] === "OK"){
            if(form_return_info !== null){
                form_return_info.style.color = "initial";
                form_return_info.innerText = "Logged-in by OTP OK at " + (new Date()).toString();
            }else{}
            // update the header of user
            // upUserDisplay(rtnO["user_info"]);
            upd_user_info();
            // close form
            tgtE.remove();
            // => reload the page
            console.log(rtnO)
            if(rtnO.hasOwnProperty("user_info") 
            && rtnO["user_info"].hasOwnProperty("login_email")
            && rtnO["user_info"]["login_email"] !== null 
            && rtnO["user_info"]["login_email"] !== ""
            ) location.reload();
        }else{
            // unknown return message
        }
    }else{
        // login by password
        // console.log(rtnO)
        if(rtnO["rtnCode"] === "NG: status='NotRegYet'"){
            if(form_return_info !== null) {
                form_return_info.style.color = "red";
                form_return_info.innerText = rtnO["rtnCode"];
            }
            // => enable the premitive for sign-ing up
            let ePsw2 = null;
            let eBtn = null;
            for(let tmpv of (tgtE.getElementsByTagName("button"))){
                if(tmpv.type === "submit") eBtn = tmpv;
            }
            for(let tmpv of (tgtE.getElementsByTagName("input"))){
                if(tmpv.name === "login_password_repeated") ePsw2 = tmpv;
            }
            ePsw2.previousSibling.style.display = "block";
            ePsw2.style.display = "block";
            ePsw2.disabled = false;
            eBtn.innerText = "SignUp";

            // =>
        }else if(rtnO["rtnCode"].search(/^OK/) > -1){
            dsp_notification("Login succeeeded.")
            tgtE.remove();
            // upd_user_info();//manual load user-info
            location.reload();
        }else{
            if(form_return_info !== null) {
                form_return_info.style.color = "red";
                form_return_info.innerText = rtnO["rtnCode"];
            }
        }
    }
}

function act_on_change_email_input(e){
    let form = e.parentNode;
    let submitBtn = null;
    for(let tmpv of (form.getElementsByTagName("input"),form.getElementsByTagName("button"))){
        if(tmpv.type === "submit"){
            submitBtn = tmpv;
        }
    }
    e.value = e.value.trim();
    e.style.color = "initial";
    if(!e.value.match(/^\w+\.\w+\.\w+@renesas.com$/)){
        e.style.color = 'red';
        submitBtn.disabled = true;
    }else{
        submitBtn.disabled = false;
    }
}

function act_on_change_password_input(e){
    let form = e.parentNode;
    let submitBtn = null;
    for(let tmpv of (form.getElementsByTagName("input"),form.getElementsByTagName("button"))){
        if(tmpv.type === "submit"){
            submitBtn = tmpv;
        }
    }
    if(e.value === ""){
        submitBtn.disabled = true;
    }else{
        submitBtn.disabled = false;
    }
}

function act_on_change_password_repeated_input(e){
    let form = e.parentNode;
    let submitBtn = null;
    for(let tmpv of (form.getElementsByTagName("input"),form.getElementsByTagName("button"))){
        if(tmpv.type === "submit"){
            submitBtn = tmpv;
        }
    }
    if(e.value === ""){
        submitBtn.disabled = true;
    }else{
        submitBtn.disabled = false;
    }
}

function act_on_change_OTP_input(e){
    let form = e.parentNode;
    let submitBtn = null;
    for(let tmpv of (form.getElementsByTagName("input"),form.getElementsByTagName("button"))){
        if(tmpv.type === "submit"){
            submitBtn = tmpv;
        }
    }

    e.value = e.value.trim();
    // change the button submit
    if(e.value === ""){
        submitBtn.innerText = "Get OTP";
    }else{
        submitBtn.innerText = "Submit OTP";
    }
}

///////////////////////////
function dsp_users_info(cntO){
    if(cntO.length === 0) return;
    if(!cntO.hasOwnProperty("cntData")) return;
    if(cntO["cntData"].length === 0) return;
    if(document.getElementById("mainSide") === null) return;
    while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}

    let eTop = my_create("div",undefined,["w3-responsive"],{"position":"relative"},{"id":"tbl_users_admin"});
    let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable","w3-small"],{"min-width":"100%"});
    let eTbd = my_create("tbody",undefined,[],{"min-width":"100%"});
    let eAdd = my_create("div","Add new",["w3-btn","w3-card-2","w3-border","w3-hover-indigo"],{"width":"100%"});
    eAdd.addEventListener("click",dsp_add_new_user_form);

    // reg columns
    let regCols = [];
    for(let i=0;i<cntO["cntData"][0].length;i++){
        if(0
        // || cntO["cntData"][0][i] === "modify_on"
        // || cntO["cntData"][0][i] === "modify_by"
        || cntO["cntData"][0][i] === "register_on"
        || cntO["cntData"][0][i] === "register_by"
        ) continue;
        regCols.push(i);
    }
    // header
    let thData = [];
    for(let i of regCols) { thData.push(cntO["cntData"][0][i]); }
    eTbd.appendChild(my_add_row(thData,"th"));

    // content
    for(let j=1;j<cntO["cntData"].length;j++){
        let tdData = [];
        for(let i of regCols) { 
            if(thData[i] === "modify_on"){
                let d = new Date(cntO["cntData"][j][i] * 1000);
                tdData.push(d.toLocaleString("en-US",{dateStyle:"short",timeStyle:"short"})); 
            }else{
                tdData.push(cntO["cntData"][j][i]); 
            }
        }
        // => add some more buttons
        tdData.push("<i class='bi bi-bandaid w3-button w3-hover-orange w3-large w3-round' style='padding:0'></i>")
        tdData.push("<i class='bi bi-trash w3-button w3-hover-orange w3-large w3-round' style='padding:0'></i>")
        // =>
        eTbd.appendChild(my_add_row(tdData,"td"));
    }

    for(let tmpe of eTbd.getElementsByClassName("bi-bandaid")){
        tmpe.addEventListener("click",dsp_mod_user_form_from_mod_button);
    }
    for(let tmpe of eTbd.getElementsByClassName("bi-trash")){
        tmpe.addEventListener("click",dsp_del_user_from_del_button);
    }
    // layout-ing
    eTbl.appendChild(eTbd);
    eTop.appendChild(eTbl);
    eTop.appendChild(eAdd)
    mainSide.appendChild(eTop);

    // for sorting
    // RESERVED

    return 1;
}

function dsp_add_new_user_form(){
    let sf = "src_modules/login/rtn_data_n_reg_user_info.php";
    my_ajax_get(sf,[{}],function(rtnO){
        console.log(rtnO)
        let tgtForm  = my_gen_form(rtnO,function(tgtForm,rtnO){
            tgtForm.remove();
            console.log(rtnO);
            my_ajax_get("./src_modules/login/rtn_users_info.php",[{}],dsp_users_info);
        });
        // => display the form
        if(tgtForm !== null && tgtForm !== undefined){
            body.appendChild(tgtForm);
            tgtForm.style.display = "block";
        }
    });
    return;
}

function dsp_mod_user_form_from_mod_button(){
    let sf = "src_modules/login/rtn_data_n_reg_user_info.php";
    let user = this.parentNode.parentNode.getElementsByTagName("td")[0].innerText;
    my_ajax_get(sf,[{user:user}],function(rtnO){
        let tgtForm  = my_gen_form(rtnO,function(tgtForm,rtnO){
            tgtForm.remove();
            console.log(rtnO);
            my_ajax_get("./src_modules/login/rtn_users_info.php",[{}],dsp_users_info);
        });
        // => display the form
        if(tgtForm !== null){
            body.appendChild(tgtForm);
            tgtForm.style.display = "block";
        }
    });
    return;
}

function dsp_del_user_from_del_button(){
    let sf = "src_modules/login/del_user.php";
    let user = this.parentNode.parentNode.getElementsByTagName("td")[0].innerText;
    my_ajax_get(sf,[{user:user}],function(rtnO){
        console.log(rtnO)
        my_ajax_get("./src_modules/login/rtn_users_info.php",[{}],dsp_users_info);
    });
    return;
}

FILE:: .//src_modules/login/login.php
<?php
    //
    require_once("../../src_main/my.php");
    require_once("session.php");
    register_shutdown_function("my_handler_fatal",array());
    require_once("users_sqlite3.class.php");
    $user = new User_by_sqlite3;

    $oO = array();
    $oO["REQUEST"] = $_REQUEST;

    if($_REQUEST["login_password"] === "" || $_REQUEST["login_email"] === ""){
        $oO["rtnCode"] = "NG: Name/Pass required.";
        echo(json_encode($oO));
        return;
    }
    if($user->get_status($_REQUEST["login_email"]) !== "Already"){
        if(!isset($_REQUEST["login_password_repeated"])){
            $oO["rtnCode"] = "NG: status='".$user->get_status($_REQUEST["login_email"])."'";
            echo(json_encode($oO));
            return;
        }
        if($_REQUEST["login_password_repeated"] === ""){
            $oO["rtnCode"] = "NG: status='".$user->get_status($_REQUEST["login_email"])."'";
            echo(json_encode($oO));
            return;
        }
        if($_REQUEST["login_password_repeated"] !== $_REQUEST["login_password"]){
            $oO["rtnCode"] = "NG: Signup Password not matched.";
            echo(json_encode($oO));
            return;
        }
    }

    $oO["rtnCode"] = "NG: No status";
    //continue to check password or to sign-up
    if($user->get_status($_REQUEST["login_email"]) === "Already"){
        $oO["test"] = "TEST";
        $oO["rtnCode"] = $user->sign_in($_REQUEST["login_email"],$_REQUEST["login_password"]) . " on Signin";
    }else{
        $oO["rtnCode"] = $user->reg_user($_REQUEST["login_email"],array()) . " on Signup.";
    }
    
    // my_destroy_session();
    if(!isset($_SESSION)) session_start();
    if(preg_match("/^OK/",$oO["rtnCode"])){
        $_SESSION["login_email"] = $_REQUEST["login_email"];//trigger for this user
        $oO["test"] = "TEST";
    }

    // $oO["status"] = $user->get_status($_REQUEST["login_email"]);
    $oO["SESSION"] = $_SESSION;
    $oO["user_info"] = $user->get_user_info();
    // 
    //
    echo(json_encode($oO));
?>

FILE:: .//src_modules/login/logout.php
<?php
    require_once("./session.php");
    $oO = array();

    // session_start();     // $oO["testData1"] = $_SESSION;
    my_destroy_session();   // $oO["testData2"] = $_SESSION;
    
    $oO["rtnCode"] = "OK";
    echo(json_encode($oO));
?>

FILE:: .//src_modules/login/rtn_data_login_form.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    // return control data for generation of login form
    require_once("./session.php");
    $oO = array();

    
    $oO["cntData"] = array();
    if($_GET["mode"] === "OTP"){
        $oO["formAction"] = "src_modules/otp/login_otp.php";
        array_push($oO["cntData"],array("label" => "Email", "type" => "email", "name" => "login_email","onkeyup"=>"act_on_change_email_input(this)"));
        array_push($oO["cntData"],array("label" => "OTP", "type" => "text", "name" => "login_OTP", "onkeyup"=>"act_on_change_OTP_input(this)"));
        array_push($oO["cntData"],array("label" => "Get OTP", "type" => "submit", "disabled" => true));
    }else{
        $oO["formAction"] = "src_modules/login/login.php";
        array_push($oO["cntData"],array("label" => "Email", "type" => "email", "name" => "login_email","onkeyup"=>"act_on_change_email_input(this)"));
        // array_push($oO["cntData"],array("label" => "Called Name", "type" => "text", "name" => "login_name",));
        array_push($oO["cntData"],array("label" => "Password", "type" => "password", "name" => "login_password","onkeyup"=>"act_on_change_password_input(this)"));
        array_push($oO["cntData"],array("label" => "Password Again", "type" => "password", "name" => "login_password_repeated","onkeyup"=>"act_on_change_password_repeated_input(this)","disabled" => true,"display" => "none"));
        array_push($oO["cntData"],array("label" => "Login", "type" => "submit", "disabled" => true));
        array_push($oO["cntData"],array("label" => "Remember me", "type" => "checkbox", "name" => "login_rememberme", "checked" => "checked",));
    }

    $oO["rtnCode"] = "OK";
    $oO["dbgData"] = $_GET;

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/login/rtn_data_mod_user_info_form.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    register_shutdown_function("my_handler_fatal");
    $user = new User_by_sqlite3;

    // return control data for generation of login form
    $oO = array();
    
    $oO["cntData"] = array();
    $oO["formAction"] = "src_modules/login/act_update_user_info.php";
    if($user->role === "Admin" || $user->role === "SuperUser") {
        array_push($oO["cntData"],array("label" => "Email", "type" => "email", "name" => "login_email"));
    }else{
        array_push($oO["cntData"],array("label" => "Email", "type" => "email", "name" => "login_email","disabled" => true));
    }
    array_push($oO["cntData"],array("label" => "Called Name", "type" => "text", "name" => "user_name"));
    array_push($oO["cntData"],array("label" => "More info", "type" => "textarea", "name" => "moreInfo"));
    if($user->role === "Admin" || $user->role === "SuperUser") {
        array_push($oO["cntData"],array("label" => "Role", "type" => "select", "name" => "role", "options" => array("Admin","SuperUser","User","Guess")));
    }
    array_push($oO["cntData"],array("label" => "Modify", "type" => "submit"));

    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/login/rtn_data_n_reg_user_info.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    register_shutdown_function("my_handler_fatal");
    $user = new User_by_sqlite3;

    $roles = array();
    $allRoles = $user->list_of_roles;

    for($i=0;$i<count($allRoles);$i++){
        if($user->role === $allRoles[$i]){
            for($j=$i;$j<count($allRoles);$j++){
                if(is_array($allRoles[$j])){
                    foreach($allRoles[$j] as $tmpv){
                        array_push($roles,$tmpv);
                    }
                }else{
                    array_push($roles,$allRoles[$j]);
                }
            }
            break;
        }
    }

    // return control data for generation of login form
    $oO = array();
    $oO["POST"] = $_POST;
    $oO["GET"] = $_GET;
    
    if(!isset($_POST) || count($_POST) === 0){
        if(isset($_GET) && isset($_GET["user"])){
            // GET with user, modifying form needed
            if($user->get_users_table_header() === false){
                echo array();
                $oO["rtnCode"] = "NG: no header.";
                exit;
            }else{}
            
            $oO["cntData"] = array();
            $oO["formAction"] = "src_modules/login/rtn_data_n_reg_user_info.php";
            $data = $user->get_user_info($_GET["user"]);
            foreach($data as $header => $value){
                if($header === "register_on"
                || $header === "register_by"
                || $header === "modify_on"
                || $header === "modify_by"
                || $header === "shielded"
                || $header === "removed"
                ) continue;
                $type = "text";
                if($header === "role"){
                    $type = "select";
                    if($value === null) $value = $allRoles[count($allRoles)-1];
                    array_push($oO["cntData"],array("label" => $header, "type" => $type, "name" => $header, "options" => $roles, "value" => $value));
                }else{
                    array_push($oO["cntData"],array("label" => $header, "type" => $type, "name" => $header, "value" => $value));
                }
            }
            array_push($oO["cntData"],array("label" => "Modify", "type" => "submit"));

            $oO["rtnCode"] = "OK";
        }else{
            // => no GET, new register
            if($user->get_users_table_header() === false){
                echo array();
                $oO["rtnCode"] = "NG: no header.";
                exit;
            }else{}

            $oO["cntData"] = array();
            $oO["formAction"] = "src_modules/login/rtn_data_n_reg_user_info.php";
            $data = $user->get_users_table_header();
            foreach($data as $header){
                if($header === "register_on"
                || $header === "register_by"
                || $header === "modify_on"
                || $header === "modify_by"
                || $header === "removed"
                || $header === "shielded"
                ) continue;
                $type = "text";
                if($header === "role"){
                    $type = "select";
                    array_push($oO["cntData"],array("label" => $header, "type" => $type, "name" => $header, "options" => $roles));
                }else{
                    array_push($oO["cntData"],array("label" => $header, "type" => $type, "name" => $header));
                }
            }
            array_push($oO["cntData"],array("label" => "Modify", "type" => "submit"));
        }
    }else{
        $oO["reg_bet_status"] = $user->reg_user($_POST["login_email"],$_POST);//reg
    }

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/login/rtn_users_info.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    register_shutdown_function("my_handler_fatal");
    $user = new User_by_sqlite3;

    // return control data for generation of login form
    $oO = array();
    
    $oO["cntData"] = $user->get_all_user_emails();//0 to get all matches info
    
    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/login/session.php
<?php
    function my_destroy_session(){
        // used for log-out - completely clear all session vars, delete the session, and create a new session without leaving old session stuff behind in all browsers.
        if(!isset($_SESSION)) session_start();
        session_unset();
        session_destroy();
        session_write_close();
        setcookie(session_name(),'',0,"/");
        session_regenerate_id(true);
    }

    function my_init_session(){
        if(!isset($_SESSION)) session_start();
        if(isset($_SESSION["MD_started"])) {
            // this maybe a form action
            return 2;
        }else{}

        $_SESSION["MD_started"] = 1;
        define("MD_init",1);
        return 1;
    }

?>

FILE:: .//src_modules/login/user_mod_info.js
function dsp_mod_user_info(){
    let sf = "src_modules/login/rtn_data_mod_user_info_form.php";
    let sf2 = "src_modules/login/chk_and_rtn_login_user_info_sqlite.php";
    my_ajax_get(sf,[{}],function(rtnO){
        let tgtForm  = my_gen_form(rtnO,act_after_mod_user_submission);
        // => display the form
        if(tgtForm !== null){
            body.appendChild(tgtForm);
            tgtForm.style.display = "block";
        }

        // => addEvent for validation/ action-on-change inputs
        // ==== for imput email
        if(document.getElementsByName("login_email").length > 0){
            document.getElementsByName("login_email")[0].addEventListener("change",function(event){
                // reset all fields
                for(let tmpv of tgtForm.getElementsByTagName("input")) { if(tmpv.name === "login_email") continue; tmpv.value = ""; }
                for(let tmpv of tgtForm.getElementsByTagName("select")) { tmpv.value = "User"}
                
                // validate
                if(!is_Renesas_email(document.getElementsByName("login_email")[0].value))  return;

                // sending and receiving data
                console.log("sending out ...: " + document.getElementsByName("login_email")[0].value)
                my_ajax_get(sf2,[{"login_email":document.getElementsByName("login_email")[0].value}],function(rtnO){
                    let tgtEs = [];
                    for(let tmpv of tgtForm.getElementsByTagName("input")) {tgtEs.push(tmpv)}
                    for(let tmpv of tgtForm.getElementsByTagName("select")) {tgtEs.push(tmpv)}
                    for(let tmpv of tgtEs){
                        console.log(tmpv,tmpv.name)
                        if(rtnO["user_info"].hasOwnProperty(tmpv.name)){
                            tmpv.value = rtnO["user_info"][tmpv.name];
                        }
                    }
                });
            });
        }

        // => update content of the form regarding the database
        my_ajax_get(sf2,[{"login_email":document.getElementsByName("login_email")[0].value}],function(rtnO){
            console.log(rtnO)
            for(let tmpv of tgtForm.getElementsByTagName("input")){
                if(rtnO["user_info"].hasOwnProperty(tmpv.name)){
                    tmpv.value = rtnO["user_info"][tmpv.name];
                }
            }
        });
    });
    return;
}

function act_after_mod_user_submission(tgtE,rtnO){
    console.log(rtnO)
    if(typeof(rtnO["reg_user_status"]) === "string"){
        tgtE.getElementsByClassName("form_return_info")[0].style.color = 'red';
        tgtE.getElementsByClassName("form_return_info")[0].innerText = rtnO["reg_user_status"];
    }else{
        upd_user_info();//update the 
        dsp_notification("User info updated: rtnCode='"+rtnO["reg_user_status"]["info"]["exec_msg"]+"'","Info");
        tgtE.remove();//close the form
    }
    return 1;
}

FILE:: .//src_modules/login/users_sqlite3_OTP.class.php
<?php

class User_by_sqlite3
{
    private $tgtd = "../../data/by_sqlite3";
    private $dbname = "users.db";
    private $global_setting_file = "../../data_manual/global_setting_users.json";
    
    public $role = "GuessX";//Guess, Admin, User, SuperUser
                            // special: AdminWorldCup, UserWorldCup
    public $login_email = "";
    public $satus = "Unknown";//NotRegYet|Already|Removed|Unknown
    public $list_of_roles = array("Admin", "SuperUser", "AdminWC", array("User","UserWC"),"Guess");

    function __construct(){
        $this->login_email = $this->get_current_login_email();
        $this->role = $this->get_role();
        $this->status = $this->get_status();

        if(!file_exists($this->tgtd)){
            try {
                mkdir($this->tgtd,0777,true);
            }catch(Exception $e){
                return $e;
            }
        }else{}
        return "OK";
    }

    private function get_current_login_email(){
        if(!isset($_SESSION)) session_start();
        if(!isset($_SESSION["login_email"])) return "";
        return $_SESSION["login_email"];
    }

    function get_user_info($email=""){
        if($email === "") $email = $this->login_email;
        if($email === "") return array();
        
        if(!file_exists($this->tgtd . "/" . $this->dbname)) return array();
    
        $oO = array();
        $db = new SQLite3($this->tgtd . "/" . $this->dbname);
        if(!$db) return array();

        // query the table
        $sql = "SELECT * from USERS WHERE login_email='" . $email . "'";
        $fA = $db->query($sql)->fetchArray(SQLITE3_ASSOC);//fetch array SQLITE3_ASSOC
        if($fA){
            // => update from database
            $oO = $fA;
            // => provide a sign of shielded
            $oO["shielded"] = "yes";
        }else{}

        // => overwrite by global settings
        $tgtf = $this->global_setting_file;
        if(file_exists($tgtf)){
            $rtnO = json_decode(file_get_contents($tgtf),true);
            if(isset($rtnO[$email])){
                if(isset($rtnO[$email]["role"])) $oO["role"] = $rtnO[$email]["role"];
            }
        }

        return $oO;
    }

    function get_all_user_emails(){
        if($this->role !== "Admin"
        && $this->role !== "SuperUser"
        && $this->role !== "AdminWC"
        ) return array();

        if(!file_exists($this->tgtd . "/" . $this->dbname)) return array();
        $db = new SQLite3($this->tgtd . "/" . $this->dbname);
        if(!$db) return array();
        
        $oO = array();
        // => header
        array_push($oO,array());
        $sql = "PRAGMA table_info(USERS)";
        $query = $db->query($sql);
        while($fA = $query->fetchArray(SQLITE3_ASSOC)){
            array_push($oO[0],$fA["name"]);
        }

        // => content
        $queryRtn = $db->query("SELECT * FROM USERS");//fetch array: // Fetch Associated Array (1 for SQLITE3_ASSOC)
        while($fA = $queryRtn->fetchArray(1)){
            array_push($oO, array_values($fA));
        }
        return $oO;
    }

    function get_users_table_header(){
        if($this->role !== "Admin"
        && $this->role !== "SuperUser"
        ) return array();

        if(!file_exists($this->tgtd . "/" . $this->dbname)) return array();
        $db = new SQLite3($this->tgtd . "/" . $this->dbname);
        if(!$db) return false;
        
        $oO = array();
        // => header
        $sql = "PRAGMA table_info(USERS)";
        $query = $db->query($sql);
        while($fA = $query->fetchArray(SQLITE3_ASSOC)){
            array_push($oO,$fA["name"]);
        }

        return $oO;
    }

    function reg_user($email="",$info=array()){
        // newly register or modify a user for his/her email
        if($email === "") $email = $this->login_email;
        if($email === "") return 101;//no email to reg

        if($this->login_email !== "" && $this->login_email !== $email
        && (
               $this->role !== "Admin"
            && $this->role !== "SuperUser"
            && $this->role !== "AdminWC"
           )
        ) return "102: not valid role to mod other.";//NG: cannot register the user info when: (1) diff account, and (2) not a Admin or SuperUser

        if($this->login_email !== "" && $this->login_email !== $email && isset($info["role"])){
            if($this->get_role_lvl($this->role) >= $this->get_role_lvl($this->get_role($email))){
                return "104: role level too small.";
            }else{}
        }else{}

        $mode = "modify";
        $info[$mode . "_on"] = time();
        $info[$mode . "_by"] = $this->login_email;
        if($this->login_email === "") $info[$mode . "_by"] = $email;//
        
        $db = new SQLite3($this->tgtd . "/" . $this->dbname);
        if(!$db) return "103: db error: " . $db->lastErrorMsg();

        $sql ="CREATE TABLE IF NOT EXISTS
            USERS (
                login_email     TEXT  PRIMARY KEY     NOT NULL,
                user_name       TEXT ,
                moreInfo        TEXT ,
                role            TEXT ,
                modify_on,
                modify_by,
                register_on,
                register_by,
                removed
            );";
        
        // create table
        $retExec = $db->exec($sql);
        if(!$retExec) return $db->lastErrorMsg();

        // query the table
        $sql = "SELECT * from USERS WHERE login_email='" . $email . "'";
        $fA = $db->query($sql)->fetchArray();//fetch array
        if(! $fA){
            if(!isset($info["login_email"])) $info["login_email"] = $email;
            if(!isset($info["register_on"])) $info["register_on"] = time();
            if(!isset($info["register_by"])) $info["register_by"] = $this->login_email;
            // insert new to user
            $updStrHeads = "(";
            $updStrValues = "VALUES(";
            foreach($info  as $keyw => $value){
                $updStrHeads .= $keyw . " , ";
                if(is_int($value) || is_long($value) || is_null($value) || is_float($value)){
                    $updStrValues .= $value . " , ";
                }else{
                    $updStrValues .= "'" . $value . "' , ";
                }
            }
            $updStrHeads = preg_replace("/, $/","",$updStrHeads);
            $updStrValues = preg_replace("/, $/","",$updStrValues);
            $updStrHeads .= ")";
            $updStrValues .= ")";
            if($updStrHeads !== "()" && $updStrValues !== "VALUES()"){
                $sql = "INSERT INTO USERS $updStrHeads $updStrValues ;";
                $retExec = $db->exec($sql);
                if(!$retExec) return $db->lastErrorMsg();
            }else{
                return "NG: nothing to reg.";
            }
        }else{
            if(count($info)){
                // modify when existed
                $updStr = "";
                foreach($info  as $keyw => $value){
                    if(is_int($value) || is_long($value) || is_null($value) || is_float($value)){
                        $updStr .= $keyw . " = " . $value . " , ";
                    }else{
                        $updStr .= $keyw . " = '" . $value . "' , ";
                    }
                }
                if($updStr !== ""){
                    $updStr = preg_replace("/ , $/","",$updStr);
                    $sql = "UPDATE USERS SET $updStr WHERE login_email='" . $email . "'";
                    $info["sql"] = $sql;
                    $info["exec_stt"] = $db->exec($sql);
                    $info["exec_msg"] = $db->lastErrorMsg();
                }
                $info["tgt_email"] = $email;
                return array("info" => $info);
            }else{}
            $this->status = "JustModified";
            if(isset($info["removed"]) && $info["removed"] === "yes") $this->status = "Removed";
        }

        $db->close();
        return "OK:$email";//OK
    }

    function remove_user($email=""){
        // remove is not remove, just modify with removed property
        if($this->role !== "Admin" || $this->role !== "SuperUser") return "NG: not admin.";
        return $this->reg_user($email,array("removed" => "yes"));
    }

    function del_user($email=""){
        // completely remove out of database
        if($this->role !== "Admin" && $this->login_email !== "man.duong.ym@renesas.com") return "NG: User not a valid role.";
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname,"USERS");
        if(!$db) return "NG: NotRegYet";
        $sql = "DELETE FROM USERS WHERE login_email='$email';";
        $info["sql"] = $sql;
        $info["exec_stt"] = $db->exec($sql);
        $info["exec_msg"] = $db->lastErrorMsg();
        $db->close();
        return "OK:$email";//OK
    }

    function get_status($email=""){
        if($email === "") $email = $this->login_email;
        if($email === "") return "";

        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname,"USERS");
        if(!$db) return "NotRegYet";
        $sql = "SELECT * from USERS WHERE login_email='" . $email . "'";
        $sqlRes = $db->query($sql);
        if(!$sqlRes) {$db->close();return "NotRegYet";}
        $fA = $sqlRes->fetchArray();//fetch array
        if(! $fA) {$db->close();return "NotRegYet";}
        if($fA["removed"] === "yes") {$db->close();return "Removed";}
        $db->close();return "Already";
    }

    function get_role($email=""){
        if($email === "") $email = $this->login_email;
        if($email === "") return "Empty";
        // if($this->login_email === "man.duong.ym@renesas.com") return "Admin";//in developing only

        $role = "Guess";

        $tgtf = $this->global_setting_file;
        if(file_exists($tgtf)){
            $rtnO = json_decode(file_get_contents($tgtf),true);
            if(isset($rtnO[$email])){
                if(isset($rtnO[$email]["role"])) return $rtnO[$email]["role"];
            }
        }

        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname,"USERS");
        if(!$db) return $role;

        $db = new SQLite3($this->tgtd . "/" . $this->dbname);
        if(!$db) return $role;

        $sql = "SELECT * from USERS WHERE login_email='" . $email . "'";
        $sqlRes = $db->query($sql);
        if(!$sqlRes) {$db->close();return $role;}
        $fA = $sqlRes->fetchArray();//fetch array
        if(! $fA) {$db->close();return $role;}
        if($fA["role"] === null || $fA["role"] === "") {$db->close();return $role;}
        $role = $fA["role"];
        $db->close();

        return $role;
    }

    ///////////////////////
    private function is_tbl_existed($dbPath="",$tbln=""){
        if($dbPath === "") return false;
        if(!file_exists($dbPath)) return false;
        if(filesize($dbPath) === 0) return false;
        $db = new SQLite3($dbPath);
        if(!$db) return false;
        $sql = "SELECT * from sqlite_master WHERE name='".$tbln."' and type='table'";
        if(!$db->query($sql)) {$db->close();return false;}
        return $db;
    }

    private function get_role_lvl($role=""){
        // get level of the role
        if($role === "") return count(array_keys($this->list_of_roles));
        for($i=0;$i<count(array_keys($this->list_of_roles));$i++){
            if(is_array($this->list_of_roles[$i])){
                for($j=0;$j<count(array_keys($this->list_of_roles[$i]));$j++){
                    if($this->list_of_roles[$i][$j] === $role) return $i;
                }
            }else{
                if($this->list_of_roles[$i] === $role) return $i;
            }
        }
        return count(array_keys($this->list_of_roles));
    }

    /////////////////////////////////////////////////////
    function manduong($cmd="sql_removeAllFiles",$tgt=""){
        if($this->login_email !== "man.duong.ym@renesas.com") return array("error" => "not man.duong");
        $regInfo = array();
        if($cmd === "sql_removeAllFiles"){
            foreach(glob($this->tgtd . "/*") as $file){
                array_push($regInfo, "mand: removing file: " . $file);
                unlink($file);
            }

        }elseif($cmd === "sql_all_users"){
            return $this->get_all_user_emails();

        }elseif($cmd === "sql_reg_test"){
            if($tgt === "") $tgt = "test.test.test@renesas.com";
            $regInfo["stt1"] = $this->reg_user($tgt,array());

        }elseif($cmd === "sql_rm_test"){
            if($tgt === "") $tgt = "test.test.test@renesas.com";
            return $this->remove_user($tgt);

        }elseif($cmd === "sql_rm_test_complete"){
            if($tgt === "") $tgt = "test.test.test@renesas.com";
            return $this->del_user($tgt);

        }elseif($cmd === "sql_get_user_info"){
            if($tgt === "") $tgt = "test.test.test@renesas.com";
            $regInfo = $this->get_user_info($tgt);

        }elseif($cmd === "sql_get_test_user_role"){
            if($tgt === "") $tgt = "test.test.test@renesas.com";
            $regInfo = $this->get_user_info($tgt);

        }elseif($cmd === "sql_removeUserGlobal"){
            $tgtf = $this->global_setting_file;
            return unlink($tgtf);

        }elseif($cmd === "sql_init_user_global_setting"){
            $initUsernRole = array();
            $initUsernRole["man.duong.ym@renesas.com"] = array("role" => "Admin");

            $tgtf = $this->global_setting_file;
            if(!file_exists($tgtf)) {
                if(file_put_contents($tgtf,json_encode($initUsernRole),LOCK_EX) === false) return 102;
                return 1;//ok, successfully written
            }
            return 2;//ok, no writing

        }else{
            $regInfo["error"] = "Command not found: $cmd";
        }
        return $regInfo;
    }
}
?>

FILE:: .//src_modules/markdeep/markdeep.js
﻿// (Note: invisible BOM on this line!)
/** 

  Markdeep.js
  Version 1.13

  Copyright 2015-2021, Morgan McGuire, https://casual-effects.com
  All rights reserved.

  -------------------------------------------------------------

  See https://casual-effects.com/markdeep for documentation on how to
  use this script make your plain text documents render beautifully
  in web browsers.

  Markdeep was created by Morgan McGuire. It extends the work of:

   - John Gruber's original Markdown
   - Ben Hollis' Maruku Markdown dialect
   - Michel Fortin's Markdown Extras dialect
   - Ivan Sagalaev's highlight.js
   - Contributors to the above open source projects

  -------------------------------------------------------------
 
  You may use, extend, and redistribute this code under the terms of
  the BSD license at https://opensource.org/licenses/BSD-2-Clause.

  Contains highlight.js (https://github.com/isagalaev/highlight.js) by Ivan
  Sagalaev, which is used for code highlighting. (BSD 3-clause license)

  There is an invisible Byte-Order-Marker at the start of this file to
  ensure that it is processed as UTF-8. Do not remove this character or it
  will break the regular expressions in highlight.js.
*/
/**See https://casual-effects.com/markdeep for @license and documentation.
markdeep.min.js 1.13 (C) 2020 Morgan McGuire 
highlight.min.js 10.5.0 (C) 2020 Ivan Sagalaev https://highlightjs.org */
(function() {
'use strict';

var MARKDEEP_FOOTER = '<div class="markdeepFooter"><i>formatted by <a href="https://casual-effects.com/markdeep" style="color:#999">Markdeep&nbsp;1.13&nbsp;&nbsp;</a></i><div style="display:inline-block;font-size:13px;font-family:\'Times New Roman\',serif;vertical-align:middle;transform:translate(-3px,-1px)rotate(135deg);">&#x2712;</div></div>';

{
// For minification. This is admittedly scary.
var _ = String.prototype;
_.rp = _.replace;
_.ss = _.substring;
if (!_.endsWith) {
    // For IE11
    _.endsWith = function(S, L) {
        if (L === undefined || L > this.length) {
            L = this.length;
        }
        return this.ss(L - S.length, L) === S;
    };
}

// Regular expression version of String.indexOf
_.regexIndexOf = function(regex, startpos) {
    var i = this.ss(startpos || 0).search(regex);
    return (i >= 0) ? (i + (startpos || 0)) : i;
}
}

/** Enable for debugging to view character bounds in diagrams */
var DEBUG_SHOW_GRID = false;

/** Overlay the non-empty characters of the original source in diagrams */
var DEBUG_SHOW_SOURCE = DEBUG_SHOW_GRID;

/** Use to suppress passing through text in diagrams */
var DEBUG_HIDE_PASSTHROUGH = DEBUG_SHOW_SOURCE;

/** In pixels of lines in diagrams */
var STROKE_WIDTH = 2;

/** A box of these denotes a diagram */
var DIAGRAM_MARKER = '*';

// http://stackoverflow.com/questions/1877475/repeat-character-n-times
// ECMAScript 6 has a String.repeat method, but that's not available everywhere
var DIAGRAM_START = Array(5 + 1).join(DIAGRAM_MARKER);

/** attribs are optional */
function entag(tag, content, attribs) {
    return '<' + tag + (attribs ? ' ' + attribs : '') + '>' + content + '</' + tag + '>';
}


function measureFontSize(fontStack) {
    try {
        var canvas = document.createElement('canvas');
        var ctx = canvas.getContext('2d');
        ctx.font = '10pt ' + fontStack;
        return ctx.measureText("M").width;
    } catch (e) {
        // Needed for Firefox include...canvas doesn't work for some reason
        return 10;
    }
}

// IE11 polyfill needed by Highlight.js, from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill
if (typeof Object.assign !== 'function') {
    // Must be writable: true, enumerable: false, configurable: true
    Object.defineProperty(Object, "assign", {
        value: function assign(target, varArgs) { // .length of function is 2
            if (target === null || target === undefined) {
                throw new TypeError('Cannot convert undefined or null to object');
            }
            
            var to = Object(target);
            
            for (var index = 1; index < arguments.length; index++) {
                var nextSource = arguments[index];
                
                if (nextSource !== null && nextSource !== undefined) { 
                    for (var nextKey in nextSource) {
                        // Avoid bugs when hasOwnProperty is shadowed
                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                            to[nextKey] = nextSource[nextKey];
                        }
                    }
                }
            }
            return to;
        },
        writable: true,
        configurable: true
    });
}

// Polyfill for IE11 from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
if (!String.prototype.includes) {
    String.prototype.includes = function(search, start) {
        if (search instanceof RegExp) {
            throw TypeError('first argument must not be a RegExp');
        } 
        if (start === undefined) { start = 0; }
        return this.indexOf(search, start) !== -1;
    };
}
if (!Array.prototype.includes) {
    Array.prototype.includes = function(search) {
        return !!~this.indexOf(search);
    }
}
    
   
 
// Lucida Console on Windows has capital V's that look like lower case, so don't use it
var codeFontStack = "Menlo,Consolas,monospace";
var codeFontSize  = Math.round(6.5 * 105.1316178 / measureFontSize(codeFontStack)) + '%';// + 'px';

var BODY_STYLESHEET = entag('style', 'body{max-width:680px;' +
    'margin:auto;' +
    'padding:20px;' +
    'text-align:justify;' +
    'line-height:140%;' +
    '-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;font-smoothing:antialiased;' +
    'color:#222;' +
    'font-family:Palatino,Georgia,"Times New Roman",serif}');

var isFirefox = navigator.userAgent.indexOf('Firefox') !== -1 && navigator.userAgent.indexOf('Seamonkey') === -1;
    
/** You can embed your own stylesheet AFTER the <script> tags in your
    file to override these defaults. */
var STYLESHEET = entag('style',
                       // Force background images (except on the body) to print correctly on Chrome and Safari
                       // and remove text shadows, which Chrome can't print and will turn into
                       // boxes
    '@media print{*{-webkit-print-color-adjust:exact;text-shadow:none !important}}' +

    'body{' +
    'counter-reset: h1 paragraph line item list-item' +
    '}' +

    // Avoid header/footer in print to PDF. See https://productforums.google.com/forum/#!topic/chrome/LBMUDtGqr-0
    '@page{margin:0;size:auto}' +

    '#mdContextMenu{position:absolute;background:#383838;cursor:default;border:1px solid #999;color:#fff;padding:4px 0px;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen,Ubuntu,"Helvetica Neue",sans-serif;font-size:85%;font-weight:600;border-radius:4px;box-shadow:0px 3px 10px rgba(0,0,0,35%)}' +
    '#mdContextMenu div{padding:0px 20px}' +
    '#mdContextMenu div:hover{background:#1659d1}' +
                       
    '.md code,.md pre{' +
    'font-family:' + codeFontStack + ';' +
    'font-size:' + codeFontSize + ';' +
    'text-align:left;' +
    'line-height:140%' + 
    '}' +

    '.md .mediumToc code,.md longToc code,.md .shortToc code,.md h1 code,.md h2 code,.md h3 code,.md h4 code,.md h5 code,.md h6 code{font-size:unset}' +

    '.md div.title{' +
    'font-size:26px;' +
    'font-weight:800;' +
    'line-height:120%;' +
    'text-align:center' +
    '}' +

    '.md div.afterTitles{height:10px}' +

    '.md div.subtitle{' +
    'text-align:center' +
    '}' +

    '.md iframe.textinsert, .md object.textinsert,.md iframe:not(.markdeep){display:block;margin-top:10px;margin-bottom:10px;width:100%;height:75vh;border:1px solid #000;border-radius:4px;background:#f5f5f4}' +

    '.md .image{display:inline-block}' +

    '.md img{' +
    'max-width:100%;' +
    'page-break-inside:avoid' +
    '}' +

    // Justification tends to handle URLs and code blocks poorly
    // when inside of a bullet, so disable it there
    '.md li{text-align:left;text-indent:0}' +

    // Make code blocks use 4-space tabs.
    // Set up a line number counter. Do NOT use "overflow: scroll" or it will force scrollbars even when unused on Windows.
    // Don't use text-overflow:ellipsis; which on mac just makes the line short even when scrolled
    '.md pre.listing {width:100%;tab-size:4;-moz-tab-size:4;-o-tab-size:4;counter-reset:line;overflow-x:auto;resize:horizontal}' +

    '.md pre.listing .linenumbers span.line:before{width:30px;margin-left:-28px;font-size:80%;text-align:right;counter-increment:line;' +
    'content:counter(line);display:inline-block;padding-right:13px;margin-right:8px;color:#ccc}' +

     // Force captions on line listings down close and then center them
    '.md div.tilde{' +
    'margin:20px 0 -10px;' +
    'text-align:center' + 
    '}' +

    '.md .imagecaption,.md .tablecaption,.md .listingcaption{' +
    'display:inline-block;' +
    'margin:7px 5px 12px;' +
    'text-align:justify;' +
    'font-style:italic' +
    '}' +
                       
    '.md img.pixel{image-rendering:-moz-crisp-edges;image-rendering:pixelated}' +
                       
    '.md blockquote.fancyquote{' + 
    'margin:25px 0 25px;' +
    'text-align:left;' +
    'line-height:160%' +
    '}' +

    '.md blockquote.fancyquote::before{' +
    'content:"\u201C";' +
    'color:#DDD;' +
    'font-family:Times New Roman;' +
    'font-size:45px;' +
    'line-height:0;' +
    'margin-right:6px;' +
    'vertical-align:-0.3em' +
    '}' +

    '.md span.fancyquote{' +
    'font-size:118%;' +
    'color:#777;' +
    'font-style:italic' +
    '}' +

    '.md span.fancyquote::after{' +
    'content:"\u201D";' +
    'font-style:normal;' +
    'color:#DDD;' +
    'font-family:Times New Roman;' +
    'font-size:45px;' +
    'line-height:0;' +
    'margin-left:6px;' +
    'vertical-align:-0.3em' +
    '}' +

    '.md blockquote.fancyquote .author{' +
    'width:100%;' +
    'margin-top:10px;' + 
    'display:inline-block;' +
    'text-align:right' +
    '}' +

    '.md small{font-size:60%}' +
    '.md big{font-size:150%}' +

    '.md div.title,contents,.md .tocHeader,.md h1,.md h2,.md h3,.md h4,.md h5,.md h6,.md .shortTOC,.md .mediumTOC,.nonumberh1,.nonumberh2,.nonumberh3,.nonumberh4,.nonumberh5,.nonumberh6{' +
    'font-family:Verdana,Helvetica,Arial,sans-serif;' +
    'margin:13.4px 0 13.4px;' +
    'padding:15px 0 3px;' +
    'border-top:none;' +
    'clear:both' +
    '}' +
                       
    '.md .tocTop {display:none}' +

    '.md h1,.md h2,.md h3,.md h4,.md h5,.md h6,.md .nonumberh1,.md .nonumberh2,.md .nonumberh3,.md .nonumberh4,.md .nonumberh5,.md .nonumberh6{' +
     'page-break-after:avoid;break-after:avoid' +
    '}'+

    '.md svg.diagram{' +
    'display:block;' +
    'font-family:' + codeFontStack + ';' +
    'font-size:' + codeFontSize + ';' +
    'text-align:center;' +
    'stroke-linecap:round;' +
    'stroke-width:' + STROKE_WIDTH + 'px;'+
    'page-break-inside:avoid;' +
    'stroke:#000;' + 
    'fill:#000' +
    '}' +

    '.md svg.diagram .opendot{' +
    'fill:#fff' +
    '}' +

    '.md svg.diagram .shadeddot{' +
    'fill:#CCC' +
    '}' +

    '.md svg.diagram .dotteddot{' +
    'stroke:#000;stroke-dasharray:4;fill:none' +
    '}' +

    '.md svg.diagram text{' +
    'stroke:none' +
    '}' +

    // printing scale and margins
    '@media print{@page{margin:1in 5mm;transform: scale(150%)}}' +
                       
    // pagebreak hr
    '@media print{.md .pagebreak{page-break-after:always;visibility:hidden}}' +

    // Not restricted to a:link because we want things like svn URLs to have this font, which
    // makes "//" look better.
    '.md a{font-family:Georgia,Palatino,\'Times New Roman\'}' +

    '.md h1,.md .tocHeader,.md .nonumberh1{' +
    'border-bottom:3px solid;' +
    'font-size:20px;' +
    'font-weight:bold;' +
    '}' +

    '.md h1,.md .nonumberh1{' +
    'counter-reset:h2 h3 h4 h5 h6' +
    '}' +

    '.md h2,.md .nonumberh2{' +
    'counter-reset:h3 h4 h5 h6;' +
    'border-bottom:2px solid #999;' +
    'color:#555;' +
    'font-weight:bold;'+
    'font-size:18px;' +
    '}' +

    '.md h3,.md h4,.md h5,.md h6,.md .nonumberh3,.md .nonumberh4,.md .nonumberh5,.md .nonumberh6{' +
    'font-family:Verdana,Helvetica,Arial,sans-serif;' +
    'color:#555;' +
    'font-size:16px;' +
    '}' +

    '.md h3{counter-reset:h4 h5 h6}' +
    '.md h4{counter-reset:h5 h6}' +
    '.md h5{counter-reset:h6}' +

    '.md div.table{' +
    'margin:16px 0 16px 0' +
    '}' +
                       
    '.md table{' +
    'border-collapse:collapse;' +
    'line-height:140%;' +
    'page-break-inside:avoid' +
    '}' +

    '.md table.table{' +
    'margin:auto' +
    '}' +

    '.md table.calendar{' +
    'width:100%;' +
    'margin:auto;' +
    'font-size:11px;' +
    'font-family:Verdana,Helvetica,Arial,sans-serif' +
    '}' +

    '.md table.calendar th{' +
    'font-size:16px' +
    '}' +

    '.md .today{' +
    'background:#ECF8FA' +
    '}' +

    '.md .calendar .parenthesized{' +
    'color:#999;' + 
    'font-style:italic' +
    '}' +

    '.md table.table th{' +
    'color:#FFF;' +
    'background-color:#AAA;' +
    'border:1px solid #888;' +
     // top right bottom left
    'padding:8px 15px 8px 15px' +
    '}' +

    '.md table.table td{' +
     // top right bottom left
    'padding:5px 15px 5px 15px;' +
    'border:1px solid #888' +
    '}' +

    '.md table.table tr:nth-child(even){'+
    'background:#EEE' +
    '}' +

    '.md pre.tilde{' +
    'border-top: 1px solid #CCC;' + 
    'border-bottom: 1px solid #CCC;' + 
    'padding: 5px 0 5px 20px;' +
    'margin:0 0 0 0;' +
    'background:#FCFCFC;' +
    'page-break-inside:avoid' +
    '}' +

    '.md a.target{width:0px;height:0px;visibility:hidden;font-size:0px;display:inline-block}' +
    '.md a:link, .md a:visited{color:#38A;text-decoration:none}' +
    '.md a:link:hover{text-decoration:underline}' +

    '.md dt{' +
    'font-weight:700' +
    '}' +

    // Remove excess space above definitions due to paragraph breaks, and add some at the bottom
    '.md dl>dd{margin-top:-8px; margin-bottom:8px}' +
                       
     // Extra space around terse definition lists
    '.md dl>table{' +
    'margin:35px 0 30px' + 
    '}' +

    '.md code{' +
    'page-break-inside:avoid;' +
    '} @media print{.md .listing code{white-space:pre-wrap}}' +

    '.md .endnote{' +
    'font-size:13px;' +
    'line-height:15px;' +
    'padding-left:10px;' +
    'text-indent:-10px' +
    '}' +

    '.md .bib{' +
    'padding-left:80px;' +
    'text-indent:-80px;' +
    'text-align:left' +
    '}' +

    '.markdeepFooter{font-size:9px;text-align:right;padding-top:80px;color:#999}' +

    '.md .mediumTOC{float:right;font-size:12px;line-height:15px;border-left:1px solid #CCC;padding-left:15px;margin:15px 0px 15px 25px}' +

    '.md .mediumTOC .level1{font-weight:600}' +

    '.md .longTOC .level1{font-weight:600;display:block;padding-top:12px;margin:0 0 -20px}' +
     
    '.md .shortTOC{text-align:center;font-weight:bold;margin-top:15px;font-size:14px}' +

    '.md .admonition{' +
         'position:relative;' +
         'margin:1em 0;' +
         'padding:.4rem 1rem;' +
         'border-radius:.2rem;' +
         'border-left:2.5rem solid rgba(68,138,255,.4);' +
         'background-color:rgba(68,138,255,.15);' +
     '}' +

     '.md .admonition-title{' +
         'font-weight:bold;' +
         'border-bottom:solid 1px rgba(68,138,255,.4);' +
         'padding-bottom:4px;' +
         'margin-bottom:4px;' +
         'margin-left: -1rem;' +
         'padding-left:1rem;' +
         'margin-right:-1rem;' +
         'border-color:rgba(68,138,255,.4)' +
     '}' +

    '.md .admonition.tip{' +
       'border-left:2.5rem solid rgba(50,255,90,.4);' +
       'background-color:rgba(50,255,90,.15)' +
    '}' +
                       
    '.md .admonition.tip::before{' +
       'content:"\\24d8";' +
       'font-weight:bold;' +
       'font-size:' + (isFirefox ? '200%;' : '150%;') +
       'position:relative;' +
       'top:3px;' +
       'color:rgba(26,128,46,.8);' +
       'left:-2.95rem;' +
       'display:block;' +
       'width:0;' +
       'height:0' +
     '}' +

     '.md .admonition.tip>.admonition-title{' +
       'border-color:rgba(50,255,90,.4)' +
     '}' +

     '.md .admonition.warn,.md .admonition.warning{' +
       'border-left:2.5rem solid rgba(255,145,0,.4);' +
       'background-color:rgba(255,145,0,.15)' +
     '}' +

     '.md .admonition.warn::before,.md .admonition.warning::before{' +
       'content:"\\26A0";' +
       'font-weight:bold;' +
       (isFirefox ? '' : 'font-size:150%;') +
       'position:relative;' +
       'top:2px;' +
       'color:rgba(128,73,0,.8);' +
       'left:-2.95rem;' +
       'display:block;' +
       'width:0;' +
       'height:0' +
     '}' +

     '.md .admonition.warn>.admonition-title,.md .admonition.warning>.admonition-title{' +
      'border-color:rgba(255,145,0,.4)' +
     '}' +

     '.md .admonition.error{' +
      'border-left: 2.5rem solid rgba(255,23,68,.4);'+    
      'background-color:rgba(255,23,68,.15)' +
    '}' +

    '.md .admonition.error>.admonition-title{' +
      'border-color:rgba(255,23,68,.4)'+
    '}' +

    '.md .admonition.error::before{' + 
    'content: "\\2612";' +
    'font-family:"Arial";' +
    'font-size:' + (isFirefox ? '150%;' :'200%;') +
    'position:relative;' +
    'color:rgba(128,12,34,.8);' +
    'top:-2px;' +
    'left:-3rem;' +
    'display:block;' +
    'width:0;' +
    'height:0' +
   '}' +
                       
   '.md .admonition p:last-child{margin-bottom:0}'  +

   '.md li.checked,.md li.unchecked{'+
    'list-style:none;'+
    'overflow:visible;'+
    'text-indent:-1.2em'+
                       '}' +
                       
   '.md li.checked:before,.md li.unchecked:before{' +
   'content:"\\2611";' +
   'display:block;'+
   'float:left;' +
   'width:1em;' +
   'font-size:120%'+
                       '}'+
                       
   '.md li.unchecked:before{'+
   'content:"\\2610"' +
   '}'

);

var MARKDEEP_LINE = '<!-- Markdeep: --><style class="fallback">body{visibility:hidden;white-space:pre;font-family:monospace}</style><script src="markdeep.min.js"></script><script src="https://casual-effects.com/markdeep/latest/markdeep.min.js?"></script><script>window.alreadyProcessedMarkdeep||(document.body.style.visibility="visible")</script>';

// Language options:
var FRENCH = {
    keyword: {
        table:     'tableau',
        figure:    'figure',
        listing:   'liste',
        diagram:   'diagramme',
        contents:  'Table des matières',

        sec:       'sec',
        section:   'section',
        subsection: 'paragraphe',
        chapter:   'chapitre',

        Monday:    'lundi',
        Tuesday:   'mardi',
        Wednesday: 'mercredi',
        Thursday:  'jeudi',
        Friday:    'vendredi',
        Saturday:  'samedi',
        Sunday:    'dimanche',

        January:   'Janvier',
        February:  'Février',
        March:     'Mars',
        April:     'Avril',
        May:       'Mai',
        June:      'Juin', 
        July:      'Juillet',
        August:    'Août', 
        September: 'Septembre', 
        October:   'Octobre', 
        November:  'Novembre',
        December:  'Décembre',

        jan: 'janv.',
        feb: 'févr.',
        mar: 'mars',
        apr: 'avril',
        may: 'mai',
        jun: 'juin',
        jul: 'juil.',
        aug: 'août',
        sep: 'sept.',
        oct: 'oct.',
        nov: 'nov.',
        dec: 'déc.',

        '&ldquo;': '&laquo;&nbsp;',
        '&rtquo;': '&nbsp;&raquo;'
    }
};

// Translated by "Warmist"
var LITHUANIAN = {
    keyword: {
        table:     'lentelė',
        figure:    'paveikslėlis',
        listing:   'sąrašas',
        diagram:   'diagrama',
        contents:  'Turinys',

        sec:       'sk',
        section:   'skyrius',
        subsection: 'poskyris',
        chapter:   'skyrius',

        Monday:    'pirmadienis',
        Tuesday:   'antradienis',
        Wednesday: 'trečiadienis',
        Thursday:  'ketvirtadienis',
        Friday:    'penktadienis',
        Saturday:  'šeštadienis',
        Sunday:    'sekmadienis',

        January:   'Sausis',
        February:  'Vasaris',
        March:     'Kovas',
        April:     'Balandis',
        May:       'Gegužė',
        June:      'Birželis',
        July:      'Liepa',
        August:    'Rugpjūtis',
        September: 'Rugsėjis',
        October:   'Spalis',
        November:  'Lapkritis',
        December:  'Gruodis',

        jan: 'saus',
        feb: 'vas',
        mar: 'kov',
        apr: 'bal',
        may: 'geg',
        jun: 'birž',
        jul: 'liep',
        aug: 'rugpj',
        sep: 'rugs',
        oct: 'spal',
        nov: 'lapkr',
        dec: 'gruod',

        '&ldquo;': '&bdquo;',
        '&rtquo;': '&ldquo;'
    }
};

    
// Translated by Zdravko Velinov
var BULGARIAN = {
    keyword: {
        table:     'таблица',
        figure:    'фигура',
        listing:   'списък',
        diagram:   'диаграма',

        contents:  'cъдържание',

        sec:       'сек',
        section:   'раздел',
        subsection: 'подраздел',
        chapter:   'глава',

        Monday:    'понеделник',
        Tuesday:   'вторник',
        Wednesday: 'сряда',
        Thursday:  'четвъртък',
        Friday:    'петък',
        Saturday:  'събота',
        Sunday:    'неделя',

        January:   'януари',
        February:  'февруари',
        March:     'март',
        April:     'април',
        May:       'май',
        June:      'юни', 
        July:      'юли',
        August:    'август', 
        September: 'септември', 
        October:   'октомври', 
        November:  'ноември',
        December:  'декември',

        jan: 'ян',
        feb: 'февр',
        mar: 'март',
        apr: 'апр',
        may: 'май',
        jun: 'юни',
        jul: 'юли',
        aug: 'авг',
        sep: 'септ',
        oct: 'окт',
        nov: 'ноем',
        dec: 'дек',

        '&ldquo;': '&bdquo;',
        '&rdquo;': '&rdquo;'
    }
};


// Translated by Tiago Antão
var PORTUGUESE = {
    keyword: {
        table:     'tabela',
        figure:    'figura',
        listing:   'lista',
        diagram:   'diagrama',
        contents:  'conteúdo',

        sec:       'sec',
        section:   'secção',
        subsection: 'subsecção',
        chapter:   'capítulo',

        Monday:    'Segunda-feira',
        Tuesday:   'Terça-feira',
        Wednesday: 'Quarta-feira',
        Thursday:  'Quinta-feira',
        Friday:    'Sexta-feira',
        Saturday:  'Sábado',
        Sunday:    'Domingo',

        January:   'Janeiro',
        February:  'Fevereiro',
        March:     'Março',
        April:     'Abril',
        May:       'Maio',
        June:      'Junho', 
        July:      'Julho',
        August:    'Agosto', 
        September: 'Setembro', 
        October:   'Outubro', 
        November:  'Novembro',
        December:  'Dezembro',

        jan: 'jan',
        feb: 'fev',
        mar: 'mar',
        apr: 'abr',
        may: 'mai',
        jun: 'jun',
        jul: 'jul',
        aug: 'ago',
        sep: 'set',
        oct: 'oct',
        nov: 'nov',
        dec: 'dez',

        '&ldquo;': '&laquo;',
        '&rtquo;': '&raquo;'
    }
};


// Translated by Jan Toušek
var CZECH = {
    keyword: {
        table:     'Tabulka',
        figure:    'Obrázek',
        listing:   'Seznam',
        diagram:   'Diagram',

        contents:  'Obsah',

        sec:       'kap.',  // Abbreviation for section
        section:   'kapitola',
        subsection:'podkapitola',
        chapter:   'kapitola',

        Monday:    'pondělí',
        Tuesday:   'úterý',
        Wednesday: 'středa',
        Thursday:  'čtvrtek',
        Friday:    'pátek',
        Saturday:  'sobota',
        Sunday:    'neděle',

        January:   'leden',
        February:  'únor',
        March:     'březen',
        April:     'duben',
        May:       'květen',
        June:      'červen',
        July:      'červenec',
        August:    'srpen',
        September: 'září',
        October:   'říjen',
        November:  'listopad',
        December:  'prosinec',

        jan: 'led',
        feb: 'úno',
        mar: 'bře',
        apr: 'dub',
        may: 'kvě',
        jun: 'čvn',
        jul: 'čvc',
        aug: 'srp',
        sep: 'zář',
        oct: 'říj',
        nov: 'lis',
        dec: 'pro',

        '&ldquo;': '&bdquo;',
        '&rdquo;': '&ldquo;'
    }
};


var ITALIAN = {
    keyword: {
        table:     'tabella',
        figure:    'figura',
        listing:   'lista',
        diagram:   'diagramma',
        contents:  'indice',

        sec:       'sez',
        section:   'sezione',
        subsection: 'paragrafo',
        chapter:   'capitolo',

        Monday:    'lunedì',
        Tuesday:   'martedì',
        Wednesday: 'mercoledì',
        Thursday:  'giovedì',
        Friday:    'venerdì',
        Saturday:  'sabato',
        Sunday:    'domenica',

        January:   'Gennaio',
        February:  'Febbraio',
        March:     'Marzo',
        April:     'Aprile',
        May:       'Maggio',
        June:      'Giugno', 
        July:      'Luglio',
        August:    'Agosto', 
        September: 'Settembre', 
        October:   'Ottobre', 
        November:  'Novembre',
        December:  'Dicembre',

        jan: 'gen',
        feb: 'feb',
        mar: 'mar',
        apr: 'apr',
        may: 'mag',
        jun: 'giu',
        jul: 'lug',
        aug: 'ago',
        sep: 'set',
        oct: 'ott',
        nov: 'nov',
        dec: 'dic',

        '&ldquo;': '&ldquo;',
        '&rtquo;': '&rdquo;'
    }
};

var RUSSIAN = {
    keyword: {
        table:     'таблица',
        figure:    'рисунок',
        listing:   'листинг',
        diagram:   'диаграмма',

        contents:  'Содержание',

        sec:       'сек',
        section:   'раздел',
        subsection: 'подраздел',
        chapter:   'глава',

        Monday:    'понедельник',
        Tuesday:   'вторник',
        Wednesday: 'среда',
        Thursday:  'четверг',
        Friday:    'пятница',
        Saturday:  'суббота',
        Sunday:    'воскресенье',

        January:   'январьr',
        February:  'февраль',
        March:     'март',
        April:     'апрель',
        May:       'май',
        June:      'июнь', 
        July:      'июль',
        August:    'август', 
        September: 'сентябрь', 
        October:   'октябрь', 
        November:  'ноябрь',
        December:  'декабрь',

        jan: 'янв',
        feb: 'февр',
        mar: 'март',
        apr: 'апр',
        may: 'май',
        jun: 'июнь',
        jul: 'июль',
        aug: 'авг',
        sep: 'сент',
        oct: 'окт',
        nov: 'ноябрь',
        dec: 'дек',
        
        '&ldquo;': '«',
        '&rdquo;': '»'
    }
};

// Translated by Dariusz Kuśnierek 
var POLISH = {
    keyword: {
        table:     'tabela',
        figure:    'ilustracja',
        listing:   'wykaz',
        diagram:   'diagram',
        contents:  'Spis treści',

        sec:       'rozdz.',
        section:   'rozdział',
        subsection: 'podrozdział',
        chapter:   'kapituła',

        Monday:    'Poniedziałek',
        Tuesday:   'Wtorek',
        Wednesday: 'Środa',
        Thursday:  'Czwartek',
        Friday:    'Piątek',
        Saturday:  'Sobota',
        Sunday:    'Niedziela',

        January:   'Styczeń',
        February:  'Luty',
        March:     'Marzec',
        April:     'Kwiecień',
        May:       'Maj',
        June:      'Czerwiec', 
        July:      'Lipiec',
        August:    'Sierpień', 
        September: 'Wrzesień', 
        October:   'Październik', 
        November:  'Listopad',
        December:  'Grudzień',

        jan: 'sty',
        feb: 'lut',
        mar: 'mar',
        apr: 'kwi',
        may: 'maj',
        jun: 'cze',
        jul: 'lip',
        aug: 'sie',
        sep: 'wrz',
        oct: 'paź',
        nov: 'lis',
        dec: 'gru',
        
        '&ldquo;': '&bdquo;',
        '&rdquo;': '&rdquo;'
    }
};

// Translated by Sandor Berczi
var HUNGARIAN = {
    keyword: {
        table:     'táblázat',
        figure:    'ábra',
        listing:   'lista',
        diagram:   'diagramm',

        contents:  'Tartalomjegyzék',

        sec:       'fej',  // Abbreviation for section
        section:   'fejezet',
        subsection:'alfejezet',
        chapter:   'fejezet',

        Monday:    'hétfő',
        Tuesday:   'kedd',
        Wednesday: 'szerda',
        Thursday:  'csütörtök',
        Friday:    'péntek',
        Saturday:  'szombat',
        Sunday:    'vasárnap',

        January:   'január',
        February:  'február',
        March:     'március',
        April:     'április',
        May:       'május',
        June:      'június',
        July:      'július',
        August:    'augusztus',
        September: 'szeptember',
        October:   'október',
        November:  'november',
        December:  'december',

        jan: 'jan',
        feb: 'febr',
        mar: 'márc',
        apr: 'ápr',
        may: 'máj',
        jun: 'jún',
        jul: 'júl',
        aug: 'aug',
        sep: 'szept',
        oct: 'okt',
        nov: 'nov',
        dec: 'dec',

        '&ldquo;': '&bdquo;',
        '&rdquo;': '&rdquo;'
    }
};

// Translated by Takashi Masuyama
var JAPANESE = {
    keyword: {
        table:     '表',
        figure:    '図',
        listing:   '一覧',
        diagram:   '図',
        contents:  '目次',

        sec:       '節',
        section:   '節',
        subsection: '項',
        chapter:   '章',

        Monday:    '月',
        Tuesday:   '火',
        Wednesday: '水',
        Thursday:  '木',
        Friday:    '金',
        Saturday:  '土',
        Sunday:    '日',

        January:   '1月',
        February:  '2月',
        March:     '3月',
        April:     '4月',
        May:       '5月',
        June:      '6月',
        July:      '7月',
        August:    '8月',
        September: '9月',
        October:   '10月',
        November:  '11月',
        December:  '12月',

        jan: '1月',
        feb: '2月',
        mar: '3月',
        apr: '4月',
        may: '5月',
        jun: '6月',
        jul: '7月',
        aug: '8月',
        sep: '9月',
        oct: '10月',
        nov: '11月',
        dec: '12月',

        '&ldquo;': '「',
        '&rdquo;': '」'
    }
};    
    
// Translated by Sandor Berczi
var GERMAN = {
    keyword: {
        table:     'Tabelle',
        figure:    'Abbildung',
        listing:   'Auflistung',
        diagram:   'Diagramm',

        contents:  'Inhaltsverzeichnis',

        sec:       'Kap',
        section:   'Kapitel',
        subsection:'Unterabschnitt',
        chapter:   'Kapitel',

        Monday:    'Montag',
        Tuesday:   'Dienstag',
        Wednesday: 'Mittwoch',
        Thursday:  'Donnerstag',
        Friday:    'Freitag',
        Saturday:  'Samstag',
        Sunday:    'Sonntag',

        January:   'Januar',
        February:  'Februar',
        March:     'März',
        April:     'April',
        May:       'Mai',
        June:      'Juni',
        July:      'Juli',
        August:    'August',
        September: 'September',
        October:   'Oktober',
        November:  'November',
        December:  'Dezember',

        jan: 'Jan',
        feb: 'Feb',
        mar: 'Mär',
        apr: 'Apr',
        may: 'Mai',
        jun: 'Jun',
        jul: 'Jul',
        aug: 'Aug',
        sep: 'Sep',
        oct: 'Okt',
        nov: 'Nov',
        dec: 'Dez',
        
        '&ldquo;': '&bdquo;',
        '&rdquo;': '&ldquo;'
    }
};

// Translated by Marcelo Arroyo
var SPANISH = {
    keyword: {
        table:     'Tabla',
        figure:    'Figura',
        listing:   'Listado',
        diagram:   'Diagrama',
        contents:  'Tabla de Contenidos',

        sec:       'sec',
        section:   'Sección',
        subsection: 'Subsección',
        chapter:    'Capítulo',

        Monday:    'Lunes',
        Tuesday:   'Martes',
        Wednesday: 'Miércoles',
        Thursday:  'Jueves',
        Friday:    'Viernes',
        Saturday:  'Sábado',
        Sunday:    'Domingo',

        January:   'Enero',
        February:  'Febrero',
        March:     'Marzo',
        April:     'Abril',
        May:       'Mayo',
        June:      'Junio',
        July:      'Julio',
        August:    'Agosto',
        September: 'Septiembre',
        October:   'Octubre',
        November:  'Noviembre',
        December:  'Diciembre',

        jan: 'ene',
        feb: 'feb',
        mar: 'mar',
        apr: 'abr',
        may: 'may',
        jun: 'jun',
        jul: 'jul',
        aug: 'ago',
        sep: 'sept',
        oct: 'oct',
        nov: 'nov',
        dec: 'dic',

        '&ldquo;': '&laquo;&nbsp;',
        '&rtquo;': '&nbsp;&raquo;'
    }
};

// Translated by Nils Nilsson
var SWEDISH = {
    keyword: {
        table:     'tabell',
        figure:    'figur',
        listing:   'lista',
        diagram:   'diagram',

        contents:  'Innehållsförteckning',
        sec:       'sek',
        section:   'sektion',
        subsection:'sektion',
        chapter:   'kapitel',

        Monday:    'måndag',
        Tuesday:   'tisdag',
        Wednesday: 'onsdag',
        Thursday:  'torsdag',
        Friday:    'fredag',
        Saturday:  'lördag',
        Sunday:    'söndag',

        January:   'januari',
        February:  'februari',
        March:     'mars',
        April:     'april',
        May:       'maj',
        June:      'juni',
        July:      'juli',
        August:    'augusti',
        September: 'september',
        October:   'oktober',
        November:  'november',
        December:  'december',

        jan: 'jan',
        feb: 'feb',
        mar: 'mar',
        apr: 'apr',
        may: 'maj',
        jun: 'jun',
        jul: 'jul',
        aug: 'aug',
        sep: 'sep',
        oct: 'okt',
        nov: 'nov',
        dec: 'dec',
        
        '&ldquo;': '&rdquo;',
        '&rdquo;': '&rdquo;'
    }
};


// Translated by Marc Izquierdo
var CATALAN = {
    keyword: {
        table:     'Taula',
        figure:    'Figura',
        listing:   'Llistat',
        diagram:   'Diagrama',
        contents:  'Taula de Continguts',

        sec:        'sec',
        section:    'Secció',
        subsection: 'Subsecció',
        chapter:    'Capítol',

        Monday:    'Dilluns',
        Tuesday:   'Dimarts',
        Wednesday: 'Dimecres',
        Thursday:  'Dijous',
        Friday:    'Divendres',
        Saturday:  'Dissabte',
        Sunday:    'Dimenge',

        January:   'Gener',
        February:  'Febrer',
        March:     'Març',
        April:     'Abril',
        May:       'Maig',
        June:      'Juny',
        July:      'Juliol',
        August:    'Agost',
        September: 'Septembre',
        October:   'Octubre',
        November:  'Novembre',
        December:  'Desembre',

        jan: 'gen',
        feb: 'feb',
        mar: 'mar',
        apr: 'abr',
        may: 'mai',
        jun: 'jun',
        jul: 'jul',
        aug: 'ago',
        sep: 'sept',
        oct: 'oct',
        nov: 'nov',
        dec: 'des',

        '&ldquo;': '&laquo;&nbsp;',
        '&rtquo;': '&nbsp;&raquo;'
    }
};
 
var DEFAULT_OPTIONS = {
    mode:               'markdeep',
    detectMath:         true,
    lang:               {keyword:{}}, // English
    tocStyle:           'auto',
    hideEmptyWeekends:  true,
    autoLinkImages:     true,
    showLabels:         false,
    sortScheduleLists:  true,
    definitionStyle:    'auto',
    linkAPIDefinitions: false,
    inlineCodeLang:     false,
    scrollThreshold:    90,
    captionAbove:       {diagram: false,
                         image:   false,
                         table:   false,
                         listing: false},
    smartQuotes:        true
};


// See http://www.i18nguy.com/unicode/language-identifiers.html for keys
var LANG_TABLE = {
    en: {keyword:{}},        
    ru: RUSSIAN,
    fr: FRENCH,
    pl: POLISH,
    bg: BULGARIAN,
    de: GERMAN,
    hu: HUNGARIAN,
    sv: SWEDISH,
    pt: PORTUGUESE,
    ja: JAPANESE,
    it: ITALIAN,
    lt: LITHUANIAN,
    cz: CZECH,
    es: SPANISH,
    'es-ES': SPANISH,
    'es-ca': CATALAN
    // Contribute your language here! I only accept translations
    // from native speakers.
};

[].slice.call(document.getElementsByTagName('meta')).forEach(function(elt) {
    var att = elt.getAttribute('lang');
    if (att) {
        var lang = LANG_TABLE[att];
        if (lang) {
            DEFAULT_OPTIONS.lang = lang;
        }
    }
});


var max = Math.max;
var min = Math.min;
var abs = Math.abs;
var sign = Math.sign || function (x) {
    return ( +x === x ) ? ((x === 0) ? x : (x > 0) ? 1 : -1) : NaN;
};


/** Get an option, or return the corresponding value from DEFAULT_OPTIONS */
function option(key, key2) {
    if (window.markdeepOptions && (window.markdeepOptions[key] !== undefined)) {
        var val = window.markdeepOptions[key];
        if (key2) {
            val = val[key2]
            if (val !== undefined) {
                return val;
            } else {
                return DEFAULT_OPTIONS[key][key2];
            }
        } else {
            return window.markdeepOptions[key];
        }
    } else if (DEFAULT_OPTIONS[key] !== undefined) {
        if (key2) {
            return DEFAULT_OPTIONS[key][key2];
        } else {
            return DEFAULT_OPTIONS[key];
        }
    } else {
        console.warn('Illegal option: "' + key + '"');
        return undefined;
    }
}


function maybeShowLabel(url, tag) {
    if (option('showLabels')) {
        var text = ' {\u00A0' + url + '\u00A0}';
        return tag ? entag(tag, text) : text;
    } else {
        return '';
    }
}


// Returns the localized version of word, defaulting to the word itself
function keyword(word) {
    return option('lang').keyword[word] || option('lang').keyword[word.toLowerCase()] || word;
}


/** Converts <>&" to their HTML escape sequences */
function escapeHTMLEntities(str) {
    return String(str).rp(/&/g, '&amp;').rp(/</g, '&lt;').rp(/>/g, '&gt;').rp(/"/g, '&quot;');
}


/** Restores the original source string's '<' and '>' as entered in
    the document, before the browser processed it as HTML. There is no
    way in an HTML document to distinguish an entity that was entered
    as an entity. */
function unescapeHTMLEntities(str) {
    // Process &amp; last so that we don't recursively unescape
    // escaped escape sequences.
    return str.
        rp(/&lt;/g, '<').
        rp(/&gt;/g, '>').
        rp(/&quot;/g, '"').
        rp(/&#39;/g, "'").
        rp(/&ndash;/g, '\u2013').
        rp(/&mdash;/g, '---').
        rp(/&amp;/g, '&');
}


function removeHTMLTags(str) {
    return str.rp(/<.*?>/g, '');
}


/** Turn the argument into a legal URL anchor */
function mangle(text) {
    return encodeURI(text.rp(/\s/g, '').toLowerCase());
}

/** Creates a style sheet containing elements like:

  hn::before { 
    content: counter(h1) "." counter(h2) "." ... counter(hn) " "; 
    counter-increment: hn; 
   } 
*/
function sectionNumberingStylesheet() {
    var s = '';

    for (var i = 1; i <= 6; ++i) {
        s += '.md h' + i + '::before {\ncontent:';
        for (var j = 1; j <= i; ++j) {
            s += 'counter(h' + j + ') "' + ((j < i) ? '.' : ' ') + '"';
        }
        s += ';\ncounter-increment: h' + i + ';margin-right:10px}\n\n';
    }

    return entag('style', s);
}

/**
   \param node  A node from an HTML DOM

   \return A String that is a very good reconstruction of what the
   original source looked like before the browser tried to correct
   it to legal HTML.
 */
function nodeToMarkdeepSource(node, leaveEscapes) {
    var source = node ? node.innerHTML : '';

    // Markdown uses <john@bar.com> email syntax, which HTML parsing
    // will try to close by inserting the matching close tags at the end of the
    // document. Remove anything that looks like that and comes *after*
    // the first fallback style.
    //source = source.rp(/<style class="fallback">[\s\S]*?<\/style>/gi, '');
    
    // Remove artificially inserted close tags from URLs and
    source = source.rp(/<\/https?:.*>|<\/ftp:.*>|<\/[^ "\t\n>]+@[^ "\t\n>]+>/gi, '');
    
    // Now try to fix the URLs themselves, which will be 
    // transformed like this: <http: casual-effects.com="" markdeep="">
    source = source.rp(/<(https?|ftp): (.*?)>/gi, function (match, protocol, list) {

        // Remove any quotes--they wouldn't have been legal in the URL anyway
        var s = '<' + protocol + '://' + list.rp(/=""\s/g, '/');

        if (s.ss(s.length - 3) === '=""') {
            s = s.ss(0, s.length - 3);
        }

        // Remove any lingering quotes (since they
        // wouldn't have been legal in the URL)
        s = s.rp(/"/g, '');

        return s + '>';
    });

    // Remove the "fallback" style tags
    source = source.rp(/<style class=["']fallback["']>.*?<\/style>/gmi, '');

    source = unescapeHTMLEntities(source);

    return source;
}


/** Extracts one diagram from a Markdown string.

    Returns {beforeString, diagramString, alignmentHint, afterString}
    diagramString will be empty if nothing was found. The
    DIAGRAM_MARKER is stripped from the diagramString. 

    alignmentHint may be:
    floatleft  
    floatright
    center
    flushleft

    diagramString does not include the marker characters. 
    If there is a caption, it will appear in the afterString and not be parsed.
*/
function extractDiagram(sourceString) {
    // Returns the number of wide Unicode symbols (outside the BMP) in string s between indices
    // start and end - 1
    function unicodeSyms(s, start, end) {
        var p = start;
        for (var i = start; i < end; ++i, ++p) {
            var c = s.charCodeAt(p);
            p += (c >= 0xD800) && (c <= 0xDBFF);
        }
        return p - end;
    }

    function advance() {
        nextLineBeginning = sourceString.indexOf('\n', lineBeginning) + 1;
        wideCharacters = unicodeSyms(sourceString, lineBeginning + xMin, lineBeginning + xMax);
        textOnLeft  = textOnLeft  || /\S/.test(sourceString.ss(lineBeginning, lineBeginning + xMin));
        noRightBorder = noRightBorder || (sourceString[lineBeginning + xMax + wideCharacters] !== '*');

        // Text on the right ... if the line is not all '*'
        textOnRight = ! noRightBorder && (textOnRight || /[^ *\t\n\r]/.test(sourceString.ss(lineBeginning + xMax + wideCharacters + 1, nextLineBeginning)));
    }

    var noDiagramResult = {beforeString: sourceString, diagramString: '', alignmentHint: '', afterString: ''};

    // Search sourceString for the first rectangle of enclosed
    // DIAGRAM_MARKER characters at least DIAGRAM_START.length wide
    for (var i = sourceString.indexOf(DIAGRAM_START);
         i >= 0;
         i = sourceString.indexOf(DIAGRAM_START, i + DIAGRAM_START.length)) {

        // We found what looks like a diagram start. See if it has either a full border of
        // aligned '*' characters, or top-left-bottom borders and nothing but white space on
        // the left.
        
        // Look backwards to find the beginning of the line (or of the string)
        // and measure the start character relative to it
        var lineBeginning = max(0, sourceString.lastIndexOf('\n', i)) + 1;
        var xMin = i - lineBeginning;
        
        // Find the first non-diagram character on this line...or the end of the entire source string
        var j;
        for (j = i + DIAGRAM_START.length; sourceString[j] === DIAGRAM_MARKER; ++j) {}
        var xMax = j - lineBeginning - 1;
        
        // We have a potential hit. Start accumulating a result. If there was anything
        // between the newline and the diagram, move it to the after string for proper alignment.
        var result = {
            beforeString: sourceString.ss(0, lineBeginning), 
            diagramString: '',
            alignmentHint: 'center', 
            afterString: sourceString.ss(lineBeginning, i).rp(/[ \t]+$/, ' ')
        };

        var nextLineBeginning = 0, wideCharacters = 0;
        var textOnLeft = false, textOnRight = false;
        var noRightBorder = false;

        advance();
                                  
        // Now, see if the pattern repeats on subsequent lines
        for (var good = true, previousEnding = j; good; ) {
            // Find the next line
            lineBeginning = nextLineBeginning;
            advance();
            if (lineBeginning === 0) {
                // Hit the end of the string before the end of the pattern
                return noDiagramResult; 
            }
            
            if (textOnLeft) {
                // Even if there is text on *both* sides
                result.alignmentHint = 'floatright';
            } else if (textOnRight) {
                result.alignmentHint = 'floatleft';
            }
            
            // See if there are markers at the correct locations on the next line
            if ((sourceString[lineBeginning + xMin] === DIAGRAM_MARKER) && 
                (! textOnLeft || (sourceString[lineBeginning + xMax + wideCharacters] === DIAGRAM_MARKER))) {

                // See if there's a complete line of DIAGRAM_MARKER, which would end the diagram
                var x;
                for (x = xMin; (x < xMax) && (sourceString[lineBeginning + x] === DIAGRAM_MARKER); ++x) {}
           
                var begin = lineBeginning + xMin;
                var end   = lineBeginning + xMax + wideCharacters;
                
                if (! textOnLeft) {
                    // This may be an incomplete line
                    var newlineLocation = sourceString.indexOf('\n', begin);
                    if (newlineLocation !== -1) {
                        end = Math.min(end, newlineLocation);
                    }
                }

                // Trim any excess whitespace caused by our truncation because Markdown will
                // interpret that as fixed-formatted lines
                result.afterString += sourceString.ss(previousEnding, begin).rp(/^[ \t]*[ \t]/, ' ').rp(/[ \t][ \t]*$/, ' ');
                if (x === xMax) {
                    // We found the last row. Put everything else into
                    // the afterString and return the result.
                
                    result.afterString += sourceString.ss(lineBeginning + xMax + 1);
                    return result;
                } else {
                    // A line of a diagram. Extract everything before
                    // the diagram line started into the string of
                    // content to be placed after the diagram in the
                    // final HTML
                    result.diagramString += sourceString.ss(begin + 1, end) + '\n';
                    previousEnding = end + 1;
                }
            } else {
                // Found an incorrectly delimited line. Abort
                // processing of this potential diagram, which is now
                // known to NOT be a diagram after all.
                good = false;
            }
        } // Iterate over verticals in the potential box
    } // Search for the start

    return noDiagramResult;
}

/** 
    Find the specified delimiterRegExp used as a quote (e.g., *foo*)
    and replace it with the HTML tag and optional attributes.
*/
function replaceMatched(string, delimiterRegExp, tag, attribs) {
    var delimiter = delimiterRegExp.source;
    var flanking = '[^ \\t\\n' + delimiter + ']';
    var pattern  = '([^A-Za-z0-9])(' + delimiter + ')' +
        '(' + flanking + '.*?(\\n.+?)*?)' + 
        delimiter + '(?![A-Za-z0-9])';

    return string.rp(new RegExp(pattern, 'g'), 
                          '$1<' + tag + (attribs ? ' ' + attribs : '') +
                          '>$3</' + tag + '>');
}
    
/** Maruku ("github")-style table processing */
function replaceTables(s, protect) {
    var TABLE_ROW       = /(?:\n[ \t]*(?:(?:\|?[ \t\S]+?(?:\|[ \t\S]+?)+\|?)|\|[ \t\S]+\|)(?=\n))/.source;
    var TABLE_SEPARATOR = /\n[ \t]*(?:(?:\|? *\:?-+\:?(?: *\| *\:?-+\:?)+ *\|?|)|\|[\:-]+\|)(?=\n)/.source;
    var TABLE_CAPTION   = /\n[ \t]*\[[^\n\|]+\][ \t]*(?=\n)/.source;
    var TABLE_REGEXP    = new RegExp(TABLE_ROW + TABLE_SEPARATOR + TABLE_ROW + '+(' + TABLE_CAPTION + ')?', 'g');

    function trimTableRowEnds(row) {
        return row.trim().rp(/^\||\|$/g, '');
    }

    s = s.rp(TABLE_REGEXP, function (match) {
        // Found a table, actually parse it by rows
        var rowArray = match.split('\n');
        
        var result = '';
        
        // Skip the bogus leading row
        var startRow = (rowArray[0] === '') ? 1 : 0;

        var caption = rowArray[rowArray.length - 1].trim();

        if ((caption.length > 3) && (caption[0] === '[') && (caption[caption.length - 1] === ']')) {
            // Remove the caption from the row array
            rowArray.pop();
            caption = caption.ss(1, caption.length - 1);
        } else {
            caption = undefined;
        }

        // Parse the separator row for left/center/right-indicating colons
        var columnStyle = [];
        trimTableRowEnds(rowArray[startRow + 1]).rp(/:?-+:?/g, function (match) {
            var left = (match[0] === ':');
            var right = (match[match.length - 1] === ':');
            columnStyle.push(protect(' style="text-align:' + ((left && right) ? 'center' : (right ? 'right' : 'left')) + '"'));
        });

        var row = rowArray[startRow + 1].trim();
        var hasLeadingBar  = row[0] === '|';
        var hasTrailingBar = row[row.length - 1] === '|';
        
        var tag = 'th';
        
        for (var r = startRow; r < rowArray.length; ++r) {
            // Remove leading and trailing whitespace and column delimiters
            row = rowArray[r].trim();
            
            if (! hasLeadingBar && (row[0] === '|')) {
                // Empty first column
                row = '&nbsp;' + row;
            }
            
            if (! hasTrailingBar && (row[row.length - 1] === '|')) {
                // Empty last column
                row += '&nbsp;';
            }
            
            row = trimTableRowEnds(row);
            var i = 0;
            result += entag('tr', '<' + tag + columnStyle[0] + '> ' + 
                            row.rp(/ *\| */g, function () {
                                ++i;
                                return ' </' + tag + '><' + tag + columnStyle[i] + '> ';
                            }) + ' </' + tag + '>') + '\n';
            
            // Skip the header-separator row
            if (r == startRow) { 
                ++r; 
                tag = 'td';
            }
        }
        
        result = entag('table', result, protect('class="table"'));

        if (caption) {
            caption = entag('center', entag('div', caption, protect('class="tablecaption"')));
            if (option('captionAbove', 'table')) {
                result = caption + result;
            } else {
                result = '\n' + result + caption;
            }
        }

        return entag('div', result, "class='table'");
    });

    return s;
}


function replaceLists(s, protect) {
    // Identify task list bullets in a few patterns and reformat them to a standard format for
    // easier processing.
    s = s.rp(/^(\s*)(?:-\s*)?(?:\[ \]|\u2610)(\s+)/mg, '$1\u2610$2');
    s = s.rp(/^(\s*)(?:-\s*)?(?:\[[xX]\]|\u2611)(\s+)/mg, '$1\u2611$2');
        
    // Identify list blocks:
    // Blank line or line ending in colon, line that starts with #., *, +, -, ☑, or ☐
    // and then any number of lines until another blank line
    var BLANK_LINES = /\n\s*\n/.source;

    // Preceding line ending in a colon

    // \u2610 is the ballot box (unchecked box) character
    var PREFIX     = /[:,]\s*\n/.source;
    var LIST_BLOCK_REGEXP = 
        new RegExp('(' + PREFIX + '|' + BLANK_LINES + '|<p>\s*\n|<br/>\s*\n?)' +
                   /((?:[ \t]*(?:\d+\.|-|\+|\*|\u2611|\u2610)(?:[ \t]+.+\n(?:[ \t]*\n)?)+)+)/.source, 'gm');

    var keepGoing = true;

    var ATTRIBS = {'+': protect('class="plus"'), '-': protect('class="minus"'), '*': protect('class="asterisk"'),
                   '\u2611': protect('class="checked"'), '\u2610': protect('class="unchecked"')};
    var NUMBER_ATTRIBS = protect('class="number"');

    // Sometimes the list regexp grabs too much because subsequent lines are indented *less*
    // than the first line. So, if that case is found, re-run the regexp.
    while (keepGoing) {
        keepGoing = false;
        s = s.rp(LIST_BLOCK_REGEXP, function (match, prefix, block) {
            var result = prefix;
            
            // Contains {indentLevel, tag}
            var stack = [];
            var current = {indentLevel: -1};
            
            /* function logStack(stack) {
               var s = '[';
               stack.forEach(function(v) { s += v.indentLevel + ', '; });
               console.log(s.ss(0, s.length - 2) + ']');
               } */
            block.split('\n').forEach(function (line) {
                var trimmed     = line.rp(/^\s*/, '');
                
                var indentLevel = line.length - trimmed.length;
                
                // Add a CSS class based on the type of list bullet
                var attribs = ATTRIBS[trimmed[0]];
                var isUnordered = !! attribs; // JavaScript for: attribs !== undefined
                attribs = attribs || NUMBER_ATTRIBS;
                var isOrdered   = /^\d+\.[ \t]/.test(trimmed);
                var isBlank     = trimmed === '';
                var start       = isOrdered ? ' ' + protect('start=' + trimmed.match(/^\d+/)[0]) : '';

                if (isOrdered || isUnordered) {
                    // Add the indentation for the bullet itself
                    indentLevel += 2;
                }

                if (! current) {
                    // Went below top-level indent
                    result += '\n' + line;
                } else if (! isOrdered && ! isUnordered && (isBlank || (indentLevel >= current.indentLevel))) {
                    // Line without a marker
                    result += '\n' + current.indentChars + line;
                } else {
                    //console.log(indentLevel + ":" + line);
                    if (indentLevel !== current.indentLevel) {
                        // Enter or leave indentation level
                        if ((current.indentLevel !== -1) && (indentLevel < current.indentLevel)) {
                            while (current && (indentLevel < current.indentLevel)) {
                                stack.pop();
                                // End the current list and decrease indentation
                                result += '\n</li></' + current.tag + '>';
                                current = stack[stack.length - 1];
                            }
                        } else {
                            // Start a new list that is more indented
                            current = {indentLevel: indentLevel,
                                       tag:         isOrdered ? 'ol' : 'ul',
                                       // Subtract off the two indent characters we added above
                                       indentChars: line.ss(0, indentLevel - 2)};
                            stack.push(current);
                            result += '\n<' + current.tag + start + '>';
                        }
                    } else if (current.indentLevel !== -1) {
                        // End previous list item, if there was one
                        result += '\n</li>';
                    } // Indent level changed
                    
                    if (current) {
                        // Add the list item
                        result += '\n' + current.indentChars + '<li ' + attribs + '>' + trimmed.rp(/^(\d+\.|-|\+|\*|\u2611|\u2610) /, '');
                    } else {
                        // Just reached something that is *less* indented than the root--
                        // copy forward and then re-process that list
                        result += '\n' + line;
                        keepGoing = true;
                    }
                }
            }); // For each line

            // Remove trailing whitespace
            result = result.replace(/\s+$/,'');
            
            // Finish the last item and anything else on the stack (if needed)
            for (current = stack.pop(); current; current = stack.pop()) {
                result += '</li></' + current.tag + '>';
            }
       
            return result + '\n\n';
        });
    } // while keep going

    return s;
}


/** 
    Identifies schedule lists, which look like:

  date: title
    events

  Where date must contain a day, month, and four-number year and may
  also contain a day of the week.  Note that the date must not be
  indented and the events must be indented.

  Multiple events per date are permitted.
*/
function replaceScheduleLists(str, protect) {
    // Must open with something other than indentation or a list
    // marker.  There must be a four-digit number somewhere on the
    // line. Exclude lines that begin with an HTML tag...this will
    // avoid parsing headers that have dates in them.
    var BEGINNING = /^(?:[^\|<>\s-\+\*\d].*[12]\d{3}(?!\d).*?|(?:[12]\d{3}(?!\.).*\d.*?)|(?:\d{1,3}(?!\.).*[12]\d{3}(?!\d).*?))/.source;

    // There must be at least one more number in a date, a colon, and then some more text
    var DATE_AND_TITLE = '(' + BEGINNING + '):' + /[ \t]+([^ \t\n].*)\n/.source;

    // The body of the schedule item. It may begin with a blank line and contain
    // multiple paragraphs separated by blank lines...as long as there is indenting
    var EVENTS = /(?:[ \t]*\n)?((?:[ \t]+.+\n(?:[ \t]*\n){0,3})*)/.source;
    var ENTRY = DATE_AND_TITLE + EVENTS;

    var BLANK_LINE = '\n[ \t]*\n';
    var ENTRY_REGEXP = new RegExp(ENTRY, 'gm');

    var rowAttribs = protect('valign="top"');
    var dateTDAttribs = protect('style="width:100px;padding-right:15px" rowspan="2"');
    var eventTDAttribs = protect('style="padding-bottom:25px"');

    var DAY_NAME   = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map(keyword);
    var MONTH_NAME = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'].map(keyword);
    var MONTH_FULL_NAME = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(keyword);

    function clean(s) { return s.toLowerCase().rp('.', ''); }
    var LOWERCASE_MONTH_NAME = MONTH_NAME.map(clean);
    var LOWERCASE_MONTH_FULL_NAME = MONTH_FULL_NAME.map(clean);

    // Allow a period (and capture it) after each word, but eliminate
    // the periods that are in abbreviations so that they do not appear
    // in the regexp as wildcards or word breaks
    var MONTH_NAME_LIST = '\\b' + MONTH_NAME.concat(MONTH_FULL_NAME).join('(?:\\.|\\b)|\\b').rp(/([^\\])\./g, '$1') + '(?:\\.|\\b)';

    // Used to mark the center of each day. Not close to midnight to avoid daylight
    // savings problems.
    var standardHour = 9;

    try {
        var scheduleNumber = 0;
        str = str.rp(new RegExp(BLANK_LINE + '(' + ENTRY + '){2,}', 'gm'),
                     function (schedule) {
                       ++scheduleNumber;
                       // Each entry has the form {date:date, title:string, text:string}
                       var entryArray = [];

                       // Now parse the schedule into individual day entries

                       var anyWeekendEvents = false;

                       schedule.rp
                         (ENTRY_REGEXP,
                          function (entry, date, title, events) {
                              // Remove the day from the date (we'll reconstruct it below). This is actually unnecessary, since we
                              // explicitly compute the value anyway and the parser is robust to extra characters, but it aides
                              // in debugging.
                              // 
                              // date = date.rp(/(?:(?:sun|mon|tues|wednes|thurs|fri|satur)day|(?:sun|mon|tue|wed|thu|fri|sat)\.?|(?:su|mo|tu|we|th|fr|sa)),?/gi, '');
                              
                              // Parse the date. The Javascript Date class's parser is useless because it
                              // is locale dependent, so we do this with a regexp.
                              
                              var year = '', month = '', day = '', parenthesized = false;
                              
                              date = date.trim();
                              
                              if ((date[0] === '(') && (date.slice(-1) === ')')) {
                                  // This is a parenthesized entry
                                  date = date.slice(1, -1);
                                  parenthesized = true;
                              }
                              
                              // DD MONTH YYYY
                              var DD_MONTH_YYYY = RegExp('([0123]?\\d)\\D+([01]?\\d|' + MONTH_NAME_LIST + ')\\D+([12]\\d{3})', 'i')
                              var match = date.match(DD_MONTH_YYYY);
                              
                              if (match) {
                                  day = match[1]; month = match[2]; year = match[3];
                              } else {
                                  // YYYY MONTH DD
                                  match = date.match(RegExp('([12]\\d{3})\\D+([01]?\\d|' + MONTH_NAME_LIST + ')\\D+([0123]?\\d)', 'i')); 
                                  if (match) {
                                      day = match[3]; month = match[2]; year = match[1];
                                  } else {
                                      // MONTH DD YYYY
                                      match = date.match(RegExp('(' + MONTH_NAME_LIST + ')\\D+([0123]?\\d)\\D+([12]\\d{3})', 'i'));
                                      if (match) {
                                          day = match[2]; month = match[1]; year = match[3];
                                      } else {
                                          throw "Could not parse date";
                                      }
                                  }
                              }
                              
                              // Reconstruct standardized date format
                              date = day + '&nbsp;' + keyword(month) + '&nbsp;' + year;

                              // Detect the month
                              var monthNumber = parseInt(month) - 1;
                              if (isNaN(monthNumber)) {
                                  var target = clean(month);
                                  monthNumber = LOWERCASE_MONTH_NAME.indexOf(target);
                                  if (monthNumber === -1) {
                                      monthNumber = LOWERCASE_MONTH_FULL_NAME.indexOf(target);
                                  }
                              }

                              var dateVal = new Date(Date.UTC(parseInt(year), monthNumber, parseInt(day), standardHour));
                              // Reconstruct the day of the week
                              var dayOfWeek = dateVal.getUTCDay();
                              date = DAY_NAME[dayOfWeek] + '<br/>' + date;
                              
                              anyWeekendEvents = anyWeekendEvents || (dayOfWeek === 0) || (dayOfWeek === 6);
                              
                              entryArray.push({date: dateVal, 
                                               title: title,
                                               sourceOrder: entryArray.length,
                                               parenthesized: parenthesized,
                                               
                                               // Don't show text if parenthesized with no body
                                               text: parenthesized ? '' :
                                               entag('tr',
                                                     entag('td', 
                                                           '<a ' + protect('class="target" name="schedule' + scheduleNumber + '_' + dateVal.getUTCFullYear() + '-' + (dateVal.getUTCMonth() + 1) + '-' + dateVal.getUTCDate() + '"') + '>&nbsp;</a>' +
                                                           date, dateTDAttribs) + 
                                                     entag('td', entag('b', title)), rowAttribs) + 
                                               entag('tr', entag('td', '\n\n' + events, eventTDAttribs), rowAttribs)});
                              
                              return '';
                          });
                         
                         // Shallow copy the entries to bypass sorting if needed
                         var sourceEntryArray = option('sortScheduleLists') ? entryArray : entryArray.slice(0);

                         // Sort by date
                         entryArray.sort(function (a, b) {
                             // Javascript's sort is not specified to be
                             // stable, so we have to preserve
                             // sourceOrder in ties.
                             var ta = a.date.getTime();
                             var tb = b.date.getTime();
                             return (ta === tb) ? (a.sourceOrder - b.sourceOrder) : (ta - tb);
                         });
                         
                         var MILLISECONDS_PER_DAY = 1000 * 60 * 60 * 24;
                         
                         // May be slightly off due to daylight savings time
                         var approximateDaySpan = (entryArray[entryArray.length - 1].date.getTime() - entryArray[0].date.getTime()) / MILLISECONDS_PER_DAY;
                         
                         var today = new Date();
                         // Move back to midnight
                         today = new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate(), standardHour));
                         
                         var calendar = '';
                         // Make a calendar view with links, if suitable
                         if ((approximateDaySpan > 14) && (approximateDaySpan / entryArray.length < 16)) {
                             var DAY_HEADER_ATTRIBS = protect('colspan="2" width="14%" style="padding-top:5px;text-align:center;font-style:italic"');
                             var DATE_ATTRIBS       = protect('width="1%" height="30px" style="text-align:right;border:1px solid #EEE;border-right:none;"');
                             var FADED_ATTRIBS      = protect('width="1%" height="30px" style="color:#BBB;text-align:right;"');
                             var ENTRY_ATTRIBS      = protect('width="14%" style="border:1px solid #EEE;border-left:none;"');
                             var PARENTHESIZED_ATTRIBS = protect('class="parenthesized"');
                             
                             // Find the first day of the first month
                             var date = entryArray[0].date;
                             var index = 0;
                             
                             var hideWeekends = ! anyWeekendEvents && option('hideEmptyWeekends');
                             var showDate = hideWeekends ? function(date) { return (date.getUTCDay() > 0) && (date.getUTCDay() < 6);} : function() { return true; };
                             
                             var sameDay = function (d1, d2) {
                                 // Account for daylight savings time
                                 return (abs(d1.getTime() - d2.getTime()) < MILLISECONDS_PER_DAY / 2);
                             }
                             
                             // Go to the first of the month
                             date = new Date(date.getUTCFullYear(), date.getUTCMonth(), 1, standardHour);
                             
                             while (date.getTime() < entryArray[entryArray.length - 1].date.getTime()) {
                                 
                                 // Create the calendar header
                                 calendar += '<table ' + protect('class="calendar"') + '>\n' +
                                     entag('tr', entag('th', MONTH_FULL_NAME[date.getUTCMonth()] + ' ' + date.getUTCFullYear(), protect('colspan="14"'))) + '<tr>';
                                 
                                 (hideWeekends ? DAY_NAME.slice(1, 6) : DAY_NAME).forEach(function (name) {
                                     calendar += entag('td', name, DAY_HEADER_ATTRIBS);
                                 });
                                 calendar += '</tr>';
                                 
                                 // Go back into the previous month to reach a Sunday. Check the time at noon
                                 // to avoid problems with daylight saving time occuring early in the morning
                                 while (date.getUTCDay() !== 0) { 
                                     date = new Date(date.getTime() - MILLISECONDS_PER_DAY); 
                                 }
                                 
                                 // Insert the days from the previous month
                                 if (date.getDate() !== 1) {
                                     calendar += '<tr ' + rowAttribs + '>';
                                     while (date.getDate() !== 1) {
                                         if (showDate(date)) { calendar += '<td ' + FADED_ATTRIBS + '>' + date.getUTCDate() + '</td><td>&nbsp;</td>'; }
                                         date = new Date(date.getTime() + MILLISECONDS_PER_DAY);
                                     }
                                 }
                                 
                                 // Run until the end of the month
                                 do {
                                     if (date.getUTCDay() === 0) {
                                         // Sunday, start a row
                                         calendar += '<tr ' + rowAttribs + '>';
                                     }
                                     
                                     if (showDate(date)) {
                                         var attribs = '';
                                         if (sameDay(date, today)) {
                                             attribs = protect('class="today"');
                                         }
                                         
                                         // Insert links as needed from entries
                                         var contents = '';
                                         
                                         for (var entry = entryArray[index]; entry && sameDay(entry.date, date); ++index, entry = entryArray[index]) {
                                             if (contents) { contents += '<br/>'; }
                                             if (entry.parenthesized) {
                                                 // Parenthesized with no body, no need for a link
                                                 contents += entag('span', entry.title, PARENTHESIZED_ATTRIBS);
                                             } else {
                                                 contents += entag('a', entry.title, protect('href="#schedule' + scheduleNumber + '_' + date.getUTCFullYear() + '-' + (date.getUTCMonth() + 1) + '-' + date.getUTCDate() + '"'));
                                             }
                                         }
                                         
                                         if (contents) {
                                             calendar += entag('td', entag('b', date.getUTCDate()), DATE_ATTRIBS + attribs) + entag('td', contents, ENTRY_ATTRIBS + attribs);
                                         } else {
                                             calendar += '<td ' + DATE_ATTRIBS + attribs + '></a>' + date.getUTCDate() + '</td><td ' + ENTRY_ATTRIBS + attribs + '> &nbsp; </td>';
                                         }
                                     }                                   
                                     
                                     if (date.getUTCDay() === 6) {
                                         // Saturday, end a row
                                         calendar += '</tr>';
                                     }
                                     
                                     // Go to (approximately) the next day
                                     date = new Date(date.getTime() + MILLISECONDS_PER_DAY);
                                 } while (date.getUTCDate() > 1);
                                 
                               // Finish out the week after the end of the month
                               if (date.getUTCDay() !== 0) {
                                   while (date.getUTCDay() !== 0) {
                                       if (showDate(date)) { calendar += '<td ' + FADED_ATTRIBS + '>' + date.getUTCDate() + '</td><td>&nbsp</td>'; }
                                       date = new Date(date.getTime() + MILLISECONDS_PER_DAY);
                                   }
                                   
                                   calendar += '</tr>';
                               }

                               calendar += '</table><br/>\n';

                               // Go to the first of the (new) month
                               date = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), 1, standardHour));
                               
                           } // Until all days covered
                       } // if add calendar

                       // Construct the schedule
                       schedule = '';
                       sourceEntryArray.forEach(function (entry) {
                           schedule += entry.text;
                       });

                       return '\n\n' + calendar + entag('table', schedule, protect('class="schedule"')) + '\n\n';
                     });
    } catch (ignore) {
        // Maybe this wasn't a schedule after all, since we couldn't parse a date. Don't alarm
        // the user, though
    }

    return str;
}


/**
 Term
 :     description, which might be multiple 
       lines and include blanks.

 Next Term

becomes

<dl>
  <dt>Term</dt>
  <dd> description, which might be multiple 
       lines and include blanks.</dd>
  <dt>Next Term</dt>
</dl>

... unless it is very short, in which case it becomes a table.

*/
function replaceDefinitionLists(s, protect) {
    var TERM       = /^.+\n:(?=[ \t])/.source;

    // Definition can contain multiple paragraphs
    var DEFINITION = '(\s*\n|[: \t].+\n)+';

    s = s.rp(new RegExp('(' + TERM + DEFINITION + ')+', 'gm'),
             function (block) {
                 
                 var list = [];

                 // Parse the block
                 var currentEntry = null;
 
                 block.split('\n').forEach(function (line, i) {
                     // What kind of line is this?
                     if (line.trim().length === 0) {
                         if (currentEntry) {
                             // Empty line
                             currentEntry.definition += '\n';
                         }
                     } else if (! /\s/.test(line[0]) && (line[0] !== ':')) {
                         currentEntry = {term: line, definition: ''};
                         list.push(currentEntry);
                     } else {
                         // Add the line to the current definition, stripping any single leading ':'
                         if (line[0] === ':') { line = ' ' + line.ss(1); }
                         currentEntry.definition += line + '\n';
                     }
                 });

                 var longestDefinition = 0;
                 list.forEach(function (entry) {
                     if (/\n\s*\n/.test(entry.definition.trim())) {
                         // This definition contains multiple paragraphs. Force it into long mode
                         longestDefinition = Infinity;
                     } else {
                         // Normal case
                         longestDefinition = max(longestDefinition, unescapeHTMLEntities(removeHTMLTags(entry.definition)).length);
                     }
                 });

                 var result = '';
                 var definitionStyle = option('definitionStyle');
                 if ((definitionStyle === 'short') || ((definitionStyle !== 'long') && (longestDefinition < 160))) {
                     var rowAttribs = protect('valign=top');
                     // This list has short definitions. Format it as a table
                     list.forEach(function (entry) {
                         result += entag('tr',
                                         entag('td', entag('dt', entry.term)) + 
                                         entag('td', entag('dd', entag('p', entry.definition))), 
                                         rowAttribs);
                     });
                     result = entag('table', result);

                 } else {
                     list.forEach(function (entry) {
                         // Leave *two* blanks at the start of a
                         // definition so that subsequent processing
                         // can detect block formatting within it.
                         result += entag('dt', entry.term) + entag('dd', entag('p', entry.definition));
                     });
                 }

                 return entag('dl', result);

             });

    return s;
}


/** Inserts a table of contents in the document and then returns
    [string, table], where the table maps strings to levels. */
function insertTableOfContents(s, protect, exposer) {

    // Gather headers for table of contents (TOC). We
    // accumulate a long and short TOC and then choose which
    // to insert at the end.
    var fullTOC = '<a href="#" class="tocTop">(Top)</a><br/>\n';
    var shortTOC = '';

    // names of parent sections
    var nameStack = [];
    
    // headerCounter[i] is the current counter for header level (i - 1)
    var headerCounter = [0];
    var currentLevel = 0;
    var numAboveLevel1 = 0;

    var table = {};
    s = s.rp(/<h([1-6])>(.*?)<\/h\1>/gi, function (header, level, text) {
        level = parseInt(level)
        text = text.trim();
        
        // If becoming more nested:
        for (var i = currentLevel; i < level; ++i) {
            nameStack[i] = '';
            headerCounter[i] = 0;
        }
        
        // If becoming less nested:
        headerCounter.splice(level, currentLevel - level);
        nameStack.splice(level, currentLevel - level);
        currentLevel = level;

        ++headerCounter[currentLevel - 1];
        
        // Generate a unique name for this element
        var number = headerCounter.join('.');

        // legacy, for when toc links were based on
        // numbers instead of mangled names
        var oldname = 'toc' + number;

        var cleanText = removeHTMLTags(exposer(text)).trim().toLowerCase();
        
        table[cleanText] = number;

        // Remove links from the title itself
        text = text.rp(/<a\s.*>(.*?)<\/a>/g, '$1');

        nameStack[currentLevel - 1] = mangle(cleanText);

        var name = nameStack.join('/');

        // Only insert for the first three levels
        if (level <= 3) {
            // Indent and append (the Array() call generates spaces)
            fullTOC += Array(level).join('&nbsp;&nbsp;') + '<a href="#' + name + '" class="level' + level + '"><span class="tocNumber">' + number + '&nbsp; </span>' + text + '</a><br/>\n';
            
            if (level === 1) {
                shortTOC += ' &middot; <a href="#' + name + '">' + text + '</a>';
            } else {
                ++numAboveLevel1;
            }
        }

        return entag('a', '&nbsp;', protect('class="target" name="' + name + '"')) +
            entag('a', '&nbsp;', protect('class="target" name="' + oldname + '"')) +
            header;
    });

    if (shortTOC.length > 0) {
        // Strip the leading " &middot; "
        shortTOC = shortTOC.ss(10);
    }
    
    var numLevel1 = headerCounter[0];
    var numHeaders = numLevel1 + numAboveLevel1;

    // The location of the first header is indicative of the length of
    // the abstract...as well as where we insert. The first header may be accompanied by
    // <a name> tags, which we want to appear before.
    var firstHeaderLocation = s.regexIndexOf(/((<a\s+\S+>&nbsp;<\/a>)\s*)*?<h\d>/i);
    if (firstHeaderLocation === -1) { firstHeaderLocation = 0; }

    var AFTER_TITLES = '<div class="afterTitles"><\/div>';
    var insertLocation = s.indexOf(AFTER_TITLES);
    if (insertLocation === -1) {
        insertLocation = 0;
    } else {
        insertLocation += AFTER_TITLES.length;
    }

    // Which TOC style should we use?
    var tocStyle = option('tocStyle');

    var TOC = '';
    if ((tocStyle === 'auto') || (tocStyle === '')) {
        if (((numHeaders < 4) && (numLevel1 <= 1)) || (s.length < 2048)) {
            // No TOC; this document is really short
            tocStyle = 'none';
        } else if ((numLevel1 < 7) && (numHeaders / numLevel1 < 2.5)) {
            // We can use the short TOC
            tocStyle = 'short';
        } else if ((firstHeaderLocation === -1) || (firstHeaderLocation / 55 > numHeaders)) {
            // The abstract is long enough to float alongside, and there
            // are not too many levels.        
            // Insert the medium-length TOC floating
            tocStyle = 'medium';
        } else {
            // This is a long table of contents or a short abstract
            // Insert a long toc...right before the first header
            tocStyle = 'long';
        }
    }

    switch (tocStyle) {
    case 'none':
    case '':
        break;

    case 'short':
        TOC = '<div class="shortTOC">' + shortTOC + '</div>';
        break;

    case 'medium':
        TOC = '<div class="mediumTOC"><center><b>' + keyword('Contents') + '</b></center><p>' + fullTOC + '</p></div>';
        break;

    case 'long':
        insertLocation = firstHeaderLocation;
        TOC = '<div class="longTOC"><div class="tocHeader">' + keyword('Contents') + '</div><p>' + fullTOC + '</p></div>';
        break;

    default:
        console.log('markdeepOptions.tocStyle = "' + tocStyle + '" specified in your document is not a legal value');
    }

    s = s.ss(0, insertLocation) + TOC + s.ss(insertLocation);

    return [s, table];
}


function escapeRegExpCharacters(str) {
    return str.rp(/([\.\[\]\(\)\*\+\?\^\$\\\{\}\|])/g, '\\$1');
}


/** Returns true if there are at least two newlines in each of the arguments */
function isolated(preSpaces, postSpaces) {
    if (preSpaces && postSpaces) {
        preSpaces  = preSpaces.match(/\n/g);
        postSpaces = postSpaces.match(/\n/g);
        return preSpaces && (preSpaces.length > 1) && postSpaces && (postSpaces.length > 1);
    } else {
        return false;
    }
}


/**
    Performs Markdeep processing on str, which must be a string or a
    DOM element.  Returns a string that is the HTML to display for the
    body. The result does not include the header: Markdeep stylesheet
    and script tags for including a math library, or the Markdeep
    signature footer.

    Optional argument elementMode defaults to true. This avoids turning a bold first word into a 
    title or introducing a table of contents. Section captions are unaffected by this argument.
    Set elementMode = false if processing a whole document instead of an internal node.

 */
function markdeepToHTML(str, elementMode) {
    // Map names to the number used for end notes, in the order
    // encountered in the text.
    var endNoteTable = {}, endNoteCount = 0;

    // Reference links
    var referenceLinkTable = {};

    // In the private use area
    var PROTECT_CHARACTER = '\ue010';

    // Use base 32 for encoding numbers, which is efficient in terms of 
    // characters but avoids 'x' to avoid the pattern \dx\d, which Markdeep would
    // beautify as a dimension
    var PROTECT_RADIX     = 32;
    var protectedStringArray = [];

    // Gives 1e6 possible sequences in base 32, which should be sufficient
    var PROTECT_DIGITS    = 4;

    // Put the protect character at BOTH ends to avoid having the protected number encoding
    // look like an actual number to further markdown processing
    var PROTECT_REGEXP    = RegExp(PROTECT_CHARACTER + '[0-9a-w]{' + PROTECT_DIGITS + ',' + PROTECT_DIGITS + '}' + PROTECT_CHARACTER, 'g');

    /** Given an arbitrary string, returns an escaped identifier
        string to temporarily replace it with to prevent Markdeep from
        processing the contents. See expose() */
    function protect(s) {
        // Generate the replacement index, converted to an alphanumeric string
        var i = (protectedStringArray.push(s) - 1).toString(PROTECT_RADIX);

        // Ensure fixed length
        while (i.length < PROTECT_DIGITS) {
            i = '0' + i;
        }

        return PROTECT_CHARACTER + i + PROTECT_CHARACTER;
    }

    var exposeRan = false;
    /** Given the escaped identifier string from protect(), returns
        the orginal string. */
    function expose(i) {
        // Strip the escape character and parse, then look up in the
        // dictionary.
        var j = parseInt(i.ss(1, i.length - 1), PROTECT_RADIX);
        exposeRan = true;
        return protectedStringArray[j];
    }

    /** First-class function to pass to String.replace to protect a
        sequence defined by a regular expression. */
    function protector(match, protectee) {
        return protect(protectee);
    }

    function protectorWithPrefix(match, prefix, protectee) {
        return prefix + protect(protectee);
    }

    // SECTION HEADERS
    // This is common code for numbered headers. No-number ATX headers are processed
    // separately
    function makeHeaderFunc(level) {
        return function (match, header) {
            return '\n\n</p>\n<a ' + protect('class="target" name="' + mangle(removeHTMLTags(header.rp(PROTECT_REGEXP, expose))) + '"') + 
                '>&nbsp;</a>' + entag('h' + level, header) + '\n<p>\n\n';
        }
    }

    if (elementMode === undefined) { 
        elementMode = true;
    }
    
    if (str.innerHTML !== undefined) {
        str = str.innerHTML;
    }

    // Prefix a newline so that blocks beginning at the top of the
    // document are processed correctly
    str = '\n\n' + str;

    // Replace pre-formatted script tags that are used to protect
    // less-than signs, e.g., in std::vector<Value>
    str = str.rp(/<script\s+type\s*=\s*['"]preformatted['"]\s*>([\s\S]*?)<\/script>/gi, '$1');

    function replaceDiagrams(str) {
        var result = extractDiagram(str);
        if (result.diagramString) {
            var CAPTION_REGEXP = /^\n*[ \t]*\[[^\n]+\][ \t]*(?=\n)/;
            result.afterString = result.afterString.rp(CAPTION_REGEXP, function (caption) {
                // Strip whitespace and enclosing brackets from the caption
                caption = caption.trim();
                caption = caption.ss(1, caption.length - 1);
                
                result.caption = entag('center', entag('div', caption, protect('class="imagecaption"')));
                return '';
            });

            var diagramSVG = diagramToSVG(result.diagramString, result.alignmentHint);
            var captionAbove = option('captionAbove', 'diagram')

            return result.beforeString +
                (result.caption && captionAbove ? result.caption : '') +
                diagramSVG +
                (result.caption && ! captionAbove ? result.caption : '') + '\n' +
                replaceDiagrams(result.afterString);
        } else {
            return str;
        }
    }

    // CODE FENCES, with styles. Do this before other processing so that their code is
    // protected from further Markdown processing
    var stylizeFence = function (cssClass, symbol) {
        var pattern = new RegExp('\n([ \\t]*)' + symbol + '{3,}([ \\t]*\\S*)([ \\t]+.+)?\n([\\s\\S]+?)\n\\1' + symbol + '{3,}[ \t]*\n([ \\t]*\\[.+(?:\n.+){0,3}\\])?', 'g');
        
        str = str.rp(pattern, function(match, indent, lang, cssSubClass, sourceCode, caption) {
            if (caption) {
                caption = caption.trim();
                caption = entag('center', '<div ' + protect('class="listingcaption ' + cssClass + '"') + '>' + caption.ss(1, caption.length - 1) + '</div>') + '\n';
            }
            // Remove the block's own indentation from each line of sourceCode
            sourceCode = sourceCode.rp(new RegExp('(^|\n)' + indent, 'g'), '$1');

            var captionAbove = option('captionAbove', 'listing')
            var nextSourceCode, nextLang, nextCssSubClass;
            var body = [];

            // Process multiple-listing blocks
            do {
                nextSourceCode = nextLang = nextCssSubClass = undefined;
                sourceCode = sourceCode.rp(new RegExp('\\n([ \\t]*)' + symbol + '{3,}([ \\t]*\\S+)([ \\t]+.+)?\n([\\s\\S]*)'),
                                           function (match, indent, lang, cssSubClass, everythingElse) {
                                               nextLang = lang;
                                               nextCssSubClass = cssSubClass;
                                               nextSourceCode = everythingElse;
                                               return '';
                                           });

                // Highlight and append this block
                lang = lang ? lang.trim() : undefined;
                var result;
                if (lang === 'none') {
                    result = hljs.highlightAuto(sourceCode, []);
                } else if (lang === undefined) {
                    result = hljs.highlightAuto(sourceCode);
                } else {
                    try {
                        result = hljs.highlight(lang, sourceCode, true);
                    } catch (e) {
                        // Some unknown language specified. Force to no formatting.
                        result = hljs.highlightAuto(sourceCode, []);
                    }
                }
                
                var highlighted = result.value;

                // Mark each line as a span to support line numbers
                highlighted = highlighted.rp(/^(.*)$/gm, entag('span', '', 'class="line"') + '$1');

                if (cssSubClass) {
                    highlighted = entag('div', highlighted, 'class="' + cssSubClass + '"');
                }

                body.push(highlighted);

                // Advance the next nested block
                sourceCode = nextSourceCode;
                lang = nextLang;
                cssSubClass = nextCssSubClass;
            } while (sourceCode);

            // Insert paragraph close/open tags, since browsers force them anyway around pre tags
            // We need the indent in case this is a code block inside a list that is indented.
            return '\n' + indent + '</p>' + (caption && captionAbove ? caption : '') +
                protect(entag('pre', entag('code', body.join('')), 'class="listing ' + cssClass + '"')) +
                (caption && ! captionAbove ? caption : '') + '<p>\n';
        });
    };

    stylizeFence('tilde', '~');
    stylizeFence('backtick', '`');
    
    // Highlight explicit inline code
    str = str.rp(/<code\s+lang\s*=\s*["']?([^"'\)\[\]\n]+)["'?]\s*>(.*)<\/code>/gi, function (match, lang, body) {
        return entag('code', hljs.highlight(lang, body, true).value, 'lang=' + lang);
    });
    
    // Protect raw <CODE> content
    str = str.rp(/(<code\b.*?<\/code>)/gi, protector);

    // Remove XML/HTML COMMENTS
    // https://html.spec.whatwg.org/multipage/syntax.html#comments
    str = str.rp(/<!--((?!->|>)[\s\S]*?)-->/g, '');

    str = replaceDiagrams(str);
    
    // Protect SVG blocks (including the ones we just inserted)
    str = str.rp(/<svg( .*?)?>([\s\S]*?)<\/svg>/gi, function (match, attribs, body) {
        return '<svg' + protect(attribs) + '>' + protect(body) + '</svg>';
    });
    
    // Protect STYLE blocks
    str = str.rp(/<style>([\s\S]*?)<\/style>/gi, function (match, body) {
        return entag('style', protect(body));
    });

    // Protect the very special case of img tags with newlines and
    // breaks in them AND mismatched angle brackets. This happens for
    // Gravizo graphs.
    str = str.rp(/<img\s+src=(["'])[\s\S]*?\1\s*>/gi, function (match, quote) {
        // Strip the "<img " and ">", and then protect the interior:
        return "<img " + protect(match.ss(5, match.length - 1)) + ">";
    });

    // INLINE CODE: Surrounded in (non-escaped!) back ticks on a single line.  Do this before any other
    // processing except for diagrams to protect code blocks from further interference. Don't process back ticks
    // inside of code fences. Allow a single newline, but not wrapping further because that
    // might just pick up quotes used as other punctuation across lines. Explicitly exclude
    // cases where the second quote immediately preceeds a number, e.g., "the old `97"
    var inlineLang = option('inlineCodeLang');
    var inlineCodeRegexp = /(^|[^\\])`(.*?(?:\n.*?)?[^\n\\`])`(?!\d)/g;
    if (inlineLang) {
        // Syntax highlight as well as converting to code. Protect
        // so that the hljs output isn't itself escaped below.
        var filenameRegexp = /^[a-zA-Z]:\\|^\/[a-zA-Z_\.]|^[a-z]{3,5}:\/\//;
        str = str.rp(inlineCodeRegexp, function (match, before, body) {
            if (filenameRegexp.test(body)) {
                // This looks like a filename, don't highlight it
                return before + entag('code', body);
            } else {
                return before + protect(entag('code', hljs.highlight(inlineLang, body, true).value));
            }
        });
    } else {
        str = str.rp(inlineCodeRegexp, '$1' + entag('code', '$2'));
    }

    // Unescape escaped backticks
    str = str.rp(/\\`/g, '`');
    
    // CODE: Escape angle brackets inside code blocks (including the ones we just introduced),
    // and then protect the blocks themselves
    str = str.rp(/(<code(?: .*?)?>)([\s\S]*?)<\/code>/gi, function (match, open, inlineCode) {
        return protect(open + escapeHTMLEntities(inlineCode) + '</code>');
    });
    
    // PRE: Protect pre blocks
    str = str.rp(/(<pre\b[\s\S]*?<\/pre>)/gi, protector);
    
    // Protect raw HTML attributes from processing
    str = str.rp(/(<\w[^ \n<>]*?[ \t]+)(.*?)(?=\/?>)/g, protectorWithPrefix);

    // End of processing literal blocks
    /////////////////////////////////////////////////////////////////////////////

    // Temporarily hide $$ MathJax LaTeX blocks from Markdown processing (this must
    // come before single $ block detection below)
    str = str.rp(/(\$\$[\s\S]+?\$\$)/g, protector);

    // Convert LaTeX $ ... $ to MathJax, but verify that this
    // actually looks like math and not just dollar
    // signs. Don't rp double-dollar signs. Do this only
    // outside of protected blocks.

    // Also allow LaTeX of the form $...$ if the close tag is not US$ or Can$
    // and there are spaces outside of the dollar signs.
    //
    // Test: " $3 or US$2 and 3$, $x$ $y + \n 2x$ or ($z$) $k$. or $2 or $2".match(pattern) = 
    // ["$x$", "$y +  2x$", "$z$", "$k$"];
    str = str.rp(/((?:[^\w\d]))\$(\S(?:[^\$]*?\S(?!US|Can))??)\$(?![\w\d])/g, '$1\\($2\\)');

    //
    // Literally: find a non-dollar sign, non-number followed
    // by a dollar sign and a space.  Then, find any number of
    // characters until the same pattern reversed, allowing
    // one punctuation character before the final space. We're
    // trying to exclude things like Canadian 1$ and US $1
    // triggering math mode.

    str = str.rp(/((?:[^\w\d]))\$([ \t][^\$]+?[ \t])\$(?![\w\d])/g, '$1\\($2\\)');

    // Temporarily hide MathJax LaTeX blocks from Markdown processing
    str = str.rp(/(\\\([\s\S]+?\\\))/g, protector);
    str = str.rp(/(\\begin\{equation\}[\s\S]*?\\end\{equation\})/g, protector);
    str = str.rp(/(\\begin\{eqnarray\}[\s\S]*?\\end\{eqnarray\})/g, protector);
    str = str.rp(/(\\begin\{equation\*\}[\s\S]*?\\end\{equation\*\})/g, protector);

    // HEADERS
    //
    // We consume leading and trailing whitespace to avoid creating an extra paragraph tag
    // around the header itself.

    // Setext-style H1: Text with ======== right under it
    str = str.rp(/(?:^|\s*\n)(.+?)\n[ \t]*={3,}[ \t]*\n/g, makeHeaderFunc(1));
    
    // Setext-style H2: Text with -------- right under it
    str = str.rp(/(?:^|\s*\n)(.+?)\n[ \t]*-{3,}[ \t]*\n/g, makeHeaderFunc(2));

    // ATX-style headers:
    //
    //  # Foo #
    //  # Foo
    //  (# Bar)
    //
    // If note that '#' in the title are only stripped if they appear at the end, in
    // order to allow headers with # in the title.

    for (var i = 6; i > 0; --i) {
        str = str.rp(new RegExp(/^\s*/.source + '#{' + i + ',' + i +'}(?:[ \t])([^\n]+?)#*[ \t]*\n', 'gm'), 
                 makeHeaderFunc(i));

        // No-number headers
        str = str.rp(new RegExp(/^\s*/.source + '\\(#{' + i + ',' + i +'}\\)(?:[ \t])([^\n]+?)\\(?#*\\)?\\n[ \t]*\n', 'gm'), 
                     '\n</p>\n' + entag('div', '$1', protect('class="nonumberh' + i + '"')) + '\n<p>\n\n');
    }

    // HORIZONTAL RULE: * * *, - - -, _ _ _
    str = str.rp(/\n[ \t]*((\*|-|_)[ \t]*){3,}[ \t]*\n/g, '\n<hr/>\n');

    // PAGE BREAK or HORIZONTAL RULE: +++++
    str = str.rp(/\n[ \t]*\+{5,}[ \t]*\n/g, '\n<hr ' + protect('class="pagebreak"') + '/>\n');

    // ADMONITION: !!! (class) (title)\n body
    str = str.rp(/^!!![ \t]*([^\s"'><&\:]*)\:?(.*)\n([ \t]{3,}.*\s*\n)*/gm, function (match, cssClass, title) {
        // Have to extract the body by splitting match because the regex doesn't capture the body correctly in the multi-line case
        match = match.trim();
        return '\n\n' + entag('div', ((title ? entag('div', title, protect('class="admonition-title"')) + '\n' : '') + match.ss(match.indexOf('\n'))).trim(), protect('class="admonition ' + cssClass.toLowerCase().trim() + '"')) + '\n\n';
    });

    // FANCY QUOTE in a blockquote:
    // > " .... "
    // >    -- Foo

    var FANCY_QUOTE = protect('class="fancyquote"');
    str = str.rp(/\n>[ \t]*"(.*(?:\n>.*)*)"[ \t]*(?:\n>[ \t]*)?(\n>[ \t]{2,}\S.*)?\n/g,
                 function (match, quote, author) {
                     return entag('blockquote', 
                                  entag('span',
                                        quote.rp(/\n>/g, '\n'), 
                                        FANCY_QUOTE) + 
                                  (author ? entag('span',
                                                  author.rp(/\n>/g, '\n'),
                                                  protect('class="author"')) : ''),
                                  FANCY_QUOTE);
                });

    // BLOCKQUOTE: > in front of a series of lines
    // Process iteratively to support nested blockquotes
    var foundBlockquote = false;
    do {
        foundBlockquote = false;
        str = str.rp(/(?:\n>.*){2,}/g, function (match) {
            // Strip the leading '>'
            foundBlockquote = true;
            return entag('blockquote', match.rp(/\n>/g, '\n'));
        });
    } while (foundBlockquote);


    // FOOTNOTES/ENDNOTES: [^symbolic name]. Disallow spaces in footnote names to
    // make parsing unambiguous. Consume leading space before the footnote.
    function endNote(match, symbolicNameA) {
        var symbolicName = symbolicNameA.toLowerCase().trim();

        if (! (symbolicName in endNoteTable)) {
            ++endNoteCount;
            endNoteTable[symbolicName] = endNoteCount;
        }

        return '<sup><a ' + protect('href="#endnote-' + symbolicName + '"') + 
            '>' + endNoteTable[symbolicName] + '</a></sup>';
    }    
    str = str.rp(/[ \t]*\[\^([^\]\n\t ]+)\](?!:)/g, endNote);
    str = str.rp(/(\S)[ \t]*\[\^([^\]\n\t ]+)\]/g, function(match, pre, symbolicNameA) { return pre + endNote(match, symbolicNameA); });


    // CITATIONS: [#symbolicname]
    // The bibliography entry:
    str = str.rp(/\n\[#(\S+)\]:[ \t]+((?:[ \t]*\S[^\n]*\n?)*)/g, function (match, symbolicName, entry) {
        symbolicName = symbolicName.trim();
        return '<div ' + protect('class="bib"') + '>[<a ' + protect('class="target" name="citation-' + symbolicName.toLowerCase() + '"') + 
            '>&nbsp;</a><b>' + symbolicName + '</b>] ' + entry + '</div>';
    });
    
    // A reference:
    // (must process AFTER the definitions, since the syntax is a subset)
    str = str.rp(/\[(#[^\)\(\[\]\.#\s]+(?:\s*,\s*#(?:[^\)\(\[\]\.#\s]+))*)\]/g, function (match, symbolicNameList) {
        // Parse the symbolicNameList
        symbolicNameList = symbolicNameList.split(',');
        var s = '[';
        for (var i = 0; i < symbolicNameList.length; ++i) {
            // Strip spaces and # signs
            var name = symbolicNameList[i].rp(/#| /g, '');
            s += entag('a', name, protect('href="#citation-' + name.toLowerCase() + '"'));
            if (i < symbolicNameList.length - 1) { s += ', '; }
        }
        return s + ']';
    });
    

    // TABLES: line with | over line containing only | and -
    // (process before reference links to avoid ambiguity on the captions)
    str = replaceTables(str, protect);

    // REFERENCE-LINK TABLE: [foo]: http://foo.com
    // (must come before reference images and reference links in processing)
    str = str.rp(/^\[([^\^#].*?)\]:(.*?)$/gm, function (match, symbolicName, url) {
        referenceLinkTable[symbolicName.toLowerCase().trim()] = {link: url.trim(), used: false};
        return '';
    });

    // EMAIL ADDRESS: <foo@bar.baz> or foo@bar.baz if it doesn't look like a URL
    str = str.rp(/(?:<|(?!<)\b)(\S+@(\S+\.)+?\S{2,}?)(?:$|>|(?=<)|(?=\s)(?!>))/g, function (match, addr) {
        if (/http:|ftp:|https:|svn:|:\/\/|\.html|\(|\)|\]/.test(match)) {
            // This is a hyperlink to a url with an @ sign, not an email address
            return match;
        } else {
            return '<a ' + protect('href="mailto:' + addr + '"') + '>' + addr + '</a>';
        }
    });

    // Common code for formatting images
    var formatImage = function (ignore, url, attribs) {
        attribs = attribs || '';
        var img;
        var hash;

        // Detect videos
        if (/\.(mp4|m4v|avi|mpg|mov|webm)$/i.test(url)) {
            // This is video. Any attributes provided will override the defaults given here
            img = '<video ' + protect('class="markdeep" src="' + url + '"' + attribs + ' width="480px" controls="true"') + '></video>';
        } else if (/\.(mp3|mp2|ogg|wav|m4a|aac|flac)$/i.test(url)) {
            // Audio
            img = '<audio ' + protect('class="markdeep" controls ' + attribs + '><source src="' + url + '"') + '></audio>';
        } else if (hash = url.match(/^https:\/\/(?:www\.)?(?:youtube\.com\/\S*?v=|youtu\.be\/)([\w\d-]+)(&.*)?$/i)) {
            // YouTube video
            img = '<iframe ' + protect('class="markdeep" src="https://www.youtube.com/embed/' + hash[1] + '"' + attribs + ' width="480px" height="300px" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen') + '></iframe>';
        } else if (hash = url.match(/^https:\/\/(?:www\.)?vimeo.com\/\S*?\/([\w\d-]+)$/i)) {
            // Vimeo video
            img = '<iframe ' + protect('class="markdeep" src="https://player.vimeo.com/video/' + hash[1] + '"' + attribs + ' width="480px" height="300px" frameborder="0" allowfullscreen webkitallowfullscreen mozallowfullscreen') + '></iframe>';
        } else {
            // Image (trailing space is needed in case attribs must be quoted by the
            // browser...without the space, the browser will put the closing slash in the
            // quotes.)

            var classList = 'markdeep';
            // Remove classes from attribs
            attribs = attribs.rp(/class *= *(["'])([^'"]+)\1/, function (match, quote, cls) {
                classList += ' ' + cls;
                return '';
            });
            attribs = attribs.rp(/class *= *([^"' ]+)/, function (match, cls) {
                classList += ' ' + cls;
                return '';
            });
            
            img = '<img ' + protect('class="' + classList + '" src="' + url + '"' + attribs) + ' />';
            if (option('autoLinkImages')) {
                img = entag('a', img, protect('href="' + url + '" target="_blank"'));
            }
        }

        return img;
    };

    // Reformat equation links that have brackets: eqn [foo] --> eqn \ref{foo} so that
    // mathjax can process them.
    str = str.rp(/\b(equation|eqn\.|eq\.)\s*\[([^\s\]]+)\]/gi, function (match, eq, label) {
        return eq + ' \\ref{' + label + '}';
    });


    // Reformat figure links that have subfigure labels in parentheses, to avoid them being
    // processed as links
    str = str.rp(/\b(figure|fig\.|table|tbl\.|listing|lst\.)\s*\[([^\s\]]+)\](?=\()/gi, function (match) {
        return match + '<span></span>';
    });


    // Process links before images so that captions can contain links

    // Detect gravizo URLs inside of markdown images and protect them, 
    // which will cause them to be parsed sort-of reasonably. This is
    // a really special case needed to handle the newlines and potential
    // nested parentheses. Use the pattern from http://blog.stevenlevithan.com/archives/regex-recursion
    // (could be extended to multiple nested parens if needed)
    str = str.rp(/\(http:\/\/g.gravizo.com\/(.*g)\?((?:[^\(\)]|\([^\(\)]*\))*)\)/gi, function(match, protocol, url) {
        return "(http://g.gravizo.com/" + protocol + "?" + encodeURIComponent(url) + ")";
    });

    // HYPERLINKS: [text](url attribs)
    str = str.rp(/(^|[^!])\[([^\[\]]+?)\]\(("?)([^<>\s"]+?)\3(\s+[^\)]*?)?\)/g, function (match, pre, text, maybeQuote, url, attribs) {
        attribs = attribs || '';
        return pre + '<a ' + protect('href="' + url + '"' + attribs) + '>' + text + '</a>' + maybeShowLabel(url);
    });

    // EMPTY HYPERLINKS: [](url)
    str = str.rp(/(^|[^!])\[[ \t]*?\]\(("?)([^<>\s"]+?)\2\)/g, function (match, pre, maybeQuote, url) {
        return pre + '<a ' + protect('href="' + url + '"') + '>' + url + '</a>';
    });

    // REFERENCE LINK
    str = str.rp(/(^|[^!])\[([^\[\]]+)\]\[([^\[\]]*)\]/g, function (match, pre, text, symbolicName) {
        // Empty symbolic name is replaced by the label text
        if (! symbolicName.trim()) {
            symbolicName = text;
        }
        
        symbolicName = symbolicName.toLowerCase().trim();
        var t = referenceLinkTable[symbolicName];
        if (! t) {
            console.log("Reference link '" + symbolicName + "' never defined");
            return '?';
        } else {
            t.used = true;
            return pre + '<a ' + protect('href="' + t.link + '"') + '>' + text + '</a>';
        }
    });

    var CAPTION_PROTECT_CHARACTER = '\ue011';
    var protectedCaptionArray = [];
    
    // Temporarily protect image captions (or things that look like
    // them) because the following code is really slow at parsing
    // captions since they have regexps that are complicated to
    // evaluate due to branching.
    //
    // The regexp is really just /.*?\n{0,5}.*/, but that executes substantially more slowly on Chrome.
    str = str.rp(/!\[([^\n\]].*?\n?.*?\n?.*?\n?.*?\n?.*?)\]([\[\(])/g, function (match, caption, bracket) {
        // This is the same as the body of the protect() function, but using the protectedCaptionArray instead
        var i = (protectedCaptionArray.push(caption) - 1).toString(PROTECT_RADIX);
        while (i.length < PROTECT_DIGITS) { i = '0' + i; }
        return '![' + CAPTION_PROTECT_CHARACTER + i + CAPTION_PROTECT_CHARACTER + ']' + bracket;
    });
    
    
    // REFERENCE IMAGE: ![...][ref attribs]
    // Rewrite as a regular image for further processing below.
    str = str.rp(/(!\[.*?\])\[([^<>\[\]\s]+?)([ \t][^\n\[\]]*?)?\]/g, function (match, caption, symbolicName, attribs) {
        symbolicName = symbolicName.toLowerCase().trim();
        var t = referenceLinkTable[symbolicName];
        if (! t) {
            console.log("Reference image '" + symbolicName + "' never defined");
            return '?';
        } else {
            t.used = true;
            var s = caption + '(' + t.link + (t.attribs || '') + ')';
            return s;
        }
    });

    
    // IMAGE GRID: Rewrite rows and grids of images into a grid
    var imageGridAttribs = protect('width="100%"');
    var imageGridRowAttribs = protect('valign="top"');
    // This regex is the pattern for multiple images followed by an optional single image in case the last row is ragged
    // with only one extra
    str = str.rp(/(?:\n(?:[ \t]*!\[.*?\]\(("?)[^<>\s]+?(?:[^\n\)]*?)?\)){2,}[ \t]*)+(?:\n(?:[ \t]*!\[.*?\]\(("?)[^<>\s]+?(?:[^\n\)]*?)?\))[ \t]*)?\n/g, function (match) {
        var table = '';

        // Break into rows:
        match = match.split('\n');

        // Parse each row:
        match.forEach(function(row) {
            row = row.trim();
            if (row) {
                // Parse each image
                table += entag('tr', row.rp(/[ \t]*!\[.*?\]\([^\)\s]+([^\)]*?)?\)/g, function(image, attribs) {
                    //if (! /width|height/i.test(attribs) {
                        // Add a bogus "width" attribute to force the images to be hyperlinked to their
                        // full-resolution versions
                    //}
                    return entag('td', '\n\n'+ image + '\n\n');
                }), imageGridRowAttribs);
            }
        });

        return '\n' + entag('table', table, imageGridAttribs) + '\n';
    });

    // SIMPLE IMAGE: ![](url attribs)
    str = str.rp(/(\s*)!\[\]\(("?)([^"<>\s]+?)\2(\s[^\)]*?)?\)(\s*)/g, function (match, preSpaces, maybeQuote, url, attribs, postSpaces) {
        var img = formatImage(match, url, attribs);

        if (isolated(preSpaces, postSpaces)) {
            // In a block by itself: center
            img = entag('center', img);
        }

        return preSpaces + img + postSpaces;
    });

    // Explicit loop so that the output will be re-processed, preserving spaces between blocks.
    // Note that there is intentionally no global flag on the first regexp since we only want
    // to process the first occurance.
    var loop = true;
    var imageCaptionAbove = option('captionAbove', 'image');
    while (loop) {
        loop = false;

        // CAPTIONED IMAGE: ![caption](url attribs)
        str = str.rp(/(\s*)!\[(.+?)\]\(("?)([^"<>\s]+?)\3(\s[^\)]*?)?\)(\s*)/, function (match, preSpaces, caption, maybeQuote, url, attribs, postSpaces) {
            loop = true;
            var divStyle = '';
            var iso = isolated(preSpaces, postSpaces);

            // Only floating images get their size attributes moved to the whole box
            if (attribs && ! iso) {
                // Move any width *attribute* specification to the box itself
                attribs = attribs.rp(/((?:max-)?width)\s*:\s*[^;'"]*/g, function (attribMatch, attrib) {
                    divStyle = attribMatch + ';';
                    return attrib + ':100%';
                });
                
                // Move any width *style* specification to the box itself
                attribs = attribs.rp(/((?:max-)?width)\s*=\s*('\S+?'|"\S+?")/g, function (attribMatch, attrib, expr) {
                    // Strip the quotes
                    divStyle = attrib + ':' + expr.ss(1, expr.length - 1) + ';';
                    return 'style="' + attrib + ':100%" ';
                });
            }

            var img = formatImage(match, url, attribs);

            if (iso) {
                // In its own block: center
                preSpaces += '<center>';
                postSpaces = '</center>' + postSpaces;
            } else {
                // Embedded: float
                divStyle += 'float:right;margin:4px 0px 0px 25px;'
            }
            var floating = !iso;
            
            caption = entag('center', entag('span', caption + maybeShowLabel(url), protect('class="imagecaption"')));

            // This code used to put floating images in <span> instead of <div>,
            // but it wasn't clear why and this broke centered captions
            return preSpaces + 
                entag('div', (imageCaptionAbove ? caption : '') + img + (! imageCaptionAbove ? caption : ''), protect('class="image" style="' + divStyle + '"')) + 
                postSpaces;
        });
    } // while replacements made

    // Uprotect image captions
    var exposeCaptionRan = false;
    var CAPTION_PROTECT_REGEXP    = RegExp(CAPTION_PROTECT_CHARACTER + '[0-9a-w]{' + PROTECT_DIGITS + ',' + PROTECT_DIGITS + '}' + CAPTION_PROTECT_CHARACTER, 'g');
    /** Given the escaped identifier string from protect(), returns
        the orginal string. */
    function exposeCaption(i) {
        // Strip the escape character and parse, then look up in the
        // dictionary.
        var j = parseInt(i.ss(1, i.length - 1), PROTECT_RADIX);
        exposeCaptionRan = true;
        return protectedCaptionArray[j];
    }
    exposeCaptionRan = true;
    while ((str.indexOf(CAPTION_PROTECT_CHARACTER) + 1) && exposeCaptionRan) {
        exposeCaptionRan = false;
        str = str.rp(CAPTION_PROTECT_REGEXP, exposeCaption);
    }
    
    ////////////////////////////////////////////

    // Process these after links, so that URLs with underscores and tildes are protected.

    // STRONG: Must run before italic, since they use the
    // same symbols. **b** __b__
    str = replaceMatched(str, /\*\*/, 'strong', protect('class="asterisk"'));
    str = replaceMatched(str, /__/, 'strong', protect('class="underscore"'));

    // EM (ITALICS): *i* _i_
    str = replaceMatched(str, /\*/, 'em', protect('class="asterisk"'));
    str = replaceMatched(str, /_/, 'em', protect('class="underscore"'));
    
    // STRIKETHROUGH: ~~text~~
    str = str.rp(/\~\~([^~].*?)\~\~/g, entag('del', '$1'));

    // SMART DOUBLE QUOTES: "a -> localized &ldquo;   z"  -> localized &rdquo;
    // Allow situations such as "foo"==>"bar" and foo:"bar", but not 3' 9"
    if (option('smartQuotes')) {
        str = str.rp(/(^|[ \t->])(")(?=\w)/gm, '$1' + keyword('&ldquo;'));
        str = str.rp(/([A-Za-z\.,:;\?!=<])(")(?=$|\W)/gm, '$1' + keyword('&rdquo;'));
    }
    
    // ARROWS:
    str = str.rp(/(\s|^)<==(\s)/g, '$1\u21D0$2');
    str = str.rp(/(\s|^)->(\s)/g, '$1&rarr;$2');
    // (this requires having removed HTML comments first)
    str = str.rp(/(\s|^)-->(\s)/g, '$1&xrarr;$2');
    str = str.rp(/(\s|^)==>(\s)/g, '$1\u21D2$2');
    str = str.rp(/(\s|^)<-(\s)/g, '$1&larr;$2');
    str = str.rp(/(\s|^)<--(\s)/g, '$1&xlarr;$2');
    str = str.rp(/(\s|^)<==>(\s)/g, '$1\u21D4$2');
    str = str.rp(/(\s|^)<->(\s)/g, '$1\u2194$2');

    // EM DASH: ---
    // (exclude things that look like table delimiters!)
    str = str.rp(/([^-!\:\|])---([^->\:\|])/g, '$1&mdash;$2');

    // other EM DASH: -- (we don't support en dash...it is too short and looks like a minus)
    // (exclude things that look like table delimiters!)
    str = str.rp(/([^-!\:\|])--([^->\:\|])/g, '$1&mdash;$2');

    // NUMBER x NUMBER:
    str = str.rp(/(\d+[ \t]?)x(?=[ \t]?\d+)/g, '$1&times;');

    // MINUS: -4 or 2 - 1
    str = str.rp(/([\s\(\[<\|])-(\d)/g, '$1&minus;$2');
    str = str.rp(/(\d) - (\d)/g, '$1 &minus; $2');

    // EXPONENTS: ^1 ^-1 (no decimal places allowed)
    str = str.rp(/\^([-+]?\d+)\b/g, '<sup>$1</sup>');

    // PAGE BREAK:
    str = str.rp(/(^|\s|\b)\\(pagebreak|newpage)(\b|\s|$)/gi, protect('<div style="page-break-after:always"> </div>\n'))
    
    // SCHEDULE LISTS: date : title followed by indented content
    str = replaceScheduleLists(str, protect);

    // DEFINITION LISTS: Word followed by a colon list
    // Use <dl><dt>term</dt><dd>definition</dd></dl>
    // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl
    //
    // Process these before lists so that lists within definition lists
    // work correctly
    str = replaceDefinitionLists(str, protect);

    // LISTS: lines with -, +, *, or number.
    str = replaceLists(str, protect);

    // DEGREE: ##-degree
    str = str.rp(/(\d+?)[ \t-]degree(?:s?)/g, '$1&deg;');

    // PARAGRAPH: Newline, any amount of space, newline...as long as there isn't already
    // a paragraph break there.
    str = str.rp(/(?:<p>)?\n\s*\n+(?!<\/p>)/gi,
                 function(match) { return (/^<p>/i.test(match)) ? match : '\n\n</p><p>\n\n';});

    // Remove empty paragraphs (mostly avoided by the above, but some can still occur)
    str = str.rp(/<p>[\s\n]*<\/p>/gi, '');


    // FOOTNOTES/ENDNOTES
    str = str.rp(/\n\[\^(\S+)\]: ((?:.+?\n?)*)/g, function (match, symbolicName, note) {
        symbolicName = symbolicName.toLowerCase().trim();
        if (symbolicName in endNoteTable) {
            return '\n<div ' + protect('class="endnote"') + '><a ' + 
                protect('class="target" name="endnote-' + symbolicName + '"') + 
                '>&nbsp;</a><sup>' + endNoteTable[symbolicName] + '</sup> ' + note + '</div>';
        } else {
            return "\n";
        }
    });
    

    // SECTION LINKS: XXX section, XXX subsection.
    // Do this by rediscovering the headers and then recursively
    // searching for links to them. Process after other
    // forms of links to avoid ambiguity.
    
    var allHeaders = str.match(/<h([1-6])>(.*?)<\/h\1>/gi);
    if (allHeaders) {
        allHeaders.forEach(function (header) {
            header = removeHTMLTags(header.ss(4, header.length - 5)).trim();
            var link = '<a ' + protect('href="#' + mangle(header) + '"') + '>';

            var sectionExp = '(' + keyword('section') + '|' + keyword('subsection') + '|' + keyword('chapter') + ')';
            var headerExp = '(\\b' + escapeRegExpCharacters(header) + ')';
            
            // Search for links to this section
            str = str.rp(RegExp(headerExp + '\\s+' + sectionExp, 'gi'), link + "$1</a> $2");
            str = str.rp(RegExp(sectionExp + '\\s+' + headerExp, 'gi'), '$1 ' + link + "$2</a>");
        });
    }

    // TABLE, LISTING, and FIGURE LABEL NUMBERING: Figure [symbol]: Table [symbol]: Listing [symbol]: Diagram [symbol]:

    // This data structure maps caption types [by localized name] to a count of how many of
    // that type of object exist.
    var refCounter = {};

    // refTable['type_symbolicName'] = {number: number to link to, used: bool}
    var refTable = {};

    str = str.rp(RegExp(/($|>)\s*/.source + '(' + keyword('figure') + '|' + keyword('table') + '|' + keyword('listing') + '|' + keyword('diagram') + ')' + /\s+\[(.+?)\]:/.source, 'gim'), function (match, prefix, _type, _ref) {
        var type = _type.toLowerCase();
        // Increment the counter
        var count = refCounter[type] = (refCounter[type] | 0) + 1;
        var ref = type + '_' + mangle(_ref.toLowerCase().trim());

        // Store the reference number
        refTable[ref] = {number: count, used: false, source: type + ' [' + _ref + ']'};
        
        return prefix +
               entag('a', '&nbsp;', protect('class="target" name="' + ref + '"')) + entag('b', type[0].toUpperCase() + type.ss(1) + '&nbsp;' + count + ':', protect('style="font-style:normal;"')) +
               maybeShowLabel(_ref);
    });

    // FIGURE, TABLE, DIAGRAM, and LISTING references:
    // (must come after figure/table/listing processing, obviously)
    str = str.rp(RegExp('\\b(fig\\.|tbl\\.|lst\\.|' + keyword('figure') + '|' + keyword('table') + '|' + keyword('listing') + '|' + keyword('diagram') + ')\\s+\\[([^\\s\\]]+)\\]', 'gi'), function (match, _type, _ref) {
        // Fix abbreviations
        var type = _type.toLowerCase();
        switch (type) {
        case 'fig.': type = keyword('figure').toLowerCase(); break;
        case 'tbl.': type = keyword('table').toLowerCase(); break;
        case 'lst.': type = keyword('listing').toLowerCase(); break;
        }

        // Clean up the reference
        var ref = type + '_' + mangle(_ref.toLowerCase().trim());
        var t = refTable[ref];

        if (t) {
            t.used = true;
            return '<a ' + protect('href="#' + ref + '"') + '>' + _type + '&nbsp;' + t.number + maybeShowLabel(_ref) + '</a>';
        } else {
            console.log("Reference to undefined '" + type + " [" + _ref + "]'");
            return _type + ' ?';
        }
    });

    // URL: <http://baz> or http://baz
    // Must be detected after [link]() processing 
    str = str.rp(/(?:<|(?!<)\b)(\w{3,6}:\/\/.+?)(?:$|>|(?=<)|(?=\s|\u00A0)(?!<))/g, function (match, url) {
        var extra = '';
        if (url[url.length - 1] == '.') {
            // Accidentally sucked in a period at the end of a sentence
            url = url.ss(0, url.length - 1);
            extra = '.';
        }
        // svn and perforce URLs are not hyperlinked. All others (http/https/ftp/mailto/tel, etc. are)
        return '<a ' + ((url[0] !== 's' && url[0] !== 'p') ? protect('href="' + url + '" class="url"') : '') + '>' + url + '</a>' + extra;
    });

    if (! elementMode) {
        var TITLE_PATTERN = /^\s*(?:<\/p><p>)?\s*<strong.*?>([^ \t\*].*?[^ \t\*])<\/strong>(?:<\/p>)?[ \t]*\n/.source;
        
        var ALL_SUBTITLES_PATTERN = /([ {4,}\t][ \t]*\S.*\n)*/.source;

        // Detect a bold first line and make it into a title; detect indented lines
        // below it and make them subtitles
        str = str.rp(
            new RegExp(TITLE_PATTERN + ALL_SUBTITLES_PATTERN, 'g'),
            function (match, title) {
                title = title.trim();

                // rp + RegExp won't give us the full list of
                // subtitles, only the last one. So, we have to
                // re-process match.
                var subtitles = match.ss(match.indexOf('\n', match.indexOf('</strong>')));
                subtitles = subtitles ? subtitles.rp(/[ \t]*(\S.*?)\n/g, '<div class="subtitle"> $1 </div>\n') : '';
                
                // Remove all tags from the title when inside the <TITLE> tag, as well
                // as unicode characters that don't render well in tabs and window bars.
                // These regexps look like they are full of spaces but are actually various
                // unicode space characters. http://jkorpela.fi/chars/spaces.html
                var titleTag = removeHTMLTags(title).replace(/[     ]/g, '').replace(/[         　]/g, ' ');
                
                return entag('title', titleTag) + maybeShowLabel(window.location.href, 'center') +
                    '<div class="title"> ' + title + 
                    ' </div>\n' + subtitles + '<div class="afterTitles"></div>\n';
            });
    } // if ! noTitles

    // Remove any bogus leading close-paragraph tag inserted by our extra newlines
    str = str.rp(/^\s*<\/p>/, '');


    // If not in element mode and not an INSERT child, maybe add a TOC
    if (! elementMode) {
        var temp = insertTableOfContents(str, protect, function (text) {return text.rp(PROTECT_REGEXP, expose)});
        str = temp[0];
        var toc = temp[1];
        // SECTION LINKS: Replace sec. [X], section [X], subsection [X]
        str = str.rp(RegExp('\\b(' + keyword('sec') + '\\.|' + keyword('section') + '|' + keyword('subsection') + '|' + keyword('chapter') + ')\\s\\[(.+?)\\]', 'gi'), 
                    function (match, prefix, ref) {
                        var link = toc[ref.toLowerCase().trim()];
                        if (link) {
                            return prefix + '  <a ' + protect('href="#toc' + link + '"') + '>' + link + '</a>';  
                        } else {
                            return prefix + ' ?';
                        }
                    });
    }

    // Expose all protected values. We may need to do this
    // recursively, because pre and code blocks can be nested.
    var maxIterations = 50;

    exposeRan = true;
    while ((str.indexOf(PROTECT_CHARACTER) + 1) && exposeRan && (maxIterations > 0)) {
        exposeRan = false;
        str = str.rp(PROTECT_REGEXP, expose);
        --maxIterations;
    }
    
    if (maxIterations <= 0) { console.log('WARNING: Ran out of iterations while expanding protected substrings'); }

    // Warn about unused references
    Object.keys(referenceLinkTable).forEach(function (key) {
        if (! referenceLinkTable[key].used) {
            console.log("Reference link '[" + key + "]' is defined but never used");
        }
    });

    Object.keys(refTable).forEach(function (key) {
        if (! refTable[key].used) {
            console.log("'" + refTable[key].source + "' is never referenced");
        }
    });

    if (option('linkAPIDefinitions')) {
        // API DEFINITION LINKS
        
        var apiDefined = {};

        // Find link targets for APIs, which look like:
        // '<dt><code...>variablename' followed by (, [, or <
        //
        // If there is syntax highlighting because we're documenting
        // keywords for the language supported by HLJS, then there may
        // be an extra span around the variable name.
        str = str.rp(/<dt><code(\b[^<>\n]*)>(<span class="[a-zA-Z\-_0-9]+">)?([A-Za-z_][A-Za-z_\.0-9:\->]*)(<\/span>)?([\(\[<])/g, function (match, prefix, syntaxHighlight, name, syntaxHighlightEnd, next) {
            var linkName = name + (next === '<' ? '' : next === '(' ? '-fcn' : next === '[' ? '-array' : next);
            apiDefined[linkName] = true;
            // The 'ignore' added to the code tag below is to
            // prevent the link finding code from finding this (since
            // we don't have lookbehinds in JavaScript to recognize
            // the <dt>)
            return '<dt><a name="apiDefinition-' + linkName + '"></a><code ignore ' + prefix + '>' + (syntaxHighlight || '') + name + (syntaxHighlightEnd || '') + next;
        });

        // Hide links that are also inside of a <h#>...</h#>, where we don't want them
        // modified by API links. Assume that these are on a single line. The space in
        // the close tag prevents the next regexp from matching.
        str = str.rp(/<h([1-9])>(.*<code\b[^<>\n]*>.*)<\/code>(.*<\/h\1>)/g, '<h$1>$2</code >$3');

        // Now find potential links, which look like:
        // '<code...>variablename</code>' and may contain () or [] after the variablename
        // They may also have an extra syntax-highlighting span
        str = str.rp(/<code(?! ignore)\b[^<>\n]*>(<span class="[a-zA-Z\-_0-9]+">)?([A-Za-z_][A-Za-z_\.0-9:\->]*)(<\/span>)?(\(\)|\[\])?<\/code>/g, function (match, syntaxHighlight, name, syntaxHighlightEnd, next) {
            var linkName = name + (next ? (next[0] === '(' ? '-fcn' : next[0] === '[' ? '-array' : next[0]) : '');
            return (apiDefined[linkName] === true) ? entag('a', match, 'href="#apiDefinition-' + linkName + '"') : match;
        });
    }
           
    return '<span class="md">' + entag('p', str) + '</span>';
}

 
/** Workaround for IE11 */
function strToArray(s) {
    if (Array.from) {
        return Array.from(s);
    } else {
        var a = [];
        for (var i = 0; i < s.length; ++i) {
            a[i] = s[i];
        }
        return a;
    }
}

/**
   Adds whitespace at the end of each line of str, so that all lines have equal length in
   unicode characters (which is not the same as JavaScript characters when high-index/escape
   characters are present).
*/
function equalizeLineLengths(str) {
    var lineArray = str.split('\n');

    if ((lineArray.length > 0) && (lineArray[lineArray.length - 1] === '')) {
        // Remove the empty last line generated by split on a trailing newline
        lineArray.pop();
    }
        
    var longest = 0;
    lineArray.forEach(function(line) {
        longest = max(longest, strToArray(line).length);
    });

    // Worst case spaces needed for equalizing lengths
    // http://stackoverflow.com/questions/1877475/repeat-character-n-times
    var spaces = Array(longest + 1).join(' ');

    var result = '';
    lineArray.forEach(function(line) {
        // Append the needed number of spaces onto each line, and
        // reconstruct the output with newlines
        result += line + spaces.ss(strToArray(line).length) + '\n';
    });

    return result;
}

/** Finds the longest common whitespace prefix of all non-empty lines
    and then removes it */
function removeLeadingSpace(str) {
    var lineArray = str.split('\n');

    var minimum = Infinity;
    lineArray.forEach(function (line) {
        if (line.trim() !== '') {
            // This is a non-empty line
            var spaceArray = line.match(/^([ \t]*)/);
            if (spaceArray) {
                minimum = min(minimum, spaceArray[0].length);
            }
        }
    });

    if (minimum === 0) {
        // No leading space
        return str;
    }

    var result = '';
    lineArray.forEach(function(line) {
        // Strip the common spaces
        result += line.ss(minimum) + '\n';
    });

    return result;
}

/** Returns true if this character is a "letter" under the ASCII definition */
function isASCIILetter(c) {
    var code = c.charCodeAt(0);
    return ((code >= 65) && (code <= 90)) || ((code >= 97) && (code <= 122));
}

/** Converts diagramString, which is a Markdeep diagram without the surrounding asterisks, to
    SVG (HTML). Lines may have ragged lengths.

    alignmentHint is the float alignment desired for the SVG tag,
    which can be 'floatleft', 'floatright', or ''
 */
function diagramToSVG(diagramString, alignmentHint) {
    // Clean up diagramString if line endings are ragged
    diagramString = equalizeLineLengths(diagramString);

    // Temporarily replace 'o' that is surrounded by other text
    // with another character to avoid processing it as a point 
    // decoration. This will be replaced in the final svg and is
    // faster than checking each neighborhood each time.
    var HIDE_O = '\ue004';
    diagramString = diagramString.rp(/([a-zA-Z]{2})o/g, '$1' + HIDE_O);
    diagramString = diagramString.rp(/o([a-zA-Z]{2})/g, HIDE_O + '$1');
    diagramString = diagramString.rp(/([a-zA-Z\ue004])o([a-zA-Z\ue004])/g, '$1' + HIDE_O + '$2');

    /** Pixels per character */
    var SCALE   = 8;

    /** Multiply Y coordinates by this when generating the final SVG
        result to account for the aspect ratio of text files. This
        MUST be 2 */
    var ASPECT = 2;

    var DIAGONAL_ANGLE = Math.atan(1.0 / ASPECT) * 180 / Math.PI;

    var EPSILON = 1e-6;

    // The order of the following is based on rotation angles
    // and is used for ArrowSet.toSVG
    var ARROW_HEAD_CHARACTERS            = '>v<^';
    var POINT_CHARACTERS                 = 'o*◌○◍●';
    var JUMP_CHARACTERS                  = '()';
    var UNDIRECTED_VERTEX_CHARACTERS     = "+";
    var VERTEX_CHARACTERS                = UNDIRECTED_VERTEX_CHARACTERS + ".'";

    // GRAY[i] is the Unicode block character for (i+1)/4 level gray
    var GRAY_CHARACTERS = '\u2591\u2592\u2593\u2588';

    // TRI[i] is a right-triangle rotated by 90*i
    var TRI_CHARACTERS  = '\u25E2\u25E3\u25E4\u25E5';

    var DECORATION_CHARACTERS            = ARROW_HEAD_CHARACTERS + POINT_CHARACTERS + JUMP_CHARACTERS + GRAY_CHARACTERS + TRI_CHARACTERS;

    function isUndirectedVertex(c) { return UNDIRECTED_VERTEX_CHARACTERS.indexOf(c) + 1; }
    function isVertex(c)           { return VERTEX_CHARACTERS.indexOf(c) !== -1; }
    function isTopVertex(c)        { return isUndirectedVertex(c) || (c === '.'); }
    function isBottomVertex(c)     { return isUndirectedVertex(c) || (c === "'"); }
    function isVertexOrLeftDecoration(c){ return isVertex(c) || (c === '<') || isPoint(c); }
    function isVertexOrRightDecoration(c){return isVertex(c) || (c === '>') || isPoint(c); }
    function isArrowHead(c)        { return ARROW_HEAD_CHARACTERS.indexOf(c) + 1; }
    function isGray(c)             { return GRAY_CHARACTERS.indexOf(c) + 1; }
    function isTri(c)              { return TRI_CHARACTERS.indexOf(c) + 1; }

    // "D" = Diagonal slash (/), "B" = diagonal Backslash (\)
    // Characters that may appear anywhere on a solid line
    function isSolidHLine(c)       { return (c === '-') || isUndirectedVertex(c) || isJump(c); }
    function isSolidVLineOrJumpOrPoint(c) { return isSolidVLine(c) || isJump(c) || isPoint(c); }
    function isSolidVLine(c)       { return (c === '|') || isUndirectedVertex(c); }
    function isSolidDLine(c)       { return (c === '/') || isUndirectedVertex(c) }
    function isSolidBLine(c)       { return (c === '\\') || isUndirectedVertex(c); }
    function isJump(c)             { return JUMP_CHARACTERS.indexOf(c) + 1; }
    function isPoint(c)            { return POINT_CHARACTERS.indexOf(c) + 1; }
    function isDecoration(c)       { return DECORATION_CHARACTERS.indexOf(c) + 1; }
    function isEmpty(c)            { return c === ' '; }
   
    ///////////////////////////////////////////////////////////////////////////////
    // Math library

    /** Invoke as new Vec2(v) to clone or new Vec2(x, y) to create from coordinates.
        Can also invoke without new for brevity. */
    function Vec2(x, y) {
        // Detect when being run without new
        if (! (this instanceof Vec2)) { return new Vec2(x, y); }

        if (y === undefined) {
            if (x === undefined) { x = y = 0; } 
            else if (x instanceof Vec2) { y = x.y; x = x.x; }
            else { console.error("Vec2 requires one Vec2 or (x, y) as an argument"); }
        }
        this.x = x;
        this.y = y;
        Object.seal(this);
    }

    /** Returns an SVG representation */
    Vec2.prototype.toString = Vec2.prototype.toSVG = 
        function () { return '' + (this.x * SCALE) + ',' + (this.y * SCALE * ASPECT) + ' '; };

    /** Converts a "rectangular" string defined by newlines into 2D
        array of characters. Grids are immutable. */
    function makeGrid(str) {
        /** Returns ' ' for out of bounds values */
        var grid = function(x, y) {
            if (y === undefined) {
                if (x instanceof Vec2) { y = x.y; x = x.x; }
                else { console.error('grid requires either a Vec2 or (x, y)'); }
            }
            
            return ((x >= 0) && (x < grid.width) && (y >= 0) && (y < grid.height)) ?
                str[y * (grid.width + 1) + x] : ' ';
        };

        // Elements are true when consumed
        grid._used   = [];

        grid.height  = str.split('\n').length;
        if (str[str.length - 1] === '\n') { --grid.height; }

        // Convert the string to an array to better handle greater-than 16-bit unicode
        // characters, which JavaScript does not process correctly with indices. Do this after
        // the above string processing.
        str = strToArray(str);
        grid.width = str.indexOf('\n');

        /** Mark this location. Takes a Vec2 or (x, y) */
        grid.setUsed = function (x, y) {
            if (y === undefined) {
                if (x instanceof Vec2) { y = x.y; x = x.x; }
                else { console.error('grid requires either a Vec2 or (x, y)'); }
            }
            if ((x >= 0) && (x < grid.width) && (y >= 0) && (y < grid.height)) {
                // Match the source string indexing
                grid._used[y * (grid.width + 1) + x] = true;
            }
        };
        
        grid.isUsed = function (x, y) {
            if (y === undefined) {
                if (x instanceof Vec2) { y = x.y; x = x.x; }
                else { console.error('grid requires either a Vec2 or (x, y)'); }
            }
            return (this._used[y * (this.width + 1) + x] === true);
        };
        
        /** Returns true if there is a solid vertical line passing through (x, y) */
        grid.isSolidVLineAt = function (x, y) {
            if (y === undefined) { y = x.x; x = x.x; }
            
            var up = grid(x, y - 1);
            var c  = grid(x, y);
            var dn = grid(x, y + 1);
            
            var uprt = grid(x + 1, y - 1);
            var uplt = grid(x - 1, y - 1);
            
            if (isSolidVLine(c)) {
                // Looks like a vertical line...does it continue?
                return (isTopVertex(up)    || (up === '^') || isSolidVLine(up) || isJump(up) ||
                        isBottomVertex(dn) || (dn === 'v') || isSolidVLine(dn) || isJump(dn) ||
                        isPoint(up) || isPoint(dn) || (grid(x, y - 1) === '_') || (uplt === '_') ||
                        (uprt === '_') ||
                        
                        // Special case of 1-high vertical on two curved corners 
                        ((isTopVertex(uplt) || isTopVertex(uprt)) &&
                         (isBottomVertex(grid(x - 1, y + 1)) || isBottomVertex(grid(x + 1, y + 1)))));
                
            } else if (isTopVertex(c) || (c === '^')) {
                // May be the top of a vertical line
                return isSolidVLine(dn) || (isJump(dn) && (c !== '.'));
            } else if (isBottomVertex(c) || (c === 'v')) {
                return isSolidVLine(up) || (isJump(up) && (c !== "'"));
            } else if (isPoint(c)) {
                return isSolidVLine(up) || isSolidVLine(dn);
            } 
            
            return false;
        };
    
    
        /** Returns true if there is a solid middle (---) horizontal line
            passing through (x, y). Ignores underscores. */
        grid.isSolidHLineAt = function (x, y) {
            if (y === undefined) { y = x.x; x = x.x; }
            
            var ltlt = grid(x - 2, y);
            var lt   = grid(x - 1, y);
            var c    = grid(x + 0, y);
            var rt   = grid(x + 1, y);
            var rtrt = grid(x + 2, y);
            
            if (isSolidHLine(c) || (isSolidHLine(lt) && isJump(c))) {
                // Looks like a horizontal line...does it continue? We need three in a row.
                if (isSolidHLine(lt)) {
                    return isSolidHLine(rt) || isVertexOrRightDecoration(rt) || 
                        isSolidHLine(ltlt) || isVertexOrLeftDecoration(ltlt);
                } else if (isVertexOrLeftDecoration(lt)) {
                    return isSolidHLine(rt);
                } else {
                    return isSolidHLine(rt) && (isSolidHLine(rtrt) || isVertexOrRightDecoration(rtrt));
                }

            } else if (c === '<') {
                return isSolidHLine(rt) && isSolidHLine(rtrt)
                
            } else if (c === '>') {
                return isSolidHLine(lt) && isSolidHLine(ltlt);
                
            } else if (isVertex(c)) {
                return ((isSolidHLine(lt) && isSolidHLine(ltlt)) || 
                        (isSolidHLine(rt) && isSolidHLine(rtrt)));
            }
            
            return false;
        };
        
        
        /** Returns true if there is a solid backslash line passing through (x, y) */
        grid.isSolidBLineAt = function (x, y) {
            if (y === undefined) { y = x.x; x = x.x; }
            var c = grid(x, y);
            var lt = grid(x - 1, y - 1);
            var rt = grid(x + 1, y + 1);
            
            if (c === '\\') {
                // Looks like a diagonal line...does it continue? We need two in a row.
                return (isSolidBLine(rt) || isBottomVertex(rt) || isPoint(rt) || (rt === 'v') ||
                        isSolidBLine(lt) || isTopVertex(lt) || isPoint(lt) || (lt === '^') ||
                        (grid(x, y - 1) === '/') || (grid(x, y + 1) === '/') || (rt === '_') || (lt === '_')); 
            } else if (c === '.') {
                return (rt === '\\');
            } else if (c === "'") {
                return (lt === '\\');
            } else if (c === '^') {
                return rt === '\\';
            } else if (c === 'v') {
                return lt === '\\';
            } else if (isVertex(c) || isPoint(c) || (c === '|')) {
                return isSolidBLine(lt) || isSolidBLine(rt);
            }
        };
        

        /** Returns true if there is a solid diagonal line passing through (x, y) */
        grid.isSolidDLineAt = function (x, y) {
            if (y === undefined) { y = x.x; x = x.x; }
            
            var c = grid(x, y);
            var lt = grid(x - 1, y + 1);
            var rt = grid(x + 1, y - 1);
            
            if (c === '/' && ((grid(x, y - 1) === '\\') || (grid(x, y + 1) === '\\'))) {
                // Special case of tiny hexagon corner
                return true;
            } else if (isSolidDLine(c)) {
                // Looks like a diagonal line...does it continue? We need two in a row.
                return (isSolidDLine(rt) || isTopVertex(rt) || isPoint(rt) || (rt === '^') || (rt === '_') ||
                        isSolidDLine(lt) || isBottomVertex(lt) || isPoint(lt) || (lt === 'v') || (lt === '_')); 
            } else if (c === '.') {
                return (lt === '/');
            } else if (c === "'") {
                return (rt === '/');
            } else if (c === '^') {
                return lt === '/';
            } else if (c === 'v') {
                return rt === '/';
            } else if (isVertex(c) || isPoint(c) || (c === '|')) {
                return isSolidDLine(lt) || isSolidDLine(rt);
            }
            return false;
        };
        
        grid.toString = function () { return str; };
        
        return Object.freeze(grid);
    }
    
    
    /** A 1D curve. If C is specified, the result is a bezier with
        that as the tangent control point */
    function Path(A, B, C, D, dashed) {
        if (! ((A instanceof Vec2) && (B instanceof Vec2))) {
            console.error('Path constructor requires at least two Vec2s');
        }
        this.A = A;
        this.B = B;
        if (C) {
            this.C = C;
            if (D) {
                this.D = D;
            } else {
                this.D = C;
            }
        }

        this.dashed = dashed || false;

        Object.freeze(this);
    }

    var _ = Path.prototype;
    _.isVertical = function () {
        return this.B.x === this.A.x;
    };

    _.isHorizontal = function () {
        return this.B.y === this.A.y;
    };

    /** Diagonal lines look like: / See also backDiagonal */
    _.isDiagonal = function () {
        var dx = this.B.x - this.A.x;
        var dy = this.B.y - this.A.y;
        return (abs(dy + dx) < EPSILON);
    };

    _.isBackDiagonal = function () {
        var dx = this.B.x - this.A.x;
        var dy = this.B.y - this.A.y;
        return (abs(dy - dx) < EPSILON);
    };

    _.isCurved = function () {
        return this.C !== undefined;
    };

    /** Does this path have any end at (x, y) */
    _.endsAt = function (x, y) {
        if (y === undefined) { y = x.y; x = x.x; }
        return ((this.A.x === x) && (this.A.y === y)) ||
            ((this.B.x === x) && (this.B.y === y));
    };

    /** Does this path have an up end at (x, y) */
    _.upEndsAt = function (x, y) {
        if (y === undefined) { y = x.y; x = x.x; }
        return this.isVertical() && (this.A.x === x) && (min(this.A.y, this.B.y) === y);
    };

    /** Does this path have an up end at (x, y) */
    _.diagonalUpEndsAt = function (x, y) {
        if (! this.isDiagonal()) { return false; }
        if (y === undefined) { y = x.y; x = x.x; }
        if (this.A.y < this.B.y) {
            return (this.A.x === x) && (this.A.y === y);
        } else {
            return (this.B.x === x) && (this.B.y === y);
        }
    };

    /** Does this path have a down end at (x, y) */
    _.diagonalDownEndsAt = function (x, y) {
        if (! this.isDiagonal()) { return false; }
        if (y === undefined) { y = x.y; x = x.x; }
        if (this.B.y < this.A.y) {
            return (this.A.x === x) && (this.A.y === y);
        } else {
            return (this.B.x === x) && (this.B.y === y);
        }
    };

    /** Does this path have an up end at (x, y) */
    _.backDiagonalUpEndsAt = function (x, y) {
        if (! this.isBackDiagonal()) { return false; }
        if (y === undefined) { y = x.y; x = x.x; }
        if (this.A.y < this.B.y) {
            return (this.A.x === x) && (this.A.y === y);
        } else {
            return (this.B.x === x) && (this.B.y === y);
        }
    };

    /** Does this path have a down end at (x, y) */
    _.backDiagonalDownEndsAt = function (x, y) {
        if (! this.isBackDiagonal()) { return false; }
        if (y === undefined) { y = x.y; x = x.x; }
        if (this.B.y < this.A.y) {
            return (this.A.x === x) && (this.A.y === y);
        } else {
            return (this.B.x === x) && (this.B.y === y);
        }
    };

    /** Does this path have a down end at (x, y) */
    _.downEndsAt = function (x, y) {
        if (y === undefined) { y = x.y; x = x.x; }
        return this.isVertical() && (this.A.x === x) && (max(this.A.y, this.B.y) === y);
    };

    /** Does this path have a left end at (x, y) */
    _.leftEndsAt = function (x, y) {
        if (y === undefined) { y = x.y; x = x.x; }
        return this.isHorizontal() && (this.A.y === y) && (min(this.A.x, this.B.x) === x);
    };

    /** Does this path have a right end at (x, y) */
    _.rightEndsAt = function (x, y) {
        if (y === undefined) { y = x.y; x = x.x; }
        return this.isHorizontal() && (this.A.y === y) && (max(this.A.x, this.B.x) === x);
    };

    _.verticalPassesThrough = function (x, y) {
        if (y === undefined) { y = x.y; x = x.x; }
        return this.isVertical() && 
            (this.A.x === x) && 
            (min(this.A.y, this.B.y) <= y) &&
            (max(this.A.y, this.B.y) >= y);
    }

    _.horizontalPassesThrough = function (x, y) {
        if (y === undefined) { y = x.y; x = x.x; }
        return this.isHorizontal() && 
            (this.A.y === y) && 
            (min(this.A.x, this.B.x) <= x) &&
            (max(this.A.x, this.B.x) >= x);
    }
    
    /** Returns a string suitable for inclusion in an SVG tag */
    _.toSVG = function () {
        var svg = '<path d="M ' + this.A;

        if (this.isCurved()) {
            svg += 'C ' + this.C + this.D + this.B;
        } else {
            svg += 'L ' + this.B;
        }
        svg += '" style="fill:none;"';
        if (this.dashed) {
            svg += ' stroke-dasharray="3,6"';
        }
        svg += '/>';
        return svg;
    };


    /** A group of 1D curves. This was designed so that all of the
        methods can later be implemented in O(1) time, but it
        currently uses O(n) implementations for source code
        simplicity. */
    function PathSet() {
        this._pathArray = [];
    }

    var PS = PathSet.prototype;
    PS.insert = function (path) {
        this._pathArray.push(path);
    };

    /** Returns a new method that returns true if method(x, y) 
        returns true on any element of _pathAray */
    function makeFilterAny(method) {
        return function(x, y) {
            for (var i = 0; i < this._pathArray.length; ++i) {
                if (method.call(this._pathArray[i], x, y)) { return true; }
            }
            // Fall through: return undefined == false
        }
    }

    // True if an up line ends at these coordinates. Recall that the
    // variable _ is bound to the Path prototype still.
    PS.upEndsAt                = makeFilterAny(_.upEndsAt);
    PS.diagonalUpEndsAt        = makeFilterAny(_.diagonalUpEndsAt);
    PS.backDiagonalUpEndsAt    = makeFilterAny(_.backDiagonalUpEndsAt);
    PS.diagonalDownEndsAt      = makeFilterAny(_.diagonalDownEndsAt);
    PS.backDiagonalDownEndsAt  = makeFilterAny(_.backDiagonalDownEndsAt);
    PS.downEndsAt              = makeFilterAny(_.downEndsAt);
    PS.leftEndsAt              = makeFilterAny(_.leftEndsAt);
    PS.rightEndsAt             = makeFilterAny(_.rightEndsAt);
    PS.endsAt                  = makeFilterAny(_.endsAt);
    PS.verticalPassesThrough   = makeFilterAny(_.verticalPassesThrough);
    PS.horizontalPassesThrough = makeFilterAny(_.horizontalPassesThrough);

    /** Returns an SVG string */
    PS.toSVG = function () {
        var svg = '';
        for (var i = 0; i < this._pathArray.length; ++i) {
            svg += this._pathArray[i].toSVG() + '\n';
        }
        return svg;
    };


    function DecorationSet() {
        this._decorationArray = [];
    }

    var DS = DecorationSet.prototype;

    /** insert(x, y, type, <angle>)  
        insert(vec, type, <angle>)

        angle is the angle in degrees to rotate the result */
    DS.insert = function(x, y, type, angle) {
        if (type === undefined) { type = y; y = x.y; x = x.x; }

        if (! isDecoration(type)) {
            console.error('Illegal decoration character: ' + type); 
        }
        var d = {C: Vec2(x, y), type: type, angle:angle || 0};

        // Put arrows at the front and points at the back so that
        // arrows always draw under points

        if (isPoint(type)) {
            this._decorationArray.push(d);
        } else {
            this._decorationArray.unshift(d);
        }
    };


    DS.toSVG = function () {
        var svg = '';
        for (var i = 0; i < this._decorationArray.length; ++i) {
            var decoration = this._decorationArray[i];
            var C = decoration.C;
            
            if (isJump(decoration.type)) {
                // Slide jumps
                var dx = (decoration.type === ')') ? +0.75 : -0.75;
                var up  = Vec2(C.x, C.y - 0.5);
                var dn  = Vec2(C.x, C.y + 0.5);
                var cup = Vec2(C.x + dx, C.y - 0.5);
                var cdn = Vec2(C.x + dx, C.y + 0.5);

                svg += '<path d="M ' + dn + ' C ' + cdn + cup + up + '" style="fill:none;"/>';

            } else if (isPoint(decoration.type)) {
                var cls = {'*':'closed', 'o':'open', '◌':'dotted', '○':'open', '◍':'shaded', '●':'closed'}[decoration.type];
                svg += '<circle cx="' + (C.x * SCALE) + '" cy="' + (C.y * SCALE * ASPECT) +
                       '" r="' + (SCALE - STROKE_WIDTH) + '" class="' + cls + 'dot"/>';
            } else if (isGray(decoration.type)) {
                
                var shade = Math.round((3 - GRAY_CHARACTERS.indexOf(decoration.type)) * 63.75);
                svg += '<rect x="' + ((C.x - 0.5) * SCALE) + '" y="' + ((C.y - 0.5) * SCALE * ASPECT) + '" width="' + SCALE + '" height="' + (SCALE * ASPECT) + '" stroke="none" fill="rgb(' + shade + ',' + shade + ',' + shade +')"/>';

            } else if (isTri(decoration.type)) {
                // 30-60-90 triangle
                var index = TRI_CHARACTERS.indexOf(decoration.type);
                var xs  = 0.5 - (index & 1);
                var ys  = 0.5 - (index >> 1);
                xs *= sign(ys);
                var tip = Vec2(C.x + xs, C.y - ys);
                var up  = Vec2(C.x + xs, C.y + ys);
                var dn  = Vec2(C.x - xs, C.y + ys);
                svg += '<polygon points="' + tip + up + dn + '" style="stroke:none"/>\n';
            } else { // Arrow head
                var tip = Vec2(C.x + 1, C.y);
                var up =  Vec2(C.x - 0.5, C.y - 0.35);
                var dn =  Vec2(C.x - 0.5, C.y + 0.35);
                svg += '<polygon points="' + tip + up + dn + 
                    '"  style="stroke:none" transform="rotate(' + decoration.angle + ',' + C + ')"/>\n';
            }
        }
        return svg;
    };

    ////////////////////////////////////////////////////////////////////////////

    function findPaths(grid, pathSet) {
        // Does the line from A to B contain at least one c?
        function lineContains(A, B, c) {
            var dx = sign(B.x - A.x);
            var dy = sign(B.y - A.y);
            var x, y;

            for (x = A.x, y = A.y; (x !== B.x) || (y !== B.y); x += dx, y += dy) {
                if (grid(x, y) === c) { return true; }
            }

            // Last point
            return (grid(x, y) === c);
        }

        // Find all solid vertical lines. Iterate horizontally
        // so that we never hit the same line twice
        for (var x = 0; x < grid.width; ++x) {
            for (var y = 0; y < grid.height; ++y) {
                if (grid.isSolidVLineAt(x, y)) {
                    // This character begins a vertical line...now, find the end
                    var A = Vec2(x, y);
                    do  { grid.setUsed(x, y); ++y; } while (grid.isSolidVLineAt(x, y));
                    var B = Vec2(x, y - 1);
                    
                    var up = grid(A);
                    var upup = grid(A.x, A.y - 1);

                    if (! isVertex(up) && ((upup === '-') || (upup === '_') ||
                                           (upup === '┳') ||
                                           (grid(A.x - 1, A.y - 1) === '_') ||
                                           (grid(A.x + 1, A.y - 1) === '_') || 
                                           isBottomVertex(upup)) || isJump(upup)) {
                        // Stretch up to almost reach the line above (if there is a decoration,
                        // it will finish the gap)
                        A.y -= 0.5;
                    }

                    var dn = grid(B);
                    var dndn = grid(B.x, B.y + 1);
                    if (! isVertex(dn) && ((dndn === '-') || (dndn === '┻') || isTopVertex(dndn)) || isJump(dndn) ||
                        (grid(B.x - 1, B.y) === '_') || (grid(B.x + 1, B.y) === '_')) {
                        // Stretch down to almost reach the line below
                        B.y += 0.5;
                    }

                    // Don't insert degenerate lines
                    if ((A.x !== B.x) || (A.y !== B.y)) {
                        pathSet.insert(new Path(A, B));
                    }

                    // Continue the search from the end value y+1
                } 

                // Some very special patterns for the short lines needed on
                // circuit diagrams. Only invoke these if not also on a curve
                //      _  _    
                //    -'    '-   -'
                else if ((grid(x, y) === "'") &&
                    (((grid(x - 1, y) === '-') && (grid(x + 1, y - 1) === '_') &&
                     ! isSolidVLineOrJumpOrPoint(grid(x - 1, y - 1))) ||
                     ((grid(x - 1, y - 1) === '_') && (grid(x + 1, y) === '-') &&
                     ! isSolidVLineOrJumpOrPoint(grid(x + 1, y - 1))))) {
                    pathSet.insert(new Path(Vec2(x, y - 0.5), Vec2(x, y)));
                }

                //    _.-  -._  
                else if ((grid(x, y) === '.') &&
                         (((grid(x - 1, y) === '_') && (grid(x + 1, y) === '-') && 
                           ! isSolidVLineOrJumpOrPoint(grid(x + 1, y + 1))) ||
                          ((grid(x - 1, y) === '-') && (grid(x + 1, y) === '_') &&
                           ! isSolidVLineOrJumpOrPoint(grid(x - 1, y + 1))))) {
                    pathSet.insert(new Path(Vec2(x, y), Vec2(x, y + 0.5)));
                }

                // For drawing resistors: -.╱
                else if ((grid(x, y) === '.') &&
                         (grid(x - 1, y) === '-') &&
                         (grid(x + 1, y) === '╱')) {
                    pathSet.insert(new Path(Vec2(x, y), Vec2(x + 0.5, y + 0.5)));
                }
                
                // For drawing resistors: ╱'-
                else if ((grid(x, y) === "'") &&
                         (grid(x + 1, y) === '-') &&
                         (grid(x - 1, y) === '╱')) {
                    pathSet.insert(new Path(Vec2(x, y), Vec2(x - 0.5, y - 0.5)));
                }

            } // y
        } // x
        
        // Find all solid horizontal lines 
        for (var y = 0; y < grid.height; ++y) {
            for (var x = 0; x < grid.width; ++x) {
                if (grid.isSolidHLineAt(x, y)) {
                    // Begins a line...find the end
                    var A = Vec2(x, y);
                    do { grid.setUsed(x, y); ++x; } while (grid.isSolidHLineAt(x, y));
                    var B = Vec2(x - 1, y);

                    // Detect adjacent box-drawing characters and lengthen the edge
                    if (grid(B.x + 1, B.y) === '┫') { B.x += 0.5; }
                    if (grid(A.x - 1, A.y) === '┣') { A.x -= 0.5; }

                    // Detect curves and shorten the edge
                    if ( ! isVertex(grid(A.x - 1, A.y)) && 
                         ((isTopVertex(grid(A)) && isSolidVLineOrJumpOrPoint(grid(A.x - 1, A.y + 1))) ||
                          (isBottomVertex(grid(A)) && isSolidVLineOrJumpOrPoint(grid(A.x - 1, A.y - 1))))) {
                        ++A.x;
                    }

                    if ( ! isVertex(grid(B.x + 1, B.y)) && 
                         ((isTopVertex(grid(B)) && isSolidVLineOrJumpOrPoint(grid(B.x + 1, B.y + 1))) ||
                          (isBottomVertex(grid(B)) && isSolidVLineOrJumpOrPoint(grid(B.x + 1, B.y - 1))))) {
                        --B.x;
                    }

                    // Only insert non-degenerate lines
                    if ((A.x !== B.x) || (A.y !== B.y)) {
                        pathSet.insert(new Path(A, B));
                    }
                    
                    // Continue the search from the end x+1
                }
            }
        } // y

        // Find all solid left-to-right downward diagonal lines (BACK DIAGONAL)
        for (var i = -grid.height; i < grid.width; ++i) {
            for (var x = i, y = 0; y < grid.height; ++y, ++x) {
                if (grid.isSolidBLineAt(x, y)) {
                    // Begins a line...find the end
                    var A = Vec2(x, y);
                    do { ++x; ++y; } while (grid.isSolidBLineAt(x, y));
                    var B = Vec2(x - 1, y - 1);

                    // Ensure that the entire line wasn't just vertices
                    if (lineContains(A, B, '\\')) {
                        for (var j = A.x; j <= B.x; ++j) {
                            grid.setUsed(j, A.y + (j - A.x)); 
                        }

                        var top = grid(A);
                        var up = grid(A.x, A.y - 1);
                        var uplt = grid(A.x - 1, A.y - 1);
                        if ((up === '/') || (uplt === '_') || (up === '_') || 
                            (! isVertex(top)  && 
                             (isSolidHLine(uplt) || isSolidVLine(uplt)))) {
                            // Continue half a cell more to connect for:
                            //  ___   ___
                            //  \        \    /      ----     |
                            //   \        \   \        ^      |^
                            A.x -= 0.5; A.y -= 0.5;
                        } else if (isPoint(uplt)) {
                            // Continue 1/4 cell more to connect for:
                            //
                            //  o
                            //   ^
                            //    \
                            A.x -= 0.25; A.y -= 0.25;
                        }
                        
                        var bottom = grid(B);
                        var dnrt = grid(B.x + 1, B.y + 1);
                        if ((grid(B.x, B.y + 1) === '/') || (grid(B.x + 1, B.y) === '_') || 
                            (grid(B.x - 1, B.y) === '_') || 
                            (! isVertex(grid(B)) &&
                             (isSolidHLine(dnrt) || isSolidVLine(dnrt)))) {
                            // Continue half a cell more to connect for:
                            //                       \      \ |
                            //  \       \     \       v      v|
                            //   \__   __\    /      ----     |
                            
                            B.x += 0.5; B.y += 0.5;
                        } else if (isPoint(dnrt)) {
                            // Continue 1/4 cell more to connect for:
                            //
                            //    \
                            //     v
                            //      o
                            
                            B.x += 0.25; B.y += 0.25;
                        }
                        
                        pathSet.insert(new Path(A, B));
                        // Continue the search from the end x+1,y+1
                    } // lineContains
                }
            }
        } // i


        // Find all solid left-to-right upward diagonal lines (DIAGONAL)
        for (var i = -grid.height; i < grid.width; ++i) {
            for (var x = i, y = grid.height - 1; y >= 0; --y, ++x) {
                if (grid.isSolidDLineAt(x, y)) {
                    // Begins a line...find the end
                    var A = Vec2(x, y);
                    do { ++x; --y; } while (grid.isSolidDLineAt(x, y));
                    var B = Vec2(x - 1, y + 1);

                    if (lineContains(A, B, '/')) {
                        // This is definitely a line. Commit the characters on it
                        for (var j = A.x; j <= B.x; ++j) {
                            grid.setUsed(j, A.y - (j - A.x)); 
                        }

                        var up = grid(B.x, B.y - 1);
                        var uprt = grid(B.x + 1, B.y - 1);
                        var bottom = grid(B);
                        if ((up === '\\') || (up === '_') || (uprt === '_') || 
                            (! isVertex(grid(B)) &&
                             (isSolidHLine(uprt) || isSolidVLine(uprt)))) {
                            
                            // Continue half a cell more to connect at:
                            //     __   __  ---     |
                            //    /      /   ^     ^|
                            //   /      /   /     / |
                            
                            B.x += 0.5; B.y -= 0.5;
                        } else if (isPoint(uprt)) {
                            
                            // Continue 1/4 cell more to connect at:
                            //
                            //       o
                            //      ^
                            //     /
                            
                            B.x += 0.25; B.y -= 0.25;
                        }
                        
                        var dnlt = grid(A.x - 1, A.y + 1);
                        var top = grid(A);
                        if ((grid(A.x, A.y + 1) === '\\') || (grid(A.x - 1, A.y) === '_') || (grid(A.x + 1, A.y) === '_') ||
                            (! isVertex(grid(A)) &&
                             (isSolidHLine(dnlt) || isSolidVLine(dnlt)))) {

                            // Continue half a cell more to connect at:
                            //               /     \ |
                            //    /  /      v       v|
                            // __/  /__   ----       | 
                            
                            A.x -= 0.5; A.y += 0.5;
                        } else if (isPoint(dnlt)) {
                            
                            // Continue 1/4 cell more to connect at:
                            //
                            //       /
                            //      v
                            //     o
                            
                            A.x -= 0.25; A.y += 0.25;
                        }
                        pathSet.insert(new Path(A, B));

                        // Continue the search from the end x+1,y-1
                    } // lineContains
                }
            }
        } // y
        
        
        // Now look for curved corners. The syntax constraints require
        // that these can always be identified by looking at three
        // horizontally-adjacent characters.
        for (var y = 0; y < grid.height; ++y) {
            for (var x = 0; x < grid.width; ++x) {
                var c = grid(x, y);

                // Note that because of undirected vertices, the
                // following cases are not exclusive
                if (isTopVertex(c)) {
                    // -.
                    //   |
                    if (isSolidHLine(grid(x - 1, y)) && isSolidVLine(grid(x + 1, y + 1))) {
                        grid.setUsed(x - 1, y); grid.setUsed(x, y); grid.setUsed(x + 1, y + 1);
                        pathSet.insert(new Path(Vec2(x - 1, y), Vec2(x + 1, y + 1), 
                                                Vec2(x + 1.1, y), Vec2(x + 1, y + 1)));
                    }

                    //  .-
                    // |
                    if (isSolidHLine(grid(x + 1, y)) && isSolidVLine(grid(x - 1, y + 1))) {
                        grid.setUsed(x - 1, y + 1); grid.setUsed(x, y); grid.setUsed(x + 1, y);
                        pathSet.insert(new Path(Vec2(x + 1, y), Vec2(x - 1, y + 1), 
                                                Vec2(x - 1.1, y), Vec2(x - 1, y + 1)));
                    }
                }
                
                // Special case patterns:
                //   .  .   .  .    
                //  (  o     )  o
                //   '  .   '  '
                if (((c === ')') || isPoint(c)) && (grid(x - 1, y - 1) === '.') && (grid(x - 1, y + 1) === "\'")) {
                    grid.setUsed(x, y); grid.setUsed(x - 1, y - 1); grid.setUsed(x - 1, y + 1);
                    pathSet.insert(new Path(Vec2(x - 2, y - 1), Vec2(x - 2, y + 1), 
                                            Vec2(x + 0.6, y - 1), Vec2(x + 0.6, y + 1)));
                }

                if (((c === '(') || isPoint(c)) && (grid(x + 1, y - 1) === '.') && (grid(x + 1, y + 1) === "\'")) {
                    grid.setUsed(x, y); grid.setUsed(x + 1, y - 1); grid.setUsed(x + 1, y + 1);
                    pathSet.insert(new Path(Vec2(x + 2, y - 1), Vec2(x + 2, y + 1), 
                                            Vec2(x - 0.6, y - 1), Vec2(x - 0.6, y + 1)));
                }

                if (isBottomVertex(c)) {
                    //   |
                    // -' 
                    if (isSolidHLine(grid(x - 1, y)) && isSolidVLine(grid(x + 1, y - 1))) {
                        grid.setUsed(x - 1, y); grid.setUsed(x, y); grid.setUsed(x + 1, y - 1);
                        pathSet.insert(new Path(Vec2(x - 1, y), Vec2(x + 1, y - 1), 
                                                Vec2(x + 1.1, y), Vec2(x + 1, y - 1)));
                    }

                    // | 
                    //  '-
                    if (isSolidHLine(grid(x + 1, y)) && isSolidVLine(grid(x - 1, y - 1))) {
                        grid.setUsed(x - 1, y - 1); grid.setUsed(x, y); grid.setUsed(x + 1, y);
                        pathSet.insert(new Path(Vec2(x + 1, y), Vec2(x - 1, y - 1),
                                                Vec2(x - 1.1, y), Vec2(x - 1, y - 1)));
                    }
                }
               
            } // for x
        } // for y

        // Find low horizontal lines marked with underscores. These
        // are so simple compared to the other cases that we process
        // them directly here without a helper function. Process these
        // from top to bottom and left to right so that we can read
        // them in a single sweep.
        // 
        // Exclude the special case of double underscores going right
        // into an ASCII character, which could be a source code
        // identifier such as __FILE__ embedded in the diagram.
        for (var y = 0; y < grid.height; ++y) {
            for (var x = 0; x < grid.width - 2; ++x) {
                var lt = grid(x - 1, y);

                if ((grid(x, y) === '_') && (grid(x + 1, y) === '_') && 
                    (! isASCIILetter(grid(x + 2, y)) || (lt === '_')) && 
                    (! isASCIILetter(lt) || (grid(x + 2, y) === '_'))) {

                    var ltlt = grid(x - 2, y);
                    var A = Vec2(x - 0.5, y + 0.5);

                    if ((lt === '|') || (grid(x - 1, y + 1) === '|') ||
                        (lt === '.') || (grid(x - 1, y + 1) === "'")) {
                        // Extend to meet adjacent vertical
                        A.x -= 0.5;

                        // Very special case of overrunning into the side of a curve,
                        // needed for logic gate diagrams
                        if ((lt === '.') && 
                            ((ltlt === '-') ||
                             (ltlt === '.')) &&
                            (grid(x - 2, y + 1) === '(')) {
                            A.x -= 0.5;
                        }
                    } else if (lt === '/') {
                        A.x -= 1.0;
                    }

                    // Detect overrun of a tight double curve
                    if ((lt === '(') && (ltlt === '(') &&
                        (grid(x, y + 1) === "'") && (grid(x, y - 1) === '.')) {
                        A.x += 0.5;
                    }
                    lt = ltlt = undefined;

                    do { grid.setUsed(x, y); ++x; } while (grid(x, y) === '_');

                    var B = Vec2(x - 0.5, y + 0.5);
                    var c = grid(x, y);
                    var rt = grid(x + 1, y);
                    var dn = grid(x, y + 1);

                    if ((c === '|') || (dn === '|') || (c === '.') || (dn === "'")) {
                        // Extend to meet adjacent vertical
                        B.x += 0.5;

                        // Very special case of overrunning into the side of a curve,
                        // needed for logic gate diagrams
                        if ((c === '.') && 
                            ((rt === '-') || (rt === '.')) &&
                            (grid(x + 1, y + 1) === ')')) {
                            B.x += 0.5;
                        }
                    } else if ((c === '\\')) {
                        B.x += 1.0;
                    }

                    // Detect overrun of a tight double curve
                    if ((c === ')') && (rt === ')') && (grid(x - 1, y + 1) === "'") && (grid(x - 1, y - 1) === '.')) {
                        B.x += -0.5;
                    }

                    pathSet.insert(new Path(A, B));
                }
            } // for x
        } // for y
    } // findPaths


    function findDecorations(grid, pathSet, decorationSet) {
        function isEmptyOrVertex(c) { return (c === ' ') || /[^a-zA-Z0-9]|[ov]/.test(c); }
        function isLetter(c) { var x = c.toUpperCase().charCodeAt(0); return (x > 64) && (x < 91); }
                    
        /** Is the point in the center of these values on a line? Allow points that are vertically
            adjacent but not horizontally--they wouldn't fit anyway, and might be text. */
        function onLine(up, dn, lt, rt) {
            return ((isEmptyOrVertex(dn) || isPoint(dn)) &&
                    (isEmptyOrVertex(up) || isPoint(up)) &&
                    isEmptyOrVertex(rt) &&
                    isEmptyOrVertex(lt));
        }

        for (var x = 0; x < grid.width; ++x) {
            for (var j = 0; j < grid.height; ++j) {
                var c = grid(x, j);
                var y = j;

                if (isJump(c)) {

                    // Ensure that this is really a jump and not a stray character
                    if (pathSet.downEndsAt(x, y - 0.5) &&
                        pathSet.upEndsAt(x, y + 0.5)) {
                        decorationSet.insert(x, y, c);
                        grid.setUsed(x, y);
                    }

                } else if (isPoint(c)) {
                    var up = grid(x, y - 1);
                    var dn = grid(x, y + 1);
                    var lt = grid(x - 1, y);
                    var rt = grid(x + 1, y);
                    var llt = grid(x - 2, y);
                    var rrt = grid(x + 2, y);

                    if (pathSet.rightEndsAt(x - 1, y) ||   // Must be at the end of a line...
                        pathSet.leftEndsAt(x + 1, y) ||    // or completely isolated NSEW
                        pathSet.downEndsAt(x, y - 1) ||
                        pathSet.upEndsAt(x, y + 1) ||

                        pathSet.upEndsAt(x, y) ||    // For points on vertical lines 
                        pathSet.downEndsAt(x, y) ||  // that are surrounded by other characters
                        
                        onLine(up, dn, lt, rt)) {

                        decorationSet.insert(x, y, c);
                        grid.setUsed(x, y);
                    }
                } else if (isGray(c)) {
                    decorationSet.insert(x, y, c);
                    grid.setUsed(x, y);
                } else if (isTri(c)) {
                    decorationSet.insert(x, y, c);
                    grid.setUsed(x, y);
                } else { // Arrow heads

                    // If we find one, ensure that it is really an
                    // arrow head and not a stray character by looking
                    // for a connecting line.
                    var dx = 0;
                    if ((c === '>') && (pathSet.rightEndsAt(x, y) || 
                                        pathSet.horizontalPassesThrough(x, y))) {
                        if (isPoint(grid(x + 1, y))) {
                            // Back up if connecting to a point so as to not
                            // overlap it
                            dx = -0.5;
                        }
                        decorationSet.insert(x + dx, y, '>', 0);
                        grid.setUsed(x, y);
                    } else if ((c === '<') && (pathSet.leftEndsAt(x, y) ||
                                               pathSet.horizontalPassesThrough(x, y))) {
                        if (isPoint(grid(x - 1, y))) {
                            // Back up if connecting to a point so as to not
                            // overlap it
                            dx = 0.5;
                        }
                        decorationSet.insert(x + dx, y, '>', 180); 
                        grid.setUsed(x, y);
                    } else if (c === '^') {
                        // Because of the aspect ratio, we need to look
                        // in two slots for the end of the previous line
                        if (pathSet.upEndsAt(x, y - 0.5)) {
                            decorationSet.insert(x, y - 0.5, '>', 270); 
                            grid.setUsed(x, y);
                        } else if (pathSet.upEndsAt(x, y)) {
                            decorationSet.insert(x, y, '>', 270);
                            grid.setUsed(x, y);
                        } else if (pathSet.diagonalUpEndsAt(x + 0.5, y - 0.5)) {
                            decorationSet.insert(x + 0.5, y - 0.5, '>', 270 + DIAGONAL_ANGLE);
                            grid.setUsed(x, y);
                        } else if (pathSet.diagonalUpEndsAt(x + 0.25, y - 0.25)) {
                            decorationSet.insert(x + 0.25, y - 0.25, '>', 270 + DIAGONAL_ANGLE);
                            grid.setUsed(x, y);
                        } else if (pathSet.diagonalUpEndsAt(x, y)) {
                            decorationSet.insert(x, y, '>', 270 + DIAGONAL_ANGLE);
                            grid.setUsed(x, y);
                        } else if (pathSet.backDiagonalUpEndsAt(x, y)) {
                            decorationSet.insert(x, y, c, 270 - DIAGONAL_ANGLE);
                            grid.setUsed(x, y);
                        } else if (pathSet.backDiagonalUpEndsAt(x - 0.5, y - 0.5)) {
                            decorationSet.insert(x - 0.5, y - 0.5, c, 270 - DIAGONAL_ANGLE);
                            grid.setUsed(x, y);
                        } else if (pathSet.backDiagonalUpEndsAt(x - 0.25, y - 0.25)) {
                            decorationSet.insert(x - 0.25, y - 0.25, c, 270 - DIAGONAL_ANGLE);
                            grid.setUsed(x, y);
                        } else if (pathSet.verticalPassesThrough(x, y)) {
                            // Only try this if all others failed
                            decorationSet.insert(x, y - 0.5, '>', 270); 
                            grid.setUsed(x, y);
                        }
                    } else if (c === 'v') {
                        if (pathSet.downEndsAt(x, y + 0.5)) {
                            decorationSet.insert(x, y + 0.5, '>', 90); 
                            grid.setUsed(x, y);
                        } else if (pathSet.downEndsAt(x, y)) {
                            decorationSet.insert(x, y, '>', 90);
                            grid.setUsed(x, y);
                        } else if (pathSet.diagonalDownEndsAt(x, y)) {
                            decorationSet.insert(x, y, '>', 90 + DIAGONAL_ANGLE);
                            grid.setUsed(x, y);
                        } else if (pathSet.diagonalDownEndsAt(x - 0.5, y + 0.5)) {
                            decorationSet.insert(x - 0.5, y + 0.5, '>', 90 + DIAGONAL_ANGLE);
                            grid.setUsed(x, y);
                        } else if (pathSet.diagonalDownEndsAt(x - 0.25, y + 0.25)) {
                            decorationSet.insert(x - 0.25, y + 0.25, '>', 90 + DIAGONAL_ANGLE);
                            grid.setUsed(x, y);
                        } else if (pathSet.backDiagonalDownEndsAt(x, y)) {
                            decorationSet.insert(x, y, '>', 90 - DIAGONAL_ANGLE);
                            grid.setUsed(x, y);
                        } else if (pathSet.backDiagonalDownEndsAt(x + 0.5, y + 0.5)) {
                            decorationSet.insert(x + 0.5, y + 0.5, '>', 90 - DIAGONAL_ANGLE);
                            grid.setUsed(x, y);
                        } else if (pathSet.backDiagonalDownEndsAt(x + 0.25, y + 0.25)) {
                            decorationSet.insert(x + 0.25, y + 0.25, '>', 90 - DIAGONAL_ANGLE);
                            grid.setUsed(x, y);
                        } else if (pathSet.verticalPassesThrough(x, y)) {
                            // Only try this if all others failed
                            decorationSet.insert(x, y + 0.5, '>', 90); 
                            grid.setUsed(x, y);
                        }
                    } // arrow heads
                } // decoration type
            } // y
        } // x
    } // findArrowHeads

    // Cases where we want to redraw at graphical unicode character
    // to adjust its weight or shape for a conventional application
    // in constructing a diagram.
    function findReplacementCharacters(grid, pathSet) {
        for (var x = 0; x < grid.width; ++x) {
            for (var y = 0; y < grid.height; ++y) {
                if (grid.isUsed(x, y)) continue;
                var c = grid(x, y);
                switch (c) {
                case '╱':
                    pathSet.insert(new Path(Vec2(x - 0.5, y + 0.5), Vec2(x + 0.5, y - 0.5)));
                    grid.setUsed(x, y);
                    break;
                case '╲':
                    pathSet.insert(new Path(Vec2(x - 0.5, y - 0.5), Vec2(x + 0.5, y + 0.5)));
                    grid.setUsed(x, y);
                    break;
                }
            }
        }
    } // findReplacementCharacters

    var grid = makeGrid(diagramString);

    var pathSet = new PathSet();
    var decorationSet = new DecorationSet();

    findPaths(grid, pathSet);
    findReplacementCharacters(grid, pathSet);
    findDecorations(grid, pathSet, decorationSet);

    var svg = '<svg class="diagram" xmlns="http://www.w3.org/2000/svg" version="1.1" height="' + 
        ((grid.height + 1) * SCALE * ASPECT) + '" width="' + ((grid.width + 1) * SCALE) + '"';

    if (alignmentHint === 'floatleft') {
        svg += ' style="float:left;margin:15px 30px 15px 0;"';
    } else if (alignmentHint === 'floatright') {
        svg += ' style="float:right;margin:15px 0 15px 30px;"';
    } else if (alignmentHint === 'center') {
        svg += ' style="margin:0 auto 0 auto;"';
    }

    svg += '><g transform="translate(' + Vec2(1, 1) + ')">\n';

    if (DEBUG_SHOW_GRID) {
        svg += '<g style="opacity:0.1">\n';
        for (var x = 0; x < grid.width; ++x) {
            for (var y = 0; y < grid.height; ++y) {
                svg += '<rect x="' + ((x - 0.5) * SCALE + 1) + '" + y="' + ((y - 0.5) * SCALE * ASPECT + 2) + '" width="' + (SCALE - 2) + '" height="' + (SCALE * ASPECT - 2) + '" style="fill:';
                if (grid.isUsed(x, y)) {
                    svg += 'red;';
                } else if (grid(x, y) === ' ') {
                    svg += 'gray;opacity:0.05';
                } else {
                    svg += 'blue;';
                }
                svg += '"/>\n';
            }
        }
        svg += '</g>\n';
    }
    
    svg += pathSet.toSVG();
    svg += decorationSet.toSVG();

    // Convert any remaining characters
    if (! DEBUG_HIDE_PASSTHROUGH) {
        svg += '<g transform="translate(0,0)">';
        for (var y = 0; y < grid.height; ++y) {
            for (var x = 0; x < grid.width; ++x) {
                var c = grid(x, y);
                if (/[\u2B22\u2B21]/.test(c)) {
                    // Enlarge hexagons so that they fill a grid
                    svg += '<text text-anchor="middle" x="' + (x * SCALE) + '" y="' + (4 + y * SCALE * ASPECT) + '" style="font-size:20.5px">' + escapeHTMLEntities(c) +  '</text>';
                } else if ((c !== ' ') && ! grid.isUsed(x, y)) {
                    svg += '<text text-anchor="middle" x="' + (x * SCALE) + '" y="' + (4 + y * SCALE * ASPECT) + '">' + escapeHTMLEntities(c) +  '</text>';
                } // if
            } // y
        } // x
        svg += '</g>';
    }

    if (DEBUG_SHOW_SOURCE) {
        // Offset the characters a little for easier viewing
        svg += '<g transform="translate(2,2)">\n';
        for (var x = 0; x < grid.width; ++x) {
            for (var y = 0; y < grid.height; ++y) {
                var c = grid(x, y);
                if (c !== ' ') {
                    svg += '<text text-anchor="middle" x="' + (x * SCALE) + '" y="' + (4 + y * SCALE * ASPECT) + '" style="fill:#F00;font-family:Menlo,monospace;font-size:12px;text-align:center">' + escapeHTMLEntities(c) +  '</text>';
                } // if
            } // y
        } // x
        svg += '</g>';
    } // if

    svg += '</g></svg>';

    svg = svg.rp(new RegExp(HIDE_O, 'g'), 'o');


    return svg;
}


////////////////////////// Processing for INSERT HERE
//
// Insert command processing modifies the entire document and potentially
// delays further processing, so it is handled specially and runs the main
// markdeep processing as a callback
//
// node: the node being processed for markdeep. This is document.body
// in markdeep mode, but may be another node in html or script mode.
//
// processMarkdeepCallback: function to run when insert is complete
// to evaluate markdeep 
function processInsertCommands(nodeArray, sourceArray, insertDoneCallback) {
    var myURLParse = /([^?]+)(?:\?id=(inc\d+)&p=([^&]+))?/.exec(location.href);

    var myBase = removeFilename(myURLParse[1]);
    var myID = myURLParse[2];
    var parentBase = removeFilename(myURLParse[3] && decodeURIComponent(myURLParse[3]));
    var childFrameStyle = 'display:none';
    var includeCounter = 0;
    var IAmAChild = myID; // !== undefined
    var IAmAParent = false;
    var numIncludeChildrenLeft = 0;
    
    // Helper function for use by children
    function sendContentsToMyParent() {
        var body = document.body.innerHTML;

        // Fix relative URLs within the body
        var baseref;
        if (document.baseURI !== undefined) {
            baseref = document.baseURI.rp(/\/[^/]+$/, '/');
        } else {
            // IE11
            // Return location from BASE tag.
            //   https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
            var base = document.getElementsByTagName('base');
            baseref = (base.length > 0) ? base[0].href : document.URL;
        }

        var serverref;
        if (/^file:\/\//.test(baseref)) {
            serverref = 'file://';
        } else {
            serverref = baseref.match(/[^:/]{3,6}:\/\/[^/]*\//)[0];
        }

        // Cases where URLs appear:
        //
        // ![](...)
        // [](...)
        // [link]: ...
        // <img src="...">
        // <script src="...">
        // <a href="...">
        // <link href="...">
        //
        // A url is relative if it does not begin with '^[a-z]{3,6}://|^#'

        // Protect code fences
        // TODO

        function makeAbsoluteURL(url) {
            return (/^[a-z]{3,6}:\/\//.test(url)) ?
                url :
                (url[0] === '/') ?
                // Make relative to server
                serverref + url.ss(1) :
                // Make relative to source document
                baseref + url;
        }

        // Unquoted images and links
        body = body.rp(/\]\([ \t]*([^#")][^ "\)]+)([ \t\)])/g, function (match, url, suffix) {
            return '](' + makeAbsoluteURL(url) + suffix;
        });
        
        // Quoted images and links
        body = body.rp(/\]\([ \t]*"([^#"][^"]+)"([ \t\)])/g, function (match, url, suffix) {
            return ']("' + makeAbsoluteURL(url) + '"' + suffix;
        });

        // Raw HTML
        body = body.rp(/(src|href)=(["'])([^#>][^"'\n>]+)\2/g, function (match, type, quot, url) {
            return type + '=' + quot + makeAbsoluteURL(url) + quot;
        });

        // Reference links
        body = body.rp(/(\n\[[^\]>\n \t]:[ \t]*)([^# \t][^ \t]+)"/g, function (match, prefix, url) {
            return prefix + makeAbsoluteURL(url);
        });

        // Unprotect code fences
        // TODO
        
        // console.log(location.pathname + " sent message to parent");
        // Send the document contents after the childFrame replaced itself
        // (not the source variable captured when this function was defined!)
        parent.postMessage([myID, '=', body].join(''), '*');
    }

    // Strip the filename from the url, if there is one (and it is a string)
    function removeFilename(url) {
        return url && url.ss(0, url.lastIndexOf('/') + 1);
    }

    // Called when this entire document is ready for either markdeep
    // processing or sending to its parent for markdeep processing.
    //
    // IAmAChild: Truish if this document is a child
    //
    // sourceArray: If known, source is the code for the nodes. If it was modified, it is not provided
    function documentReady(IAmAChild, nodeArray, sourceArray) {
        if (IAmAChild) {
            // I'm a child and not waiting for my own children, so trigger the send now. My parent will
            // do the processing.
            
            // console.log("Leaf node " + location.pathname + " sending to parent");
            sendContentsToMyParent();
        } else {
            // No includes. Run markdeep processing after the rest of this file parses
            
            // console.log("non-parent, non-child Parent scheduling markdeepProcessor");
            setTimeout(function () { insertDoneCallback(nodeArray, sourceArray) }, 1);
        }
    }
     
     function messageCallback(event) {
         // Parse the message. Ensure that it is for the Markdeep/include.js system.
         var childID = false;
         var childBody = event.data.substring && event.data.replace(/^(inc\d+)=/, function (match, a) {
             childID = a;
             return '';
         });
         
         if (childID) {
             // This message event was for the Markdeep/include.js system
             
             //console.log(location.href + ' received a message from child ' + childID);

             // Replace the corresponding node's contents
             var childFrame = document.getElementById(childID);
             childFrame.outerHTML = '\n' + childBody + '\n';

             --numIncludeChildrenLeft;

             //console.log(window.location.pathname, 'numIncludeChildrenLeft = ' + numIncludeChildrenLeft);
             
             if (numIncludeChildrenLeft <= 0) {
                 // This was the last child
                 documentReady(IAmAChild, nodeArray);
             }
         }
     };

     var isFirefox = navigator.userAgent.indexOf('Firefox') !== -1 && navigator.userAgent.indexOf('Seamonkey') === -1;
    
     // Find all insert or embed statements in all nodes and replace them
     for (var i = 0; i < sourceArray.length; ++i) {
         sourceArray[i] = sourceArray[i].rp(/(?:^|\s)\((insert|embed)[ \t]+(\S+\.\S*)[ \t]+(height=[a-zA-Z0-9.]+[ \t]+)?here\)\s/g, function(match, type, src, params) {
             var childID = 'inc' + (++includeCounter);
             var isHTML = src.toLowerCase().rp(/\?.*$/,'').endsWith('.html');
             if (type === 'embed' || ! isHTML) {
                 // This is not embedding another Markdeep file. Instead it is embedding
                 // some other kind of document.
                 var tag = 'iframe', url='src';
                 var style = params ? ' style="' + params.rp(/=/g, ':') + '"' : '';
                 
                 if (isFirefox && ! isHTML) {
                     // Firefox doesn't handle embedding other non-html documents in iframes
                     // correctly (it tries to download them!), so we switch to an object
                     // tag--which seems to work identically to the embed tag on this browser.                     
                     tag = 'object'; url = 'data';

                     // Firefox can be confused on a server (but not
                     // locally) by misconfigured MIME types and show
                     // nothing.  But if we know that we're on a
                     // server, we can go ahead and make an
                     // XMLHttpRequest() for the underlying document
                     // directly. Replace the insert in this case.
                     if (location.protocol.startsWith('http')) {
                         var req = new XMLHttpRequest();
                         (function (childID, style) {
                             req.addEventListener("load", function () {
                                 document.getElementById(childID).outerHTML =
                                     entag('iframe', '', 'class="textinsert" srcdoc="<pre>' + this.responseText.replace(/"/g, '&quot;') + '</pre>"' + style);
                             });
                             req.overrideMimeType("text/plain; charset=x-user-defined");
                             req.open("GET", src); 
                             req.send();
                         })(childID, style);
                     }
                 }

                 return entag(tag, '', 'class="textinsert" id="' + childID + '" ' + url + '="' + src + '"' + style);
             }
             
             if (numIncludeChildrenLeft === 0) {
                 // This is the first child observed. Prepare to receive messages from the
                 // embedded children.
                 IAmAParent = true;
                 addEventListener("message", messageCallback);
             }
             
             ++numIncludeChildrenLeft;
             //console.log(window.location.pathname, 'numIncludeChildrenLeft = ' + numIncludeChildrenLeft);
             
             // Replace this tag with a frame that loads the document.  Once loaded, it will
             // send a message with its contents for use as a replacement.
             return '<iframe src="' + src + '?id=' + childID + '&p=' + encodeURIComponent(myBase) + 
                 '" id="' + childID + '" style="' + childFrameStyle + '" content="text/html;charset=UTF-8"></iframe>';
         });
     }

     // console.log('after insert: ' + source);

     // Process all nodes
     if (IAmAParent) {
         // I'm waiting on children, so don't run the full processor
         // yet, but do substitute the iframe code so that it can
         // launch. I may be a child as well...this will be determined
         // when numIncludeChildren hits zero.

         for (var i = 0; i < sourceArray.length; ++i) {
             nodeArray[i].innerHTML = sourceArray[i];
         }
     } else {
         // The source was not modified
         documentReady(IAmAChild, nodeArray, sourceArray);
     }
} // function processInsertCommands()

 
/* xcode.min.js modified */
var HIGHLIGHT_STYLESHEET =
        "<style>.hljs{display:block;overflow-x:auto;padding:0.5em;background:#fff;color:#000;-webkit-text-size-adjust:none}"+
        ".hljs-comment{color:#006a00}" +
        ".hljs-keyword{color:#02E}" +
        ".hljs-literal,.nginx .hljs-title{color:#aa0d91}" + 
        ".method,.hljs-list .hljs-title,.hljs-tag .hljs-title,.setting .hljs-value,.hljs-winutils,.tex .hljs-command,.http .hljs-title,.hljs-request,.hljs-status,.hljs-name{color:#008}" + 
        ".hljs-envvar,.tex .hljs-special{color:#660}" + 
        ".hljs-string{color:#c41a16}" +
        ".hljs-tag .hljs-value,.hljs-cdata,.hljs-filter .hljs-argument,.hljs-attr_selector,.apache .hljs-cbracket,.hljs-date,.hljs-regexp{color:#080}" + 
        ".hljs-sub .hljs-identifier,.hljs-pi,.hljs-tag,.hljs-tag .hljs-keyword,.hljs-decorator,.ini .hljs-title,.hljs-shebang,.hljs-prompt,.hljs-hexcolor,.hljs-rule .hljs-value,.hljs-symbol,.hljs-symbol .hljs-string,.hljs-number,.css .hljs-function,.hljs-function .hljs-title,.coffeescript .hljs-attribute{color:#A0C}" +
        ".hljs-function .hljs-title{font-weight:bold;color:#000}" + 
        ".hljs-class .hljs-title,.smalltalk .hljs-class,.hljs-type,.hljs-typename,.hljs-tag .hljs-attribute,.hljs-doctype,.hljs-class .hljs-id,.hljs-built_in,.setting,.hljs-params,.clojure .hljs-attribute{color:#5c2699}" +
        ".hljs-variable{color:#3f6e74}" +
        ".css .hljs-tag,.hljs-rule .hljs-property,.hljs-pseudo,.hljs-subst{color:#000}" + 
        ".css .hljs-class,.css .hljs-id{color:#9b703f}" +
        ".hljs-value .hljs-important{color:#ff7700;font-weight:bold}" +
        ".hljs-rule .hljs-keyword{color:#c5af75}" +
        ".hljs-annotation,.apache .hljs-sqbracket,.nginx .hljs-built_in{color:#9b859d}" +
        ".hljs-preprocessor,.hljs-preprocessor *,.hljs-pragma{color:#643820}" +
        ".tex .hljs-formula{background-color:#eee;font-style:italic}" +
        ".diff .hljs-header,.hljs-chunk{color:#808080;font-weight:bold}" +
        ".diff .hljs-change{background-color:#bccff9}" +
        ".hljs-addition{background-color:#baeeba}" +
        ".hljs-deletion{background-color:#ffc8bd}" +
        ".hljs-comment .hljs-doctag{font-weight:bold}" +
        ".method .hljs-id{color:#000}</style>";

function isMarkdeepScriptName(str) { return str.search(/markdeep\S*?\.js$/i) !== -1; }
function toArray(list) { return Array.prototype.slice.call(list); }

// Intentionally uninitialized global variable used to detect
// recursive invocations
if (! window.alreadyProcessedMarkdeep) {
    window.alreadyProcessedMarkdeep = true;

    // Detect the noformat argument to the URL
    var noformat = (window.location.href.search(/\?.*noformat.*/i) !== -1);

    // Export relevant methods
    window.markdeep = Object.freeze({ 
        format:               markdeepToHTML,
        formatDiagram:        diagramToSVG,
        stylesheet:           function() {
            return STYLESHEET + sectionNumberingStylesheet() + HIGHLIGHT_STYLESHEET;
        }
    });

    // Not needed: jax: ["input/TeX", "output/SVG"], 
    var MATHJAX_CONFIG ='<script type="text/x-mathjax-config">MathJax.Hub.Config({ TeX: { equationNumbers: {autoNumber: "AMS"} } });</script>' +
        '<span style="display:none">' +
        // Custom definitions (NC == \newcommand)
        '$$NC{\\n}{\\hat{n}}NC{\\thetai}{\\theta_\\mathrm{i}}NC{\\thetao}{\\theta_\\mathrm{o}}NC{\\d}[1]{\\mathrm{d}#1}NC{\\w}{\\hat{\\omega}}NC{\\wi}{\\w_\\mathrm{i}}NC{\\wo}{\\w_\\mathrm{o}}NC{\\wh}{\\w_\\mathrm{h}}NC{\\Li}{L_\\mathrm{i}}NC{\\Lo}{L_\\mathrm{o}}NC{\\Le}{L_\\mathrm{e}}NC{\\Lr}{L_\\mathrm{r}}NC{\\Lt}{L_\\mathrm{t}}NC{\\O}{\\mathrm{O}}NC{\\degrees}{{^{\\large\\circ}}}NC{\\T}{\\mathsf{T}}NC{\\mathset}[1]{\\mathbb{#1}}NC{\\Real}{\\mathset{R}}NC{\\Integer}{\\mathset{Z}}NC{\\Boolean}{\\mathset{B}}NC{\\Complex}{\\mathset{C}}NC{\\un}[1]{\\,\\mathrm{#1}}$$\n'.rp(/NC/g, '\\newcommand') +
        '</span>\n';

    // The following option forces better rendering on some browsers, but also makes it impossible to copy-paste text with
    // inline equations:
    //
    // 'config=TeX-MML-AM_SVG'
    var MATHJAX_URL = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.6/MathJax.js?config=TeX-AMS-MML_HTMLorMML';

    var loadMathJax = function() {
        // Dynamically load mathjax
        var script = document.createElement("script");
        script.type = "text/javascript";
        script.src = MATHJAX_URL;
        document.getElementsByTagName("head")[0].appendChild(script);
    }

    var needsMathJax= function(html) {
        // Need MathJax if $$ ... $$, \( ... \), or \begin{
        return option('detectMath') &&
            ((html.search(/(?:\$\$[\s\S]+\$\$)|(?:\\begin{)/m) !== -1) || 
             (html.search(/\\\(.*\\\)/) !== -1));
    }

    var mode = option('mode');
    switch (mode) {
    case 'script':
        // Nothing to do
        return;

    case 'html':
    case 'doxygen':
        // Process explicit diagram tags by themselves
        toArray(document.getElementsByClassName('diagram')).concat(toArray(document.getElementsByTagName('diagram'))).forEach(
            function (element) {
                var src = unescapeHTMLEntities(element.innerHTML);
                // Remove the first and last string (which probably
                // had the pre or diagram tag as part of them) if they are 
                // empty except for whitespace.
                src = src.rp(/(:?^[ \t]*\n)|(:?\n[ \t]*)$/g, '');

                if (mode === 'doxygen') {
                    // Undo Doxygen's &ndash and &mdash, which are impossible to 
                    // detect once the browser has parsed the document
                    src = src.rp(new RegExp('\u2013', 'g'), '--');
                    src = src.rp(new RegExp('\u2014', 'g'), '---');
                    
                    // Undo Doxygen's links within the diagram because they throw off spacing
                    src = src.rp(/<a class="el" .*>(.*)<\/a>/g, '$1');
                }
                element.outerHTML = '<center class="md">' + diagramToSVG(removeLeadingSpace(src), '') + '</center>';
            });

        // Collect all nodes that will receive Markdeep processing
        var markdeepNodeArray = toArray(document.getElementsByClassName('markdeep')).concat(toArray(document.getElementsByTagName('markdeep')));

        // Extract the source code of markeep nodes
        var sourceArray = markdeepNodeArray.map(function (node) {
            return removeLeadingSpace(unescapeHTMLEntities(node.innerHTML));
        });

        // Process insert commands and then trigger markdeep processing
        processInsertCommands(markdeepNodeArray, sourceArray, function (nodeArray, sourceArray) {
            // Update sourceArray if needed because the source code was mutated
            // by insert processing
            sourceArray = sourceArray || nodeArray.map(function (node) {
                return removeLeadingSpace(unescapeHTMLEntities(node.innerHTML));
            });
            
            // Process all nodes, replacing them as we progress
            var anyNeedsMathJax = false;
            for (var i = 0; i < markdeepNodeArray.length; ++i) {
                var oldNode = markdeepNodeArray[i];
                var newNode = document.createElement('div');
                var source = removeLeadingSpace(unescapeHTMLEntities(oldNode.innerHTML));
                var html = markdeepToHTML(source, true);
                anyNeedsMathJax = anyNeedsMathJax || needsMathJax(html);
                newNode.innerHTML = html;
                oldNode.parentNode.replaceChild(newNode, oldNode);
            }

            if (anyNeedsMathJax) { loadMathJax(); }

            // Include our stylesheet even if there are no MARKDEEP tags, but do not include the BODY_STYLESHEET.
            document.head.innerHTML = window.markdeep.stylesheet() + document.head.innerHTML + (anyNeedsMathJax ? MATHJAX_CONFIG : '');

            // Remove fallback nodes
            var fallbackNodes = document.getElementsByClassName('fallback');
            for (var i = 0; i < fallbackNodes.length; ++i) {
                fallbackNodes[i].remove();
            }

        });

        window.alreadyProcessedMarkdeep = true;

        return;
    }
    
    // The following is Morgan's massive hack for allowing browsers to
    // directly parse Markdown from what appears to be a text file, but is
    // actually an intentionally malformed HTML file.
    
    // In order to be able to show what source files look like, the
    // noformat argument may be supplied.
    
    if (! noformat) {
        // Remove any recursive references to this script so that we don't trigger the cost of
        // recursive *loading*. (The alreadyProcessedMarkdeep variable will prevent recursive
        // *execution*.) We allow other scripts to pass through.
        toArray(document.getElementsByTagName('script')).forEach(function(node) {
            if (isMarkdeepScriptName(node.src)) {
                node.parentNode.removeChild(node);
            }
        });
        
        // Add an event handler for scrolling
        var scrollThreshold = parseInt(option('scrollThreshold'));
        document.addEventListener('scroll', function () {
            var b = document.body, c = b.classList, s = 'scrolled';
            if (b.scrollTop > scrollThreshold) c.add(s); else c.remove(s);
        });
        
        // Hide the body while formatting
        if (document.body) {
            document.body.style.visibility = 'hidden';
        }
    }
      
    var source = nodeToMarkdeepSource(document.body);

    if (noformat) { 
        // Abort processing. 
        source = source.rp(/<!-- Markdeep:.+$/gm, '') + MARKDEEP_LINE;
    
        // Escape the <> (not ampersand) that we just added
        source = source.rp(/</g, '&lt;').rp(/>/g, '&gt;');

        // Replace the Markdeep line itself so that ?noformat examples have a valid line to copy
        document.body.innerHTML = entag('pre', source);

        var fallbackNodes = document.getElementsByClassName('fallback');
        for (var i = 0; i < fallbackNodes.length; ++i) {
            fallbackNodes[i].remove();
        }

        return;
    }

    // In the common case of no INSERT commands, source is the original source
    // passed to avoid reparsing.
    var markdeepProcessor = function (source) {
        // Recompute the source text from the current version of the document
        // if it was unmodified
        source = source || nodeToMarkdeepSource(document.body);
        var markdeepHTML = markdeepToHTML(source, false);

        // console.log(markdeepHTML); // Final processed source 

        /////////////////////////////////////////////////////////////
        // Add the section header event handlers

        var onContextMenu = function (event) {
            var menu = null;
            try {
                // Test for whether the click was on a header
                var match = event.target.tagName.match(/^H(\d)$/);
                if (! match) { return; }

                // The event target is a header...ensure that it is a Markdeep header
                // (we could be in HTML or Doxygen mode and have non-.md content in the
                // same document)
                var node = event.target;
                while (node) {
                    if (node.classList.contains('md')) { break } else { node = node.parentElement; }
                }
                if (! node) {
                    // never found .md
                    return;
                }
                    
                // We are on a header
                var level = parseInt(match[1]) || 1;
                
                // Show the headerMenu
                menu = document.getElementById('mdContextMenu');
                if (! menu) { return; }
                
                var sectionType = ['Section', 'Subsection'][Math.min(level - 1, 1)];
                // Search backwards two siblings to grab the URL generated
                var anchorNode = event.target.previousElementSibling.previousElementSibling;
                
                var sectionName = event.target.innerText.trim();
                var sectionLabel = sectionName.toLowerCase();
                var anchor = anchorNode.name;
                var url = '' + location.origin + location.pathname + '#' + anchor;

                var shortUrl = url;
                if (shortUrl.length > 17) {
                    shortUrl = url.ss(0, 7) + '&hellip;' + location.pathname.ss(location.pathname.length - 8) + '#' + anchor;
                }
                
                var s = entag('div', 'Visit URL &ldquo;' + shortUrl + '&rdquo;',
                              'onclick="(location=&quot;' + url + '&quot;)"');
                
                s += entag('div', 'Copy URL &ldquo;' + shortUrl + '&rdquo;',
                           'onclick="navigator.clipboard.writeText(&quot;' + url + '&quot)&&(document.getElementById(\'mdContextMenu\').style.visibility=\'hidden\')"');
                
                s += entag('div', 'Copy Markdeep &ldquo;' + sectionName + ' ' + sectionType.toLowerCase() + '&rdquo;',
                           'onclick="navigator.clipboard.writeText(\'' + sectionName + ' ' + sectionType.toLowerCase() + '\')&&(document.getElementById(\'mdContextMenu\').style.visibility=\'hidden\')"');
                
                s += entag('div', 'Copy Markdeep &ldquo;' + sectionType + ' [' + sectionLabel + ']&rdquo;',
                           'onclick="navigator.clipboard.writeText(\'' + sectionType + ' [' + sectionLabel + ']\')&&(document.getElementById(\'mdContextMenu\').style.visibility=\'hidden\')"');
                
                s += entag('div', 'Copy HTML &ldquo;&lt;a href=&hellip;&gt;&rdquo;',
                           'onclick="navigator.clipboard.writeText(\'&lt;a href=&quot;' + url + '&quot;&gt;' + sectionName + '&lt;/a&gt;\')&&(document.getElementById(\'mdContextMenu\').style.visibility=\'hidden\')"');
                
                menu.innerHTML = s;
                menu.style.visibility = 'visible';
                menu.style.left = event.pageX + 'px';
                menu.style.top = event.pageY + 'px';
                
                event.preventDefault();
                return false;
            } catch (e) {
                // Something went wrong
                console.log(e);
                if (menu) { menu.style.visibility = 'hidden'; }
            }
        }

        markdeepHTML += '<div id="mdContextMenu" style="visibility:hidden"></div>';
        
        document.addEventListener('contextmenu', onContextMenu, false);
        document.addEventListener('mousedown', function (event) {
            var menu = document.getElementById('mdContextMenu');
            if (menu) {
                for (var node = event.target; node; node = node.parentElement) {
                    if (node === menu) { return; }
                }
                // Clicked off menu, so close it
                menu.style.visibility = 'hidden';
            }
        });
        document.addEventListener('keydown', function (event) {
            if (event.keyCode === 27) {
                var menu = document.getElementById('mdContextMenu');
                if (menu) { menu.style.visibility = 'hidden'; }
            }
        });
        
        
        /////////////////////////////////////////////////////////////
        
        var needMathJax = needsMathJax(markdeepHTML);
        if (needMathJax) {
            markdeepHTML = MATHJAX_CONFIG + markdeepHTML; 
        }
        
        markdeepHTML += MARKDEEP_FOOTER;
        
        // Replace the document. If using MathJax, include the custom Markdeep definitions
        var longDocument = source.length > 1000;
        
        // Setting "width" equal to 640 seems to give the best results on 
        // mobile devices in portrait mode. Setting "width=device-width" can cause markdeep
        // to appear exceedingly narrow on phones in the Chrome mobile preview.
        // https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag
        var META = '<meta charset="UTF-8"><meta http-equiv="content-type" content="text/html;charset=UTF-8"><meta name="viewport" content="width=600, initial-scale=1">';
        var head = META + BODY_STYLESHEET + STYLESHEET + sectionNumberingStylesheet() + HIGHLIGHT_STYLESHEET;
        if (longDocument) {
            // Add more spacing before the title in a long document
            head += entag('style', 'div.title { padding-top: 40px; } div.afterTitles { height: 15px; }');
        }

        if (window.location.href.search(/\?.*export.*/i) !== -1) {
            // Export mode
            var text = head + document.head.innerHTML + markdeepHTML;
            if (needMathJax) {
                // Dynamically load mathjax
                text += '<script src="' + MATHJAX_URL +'"></script>';
            }
            document.body.innerHTML = entag('pre', escapeHTMLEntities(text));
        } else {
            document.head.innerHTML = head + document.head.innerHTML;
            document.body.innerHTML = markdeepHTML;
            if (needMathJax) { loadMathJax(); }            
        }

        // Change the ID of the body, so that CSS can distinguish Markdeep
        // controlling a whole document from Markdeep embedded within
        // a document in HTML mode.
        document.body.id = 'md';
        document.body.style.visibility = 'visible';

        var hashIndex = window.location.href.indexOf('#');
        if (hashIndex > -1) {
            // Scroll to the target; needed when loading is too fast (ironically)
            setTimeout(function () {
                var anchor = document.getElementsByName(window.location.href.substring(hashIndex + 1));
                if (anchor.length > 0) { anchor[0].scrollIntoView(); }
                if (window.markdeepOptions) (window.markdeepOptions.onLoad || Math.cos)();
            }, 100);
        } else if (window.markdeepOptions && window.markdeepOptions.onLoad) {
            // Wait for the DOM to update
            setTimeout(window.markdeepOptions.onLoad, 100);
        }
           
    };
    
    // Process insert commands, and then run the markdeepProcessor on the document
    processInsertCommands([document.body], [source], function (nodeArray, sourceArray) {
        markdeepProcessor(sourceArray && sourceArray[0]);
    });
}
    
})();

/*
  Highlight.js 10.5.0
  License: BSD-3-Clause
  Copyright (c) 2006-2020, Ivan Sagalaev

  This contains regexps with character groups that do not escape
  '['. For example, /[a-z[\]]/. That is technically legal in most
  situations but confuses syntax highlighting of this source 
  itself in emacs and sometimes also fails at runtime.
*/
function _createForOfIteratorHelper(o,allowArrayLike){var it;if(typeof Symbol==="undefined"||o[Symbol.iterator]==null){if(Array.isArray(o)||(it=_unsupportedIterableToArray(o))||allowArrayLike&&o&&typeof o.length==="number"){if(it)o=it;var i=0;var F=function F(){};return{s:F,n:function n(){if(i>=o.length)return{done:true};return{done:false,value:o[i++]}},e:function e(_e8){throw _e8},f:F}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var normalCompletion=true,didErr=false,err;return{s:function s(){it=o[Symbol.iterator]()},n:function n(){var step=it.next();normalCompletion=step.done;return step},e:function e(_e9){didErr=true;err=_e9},f:function f(){try{if(!normalCompletion&&it["return"]!=null)it["return"]()}finally{if(didErr)throw err}}}}function _slicedToArray(arr,i){return _arrayWithHoles(arr)||_iterableToArrayLimit(arr,i)||_unsupportedIterableToArray(arr,i)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(arr,i){if(typeof Symbol==="undefined"||!(Symbol.iterator in Object(arr)))return;var _arr=[];var _n=true;var _d=false;var _e=undefined;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done);_n=true){_arr.push(_s.value);if(i&&_arr.length===i)break}}catch(err){_d=true;_e=err}finally{try{if(!_n&&_i["return"]!=null)_i["return"]()}finally{if(_d)throw _e}}return _arr}function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}function _toConsumableArray(arr){return _arrayWithoutHoles(arr)||_iterableToArray(arr)||_unsupportedIterableToArray(arr)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(o,minLen){if(!o)return;if(typeof o==="string")return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);if(n==="Object"&&o.constructor)n=o.constructor.name;if(n==="Map"||n==="Set")return Array.from(o);if(n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return _arrayLikeToArray(o,minLen)}function _iterableToArray(iter){if(typeof Symbol!=="undefined"&&Symbol.iterator in Object(iter))return Array.from(iter)}function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}function _arrayLikeToArray(arr,len){if(len==null||len>arr.length)len=arr.length;for(var i=0,arr2=new Array(len);i<len;i++){arr2[i]=arr[i]}return arr2}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function")}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass)}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o};return _setPrototypeOf(o,p)}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget)}else{result=Super.apply(this,arguments)}return _possibleConstructorReturn(this,result)}}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)==="object"||typeof call==="function")){return call}return _assertThisInitialized(self)}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError("this hasn't been initialised - super() hasn't been called")}return self}function _isNativeReflectConstruct(){if(typeof Reflect==="undefined"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy==="function")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true}catch(e){return false}}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o)};return _getPrototypeOf(o)}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function")}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor)}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor}function _typeof(obj){"@babel/helpers - typeof";if(typeof Symbol==="function"&&typeof Symbol.iterator==="symbol"){_typeof=function _typeof(obj){return typeof obj}}else{_typeof=function _typeof(obj){return obj&&typeof Symbol==="function"&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj}}return _typeof(obj)}var hljs=function(){"use strict";function e(t){return t instanceof Map?t.clear=t["delete"]=t.set=function(){throw Error("map is read-only")}:t instanceof Set&&(t.add=t.clear=t["delete"]=function(){throw Error("set is read-only")}),Object.freeze(t),Object.getOwnPropertyNames(t).forEach(function(n){var s=t[n];"object"!=_typeof(s)||Object.isFrozen(s)||e(s)}),t}var t=e,n=e;t["default"]=n;var s=function(){function s(e){_classCallCheck(this,s);void 0===e.data&&(e.data={}),this.data=e.data}_createClass(s,[{key:"ignoreMatch",value:function ignoreMatch(){this.ignore=!0}}]);return s}();function r(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")}function a(e){var n=Object.create(null);for(var _t in e){n[_t]=e[_t]}for(var _len=arguments.length,t=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){t[_key-1]=arguments[_key]}return t.forEach(function(e){for(var _t2 in e){n[_t2]=e[_t2]}}),n}var i=function i(e){return!!e.kind};var o=function(){function o(e,t){_classCallCheck(this,o);this.buffer="",this.classPrefix=t.classPrefix,e.walk(this)}_createClass(o,[{key:"addText",value:function addText(e){this.buffer+=r(e)}},{key:"openNode",value:function openNode(e){if(!i(e))return;var t=e.kind;e.sublanguage||(t="".concat(this.classPrefix).concat(t)),this.span(t)}},{key:"closeNode",value:function closeNode(e){i(e)&&(this.buffer+="</span>")}},{key:"value",value:function value(){return this.buffer}},{key:"span",value:function span(e){this.buffer+='<span class="'.concat(e,'">')}}]);return o}();var l=function(){function l(){_classCallCheck(this,l);this.rootNode={children:[]},this.stack=[this.rootNode]}_createClass(l,[{key:"top",get:function get(){return this.stack[this.stack.length-1]}},{key:"root",get:function get(){return this.rootNode}},{key:"add",value:function add(e){this.top.children.push(e)}},{key:"openNode",value:function openNode(e){var t={kind:e,children:[]};this.add(t),this.stack.push(t)}},{key:"closeNode",value:function closeNode(){if(this.stack.length>1)return this.stack.pop()}},{key:"closeAllNodes",value:function closeAllNodes(){for(;this.closeNode();){}}},{key:"toJSON",value:function toJSON(){return JSON.stringify(this.rootNode,null,4)}},{key:"walk",value:function walk(e){return this.constructor._walk(e,this.rootNode)}}],[{key:"_walk",value:function _walk(e,t){var _this=this;return"string"==typeof t?e.addText(t):t.children&&(e.openNode(t),t.children.forEach(function(t){return _this._walk(e,t)}),e.closeNode(t)),e}},{key:"_collapse",value:function _collapse(e){"string"!=typeof e&&e.children&&(e.children.every(function(e){return"string"==typeof e})?e.children=[e.children.join("")]:e.children.forEach(function(e){l._collapse(e)}))}}]);return l}();var c=function(_l){_inherits(c,_l);var _super=_createSuper(c);function c(e){var _this2;_classCallCheck(this,c);_this2=_super.call(this),_this2.options=e;return _this2}_createClass(c,[{key:"addKeyword",value:function addKeyword(e,t){""!==e&&(this.openNode(t),this.addText(e),this.closeNode())}},{key:"addText",value:function addText(e){""!==e&&this.add(e)}},{key:"addSublanguage",value:function addSublanguage(e,t){var n=e.root;n.kind=t,n.sublanguage=!0,this.add(n)}},{key:"toHTML",value:function toHTML(){return new o(this,this.options).value()}},{key:"finalize",value:function finalize(){return!0}}]);return c}(l);function u(e){return e?"string"==typeof e?e:e.source:null}var g="[a-zA-Z]\\w*",d="[a-zA-Z_]\\w*",h="\\b\\d+(\\.\\d+)?",f="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",p="\\b(0b[01]+)",m={begin:"\\\\[\\s\\S]",relevance:0},b={className:"string",begin:"'",end:"'",illegal:"\\n",contains:[m]},x={className:"string",begin:'"',end:'"',illegal:"\\n",contains:[m]},E={begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},v=function v(e,t){var n=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var s=a({className:"comment",begin:e,end:t,contains:[]},n);return s.contains.push(E),s.contains.push({className:"doctag",begin:"(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):",relevance:0}),s},N=v("//","$"),w=v("/\\*","\\*/"),R=v("#","$");var y=Object.freeze({__proto__:null,IDENT_RE:g,UNDERSCORE_IDENT_RE:d,NUMBER_RE:h,C_NUMBER_RE:f,BINARY_NUMBER_RE:p,RE_STARTERS_RE:"!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",SHEBANG:function SHEBANG(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var t=/^#![ ]*\//;return e.binary&&(e.begin=function(){for(var _len2=arguments.length,e=new Array(_len2),_key2=0;_key2<_len2;_key2++){e[_key2]=arguments[_key2]}return e.map(function(e){return u(e)}).join("")}(t,/.*\b/,e.binary,/\b.*/)),a({className:"meta",begin:t,end:/$/,relevance:0,"on:begin":function onBegin(e,t){0!==e.index&&t.ignoreMatch()}},e)},BACKSLASH_ESCAPE:m,APOS_STRING_MODE:b,QUOTE_STRING_MODE:x,PHRASAL_WORDS_MODE:E,COMMENT:v,C_LINE_COMMENT_MODE:N,C_BLOCK_COMMENT_MODE:w,HASH_COMMENT_MODE:R,NUMBER_MODE:{className:"number",begin:h,relevance:0},C_NUMBER_MODE:{className:"number",begin:f,relevance:0},BINARY_NUMBER_MODE:{className:"number",begin:p,relevance:0},CSS_NUMBER_MODE:{className:"number",begin:h+"(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},REGEXP_MODE:{begin:/(?=\/[^/\n]*\/)/,contains:[{className:"regexp",begin:/\//,end:/\/[gimuy]*/,illegal:/\n/,contains:[m,{begin:/\[/,end:/\]/,relevance:0,contains:[m]}]}]},TITLE_MODE:{className:"title",begin:g,relevance:0},UNDERSCORE_TITLE_MODE:{className:"title",begin:d,relevance:0},METHOD_GUARD:{begin:"\\.\\s*[a-zA-Z_]\\w*",relevance:0},END_SAME_AS_BEGIN:function END_SAME_AS_BEGIN(e){return Object.assign(e,{"on:begin":function onBegin(e,t){t.data._beginMatch=e[1]},"on:end":function onEnd(e,t){t.data._beginMatch!==e[1]&&t.ignoreMatch()}})}});function _(e,t){"."===e.input[e.index-1]&&t.ignoreMatch()}function k(e,t){t&&e.beginKeywords&&(e.begin="\\b("+e.beginKeywords.split(" ").join("|")+")(?!\\.)(?=\\b|\\s)",e.__beforeBegin=_,e.keywords=e.keywords||e.beginKeywords,delete e.beginKeywords)}function M(e,t){Array.isArray(e.illegal)&&(e.illegal=function(){for(var _len3=arguments.length,e=new Array(_len3),_key3=0;_key3<_len3;_key3++){e[_key3]=arguments[_key3]}return"("+e.map(function(e){return u(e)}).join("|")+")"}.apply(void 0,_toConsumableArray(e.illegal)))}function O(e,t){if(e.match){if(e.begin||e.end)throw Error("begin & end are not supported with match");e.begin=e.match,delete e.match}}function A(e,t){void 0===e.relevance&&(e.relevance=1)}var L=["of","and","for","in","not","or","if","then","parent","list","value"];function B(e,t){return t?Number(t):function(e){return L.includes(e.toLowerCase())}(e)?0:1}function I(e,_ref){var t=_ref.plugins;function n(t,n){return RegExp(u(t),"m"+(e.case_insensitive?"i":"")+(n?"g":""))}var s=function(){function s(){_classCallCheck(this,s);this.matchIndexes={},this.regexes=[],this.matchAt=1,this.position=0}_createClass(s,[{key:"addRule",value:function addRule(e,t){t.position=this.position++,this.matchIndexes[this.matchAt]=t,this.regexes.push([t,e]),this.matchAt+=function(e){return RegExp(e.toString()+"|").exec("").length-1}(e)+1}},{key:"compile",value:function compile(){0===this.regexes.length&&(this.exec=function(){return null});var e=this.regexes.map(function(e){return e[1]});this.matcherRe=n(function(e){var t=arguments.length>1&&arguments[1]!==undefined?arguments[1]:"|";var n=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;var _s=0,r="";for(var _a=0;_a<e.length;_a++){_s+=1;var _i=_s;var _o=u(e[_a]);for(_a>0&&(r+=t),r+="(";_o.length>0;){var _e=n.exec(_o);if(null==_e){r+=_o;break}r+=_o.substring(0,_e.index),_o=_o.substring(_e.index+_e[0].length),"\\"===_e[0][0]&&_e[1]?r+="\\"+(Number(_e[1])+_i):(r+=_e[0],"("===_e[0]&&_s++)}r+=")"}return r}(e),!0),this.lastIndex=0}},{key:"exec",value:function exec(e){this.matcherRe.lastIndex=this.lastIndex;var t=this.matcherRe.exec(e);if(!t)return null;var n=t.findIndex(function(e,t){return t>0&&void 0!==e}),_s2=this.matchIndexes[n];return t.splice(0,n),Object.assign(t,_s2)}}]);return s}();var r=function(){function r(){_classCallCheck(this,r);this.rules=[],this.multiRegexes=[],this.count=0,this.lastIndex=0,this.regexIndex=0}_createClass(r,[{key:"getMatcher",value:function getMatcher(e){if(this.multiRegexes[e])return this.multiRegexes[e];var t=new s;return this.rules.slice(e).forEach(function(_ref2){var _ref3=_slicedToArray(_ref2,2),e=_ref3[0],n=_ref3[1];return t.addRule(e,n)}),t.compile(),this.multiRegexes[e]=t,t}},{key:"resumingScanAtSamePosition",value:function resumingScanAtSamePosition(){return 0!==this.regexIndex}},{key:"considerAll",value:function considerAll(){this.regexIndex=0}},{key:"addRule",value:function addRule(e,t){this.rules.push([e,t]),"begin"===t.type&&this.count++}},{key:"exec",value:function exec(e){var t=this.getMatcher(this.regexIndex);t.lastIndex=this.lastIndex;var n=t.exec(e);if(this.resumingScanAtSamePosition())if(n&&n.index===this.lastIndex);else{var _t3=this.getMatcher(0);_t3.lastIndex=this.lastIndex+1,n=_t3.exec(e)}return n&&(this.regexIndex+=n.position+1,this.regexIndex===this.count&&this.considerAll()),n}}]);return r}();if(e.compilerExtensions||(e.compilerExtensions=[]),e.contains&&e.contains.includes("self"))throw Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");return e.classNameAliases=a(e.classNameAliases||{}),function t(s,i){var _ref4;var o=s;if(s.compiled)return o;[O].forEach(function(e){return e(s,i)}),e.compilerExtensions.forEach(function(e){return e(s,i)}),s.__beforeBegin=null,[k,M,A].forEach(function(e){return e(s,i)}),s.compiled=!0;var l=null;if("object"==_typeof(s.keywords)&&(l=s.keywords.$pattern,delete s.keywords.$pattern),s.keywords&&(s.keywords=function(e,t){var n={};return"string"==typeof e?s("keyword",e):Object.keys(e).forEach(function(t){s(t,e[t])}),n;function s(e,s){t&&(s=s.toLowerCase()),s.split(" ").forEach(function(t){var s=t.split("|");n[s[0]]=[e,B(s[0],s[1])]})}}(s.keywords,e.case_insensitive)),s.lexemes&&l)throw Error("ERR: Prefer `keywords.$pattern` to `mode.lexemes`, BOTH are not allowed. (see mode reference) ");return l=l||s.lexemes||/\w+/,o.keywordPatternRe=n(l,!0),i&&(s.begin||(s.begin=/\B|\b/),o.beginRe=n(s.begin),s.endSameAsBegin&&(s.end=s.begin),s.end||s.endsWithParent||(s.end=/\B|\b/),s.end&&(o.endRe=n(s.end)),o.terminatorEnd=u(s.end)||"",s.endsWithParent&&i.terminatorEnd&&(o.terminatorEnd+=(s.end?"|":"")+i.terminatorEnd)),s.illegal&&(o.illegalRe=n(s.illegal)),s.contains||(s.contains=[]),s.contains=(_ref4=[]).concat.apply(_ref4,_toConsumableArray(s.contains.map(function(e){return function(e){return e.variants&&!e.cachedVariants&&(e.cachedVariants=e.variants.map(function(t){return a(e,{variants:null},t)})),e.cachedVariants?e.cachedVariants:T(e)?a(e,{starts:e.starts?a(e.starts):null}):Object.isFrozen(e)?a(e):e}("self"===e?s:e)}))),s.contains.forEach(function(e){t(e,o)}),s.starts&&t(s.starts,i),o.matcher=function(e){var t=new r;return e.contains.forEach(function(e){return t.addRule(e.begin,{rule:e,type:"begin"})}),e.terminatorEnd&&t.addRule(e.terminatorEnd,{type:"end"}),e.illegal&&t.addRule(e.illegal,{type:"illegal"}),t}(o),o}(e)}function T(e){return!!e&&(e.endsWithParent||T(e.starts))}function j(e){var t={props:["language","code","autodetect"],data:function data(){return{detectedLanguage:"",unknownLanguage:!1}},computed:{className:function className(){return this.unknownLanguage?"":"hljs "+this.detectedLanguage},highlighted:function highlighted(){if(!this.autoDetect&&!e.getLanguage(this.language))return console.warn('The language "'.concat(this.language,'" you specified could not be found.')),this.unknownLanguage=!0,r(this.code);var t={};return this.autoDetect?(t=e.highlightAuto(this.code),this.detectedLanguage=t.language):(t=e.highlight(this.language,this.code,this.ignoreIllegals),this.detectedLanguage=this.language),t.value},autoDetect:function autoDetect(){return!(this.language&&(e=this.autodetect,!e&&""!==e));var e},ignoreIllegals:function ignoreIllegals(){return!0}},render:function render(e){return e("pre",{},[e("code",{class:this.className,domProps:{innerHTML:this.highlighted}})])}};return{Component:t,VuePlugin:{install:function install(e){e.component("highlightjs",t)}}}}var S={"after:highlightBlock":function afterHighlightBlock(_ref5){var e=_ref5.block,t=_ref5.result,n=_ref5.text;var s=D(e);if(!s.length)return;var a=document.createElement("div");a.innerHTML=t.value,t.value=function(e,t,n){var s=0,a="";var i=[];function o(){return e.length&&t.length?e[0].offset!==t[0].offset?e[0].offset<t[0].offset?e:t:"start"===t[0].event?e:t:e.length?e:t}function l(e){a+="<"+P(e)+[].map.call(e.attributes,function(e){return" "+e.nodeName+'="'+r(e.value)+'"'}).join("")+">"}function c(e){a+="</"+P(e)+">"}function u(e){("start"===e.event?l:c)(e.node)}for(;e.length||t.length;){var _t4=o();if(a+=r(n.substring(s,_t4[0].offset)),s=_t4[0].offset,_t4===e){i.reverse().forEach(c);do{u(_t4.splice(0,1)[0]),_t4=o()}while(_t4===e&&_t4.length&&_t4[0].offset===s);i.reverse().forEach(l)}else"start"===_t4[0].event?i.push(_t4[0].node):i.pop(),u(_t4.splice(0,1)[0])}return a+r(n.substr(s))}(s,D(a),n)}};function P(e){return e.nodeName.toLowerCase()}function D(e){var t=[];return function e(n,s){for(var _r=n.firstChild;_r;_r=_r.nextSibling){3===_r.nodeType?s+=_r.nodeValue.length:1===_r.nodeType&&(t.push({event:"start",offset:s,node:_r}),s=e(_r,s),P(_r).match(/br|hr|img|input/)||t.push({event:"stop",offset:s,node:_r}))}return s}(e,0),t}var C=function C(e){console.error(e)},H=function H(e){var _console;for(var _len4=arguments.length,t=new Array(_len4>1?_len4-1:0),_key4=1;_key4<_len4;_key4++){t[_key4-1]=arguments[_key4]}(_console=console).log.apply(_console,["WARN: "+e].concat(t))},$=function $(e,t){console.log("Deprecated as of ".concat(e,". ").concat(t))},U=r,z=a,K=Symbol("nomatch");return function(e){var n=Object.create(null),r=Object.create(null),a=[];var i=!0;var o=/(^(<[^>]+>|\t|)+|\n)/gm,l="Could not find the language '{}', did you forget to load/include a language module?",u={disableAutodetect:!0,name:"Plain text",contains:[]};var g={noHighlightRe:/^(no-?highlight)$/i,languageDetectRe:/\blang(?:uage)?-([\w-]+)\b/i,classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:null,__emitter:c};function d(e){return g.noHighlightRe.test(e)}function h(e,t,n,s){var r={code:t,language:e};_("before:highlight",r);var a=r.result?r.result:f(r.language,r.code,n,s);return a.code=r.code,_("after:highlight",a),a}function f(e,t,r,o){var c=t;function u(e,t){var n=w.case_insensitive?t[0].toLowerCase():t[0];return Object.prototype.hasOwnProperty.call(e.keywords,n)&&e.keywords[n]}function d(){null!=_.subLanguage?function(){if(""===O)return;var e=null;if("string"==typeof _.subLanguage){if(!n[_.subLanguage])return void M.addText(O);e=f(_.subLanguage,O,!0,k[_.subLanguage]),k[_.subLanguage]=e.top}else e=p(O,_.subLanguage.length?_.subLanguage:null);_.relevance>0&&(A+=e.relevance),M.addSublanguage(e.emitter,e.language)}():function(){if(!_.keywords)return void M.addText(O);var e=0;_.keywordPatternRe.lastIndex=0;var t=_.keywordPatternRe.exec(O),n="";for(;t;){n+=O.substring(e,t.index);var _s3=u(_,t);if(_s3){var _s4=_slicedToArray(_s3,2),_e2=_s4[0],_r2=_s4[1];M.addText(n),n="",A+=_r2;var _a2=w.classNameAliases[_e2]||_e2;M.addKeyword(t[0],_a2)}else n+=t[0];e=_.keywordPatternRe.lastIndex,t=_.keywordPatternRe.exec(O)}n+=O.substr(e),M.addText(n)}(),O=""}function h(e){return e.className&&M.openNode(w.classNameAliases[e.className]||e.className),_=Object.create(e,{parent:{value:_}}),_}function m(e,t,n){var r=function(e,t){var n=e&&e.exec(t);return n&&0===n.index}(e.endRe,n);if(r){if(e["on:end"]){var _n2=new s(e);e["on:end"](t,_n2),_n2.ignore&&(r=!1)}if(r){for(;e.endsParent&&e.parent;){e=e.parent}return e}}if(e.endsWithParent)return m(e.parent,t,n)}function b(e){return 0===_.matcher.regexIndex?(O+=e[0],1):(T=!0,0)}function x(e){var t=e[0],n=c.substr(e.index),s=m(_,e,n);if(!s)return K;var r=_;r.skip?O+=t:(r.returnEnd||r.excludeEnd||(O+=t),d(),r.excludeEnd&&(O=t));do{_.className&&M.closeNode(),_.skip||_.subLanguage||(A+=_.relevance),_=_.parent}while(_!==s.parent);return s.starts&&(s.endSameAsBegin&&(s.starts.endRe=s.endRe),h(s.starts)),r.returnEnd?0:t.length}var E={};function v(t,n){var a=n&&n[0];if(O+=t,null==a)return d(),0;if("begin"===E.type&&"end"===n.type&&E.index===n.index&&""===a){if(O+=c.slice(n.index,n.index+1),!i){var _t5=Error("0 width match regex");throw _t5.languageName=e,_t5.badRule=E.rule,_t5}return 1}if(E=n,"begin"===n.type)return function(e){var t=e[0],n=e.rule,r=new s(n),a=[n.__beforeBegin,n["on:begin"]];for(var _i2=0,_a3=a;_i2<_a3.length;_i2++){var _n3=_a3[_i2];if(_n3&&(_n3(e,r),r.ignore))return b(t)}return n&&n.endSameAsBegin&&(n.endRe=RegExp(t.replace(/[-/\\^$*+?.()|\[\]{}]/g,"\\$&"),"m")),n.skip?O+=t:(n.excludeBegin&&(O+=t),d(),n.returnBegin||n.excludeBegin||(O=t)),h(n),n.returnBegin?0:t.length}(n);if("illegal"===n.type&&!r){var _e3=Error('Illegal lexeme "'+a+'" for mode "'+(_.className||"<unnamed>")+'"');throw _e3.mode=_,_e3}if("end"===n.type){var _e4=x(n);if(_e4!==K)return _e4}if("illegal"===n.type&&""===a)return 1;if(B>1e5&&B>3*n.index)throw Error("potential infinite loop, way more iterations than matches");return O+=a,a.length}var w=N(e);if(!w)throw C(l.replace("{}",e)),Error('Unknown language: "'+e+'"');var R=I(w,{plugins:a});var y="",_=o||R;var k={},M=new g.__emitter(g);(function(){var e=[];for(var _t6=_;_t6!==w;_t6=_t6.parent){_t6.className&&e.unshift(_t6.className)}e.forEach(function(e){return M.openNode(e)})})();var O="",A=0,L=0,B=0,T=!1;try{for(_.matcher.considerAll();;){B++,T?T=!1:_.matcher.considerAll(),_.matcher.lastIndex=L;var _e5=_.matcher.exec(c);if(!_e5)break;var _t7=v(c.substring(L,_e5.index),_e5);L=_e5.index+_t7}return v(c.substr(L)),M.closeAllNodes(),M.finalize(),y=M.toHTML(),{relevance:A,value:y,language:e,illegal:!1,emitter:M,top:_}}catch(t){if(t.message&&t.message.includes("Illegal"))return{illegal:!0,illegalBy:{msg:t.message,context:c.slice(L-100,L+100),mode:t.mode},sofar:y,relevance:0,value:U(c),emitter:M};if(i)return{illegal:!1,relevance:0,value:U(c),emitter:M,language:e,top:_,errorRaised:t};throw t}}function p(e,t){t=t||g.languages||Object.keys(n);var s=function(e){var t={relevance:0,emitter:new g.__emitter(g),value:U(e),illegal:!1,top:u};return t.emitter.addText(e),t}(e),r=t.filter(N).filter(R).map(function(t){return f(t,e,!1)});r.unshift(s);var a=r.sort(function(e,t){if(e.relevance!==t.relevance)return t.relevance-e.relevance;if(e.language&&t.language){if(N(e.language).supersetOf===t.language)return 1;if(N(t.language).supersetOf===e.language)return-1}return 0}),_a4=_slicedToArray(a,2),i=_a4[0],o=_a4[1],l=i;return l.second_best=o,l}var m={"before:highlightBlock":function beforeHighlightBlock(_ref6){var e=_ref6.block;g.useBR&&(e.innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ /]*>/g,"\n"))},"after:highlightBlock":function afterHighlightBlock(_ref7){var e=_ref7.result;g.useBR&&(e.value=e.value.replace(/\n/g,"<br>"))}},b=/^(<[^>]+>|\t)+/gm,x={"after:highlightBlock":function afterHighlightBlock(_ref8){var e=_ref8.result;g.tabReplace&&(e.value=e.value.replace(b,function(e){return e.replace(/\t/g,g.tabReplace)}))}};function E(e){var t=null;var n=function(e){var t=e.className+" ";t+=e.parentNode?e.parentNode.className:"";var n=g.languageDetectRe.exec(t);if(n){var _t8=N(n[1]);return _t8||(H(l.replace("{}",n[1])),H("Falling back to no-highlight mode for this block.",e)),_t8?n[1]:"no-highlight"}return t.split(/\s+/).find(function(e){return d(e)||N(e)})}(e);if(d(n))return;_("before:highlightBlock",{block:e,language:n}),t=e;var s=t.textContent,a=n?h(n,s,!0):p(s);_("after:highlightBlock",{block:e,result:a,text:s}),e.innerHTML=a.value,function(e,t,n){var s=t?r[t]:n;e.classList.add("hljs"),s&&e.classList.add(s)}(e,n,a.language),e.result={language:a.language,re:a.relevance,relavance:a.relevance},a.second_best&&(e.second_best={language:a.second_best.language,re:a.second_best.relevance,relavance:a.second_best.relevance})}var v=function v(){v.called||(v.called=!0,document.querySelectorAll("pre code").forEach(E))};function N(e){return e=(e||"").toLowerCase(),n[e]||n[r[e]]}function w(e,_ref9){var t=_ref9.languageName;"string"==typeof e&&(e=[e]),e.forEach(function(e){r[e]=t})}function R(e){var t=N(e);return t&&!t.disableAutodetect}function _(e,t){var n=e;a.forEach(function(e){e[n]&&e[n](t)})}Object.assign(e,{highlight:h,highlightAuto:p,fixMarkup:function fixMarkup(e){return $("10.2.0","fixMarkup will be removed entirely in v11.0"),$("10.2.0","Please see https://github.com/highlightjs/highlight.js/issues/2534"),t=e,g.tabReplace||g.useBR?t.replace(o,function(e){return"\n"===e?g.useBR?"<br>":e:g.tabReplace?e.replace(/\t/g,g.tabReplace):e}):t;var t},highlightBlock:E,configure:function configure(e){e.useBR&&($("10.3.0","'useBR' will be removed entirely in v11.0"),$("10.3.0","Please see https://github.com/highlightjs/highlight.js/issues/2559")),g=z(g,e)},initHighlighting:v,initHighlightingOnLoad:function initHighlightingOnLoad(){window.addEventListener("DOMContentLoaded",v,!1)},registerLanguage:function registerLanguage(t,s){var r=null;try{r=s(e)}catch(e){if(C("Language definition for '{}' could not be registered.".replace("{}",t)),!i)throw e;C(e),r=u}r.name||(r.name=t),n[t]=r,r.rawDefinition=s.bind(null,e),r.aliases&&w(r.aliases,{languageName:t})},listLanguages:function listLanguages(){return Object.keys(n)},getLanguage:N,registerAliases:w,requireLanguage:function requireLanguage(e){$("10.4.0","requireLanguage will be removed entirely in v11."),$("10.4.0","Please see https://github.com/highlightjs/highlight.js/pull/2844");var t=N(e);if(t)return t;throw Error("The '{}' language is required, but not loaded.".replace("{}",e))},autoDetection:R,inherit:z,addPlugin:function addPlugin(e){a.push(e)},vuePlugin:j(e).VuePlugin}),e.debugMode=function(){i=!1},e.safeMode=function(){i=!0},e.versionString="10.5.0";for(var _e6 in y){"object"==_typeof(y[_e6])&&t(y[_e6])}return Object.assign(e,y),e.addPlugin(m),e.addPlugin(S),e.addPlugin(x),e}({})}();"object"==(typeof exports==="undefined"?"undefined":_typeof(exports))&&"undefined"!=typeof module&&(module.exports=hljs);hljs.registerLanguage("bash",function(){"use strict";function e(){for(var _len5=arguments.length,e=new Array(_len5),_key5=0;_key5<_len5;_key5++){e[_key5]=arguments[_key5]}return e.map(function(e){return(s=e)?"string"==typeof s?s:s.source:null;var s}).join("")}return function(s){var n={},t={begin:/\$\{/,end:/\}/,contains:["self",{begin:/:-/,contains:[n]}]};Object.assign(n,{className:"variable",variants:[{begin:e(/\$[\w\d#@][\w\d_]*/,"(?![\\w\\d])(?![$])")},t]});var a={className:"subst",begin:/\$\(/,end:/\)/,contains:[s.BACKSLASH_ESCAPE]},i={begin:/<<-?\s*(?=\w+)/,starts:{contains:[s.END_SAME_AS_BEGIN({begin:/(\w+)/,end:/(\w+)/,className:"string"})]}},c={className:"string",begin:/"/,end:/"/,contains:[s.BACKSLASH_ESCAPE,n,a]};a.contains.push(c);var o={begin:/\$\(\(/,end:/\)\)/,contains:[{begin:/\d+#[0-9a-f]+/,className:"number"},s.NUMBER_MODE,n]},r=s.SHEBANG({binary:"(fish|bash|zsh|sh|csh|ksh|tcsh|dash|scsh)",relevance:10}),l={className:"function",begin:/\w[\w\d_]*\s*\(\s*\)\s*\{/,returnBegin:!0,contains:[s.inherit(s.TITLE_MODE,{begin:/\w[\w\d_]*/})],relevance:0};return{name:"Bash",aliases:["sh","zsh"],keywords:{$pattern:/\b[a-z._-]+\b/,keyword:"if then else elif fi for while in do done case esac function",literal:"true false",built_in:"break cd continue eval exec exit export getopts hash pwd readonly return shift test times trap umask unset alias bind builtin caller command declare echo enable help let local logout mapfile printf read readarray source type typeset ulimit unalias set shopt autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate fc fg float functions getcap getln history integer jobs kill limit log noglob popd print pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof zpty zregexparse zsocket zstyle ztcp"},contains:[r,s.SHEBANG(),l,o,s.HASH_COMMENT_MODE,i,c,{className:"",begin:/\\"/},{className:"string",begin:/'/,end:/'/},n]}}}());hljs.registerLanguage("csharp",function(){"use strict";return function(e){var n={keyword:["abstract","as","base","break","case","class","const","continue","do","else","event","explicit","extern","finally","fixed","for","foreach","goto","if","implicit","in","interface","internal","is","lock","namespace","new","operator","out","override","params","private","protected","public","readonly","record","ref","return","sealed","sizeof","stackalloc","static","struct","switch","this","throw","try","typeof","unchecked","unsafe","using","virtual","void","volatile","while"].concat(["add","alias","and","ascending","async","await","by","descending","equals","from","get","global","group","init","into","join","let","nameof","not","notnull","on","or","orderby","partial","remove","select","set","unmanaged","value|0","var","when","where","with","yield"]).join(" "),built_in:"bool byte char decimal delegate double dynamic enum float int long nint nuint object sbyte short string ulong unit ushort",literal:"default false null true"},a=e.inherit(e.TITLE_MODE,{begin:"[a-zA-Z](\\.?\\w)*"}),i={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},s={className:"string",begin:'@"',end:'"',contains:[{begin:'""'}]},t=e.inherit(s,{illegal:/\n/}),r={className:"subst",begin:/\{/,end:/\}/,keywords:n},l=e.inherit(r,{illegal:/\n/}),c={className:"string",begin:/\$"/,end:'"',illegal:/\n/,contains:[{begin:/\{\{/},{begin:/\}\}/},e.BACKSLASH_ESCAPE,l]},o={className:"string",begin:/\$@"/,end:'"',contains:[{begin:/\{\{/},{begin:/\}\}/},{begin:'""'},r]},d=e.inherit(o,{illegal:/\n/,contains:[{begin:/\{\{/},{begin:/\}\}/},{begin:'""'},l]});r.contains=[o,c,s,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,i,e.C_BLOCK_COMMENT_MODE],l.contains=[d,c,t,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,i,e.inherit(e.C_BLOCK_COMMENT_MODE,{illegal:/\n/})];var g={variants:[o,c,s,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},E={begin:"<",end:">",contains:[{beginKeywords:"in out"},a]},_=e.IDENT_RE+"(<"+e.IDENT_RE+"(\\s*,\\s*"+e.IDENT_RE+")*>)?(\\[\\])?",b={begin:"@"+e.IDENT_RE,relevance:0};return{name:"C#",aliases:["cs","c#"],keywords:n,illegal:/::/,contains:[e.COMMENT("///","$",{returnBegin:!0,contains:[{className:"doctag",variants:[{begin:"///",relevance:0},{begin:"\x3c!--|--\x3e"},{begin:"</?",end:">"}]}]}),e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"meta",begin:"#",end:"$",keywords:{"meta-keyword":"if else elif endif define undef warning error line region endregion pragma checksum"}},g,i,{beginKeywords:"class interface",relevance:0,end:/[{;=]/,illegal:/[^\s:,]/,contains:[{beginKeywords:"where class"},a,E,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{beginKeywords:"namespace",relevance:0,end:/[{;=]/,illegal:/[^\s:]/,contains:[a,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{beginKeywords:"record",relevance:0,end:/[{;=]/,illegal:/[^\s:]/,contains:[a,E,e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:"meta",begin:"^\\s*\\[",excludeBegin:!0,end:"\\]",excludeEnd:!0,contains:[{className:"meta-string",begin:/"/,end:/"/}]},{beginKeywords:"new return throw await else",relevance:0},{className:"function",begin:"("+_+"\\s+)+"+e.IDENT_RE+"\\s*(<.+>\\s*)?\\(",returnBegin:!0,end:/\s*[{;=]/,excludeEnd:!0,keywords:n,contains:[{beginKeywords:"public private protected static internal protected abstract async extern override unsafe virtual new sealed partial",relevance:0},{begin:e.IDENT_RE+"\\s*(<.+>\\s*)?\\(",returnBegin:!0,contains:[e.TITLE_MODE,E],relevance:0},{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:n,relevance:0,contains:[g,i,e.C_BLOCK_COMMENT_MODE]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},b]}}}());hljs.registerLanguage("c-like",function(){"use strict";function e(e){return function(){for(var _len6=arguments.length,e=new Array(_len6),_key6=0;_key6<_len6;_key6++){e[_key6]=arguments[_key6]}return e.map(function(e){return function(e){return e?"string"==typeof e?e:e.source:null}(e)}).join("")}("(",e,")?")}return function(t){var n=t.COMMENT("//","$",{contains:[{begin:/\\\n/}]}),r="[a-zA-Z_]\\w*::",a="(decltype\\(auto\\)|"+e(r)+"[a-zA-Z_]\\w*"+e("<[^<>]+>")+")",i={className:"keyword",begin:"\\b[a-z\\d_]*_t\\b"},s={className:"string",variants:[{begin:'(u8?|U|L)?"',end:'"',illegal:"\\n",contains:[t.BACKSLASH_ESCAPE]},{begin:"(u8?|U|L)?'(\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)|.)",end:"'",illegal:"."},t.END_SAME_AS_BEGIN({begin:/(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,end:/\)([^()\\ ]{0,16})"/})]},o={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},c={className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{"meta-keyword":"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},t.inherit(s,{className:"meta-string"}),{className:"meta-string",begin:/<.*?>/,end:/$/,illegal:"\\n"},n,t.C_BLOCK_COMMENT_MODE]},l={className:"title",begin:e(r)+t.IDENT_RE,relevance:0},d=e(r)+t.IDENT_RE+"\\s*\\(",u={keyword:"int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid wchar_t short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignas alignof constexpr consteval constinit decltype concept co_await co_return co_yield requires noexcept static_assert thread_local restrict final override atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq",built_in:"std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary",literal:"true false nullptr NULL"},m=[c,i,n,t.C_BLOCK_COMMENT_MODE,o,s],p={variants:[{begin:/=/,end:/;/},{begin:/\(/,end:/\)/},{beginKeywords:"new throw return else",end:/;/}],keywords:u,contains:m.concat([{begin:/\(/,end:/\)/,keywords:u,contains:m.concat(["self"]),relevance:0}]),relevance:0},_={className:"function",begin:"("+a+"[\\*&\\s]+)+"+d,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:u,illegal:/[^\w\s\*&:<>.]/,contains:[{begin:"decltype\\(auto\\)",keywords:u,relevance:0},{begin:d,returnBegin:!0,contains:[l],relevance:0},{className:"params",begin:/\(/,end:/\)/,keywords:u,relevance:0,contains:[n,t.C_BLOCK_COMMENT_MODE,s,o,i,{begin:/\(/,end:/\)/,keywords:u,relevance:0,contains:["self",n,t.C_BLOCK_COMMENT_MODE,s,o,i]}]},i,n,t.C_BLOCK_COMMENT_MODE,c]};return{aliases:["c","cc","h","c++","h++","hpp","hh","hxx","cxx"],keywords:u,disableAutodetect:!0,illegal:"</",contains:[].concat(p,_,m,[c,{begin:"\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",end:">",keywords:u,contains:["self",i]},{begin:t.IDENT_RE+"::",keywords:u},{className:"class",beginKeywords:"enum class struct union",end:/[{;:<>=]/,contains:[{beginKeywords:"final class struct"},t.TITLE_MODE]}]),exports:{preprocessor:c,strings:s,keywords:u}}}}());hljs.registerLanguage("cpp",function(){"use strict";function e(e){return function(){for(var _len7=arguments.length,e=new Array(_len7),_key7=0;_key7<_len7;_key7++){e[_key7]=arguments[_key7]}return e.map(function(e){return function(e){return e?"string"==typeof e?e:e.source:null}(e)}).join("")}("(",e,")?")}return function(t){var n=function(t){var n=t.COMMENT("//","$",{contains:[{begin:/\\\n/}]}),r="[a-zA-Z_]\\w*::",a="(decltype\\(auto\\)|"+e(r)+"[a-zA-Z_]\\w*"+e("<[^<>]+>")+")",s={className:"keyword",begin:"\\b[a-z\\d_]*_t\\b"},i={className:"string",variants:[{begin:'(u8?|U|L)?"',end:'"',illegal:"\\n",contains:[t.BACKSLASH_ESCAPE]},{begin:"(u8?|U|L)?'(\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)|.)",end:"'",illegal:"."},t.END_SAME_AS_BEGIN({begin:/(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,end:/\)([^()\\ ]{0,16})"/})]},c={className:"number",variants:[{begin:"\\b(0b[01']+)"},{begin:"(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)"},{begin:"(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)"}],relevance:0},o={className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{"meta-keyword":"if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},t.inherit(i,{className:"meta-string"}),{className:"meta-string",begin:/<.*?>/,end:/$/,illegal:"\\n"},n,t.C_BLOCK_COMMENT_MODE]},l={className:"title",begin:e(r)+t.IDENT_RE,relevance:0},d=e(r)+t.IDENT_RE+"\\s*\\(",u={keyword:"int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace unsigned long volatile static protected bool template mutable if public friend do goto auto void enum else break extern using asm case typeid wchar_t short reinterpret_cast|10 default double register explicit signed typename try this switch continue inline delete alignas alignof constexpr consteval constinit decltype concept co_await co_return co_yield requires noexcept static_assert thread_local restrict final override atomic_bool atomic_char atomic_schar atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong atomic_ullong new throw return and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq",built_in:"std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary",literal:"true false nullptr NULL"},p=[o,s,n,t.C_BLOCK_COMMENT_MODE,c,i],m={variants:[{begin:/=/,end:/;/},{begin:/\(/,end:/\)/},{beginKeywords:"new throw return else",end:/;/}],keywords:u,contains:p.concat([{begin:/\(/,end:/\)/,keywords:u,contains:p.concat(["self"]),relevance:0}]),relevance:0},_={className:"function",begin:"("+a+"[\\*&\\s]+)+"+d,returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:u,illegal:/[^\w\s\*&:<>.]/,contains:[{begin:"decltype\\(auto\\)",keywords:u,relevance:0},{begin:d,returnBegin:!0,contains:[l],relevance:0},{className:"params",begin:/\(/,end:/\)/,keywords:u,relevance:0,contains:[n,t.C_BLOCK_COMMENT_MODE,i,c,s,{begin:/\(/,end:/\)/,keywords:u,relevance:0,contains:["self",n,t.C_BLOCK_COMMENT_MODE,i,c,s]}]},s,n,t.C_BLOCK_COMMENT_MODE,o]};return{aliases:["c","cc","h","c++","h++","hpp","hh","hxx","cxx"],keywords:u,disableAutodetect:!0,illegal:"</",contains:[].concat(m,_,p,[o,{begin:"\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\s*<",end:">",keywords:u,contains:["self",s]},{begin:t.IDENT_RE+"::",keywords:u},{className:"class",beginKeywords:"enum class struct union",end:/[{;:<>=]/,contains:[{beginKeywords:"final class struct"},t.TITLE_MODE]}]),exports:{preprocessor:o,strings:i,keywords:u}}}(t);return n.disableAutodetect=!1,n.name="C++",n.aliases=["cc","c++","h++","hpp","hh","hxx","cxx"],n}}());hljs.registerLanguage("css",function(){"use strict";return function(e){var n="[a-zA-Z-][a-zA-Z0-9_-]*",a={begin:/([*]\s?)?(?:[A-Z_.\-\\]+|--[a-zA-Z0-9_-]+)\s*(\/\*\*\/)?:/,returnBegin:!0,end:";",endsWithParent:!0,contains:[{begin:/-(webkit|moz|ms|o)-/},{className:"attribute",begin:/\S/,end:":",excludeEnd:!0,starts:{endsWithParent:!0,excludeEnd:!0,contains:[{begin:/[\w-]+\(/,returnBegin:!0,contains:[{className:"built_in",begin:/[\w-]+/},{begin:/\(/,end:/\)/,contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.CSS_NUMBER_MODE]}]},e.CSS_NUMBER_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,e.C_BLOCK_COMMENT_MODE,{className:"number",begin:"#[0-9A-Fa-f]+"},{className:"meta",begin:"!important"}]}}]};return{name:"CSS",case_insensitive:!0,illegal:/[=|'\$]/,contains:[e.C_BLOCK_COMMENT_MODE,{className:"selector-id",begin:/#[A-Za-z0-9_-]+/},{className:"selector-class",begin:"\\."+n},{className:"selector-attr",begin:/\[/,end:/\]/,illegal:"$",contains:[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},{className:"selector-pseudo",begin:/:(:)?[a-zA-Z0-9_+"'.-]+/},{begin:/\(/,end:/\)/,contains:[e.CSS_NUMBER_MODE]},{begin:"@(page|font-face)",lexemes:"@[a-z-]+",keywords:"@page @font-face"},{begin:"@",end:"[{;]",illegal:/:/,returnBegin:!0,contains:[{className:"keyword",begin:/@-?\w[\w]*(-\w+)*/},{begin:/\s/,endsWithParent:!0,excludeEnd:!0,relevance:0,keywords:"and or not only",contains:[{begin:/[a-z-]+:/,className:"attribute"},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,e.CSS_NUMBER_MODE]}]},{className:"selector-tag",begin:n,relevance:0},{begin:/\{/,end:/\}/,illegal:/\S/,contains:[e.C_BLOCK_COMMENT_MODE,{begin:/;/},a]}]}}}());hljs.registerLanguage("coffeescript",function(){"use strict";var e=["as","in","of","if","for","while","finally","var","new","function","do","return","void","else","break","catch","instanceof","with","throw","case","default","try","switch","continue","typeof","delete","let","yield","const","class","debugger","async","await","static","import","from","export","extends"],n=["true","false","null","undefined","NaN","Infinity"],a=[].concat(["setInterval","setTimeout","clearInterval","clearTimeout","require","exports","eval","isFinite","isNaN","parseFloat","parseInt","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","unescape"],["arguments","this","super","console","window","document","localStorage","module","global"],["Intl","DataView","Number","Math","Date","String","RegExp","Object","Function","Boolean","Error","Symbol","Set","Map","WeakSet","WeakMap","Proxy","Reflect","JSON","Promise","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Float32Array","Array","Uint8Array","Uint8ClampedArray","ArrayBuffer"],["EvalError","InternalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError"]);return function(r){var t={keyword:e.concat(["then","unless","until","loop","by","when","and","or","is","isnt","not"]).filter((i=["var","const","let","function","static"],function(e){return!i.includes(e)})).join(" "),literal:n.concat(["yes","no","on","off"]).join(" "),built_in:a.concat(["npm","print"]).join(" ")};var i;var s="[A-Za-z$_][0-9A-Za-z$_]*",o={className:"subst",begin:/#\{/,end:/\}/,keywords:t},c=[r.BINARY_NUMBER_MODE,r.inherit(r.C_NUMBER_MODE,{starts:{end:"(\\s*/)?",relevance:0}}),{className:"string",variants:[{begin:/'''/,end:/'''/,contains:[r.BACKSLASH_ESCAPE]},{begin:/'/,end:/'/,contains:[r.BACKSLASH_ESCAPE]},{begin:/"""/,end:/"""/,contains:[r.BACKSLASH_ESCAPE,o]},{begin:/"/,end:/"/,contains:[r.BACKSLASH_ESCAPE,o]}]},{className:"regexp",variants:[{begin:"///",end:"///",contains:[o,r.HASH_COMMENT_MODE]},{begin:"//[gim]{0,3}(?=\\W)",relevance:0},{begin:/\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/}]},{begin:"@"+s},{subLanguage:"javascript",excludeBegin:!0,excludeEnd:!0,variants:[{begin:"```",end:"```"},{begin:"`",end:"`"}]}];o.contains=c;var l=r.inherit(r.TITLE_MODE,{begin:s}),d="(\\(.*\\)\\s*)?\\B[-=]>",g={className:"params",begin:"\\([^\\(]",returnBegin:!0,contains:[{begin:/\(/,end:/\)/,keywords:t,contains:["self"].concat(c)}]};return{name:"CoffeeScript",aliases:["coffee","cson","iced"],keywords:t,illegal:/\/\*/,contains:c.concat([r.COMMENT("###","###"),r.HASH_COMMENT_MODE,{className:"function",begin:"^\\s*"+s+"\\s*=\\s*"+d,end:"[-=]>",returnBegin:!0,contains:[l,g]},{begin:/[:\(,=]\s*/,relevance:0,contains:[{className:"function",begin:d,end:"[-=]>",returnBegin:!0,contains:[g]}]},{className:"class",beginKeywords:"class",end:"$",illegal:/[:="\[\]]/,contains:[{beginKeywords:"extends",endsWithParent:!0,illegal:/[:="\[\]]/,contains:[l]},l]},{begin:s+":",end:":",returnBegin:!0,returnEnd:!0,relevance:0}])}}}());hljs.registerLanguage("xml",function(){"use strict";function e(e){return e?"string"==typeof e?e:e.source:null}function n(e){return a("(?=",e,")")}function a(){for(var _len8=arguments.length,n=new Array(_len8),_key8=0;_key8<_len8;_key8++){n[_key8]=arguments[_key8]}return n.map(function(n){return e(n)}).join("")}function s(){for(var _len9=arguments.length,n=new Array(_len9),_key9=0;_key9<_len9;_key9++){n[_key9]=arguments[_key9]}return"("+n.map(function(n){return e(n)}).join("|")+")"}return function(e){var t=a(/[A-Z_]/,a("(",/[A-Z0-9_.-]+:/,")?"),/[A-Z0-9_.-]*/),i={className:"symbol",begin:/&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/},r={begin:/\s/,contains:[{className:"meta-keyword",begin:/#?[a-z_][a-z1-9_-]+/,illegal:/\n/}]},c=e.inherit(r,{begin:/\(/,end:/\)/}),l=e.inherit(e.APOS_STRING_MODE,{className:"meta-string"}),g=e.inherit(e.QUOTE_STRING_MODE,{className:"meta-string"}),m={endsWithParent:!0,illegal:/</,relevance:0,contains:[{className:"attr",begin:/[A-Za-z0-9._:-]+/,relevance:0},{begin:/=\s*/,relevance:0,contains:[{className:"string",endsParent:!0,variants:[{begin:/"/,end:/"/,contains:[i]},{begin:/'/,end:/'/,contains:[i]},{begin:/[^\s"'=<>`]+/}]}]}]};return{name:"HTML, XML",aliases:["html","xhtml","rss","atom","xjb","xsd","xsl","plist","wsf","svg"],case_insensitive:!0,contains:[{className:"meta",begin:/<![a-z]/,end:/>/,relevance:10,contains:[r,g,l,c,{begin:/\[/,end:/\]/,contains:[{className:"meta",begin:/<![a-z]/,end:/>/,contains:[r,c,g,l]}]}]},e.COMMENT(/<!--/,/-->/,{relevance:10}),{begin:/<!\[CDATA\[/,end:/\]\]>/,relevance:10},i,{className:"meta",begin:/<\?xml/,end:/\?>/,relevance:10},{className:"tag",begin:/<style(?=\s|>)/,end:/>/,keywords:{name:"style"},contains:[m],starts:{end:/<\/style>/,returnEnd:!0,subLanguage:["css","xml"]}},{className:"tag",begin:/<script(?=\s|>)/,end:/>/,keywords:{name:"script"},contains:[m],starts:{end:/<\/script>/,returnEnd:!0,subLanguage:["javascript","handlebars","xml"]}},{className:"tag",begin:/<>|<\/>/},{className:"tag",begin:a(/</,n(a(t,s(/\/>/,/>/,/\s/)))),end:/\/?>/,contains:[{className:"name",begin:t,relevance:0,starts:m}]},{className:"tag",begin:a(/<\//,n(a(t,/>/))),contains:[{className:"name",begin:t,relevance:0},{begin:/>/,relevance:0}]}]}}}());hljs.registerLanguage("http",function(){"use strict";function e(){for(var _len10=arguments.length,e=new Array(_len10),_key10=0;_key10<_len10;_key10++){e[_key10]=arguments[_key10]}return e.map(function(e){return(n=e)?"string"==typeof n?n:n.source:null;var n}).join("")}return function(n){var a="HTTP/(2|1\\.[01])",s=[{className:"attribute",begin:e("^",/[A-Za-z][A-Za-z0-9-]*/,"(?=\\:\\s)"),starts:{contains:[{className:"punctuation",begin:/: /,relevance:0,starts:{end:"$",relevance:0}}]}},{begin:"\\n\\n",starts:{subLanguage:[],endsWithParent:!0}}];return{name:"HTTP",aliases:["https"],illegal:/\S/,contains:[{begin:"^(?="+a+" \\d{3})",end:/$/,contains:[{className:"meta",begin:a},{className:"number",begin:"\\b\\d{3}\\b"}],starts:{end:/\b\B/,illegal:/\S/,contains:s}},{begin:"(?=^[A-Z]+ (.*?) "+a+"$)",end:/$/,contains:[{className:"string",begin:" ",end:" ",excludeBegin:!0,excludeEnd:!0},{className:"meta",begin:a},{className:"keyword",begin:"[A-Z]+"}],starts:{end:/\b\B/,illegal:/\S/,contains:s}}]}}}());hljs.registerLanguage("json",function(){"use strict";return function(n){var e={literal:"true false null"},i=[n.C_LINE_COMMENT_MODE,n.C_BLOCK_COMMENT_MODE],a=[n.QUOTE_STRING_MODE,n.C_NUMBER_MODE],l={end:",",endsWithParent:!0,excludeEnd:!0,contains:a,keywords:e},t={begin:/\{/,end:/\}/,contains:[{className:"attr",begin:/"/,end:/"/,contains:[n.BACKSLASH_ESCAPE],illegal:"\\n"},n.inherit(l,{begin:/:/})].concat(i),illegal:"\\S"},s={begin:"\\[",end:"\\]",contains:[n.inherit(l)],illegal:"\\S"};return a.push(t,s),i.forEach(function(n){a.push(n)}),{name:"JSON",contains:a,keywords:e,illegal:"\\S"}}}());hljs.registerLanguage("java",function(){"use strict";var e="\\.([0-9](_*[0-9])*)",n="[0-9a-fA-F](_*[0-9a-fA-F])*",a={className:"number",variants:[{begin:"(\\b([0-9](_*[0-9])*)((".concat(e,")|\\.)?|(").concat(e,"))[eE][+-]?([0-9](_*[0-9])*)[fFdD]?\\b")},{begin:"\\b([0-9](_*[0-9])*)((".concat(e,")[fFdD]?\\b|\\.([fFdD]\\b)?)")},{begin:"(".concat(e,")[fFdD]?\\b")},{begin:"\\b([0-9](_*[0-9])*)[fFdD]\\b"},{begin:"\\b0[xX]((".concat(n,")\\.?|(").concat(n,")?\\.(").concat(n,"))[pP][+-]?([0-9](_*[0-9])*)[fFdD]?\\b")},{begin:"\\b(0|[1-9](_*[0-9])*)[lL]?\\b"},{begin:"\\b0[xX](".concat(n,")[lL]?\\b")},{begin:"\\b0(_*[0-7])*[lL]?\\b"},{begin:"\\b0[bB][01](_*[01])*[lL]?\\b"}],relevance:0};return function(e){var n="false synchronized int abstract float private char boolean var static null if const for true while long strictfp finally protected import native final void enum else break transient catch instanceof byte super volatile case assert short package default double public try this switch continue throws protected public private module requires exports do",s={className:"meta",begin:"@[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*",contains:[{begin:/\(/,end:/\)/,contains:["self"]}]};var r=a;return{name:"Java",aliases:["jsp"],keywords:n,illegal:/<\/|#/,contains:[e.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{begin:/\w+@/,relevance:0},{className:"doctag",begin:"@[A-Za-z]+"}]}),{begin:/import java\.[a-z]+\./,keywords:"import",relevance:2},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"class",beginKeywords:"class interface enum",end:/[{;=]/,excludeEnd:!0,keywords:"class interface enum",illegal:/[:"\[\]]/,contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"new throw return else",relevance:0},{className:"class",begin:"record\\s+"+e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,excludeEnd:!0,end:/[{;=]/,keywords:n,contains:[{beginKeywords:"record"},{begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,relevance:0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"params",begin:/\(/,end:/\)/,keywords:n,relevance:0,contains:[e.C_BLOCK_COMMENT_MODE]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:"function",begin:"([À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*(<[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*(\\s*,\\s*[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*)*>)?\\s+)+"+e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,end:/[{;=]/,excludeEnd:!0,keywords:n,contains:[{begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,relevance:0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"params",begin:/\(/,end:/\)/,keywords:n,relevance:0,contains:[s,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,r,e.C_BLOCK_COMMENT_MODE]},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},r,s]}}}());hljs.registerLanguage("javascript",function(){"use strict";var e="[A-Za-z$_][0-9A-Za-z$_]*",n=["as","in","of","if","for","while","finally","var","new","function","do","return","void","else","break","catch","instanceof","with","throw","case","default","try","switch","continue","typeof","delete","let","yield","const","class","debugger","async","await","static","import","from","export","extends"],a=["true","false","null","undefined","NaN","Infinity"],s=[].concat(["setInterval","setTimeout","clearInterval","clearTimeout","require","exports","eval","isFinite","isNaN","parseFloat","parseInt","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","unescape"],["arguments","this","super","console","window","document","localStorage","module","global"],["Intl","DataView","Number","Math","Date","String","RegExp","Object","Function","Boolean","Error","Symbol","Set","Map","WeakSet","WeakMap","Proxy","Reflect","JSON","Promise","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Float32Array","Array","Uint8Array","Uint8ClampedArray","ArrayBuffer"],["EvalError","InternalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError"]);function r(e){return i("(?=",e,")")}function i(){for(var _len11=arguments.length,e=new Array(_len11),_key11=0;_key11<_len11;_key11++){e[_key11]=arguments[_key11]}return e.map(function(e){return(n=e)?"string"==typeof n?n:n.source:null;var n}).join("")}return function(t){var c=e,o={begin:/<[A-Za-z0-9\\._:-]+/,end:/\/[A-Za-z0-9\\._:-]+>|\/>/,isTrulyOpeningTag:function isTrulyOpeningTag(e,n){var a=e[0].length+e.index,s=e.input[a];"<"!==s?">"===s&&(function(e,_ref10){var n=_ref10.after;var a="</"+e[0].slice(1);return-1!==e.input.indexOf(a,n)}(e,{after:a})||n.ignoreMatch()):n.ignoreMatch()}},l={$pattern:e,keyword:n.join(" "),literal:a.join(" "),built_in:s.join(" ")},b="\\.([0-9](_?[0-9])*)",g="0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*",d={className:"number",variants:[{begin:"(\\b(".concat(g,")((").concat(b,")|\\.)?|(").concat(b,"))[eE][+-]?([0-9](_?[0-9])*)\\b")},{begin:"\\b(".concat(g,")\\b((").concat(b,")\\b|\\.)?|(").concat(b,")\\b")},{begin:"\\b(0|[1-9](_?[0-9])*)n\\b"},{begin:"\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b"},{begin:"\\b0[bB][0-1](_?[0-1])*n?\\b"},{begin:"\\b0[oO][0-7](_?[0-7])*n?\\b"},{begin:"\\b0[0-7]+n?\\b"}],relevance:0},E={className:"subst",begin:"\\$\\{",end:"\\}",keywords:l,contains:[]},u={begin:"html`",end:"",starts:{end:"`",returnEnd:!1,contains:[t.BACKSLASH_ESCAPE,E],subLanguage:"xml"}},_={begin:"css`",end:"",starts:{end:"`",returnEnd:!1,contains:[t.BACKSLASH_ESCAPE,E],subLanguage:"css"}},m={className:"string",begin:"`",end:"`",contains:[t.BACKSLASH_ESCAPE,E]},N={className:"comment",variants:[t.COMMENT(/\/\*\*(?!\/)/,"\\*/",{relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+",contains:[{className:"type",begin:"\\{",end:"\\}",relevance:0},{className:"variable",begin:c+"(?=\\s*(-)|$)",endsParent:!0,relevance:0},{begin:/(?=[^\n])\s/,relevance:0}]}]}),t.C_BLOCK_COMMENT_MODE,t.C_LINE_COMMENT_MODE]},y=[t.APOS_STRING_MODE,t.QUOTE_STRING_MODE,u,_,m,d,t.REGEXP_MODE];E.contains=y.concat({begin:/\{/,end:/\}/,keywords:l,contains:["self"].concat(y)});var f=[].concat(N,E.contains),A=f.concat([{begin:/\(/,end:/\)/,keywords:l,contains:["self"].concat(f)}]),p={className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:l,contains:A};return{name:"Javascript",aliases:["js","jsx","mjs","cjs"],keywords:l,exports:{PARAMS_CONTAINS:A},illegal:/#(?![$_A-z])/,contains:[t.SHEBANG({label:"shebang",binary:"node",relevance:5}),{label:"use_strict",className:"meta",relevance:10,begin:/^\s*['"]use (strict|asm)['"]/},t.APOS_STRING_MODE,t.QUOTE_STRING_MODE,u,_,m,N,d,{begin:i(/[{,\n]\s*/,r(i(/(((\/\/.*$)|(\/\*(\*[^/]|[^*])*\*\/))\s*)*/,c+"\\s*:"))),relevance:0,contains:[{className:"attr",begin:c+r("\\s*:"),relevance:0}]},{begin:"("+t.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",contains:[N,t.REGEXP_MODE,{className:"function",begin:"(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|"+t.UNDERSCORE_IDENT_RE+")\\s*=>",returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:t.UNDERSCORE_IDENT_RE,relevance:0},{className:null,begin:/\(\s*\)/,skip:!0},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:l,contains:A}]}]},{begin:/,/,relevance:0},{className:"",begin:/\s/,end:/\s*/,skip:!0},{variants:[{begin:"<>",end:"</>"},{begin:o.begin,"on:begin":o.isTrulyOpeningTag,end:o.end}],subLanguage:"xml",contains:[{begin:o.begin,end:o.end,skip:!0,contains:["self"]}]}],relevance:0},{className:"function",beginKeywords:"function",end:/[{;]/,excludeEnd:!0,keywords:l,contains:["self",t.inherit(t.TITLE_MODE,{begin:c}),p],illegal:/%/},{beginKeywords:"while if switch catch for"},{className:"function",begin:t.UNDERSCORE_IDENT_RE+"\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",returnBegin:!0,contains:[p,t.inherit(t.TITLE_MODE,{begin:c})]},{variants:[{begin:"\\."+c},{begin:"\\$"+c}],relevance:0},{className:"class",beginKeywords:"class",end:/[{;=]/,excludeEnd:!0,illegal:/[:"[\]]/,contains:[{beginKeywords:"extends"},t.UNDERSCORE_TITLE_MODE]},{begin:/\b(?=constructor)/,end:/[{;]/,excludeEnd:!0,contains:[t.inherit(t.TITLE_MODE,{begin:c}),"self",p]},{begin:"(get|set)\\s+(?="+c+"\\()",end:/\{/,keywords:"get set",contains:[t.inherit(t.TITLE_MODE,{begin:c}),{begin:/\(\)/},p]},{begin:/\$[(.]/}]}}}());hljs.registerLanguage("makefile",function(){"use strict";return function(e){var i={className:"variable",variants:[{begin:"\\$\\("+e.UNDERSCORE_IDENT_RE+"\\)",contains:[e.BACKSLASH_ESCAPE]},{begin:/\$[@%<?\^\+\*]/}]},a={className:"string",begin:/"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,i]},n={className:"variable",begin:/\$\([\w-]+\s/,end:/\)/,keywords:{built_in:"subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value"},contains:[i]},s={begin:"^"+e.UNDERSCORE_IDENT_RE+"\\s*(?=[:+?]?=)"},r={className:"section",begin:/^[^\s]+:/,end:/$/,contains:[i]};return{name:"Makefile",aliases:["mk","mak","make"],keywords:{$pattern:/[\w-]+/,keyword:"define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath"},contains:[e.HASH_COMMENT_MODE,i,a,n,s,{className:"meta",begin:/^\.PHONY:/,end:/$/,keywords:{$pattern:/[\.\w]+/,"meta-keyword":".PHONY"}},r]}}}());hljs.registerLanguage("markdown",function(){"use strict";function n(){for(var _len12=arguments.length,n=new Array(_len12),_key12=0;_key12<_len12;_key12++){n[_key12]=arguments[_key12]}return n.map(function(n){return(e=n)?"string"==typeof e?e:e.source:null;var e}).join("")}return function(e){var a={begin:/<\/?[A-Za-z_]/,end:">",subLanguage:"xml",relevance:0},i={variants:[{begin:/\[.+?\]\[.*?\]/,relevance:0},{begin:/\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,relevance:2},{begin:n(/\[.+?\]\(/,/[A-Za-z][A-Za-z0-9+.-]*/,/:\/\/.*?\)/),relevance:2},{begin:/\[.+?\]\([./?&#].*?\)/,relevance:1},{begin:/\[.+?\]\(.*?\)/,relevance:0}],returnBegin:!0,contains:[{className:"string",relevance:0,begin:"\\[",end:"\\]",excludeBegin:!0,returnEnd:!0},{className:"link",relevance:0,begin:"\\]\\(",end:"\\)",excludeBegin:!0,excludeEnd:!0},{className:"symbol",relevance:0,begin:"\\]\\[",end:"\\]",excludeBegin:!0,excludeEnd:!0}]},s={className:"strong",contains:[],variants:[{begin:/_{2}/,end:/_{2}/},{begin:/\*{2}/,end:/\*{2}/}]},c={className:"emphasis",contains:[],variants:[{begin:/\*(?!\*)/,end:/\*/},{begin:/_(?!_)/,end:/_/,relevance:0}]};s.contains.push(c),c.contains.push(s);var t=[a,i];return s.contains=s.contains.concat(t),c.contains=c.contains.concat(t),t=t.concat(s,c),{name:"Markdown",aliases:["md","mkdown","mkd"],contains:[{className:"section",variants:[{begin:"^#{1,6}",end:"$",contains:t},{begin:"(?=^.+?\\n[=-]{2,}$)",contains:[{begin:"^[=-]*$"},{begin:"^",end:"\\n",contains:t}]}]},a,{className:"bullet",begin:"^[ \t]*([*+-]|(\\d+\\.))(?=\\s+)",end:"\\s+",excludeEnd:!0},s,c,{className:"quote",begin:"^>\\s+",contains:t,end:"$"},{className:"code",variants:[{begin:"(`{3,})[^`](.|\\n)*?\\1`*[ ]*"},{begin:"(~{3,})[^~](.|\\n)*?\\1~*[ ]*"},{begin:"```",end:"```+[ ]*$"},{begin:"~~~",end:"~~~+[ ]*$"},{begin:"`.+?`"},{begin:"(?=^( {4}|\\t))",contains:[{begin:"^( {4}|\\t)",end:"(\\n)$"}],relevance:0}]},{begin:"^[-\\*]{3,}",end:"$"},i,{begin:/^\[[^\n]+\]:/,returnBegin:!0,contains:[{className:"symbol",begin:/\[/,end:/\]/,excludeBegin:!0,excludeEnd:!0},{className:"link",begin:/:\s*/,end:/$/,excludeBegin:!0}]}]}}}());hljs.registerLanguage("objectivec",function(){"use strict";return function(e){var n=/[a-zA-Z@][a-zA-Z0-9_]*/,_={$pattern:n,keyword:"@interface @class @protocol @implementation"};return{name:"Objective-C",aliases:["mm","objc","obj-c","obj-c++","objective-c++"],keywords:{$pattern:n,keyword:"int float while char export sizeof typedef const struct for union unsigned long volatile static bool mutable if do return goto void enum else break extern asm case short default double register explicit signed typename this switch continue wchar_t inline readonly assign readwrite self @synchronized id typeof nonatomic super unichar IBOutlet IBAction strong weak copy in out inout bycopy byref oneway __strong __weak __block __autoreleasing @private @protected @public @try @property @end @throw @catch @finally @autoreleasepool @synthesize @dynamic @selector @optional @required @encode @package @import @defs @compatibility_alias __bridge __bridge_transfer __bridge_retained __bridge_retain __covariant __contravariant __kindof _Nonnull _Nullable _Null_unspecified __FUNCTION__ __PRETTY_FUNCTION__ __attribute__ getter setter retain unsafe_unretained nonnull nullable null_unspecified null_resettable class instancetype NS_DESIGNATED_INITIALIZER NS_UNAVAILABLE NS_REQUIRES_SUPER NS_RETURNS_INNER_POINTER NS_INLINE NS_AVAILABLE NS_DEPRECATED NS_ENUM NS_OPTIONS NS_SWIFT_UNAVAILABLE NS_ASSUME_NONNULL_BEGIN NS_ASSUME_NONNULL_END NS_REFINED_FOR_SWIFT NS_SWIFT_NAME NS_SWIFT_NOTHROW NS_DURING NS_HANDLER NS_ENDHANDLER NS_VALUERETURN NS_VOIDRETURN",literal:"false true FALSE TRUE nil YES NO NULL",built_in:"BOOL dispatch_once_t dispatch_queue_t dispatch_sync dispatch_async dispatch_once"},illegal:"</",contains:[{className:"built_in",begin:"\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.C_NUMBER_MODE,e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,{className:"string",variants:[{begin:'@"',end:'"',illegal:"\\n",contains:[e.BACKSLASH_ESCAPE]}]},{className:"meta",begin:/#\s*[a-z]+\b/,end:/$/,keywords:{"meta-keyword":"if else elif endif define undef warning error line pragma ifdef ifndef include"},contains:[{begin:/\\\n/,relevance:0},e.inherit(e.QUOTE_STRING_MODE,{className:"meta-string"}),{className:"meta-string",begin:/<.*?>/,end:/$/,illegal:"\\n"},e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE]},{className:"class",begin:"("+_.keyword.split(" ").join("|")+")\\b",end:/(\{|$)/,excludeEnd:!0,keywords:_,contains:[e.UNDERSCORE_TITLE_MODE]},{begin:"\\."+e.UNDERSCORE_IDENT_RE,relevance:0}]}}}());hljs.registerLanguage("php",function(){"use strict";return function(e){var r={className:"variable",begin:"\\$+[a-zA-Z_-ÿ][a-zA-Z0-9_-ÿ]*(?![A-Za-z0-9])(?![$])"},t={className:"meta",variants:[{begin:/<\?php/,relevance:10},{begin:/<\?[=]?/},{begin:/\?>/}]},a={className:"subst",variants:[{begin:/\$\w+/},{begin:/\{\$/,end:/\}/}]},n=e.inherit(e.APOS_STRING_MODE,{illegal:null}),i=e.inherit(e.QUOTE_STRING_MODE,{illegal:null,contains:e.QUOTE_STRING_MODE.contains.concat(a)}),o=e.END_SAME_AS_BEGIN({begin:/<<<[ \t]*(\w+)\n/,end:/[ \t]*(\w+)\b/,contains:e.QUOTE_STRING_MODE.contains.concat(a)}),l={className:"string",contains:[e.BACKSLASH_ESCAPE,t],variants:[e.inherit(n,{begin:"b'",end:"'"}),e.inherit(i,{begin:'b"',end:'"'}),i,n,o]},c={variants:[e.BINARY_NUMBER_MODE,e.C_NUMBER_MODE]},s={keyword:"__CLASS__ __DIR__ __FILE__ __FUNCTION__ __LINE__ __METHOD__ __NAMESPACE__ __TRAIT__ die echo exit include include_once print require require_once array abstract and as binary bool boolean break callable case catch class clone const continue declare default do double else elseif empty enddeclare endfor endforeach endif endswitch endwhile eval extends final finally float for foreach from global goto if implements instanceof insteadof int integer interface isset iterable list match|0 new object or private protected public real return string switch throw trait try unset use var void while xor yield",literal:"false null true",built_in:"Error|0 AppendIterator ArgumentCountError ArithmeticError ArrayIterator ArrayObject AssertionError BadFunctionCallException BadMethodCallException CachingIterator CallbackFilterIterator CompileError Countable DirectoryIterator DivisionByZeroError DomainException EmptyIterator ErrorException Exception FilesystemIterator FilterIterator GlobIterator InfiniteIterator InvalidArgumentException IteratorIterator LengthException LimitIterator LogicException MultipleIterator NoRewindIterator OutOfBoundsException OutOfRangeException OuterIterator OverflowException ParentIterator ParseError RangeException RecursiveArrayIterator RecursiveCachingIterator RecursiveCallbackFilterIterator RecursiveDirectoryIterator RecursiveFilterIterator RecursiveIterator RecursiveIteratorIterator RecursiveRegexIterator RecursiveTreeIterator RegexIterator RuntimeException SeekableIterator SplDoublyLinkedList SplFileInfo SplFileObject SplFixedArray SplHeap SplMaxHeap SplMinHeap SplObjectStorage SplObserver SplObserver SplPriorityQueue SplQueue SplStack SplSubject SplSubject SplTempFileObject TypeError UnderflowException UnexpectedValueException ArrayAccess Closure Generator Iterator IteratorAggregate Serializable Throwable Traversable WeakReference Directory __PHP_Incomplete_Class parent php_user_filter self static stdClass"};return{aliases:["php","php3","php4","php5","php6","php7","php8"],case_insensitive:!0,keywords:s,contains:[e.HASH_COMMENT_MODE,e.COMMENT("//","$",{contains:[t]}),e.COMMENT("/\\*","\\*/",{contains:[{className:"doctag",begin:"@[A-Za-z]+"}]}),e.COMMENT("__halt_compiler.+?;",!1,{endsWithParent:!0,keywords:"__halt_compiler"}),t,{className:"keyword",begin:/\$this\b/},r,{begin:/(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/},{className:"function",relevance:0,beginKeywords:"fn function",end:/[;{]/,excludeEnd:!0,illegal:"[$%\\[]",contains:[e.UNDERSCORE_TITLE_MODE,{begin:"=>"},{className:"params",begin:"\\(",end:"\\)",excludeBegin:!0,excludeEnd:!0,keywords:s,contains:["self",r,e.C_BLOCK_COMMENT_MODE,l,c]}]},{className:"class",beginKeywords:"class interface",relevance:0,end:/\{/,excludeEnd:!0,illegal:/[:($"]/,contains:[{beginKeywords:"extends implements"},e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"namespace",relevance:0,end:";",illegal:/[.']/,contains:[e.UNDERSCORE_TITLE_MODE]},{beginKeywords:"use",relevance:0,end:";",contains:[e.UNDERSCORE_TITLE_MODE]},l,c]}}}());hljs.registerLanguage("perl",function(){"use strict";function e(){for(var _len13=arguments.length,e=new Array(_len13),_key13=0;_key13<_len13;_key13++){e[_key13]=arguments[_key13]}return e.map(function(e){return(n=e)?"string"==typeof n?n:n.source:null;var n}).join("")}return function(n){var t=/[dualxmsipn]{0,12}/,s={$pattern:/[\w.]+/,keyword:"getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qq fileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent shutdown dump chomp connect getsockname die socketpair close flock exists index shmget sub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedir ioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when"},r={className:"subst",begin:"[$@]\\{",end:"\\}",keywords:s},i={begin:/->\{/,end:/\}/},a={variants:[{begin:/\$\d/},{begin:e(/[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,"(?![A-Za-z])(?![@$%])")},{begin:/[$%@][^\s\w{]/,relevance:0}]},o=[n.BACKSLASH_ESCAPE,r,a],c=[a,n.HASH_COMMENT_MODE,n.COMMENT(/^=\w/,/=cut/,{endsWithParent:!0}),i,{className:"string",contains:o,variants:[{begin:"q[qwxr]?\\s*\\(",end:"\\)",relevance:5},{begin:"q[qwxr]?\\s*\\[",end:"\\]",relevance:5},{begin:"q[qwxr]?\\s*\\{",end:"\\}",relevance:5},{begin:"q[qwxr]?\\s*\\|",end:"\\|",relevance:5},{begin:"q[qwxr]?\\s*<",end:">",relevance:5},{begin:"qw\\s+q",end:"q",relevance:5},{begin:"'",end:"'",contains:[n.BACKSLASH_ESCAPE]},{begin:'"',end:'"'},{begin:"`",end:"`",contains:[n.BACKSLASH_ESCAPE]},{begin:/\{\w+\}/,contains:[],relevance:0},{begin:"-?\\w+\\s*=>",contains:[],relevance:0}]},{className:"number",begin:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",relevance:0},{begin:"(\\/\\/|"+n.RE_STARTERS_RE+"|\\b(split|return|print|reverse|grep)\\b)\\s*",keywords:"split return print reverse grep",relevance:0,contains:[n.HASH_COMMENT_MODE,{className:"regexp",begin:e(/(s|tr|y)/,/\//,/(\\.|[^\\\/])*/,/\//,/(\\.|[^\\\/])*/,/\//,t),relevance:10},{className:"regexp",begin:/(m|qr)?\//,end:e(/\//,t),contains:[n.BACKSLASH_ESCAPE],relevance:0}]},{className:"function",beginKeywords:"sub",end:"(\\s*\\(.*?\\))?[;{]",excludeEnd:!0,relevance:5,contains:[n.TITLE_MODE]},{begin:"-\\w\\b",relevance:0},{begin:"^__DATA__$",end:"^__END__$",subLanguage:"mojolicious",contains:[{begin:"^@@.*",end:"$",className:"comment"}]}];return r.contains=c,i.contains=c,{name:"Perl",aliases:["pl","pm"],keywords:s,contains:c}}}());hljs.registerLanguage("python",function(){"use strict";return function(e){var n={keyword:"and as assert async await break class continue def del elif else except finally for  from global if import in is lambda nonlocal|10 not or pass raise return try while with yield",built_in:"__import__ abs all any ascii bin bool breakpoint bytearray bytes callable chr classmethod compile complex delattr dict dir divmod enumerate eval exec filter float format frozenset getattr globals hasattr hash help hex id input int isinstance issubclass iter len list locals map max memoryview min next object oct open ord pow print property range repr reversed round set setattr slice sorted staticmethod str sum super tuple type vars zip",literal:"__debug__ Ellipsis False None NotImplemented True"},a={className:"meta",begin:/^(>>>|\.\.\.) /},s={className:"subst",begin:/\{/,end:/\}/,keywords:n,illegal:/#/},i={begin:/\{\{/,relevance:0},r={className:"string",contains:[e.BACKSLASH_ESCAPE],variants:[{begin:/([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE,a],relevance:10},{begin:/([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,a],relevance:10},{begin:/([fF][rR]|[rR][fF]|[fF])'''/,end:/'''/,contains:[e.BACKSLASH_ESCAPE,a,i,s]},{begin:/([fF][rR]|[rR][fF]|[fF])"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,a,i,s]},{begin:/([uU]|[rR])'/,end:/'/,relevance:10},{begin:/([uU]|[rR])"/,end:/"/,relevance:10},{begin:/([bB]|[bB][rR]|[rR][bB])'/,end:/'/},{begin:/([bB]|[bB][rR]|[rR][bB])"/,end:/"/},{begin:/([fF][rR]|[rR][fF]|[fF])'/,end:/'/,contains:[e.BACKSLASH_ESCAPE,i,s]},{begin:/([fF][rR]|[rR][fF]|[fF])"/,end:/"/,contains:[e.BACKSLASH_ESCAPE,i,s]},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE]},t="[0-9](_?[0-9])*",l="(\\b(".concat(t,"))?\\.(").concat(t,")|\\b(").concat(t,")\\."),b={className:"number",relevance:0,variants:[{begin:"(\\b(".concat(t,")|(").concat(l,"))[eE][+-]?(").concat(t,")[jJ]?\\b")},{begin:"(".concat(l,")[jJ]?")},{begin:"\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?\\b"},{begin:"\\b0[bB](_?[01])+[lL]?\\b"},{begin:"\\b0[oO](_?[0-7])+[lL]?\\b"},{begin:"\\b0[xX](_?[0-9a-fA-F])+[lL]?\\b"},{begin:"\\b(".concat(t,")[jJ]\\b")}]},o={className:"params",variants:[{begin:/\(\s*\)/,skip:!0,className:null},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:n,contains:["self",a,b,r,e.HASH_COMMENT_MODE]}]};return s.contains=[r,b,a],{name:"Python",aliases:["py","gyp","ipython"],keywords:n,illegal:/(<\/|->|\?)|=>/,contains:[a,b,{begin:/\bself\b/},{beginKeywords:"if",relevance:0},r,e.HASH_COMMENT_MODE,{variants:[{className:"function",beginKeywords:"def"},{className:"class",beginKeywords:"class"}],end:/:/,illegal:/[${=;\n,]/,contains:[e.UNDERSCORE_TITLE_MODE,o,{begin:/->/,endsWithParent:!0,keywords:"None"}]},{className:"meta",begin:/^[\t ]*@/,end:/(?=#)|$/,contains:[b,o,r]},{begin:/\b(print|exec)\(/}]}}}());hljs.registerLanguage("ruby",function(){"use strict";function e(){for(var _len14=arguments.length,e=new Array(_len14),_key14=0;_key14<_len14;_key14++){e[_key14]=arguments[_key14]}return e.map(function(e){return(n=e)?"string"==typeof n?n:n.source:null;var n}).join("")}return function(n){var a,i="([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)",s={keyword:"and then defined module in return redo if BEGIN retry end for self when next until do begin unless END rescue else break undef not super class case require yield alias while ensure elsif or include attr_reader attr_writer attr_accessor __FILE__",built_in:"proc lambda",literal:"true false nil"},r={className:"doctag",begin:"@[A-Za-z]+"},b={begin:"#<",end:">"},t=[n.COMMENT("#","$",{contains:[r]}),n.COMMENT("^=begin","^=end",{contains:[r],relevance:10}),n.COMMENT("^__END__","\\n$")],c={className:"subst",begin:/#\{/,end:/\}/,keywords:s},d={className:"string",contains:[n.BACKSLASH_ESCAPE,c],variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/`/,end:/`/},{begin:/%[qQwWx]?\(/,end:/\)/},{begin:/%[qQwWx]?\[/,end:/\]/},{begin:/%[qQwWx]?\{/,end:/\}/},{begin:/%[qQwWx]?</,end:/>/},{begin:/%[qQwWx]?\//,end:/\//},{begin:/%[qQwWx]?%/,end:/%/},{begin:/%[qQwWx]?-/,end:/-/},{begin:/%[qQwWx]?\|/,end:/\|/},{begin:/\B\?(\\\d{1,3}|\\x[A-Fa-f0-9]{1,2}|\\u[A-Fa-f0-9]{4}|\\?\S)\b/},{begin:/<<[-~]?'?(\w+)\n(?:[^\n]*\n)*?\s*\1\b/,returnBegin:!0,contains:[{begin:/<<[-~]?'?/},n.END_SAME_AS_BEGIN({begin:/(\w+)/,end:/(\w+)/,contains:[n.BACKSLASH_ESCAPE,c]})]}]},g="[0-9](_?[0-9])*",l={className:"number",relevance:0,variants:[{begin:"\\b([1-9](_?[0-9])*|0)(\\.(".concat(g,"))?([eE][+-]?(").concat(g,")|r)?i?\\b")},{begin:"\\b0[dD][0-9](_?[0-9])*r?i?\\b"},{begin:"\\b0[bB][0-1](_?[0-1])*r?i?\\b"},{begin:"\\b0[oO][0-7](_?[0-7])*r?i?\\b"},{begin:"\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b"},{begin:"\\b0(_?[0-7])+r?i?\\b"}]},o={className:"params",begin:"\\(",end:"\\)",endsParent:!0,keywords:s},_=[d,{className:"class",beginKeywords:"class module",end:"$|;",illegal:/=/,contains:[n.inherit(n.TITLE_MODE,{begin:"[A-Za-z_]\\w*(::\\w+)*(\\?|!)?"}),{begin:"<\\s*",contains:[{begin:"("+n.IDENT_RE+"::)?"+n.IDENT_RE}]}].concat(t)},{className:"function",begin:e(/def\s*/,(a=i+"\\s*(\\(|;|$)",e("(?=",a,")"))),keywords:"def",end:"$|;",contains:[n.inherit(n.TITLE_MODE,{begin:i}),o].concat(t)},{begin:n.IDENT_RE+"::"},{className:"symbol",begin:n.UNDERSCORE_IDENT_RE+"(!|\\?)?:",relevance:0},{className:"symbol",begin:":(?!\\s)",contains:[d,{begin:i}],relevance:0},l,{className:"variable",begin:"(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])"},{className:"params",begin:/\|/,end:/\|/,relevance:0,keywords:s},{begin:"("+n.RE_STARTERS_RE+"|unless)\\s*",keywords:"unless",contains:[{className:"regexp",contains:[n.BACKSLASH_ESCAPE,c],illegal:/\n/,variants:[{begin:"/",end:"/[a-z]*"},{begin:/%r\{/,end:/\}[a-z]*/},{begin:"%r\\(",end:"\\)[a-z]*"},{begin:"%r!",end:"![a-z]*"},{begin:"%r\\[",end:"\\][a-z]*"}]}].concat(b,t),relevance:0}].concat(b,t);c.contains=_,o.contains=_;var E=[{begin:/^\s*=>/,starts:{end:"$",contains:_}},{className:"meta",begin:"^([>?]>|[\\w#]+\\(\\w+\\):\\d+:\\d+>|(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>)(?=[ ])",starts:{end:"$",contains:_}}];return t.unshift(b),{name:"Ruby",aliases:["rb","gemspec","podspec","thor","irb"],keywords:s,illegal:/\/\*/,contains:[n.SHEBANG({binary:"ruby"})].concat(E).concat(t).concat(_)}}}());hljs.registerLanguage("shell",function(){"use strict";return function(s){return{name:"Shell Session",aliases:["console"],contains:[{className:"meta",begin:/^\s{0,3}[/~\w\d[\]()@-]*[>%$#]/,starts:{end:/[^\\](?=\s*$)/,subLanguage:"bash"}}]}}}());hljs.registerLanguage("armasm",function(){"use strict";return function(s){var e={variants:[s.COMMENT("^[ \\t]*(?=#)","$",{relevance:0,excludeBegin:!0}),s.COMMENT("[;@]","$",{relevance:0}),s.C_LINE_COMMENT_MODE,s.C_BLOCK_COMMENT_MODE]};return{name:"ARM Assembly",case_insensitive:!0,aliases:["arm"],keywords:{$pattern:"\\.?"+s.IDENT_RE,meta:".2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ",built_in:"r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 pc lr sp ip sl sb fp a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf s0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 {PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @"},contains:[{className:"keyword",begin:"\\b(adc|(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|wfe|wfi|yield)(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?[sptrx]?(?=\\s)"},e,s.QUOTE_STRING_MODE,{className:"string",begin:"'",end:"[^\\\\]'",relevance:0},{className:"title",begin:"\\|",end:"\\|",illegal:"\\n",relevance:0},{className:"number",variants:[{begin:"[#$=]?0x[0-9a-f]+"},{begin:"[#$=]?0b[01]+"},{begin:"[#$=]\\d+"},{begin:"\\b\\d+"}],relevance:0},{className:"symbol",variants:[{begin:"^[ \\t]*[a-z_\\.\\$][a-z0-9_\\.\\$]+:"},{begin:"^[a-z_\\.\\$][a-z0-9_\\.\\$]+"},{begin:"[=#]\\w+"}],relevance:0}]}}}());hljs.registerLanguage("glsl",function(){"use strict";return function(e){return{name:"GLSL",keywords:{keyword:"break continue discard do else for if return while switch case default attribute binding buffer ccw centroid centroid varying coherent column_major const cw depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip triangles triangles_adjacency uniform varying vertices volatile writeonly",type:"atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void",built_in:"gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow",literal:"true false"},illegal:'"',contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.C_NUMBER_MODE,{className:"meta",begin:"#",end:"$"}]}}}());hljs.registerLanguage("go",function(){"use strict";return function(e){var n={keyword:"break default func interface select case map struct chan else goto package switch const fallthrough if range type continue for import return var go defer bool byte complex64 complex128 float32 float64 int8 int16 int32 int64 string uint8 uint16 uint32 uint64 int uint uintptr rune",literal:"true false iota nil",built_in:"append cap close complex copy imag len make new panic print println real recover delete"};return{name:"Go",aliases:["golang"],keywords:n,illegal:"</",contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,{className:"string",variants:[e.QUOTE_STRING_MODE,e.APOS_STRING_MODE,{begin:"`",end:"`"}]},{className:"number",variants:[{begin:e.C_NUMBER_RE+"[i]",relevance:1},e.C_NUMBER_MODE]},{begin:/:=/},{className:"function",beginKeywords:"func",end:"\\s*(\\{|$)",excludeEnd:!0,contains:[e.TITLE_MODE,{className:"params",begin:/\(/,end:/\)/,keywords:n,illegal:/["']/}]}]}}}());hljs.registerLanguage("haskell",function(){"use strict";return function(e){var n={variants:[e.COMMENT("--","$"),e.COMMENT(/\{-/,/-\}/,{contains:["self"]})]},i={className:"meta",begin:/\{-#/,end:/#-\}/},a={className:"meta",begin:"^#",end:"$"},s={className:"type",begin:"\\b[A-Z][\\w']*",relevance:0},l={begin:"\\(",end:"\\)",illegal:'"',contains:[i,a,{className:"type",begin:"\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?"},e.inherit(e.TITLE_MODE,{begin:"[_a-z][\\w']*"}),n]};return{name:"Haskell",aliases:["hs"],keywords:"let in if then else case of where do module import hiding qualified type data newtype deriving class instance as default infix infixl infixr foreign export ccall stdcall cplusplus jvm dotnet safe unsafe family forall mdo proc rec",contains:[{beginKeywords:"module",end:"where",keywords:"module where",contains:[l,n],illegal:"\\W\\.|;"},{begin:"\\bimport\\b",end:"$",keywords:"import qualified as hiding",contains:[l,n],illegal:"\\W\\.|;"},{className:"class",begin:"^(\\s*)?(class|instance)\\b",end:"where",keywords:"class family instance where",contains:[s,l,n]},{className:"class",begin:"\\b(data|(new)?type)\\b",end:"$",keywords:"data family type newtype deriving",contains:[i,s,l,{begin:/\{/,end:/\}/,contains:l.contains},n]},{beginKeywords:"default",end:"$",contains:[s,l,n]},{beginKeywords:"infix infixl infixr",end:"$",contains:[e.C_NUMBER_MODE,n]},{begin:"\\bforeign\\b",end:"$",keywords:"foreign import export ccall stdcall cplusplus jvm dotnet safe unsafe",contains:[s,e.QUOTE_STRING_MODE,n]},{className:"meta",begin:"#!\\/usr\\/bin\\/env runhaskell",end:"$"},i,a,e.QUOTE_STRING_MODE,e.C_NUMBER_MODE,s,e.inherit(e.TITLE_MODE,{begin:"^[_a-z][\\w']*"}),n,{begin:"->|<-"}]}}}());hljs.registerLanguage("kotlin",function(){"use strict";var e="\\.([0-9](_*[0-9])*)",n="[0-9a-fA-F](_*[0-9a-fA-F])*",a={className:"number",variants:[{begin:"(\\b([0-9](_*[0-9])*)((".concat(e,")|\\.)?|(").concat(e,"))[eE][+-]?([0-9](_*[0-9])*)[fFdD]?\\b")},{begin:"\\b([0-9](_*[0-9])*)((".concat(e,")[fFdD]?\\b|\\.([fFdD]\\b)?)")},{begin:"(".concat(e,")[fFdD]?\\b")},{begin:"\\b([0-9](_*[0-9])*)[fFdD]\\b"},{begin:"\\b0[xX]((".concat(n,")\\.?|(").concat(n,")?\\.(").concat(n,"))[pP][+-]?([0-9](_*[0-9])*)[fFdD]?\\b")},{begin:"\\b(0|[1-9](_*[0-9])*)[lL]?\\b"},{begin:"\\b0[xX](".concat(n,")[lL]?\\b")},{begin:"\\b0(_*[0-7])*[lL]?\\b"},{begin:"\\b0[bB][01](_*[01])*[lL]?\\b"}],relevance:0};return function(e){var n={keyword:"abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",built_in:"Byte Short Char Int Long Boolean Float Double Void Unit Nothing",literal:"true false null"},i={className:"symbol",begin:e.UNDERSCORE_IDENT_RE+"@"},s={className:"subst",begin:/\$\{/,end:/\}/,contains:[e.C_NUMBER_MODE]},t={className:"variable",begin:"\\$"+e.UNDERSCORE_IDENT_RE},r={className:"string",variants:[{begin:'"""',end:'"""(?=[^"])',contains:[t,s]},{begin:"'",end:"'",illegal:/\n/,contains:[e.BACKSLASH_ESCAPE]},{begin:'"',end:'"',illegal:/\n/,contains:[e.BACKSLASH_ESCAPE,t,s]}]};s.contains.push(r);var l={className:"meta",begin:"@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*"+e.UNDERSCORE_IDENT_RE+")?"},c={className:"meta",begin:"@"+e.UNDERSCORE_IDENT_RE,contains:[{begin:/\(/,end:/\)/,contains:[e.inherit(r,{className:"meta-string"})]}]},o=a,b=e.COMMENT("/\\*","\\*/",{contains:[e.C_BLOCK_COMMENT_MODE]}),E={variants:[{className:"type",begin:e.UNDERSCORE_IDENT_RE},{begin:/\(/,end:/\)/,contains:[]}]},d=E;return d.variants[1].contains=[E],E.variants[1].contains=[d],{name:"Kotlin",aliases:["kt"],keywords:n,contains:[e.COMMENT("/\\*\\*","\\*/",{relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+"}]}),e.C_LINE_COMMENT_MODE,b,{className:"keyword",begin:/\b(break|continue|return|this)\b/,starts:{contains:[{className:"symbol",begin:/@\w+/}]}},i,l,c,{className:"function",beginKeywords:"fun",end:"[(]|$",returnBegin:!0,excludeEnd:!0,keywords:n,relevance:5,contains:[{begin:e.UNDERSCORE_IDENT_RE+"\\s*\\(",returnBegin:!0,relevance:0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"type",begin:/</,end:/>/,keywords:"reified",relevance:0},{className:"params",begin:/\(/,end:/\)/,endsParent:!0,keywords:n,relevance:0,contains:[{begin:/:/,end:/[=,\/]/,endsWithParent:!0,contains:[E,e.C_LINE_COMMENT_MODE,b],relevance:0},e.C_LINE_COMMENT_MODE,b,l,c,r,e.C_NUMBER_MODE]},b]},{className:"class",beginKeywords:"class interface trait",end:/[:\{(]|$/,excludeEnd:!0,illegal:"extends implements",contains:[{beginKeywords:"public protected internal private constructor"},e.UNDERSCORE_TITLE_MODE,{className:"type",begin:/</,end:/>/,excludeBegin:!0,excludeEnd:!0,relevance:0},{className:"type",begin:/[,:]\s*/,end:/[<\(,]|$/,excludeBegin:!0,returnEnd:!0},l,c]},r,{className:"meta",begin:"^#!/usr/bin/env",end:"$",illegal:"\n"},o]}}}());hljs.registerLanguage("lisp",function(){"use strict";return function(e){var n="[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*",a="\\|[^]*?\\|",i="(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?",s={className:"literal",begin:"\\b(t{1}|nil)\\b"},l={className:"number",variants:[{begin:i,relevance:0},{begin:"#(b|B)[0-1]+(/[0-1]+)?"},{begin:"#(o|O)[0-7]+(/[0-7]+)?"},{begin:"#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?"},{begin:"#(c|C)\\("+i+" +"+i,end:"\\)"}]},b=e.inherit(e.QUOTE_STRING_MODE,{illegal:null}),g=e.COMMENT(";","$",{relevance:0}),r={begin:"\\*",end:"\\*"},t={className:"symbol",begin:"[:&]"+n},c={begin:n,relevance:0},d={begin:a},o={contains:[l,b,r,t,{begin:"\\(",end:"\\)",contains:["self",s,b,l,c]},c],variants:[{begin:"['`]\\(",end:"\\)"},{begin:"\\(quote ",end:"\\)",keywords:{name:"quote"}},{begin:"'"+a}]},v={variants:[{begin:"'"+n},{begin:"#'"+n+"(::"+n+")*"}]},m={begin:"\\(\\s*",end:"\\)"},u={endsWithParent:!0,relevance:0};return m.contains=[{className:"name",variants:[{begin:n,relevance:0},{begin:a}]},u],u.contains=[o,v,m,s,l,b,g,r,t,d,c],{name:"Lisp",illegal:/\S/,contains:[l,e.SHEBANG(),s,b,g,o,v,m,c]}}}());hljs.registerLanguage("lua",function(){"use strict";return function(e){var t="\\[=*\\[",a="\\]=*\\]",n={begin:t,end:a,contains:["self"]},o=[e.COMMENT("--(?!\\[=*\\[)","$"),e.COMMENT("--\\[=*\\[",a,{contains:[n],relevance:10})];return{name:"Lua",keywords:{$pattern:e.UNDERSCORE_IDENT_RE,literal:"true false nil",keyword:"and break do else elseif end for goto if in local not or repeat return then until while",built_in:"_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"},contains:o.concat([{className:"function",beginKeywords:"function",end:"\\)",contains:[e.inherit(e.TITLE_MODE,{begin:"([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*"}),{className:"params",begin:"\\(",endsWithParent:!0,contains:o}].concat(o)},e.C_NUMBER_MODE,e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,{className:"string",begin:t,end:a,contains:[n],relevance:5}])}}}());hljs.registerLanguage("matlab",function(){"use strict";return function(e){var a={relevance:0,contains:[{begin:"('|\\.')+"}]};return{name:"Matlab",keywords:{keyword:"arguments break case catch classdef continue else elseif end enumeration events for function global if methods otherwise parfor persistent properties return spmd switch try while",built_in:"sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i|0 inf nan isnan isinf isfinite j|0 why compan gallery hadamard hankel hilb invhilb magic pascal rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun legend intersect ismember procrustes hold num2cell "},illegal:'(//|"|#|/\\*|\\s+/\\w+)',contains:[{className:"function",beginKeywords:"function",end:"$",contains:[e.UNDERSCORE_TITLE_MODE,{className:"params",variants:[{begin:"\\(",end:"\\)"},{begin:"\\[",end:"\\]"}]}]},{className:"built_in",begin:/true|false/,relevance:0,starts:a},{begin:"[a-zA-Z][a-zA-Z_0-9]*('|\\.')+",relevance:0},{className:"number",begin:e.C_NUMBER_RE,relevance:0,starts:a},{className:"string",begin:"'",end:"'",contains:[e.BACKSLASH_ESCAPE,{begin:"''"}]},{begin:/\]|\}|\)/,relevance:0,starts:a},{className:"string",begin:'"',end:'"',contains:[e.BACKSLASH_ESCAPE,{begin:'""'}],starts:a},e.COMMENT("^\\s*%\\{\\s*$","^\\s*%\\}\\s*$"),e.COMMENT("%","$")]}}}());hljs.registerLanguage("r",function(){"use strict";function e(){for(var _len15=arguments.length,e=new Array(_len15),_key15=0;_key15<_len15;_key15++){e[_key15]=arguments[_key15]}return e.map(function(e){return(a=e)?"string"==typeof a?a:a.source:null;var a}).join("")}return function(a){var n=/(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/;return{name:"R",illegal:/->/,keywords:{$pattern:n,keyword:"function if in break next repeat else for while",literal:"NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",built_in:"LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm"},compilerExtensions:[function(a,n){if(!a.beforeMatch)return;if(a.starts)throw Error("beforeMatch cannot be used with starts");var i=Object.assign({},a);Object.keys(a).forEach(function(e){delete a[e]}),a.begin=e(i.beforeMatch,e("(?=",i.begin,")")),a.starts={relevance:0,contains:[Object.assign(i,{endsParent:!0})]},a.relevance=0,delete i.beforeMatch}],contains:[a.COMMENT(/#'/,/$/,{contains:[{className:"doctag",begin:"@examples",starts:{contains:[{begin:/\n/},{begin:/#'\s*(?=@[a-zA-Z]+)/,endsParent:!0},{begin:/#'/,end:/$/,excludeBegin:!0}]}},{className:"doctag",begin:"@param",end:/$/,contains:[{className:"variable",variants:[{begin:n},{begin:/`(?:\\.|[^`\\])+`/}],endsParent:!0}]},{className:"doctag",begin:/@[a-zA-Z]+/},{className:"meta-keyword",begin:/\\[a-zA-Z]+/}]}),a.HASH_COMMENT_MODE,{className:"string",contains:[a.BACKSLASH_ESCAPE],variants:[a.END_SAME_AS_BEGIN({begin:/[rR]"(-*)\(/,end:/\)(-*)"/}),a.END_SAME_AS_BEGIN({begin:/[rR]"(-*)\{/,end:/\}(-*)"/}),a.END_SAME_AS_BEGIN({begin:/[rR]"(-*)\[/,end:/\](-*)"/}),a.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\(/,end:/\)(-*)'/}),a.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\{/,end:/\}(-*)'/}),a.END_SAME_AS_BEGIN({begin:/[rR]'(-*)\[/,end:/\](-*)'/}),{begin:'"',end:'"',relevance:0},{begin:"'",end:"'",relevance:0}]},{className:"number",relevance:0,beforeMatch:/([^a-zA-Z0-9._])/,variants:[{match:/0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/},{match:/0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/},{match:/(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/}]},{begin:"%",end:"%"},{begin:e(/[a-zA-Z][a-zA-Z_0-9]*/,"\\s+<-\\s+")},{begin:"`",end:"`",contains:[{begin:/\\./}]}]}}}());hljs.registerLanguage("rust",function(){"use strict";return function(e){var n="([ui](8|16|32|64|128|size)|f(32|64))?",t="drop i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize f32 f64 str char bool Box Option Result String Vec Copy Send Sized Sync Drop Fn FnMut FnOnce ToOwned Clone Debug PartialEq PartialOrd Eq Ord AsRef AsMut Into From Default Iterator Extend IntoIterator DoubleEndedIterator ExactSizeIterator SliceConcatExt ToString assert! assert_eq! bitflags! bytes! cfg! col! concat! concat_idents! debug_assert! debug_assert_eq! env! panic! file! format! format_args! include_bin! include_str! line! local_data_key! module_path! option_env! print! println! select! stringify! try! unimplemented! unreachable! vec! write! writeln! macro_rules! assert_ne! debug_assert_ne!";return{name:"Rust",aliases:["rs"],keywords:{$pattern:e.IDENT_RE+"!?",keyword:"abstract as async await become box break const continue crate do dyn else enum extern false final fn for if impl in let loop macro match mod move mut override priv pub ref return self Self static struct super trait true try type typeof unsafe unsized use virtual where while yield",literal:"true false Some None Ok Err",built_in:t},illegal:"</",contains:[e.C_LINE_COMMENT_MODE,e.COMMENT("/\\*","\\*/",{contains:["self"]}),e.inherit(e.QUOTE_STRING_MODE,{begin:/b?"/,illegal:null}),{className:"string",variants:[{begin:/r(#*)"(.|\n)*?"\1(?!#)/},{begin:/b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/}]},{className:"symbol",begin:/'[a-zA-Z_][a-zA-Z0-9_]*/},{className:"number",variants:[{begin:"\\b0b([01_]+)"+n},{begin:"\\b0o([0-7_]+)"+n},{begin:"\\b0x([A-Fa-f0-9_]+)"+n},{begin:"\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)"+n}],relevance:0},{className:"function",beginKeywords:"fn",end:"(\\(|<)",excludeEnd:!0,contains:[e.UNDERSCORE_TITLE_MODE]},{className:"meta",begin:"#!?\\[",end:"\\]",contains:[{className:"meta-string",begin:/"/,end:/"/}]},{className:"class",beginKeywords:"type",end:";",contains:[e.inherit(e.UNDERSCORE_TITLE_MODE,{endsParent:!0})],illegal:"\\S"},{className:"class",beginKeywords:"trait enum struct union",end:/\{/,contains:[e.inherit(e.UNDERSCORE_TITLE_MODE,{endsParent:!0})],illegal:"[\\w\\d]"},{begin:e.IDENT_RE+"::",keywords:{built_in:t}},{begin:"->"}]}}}());hljs.registerLanguage("sql",function(){"use strict";function e(e){return e?"string"==typeof e?e:e.source:null}function r(){for(var _len16=arguments.length,r=new Array(_len16),_key16=0;_key16<_len16;_key16++){r[_key16]=arguments[_key16]}return r.map(function(r){return e(r)}).join("")}function t(){for(var _len17=arguments.length,r=new Array(_len17),_key17=0;_key17<_len17;_key17++){r[_key17]=arguments[_key17]}return"("+r.map(function(r){return e(r)}).join("|")+")"}return function(e){var n=e.COMMENT("--","$"),a=["true","false","unknown"],i=["bigint","binary","blob","boolean","char","character","clob","date","dec","decfloat","decimal","float","int","integer","interval","nchar","nclob","national","numeric","real","row","smallint","time","timestamp","varchar","varying","varbinary"],s=["abs","acos","array_agg","asin","atan","avg","cast","ceil","ceiling","coalesce","corr","cos","cosh","count","covar_pop","covar_samp","cume_dist","dense_rank","deref","element","exp","extract","first_value","floor","json_array","json_arrayagg","json_exists","json_object","json_objectagg","json_query","json_table","json_table_primitive","json_value","lag","last_value","lead","listagg","ln","log","log10","lower","max","min","mod","nth_value","ntile","nullif","percent_rank","percentile_cont","percentile_disc","position","position_regex","power","rank","regr_avgx","regr_avgy","regr_count","regr_intercept","regr_r2","regr_slope","regr_sxx","regr_sxy","regr_syy","row_number","sin","sinh","sqrt","stddev_pop","stddev_samp","substring","substring_regex","sum","tan","tanh","translate","translate_regex","treat","trim","trim_array","unnest","upper","value_of","var_pop","var_samp","width_bucket"],o=["create table","insert into","primary key","foreign key","not null","alter table","add constraint","grouping sets","on overflow","character set","respect nulls","ignore nulls","nulls first","nulls last","depth first","breadth first"],c=s,l=["abs","acos","all","allocate","alter","and","any","are","array","array_agg","array_max_cardinality","as","asensitive","asin","asymmetric","at","atan","atomic","authorization","avg","begin","begin_frame","begin_partition","between","bigint","binary","blob","boolean","both","by","call","called","cardinality","cascaded","case","cast","ceil","ceiling","char","char_length","character","character_length","check","classifier","clob","close","coalesce","collate","collect","column","commit","condition","connect","constraint","contains","convert","copy","corr","corresponding","cos","cosh","count","covar_pop","covar_samp","create","cross","cube","cume_dist","current","current_catalog","current_date","current_default_transform_group","current_path","current_role","current_row","current_schema","current_time","current_timestamp","current_path","current_role","current_transform_group_for_type","current_user","cursor","cycle","date","day","deallocate","dec","decimal","decfloat","declare","default","define","delete","dense_rank","deref","describe","deterministic","disconnect","distinct","double","drop","dynamic","each","element","else","empty","end","end_frame","end_partition","end-exec","equals","escape","every","except","exec","execute","exists","exp","external","extract","false","fetch","filter","first_value","float","floor","for","foreign","frame_row","free","from","full","function","fusion","get","global","grant","group","grouping","groups","having","hold","hour","identity","in","indicator","initial","inner","inout","insensitive","insert","int","integer","intersect","intersection","interval","into","is","join","json_array","json_arrayagg","json_exists","json_object","json_objectagg","json_query","json_table","json_table_primitive","json_value","lag","language","large","last_value","lateral","lead","leading","left","like","like_regex","listagg","ln","local","localtime","localtimestamp","log","log10","lower","match","match_number","match_recognize","matches","max","member","merge","method","min","minute","mod","modifies","module","month","multiset","national","natural","nchar","nclob","new","no","none","normalize","not","nth_value","ntile","null","nullif","numeric","octet_length","occurrences_regex","of","offset","old","omit","on","one","only","open","or","order","out","outer","over","overlaps","overlay","parameter","partition","pattern","per","percent","percent_rank","percentile_cont","percentile_disc","period","portion","position","position_regex","power","precedes","precision","prepare","primary","procedure","ptf","range","rank","reads","real","recursive","ref","references","referencing","regr_avgx","regr_avgy","regr_count","regr_intercept","regr_r2","regr_slope","regr_sxx","regr_sxy","regr_syy","release","result","return","returns","revoke","right","rollback","rollup","row","row_number","rows","running","savepoint","scope","scroll","search","second","seek","select","sensitive","session_user","set","show","similar","sin","sinh","skip","smallint","some","specific","specifictype","sql","sqlexception","sqlstate","sqlwarning","sqrt","start","static","stddev_pop","stddev_samp","submultiset","subset","substring","substring_regex","succeeds","sum","symmetric","system","system_time","system_user","table","tablesample","tan","tanh","then","time","timestamp","timezone_hour","timezone_minute","to","trailing","translate","translate_regex","translation","treat","trigger","trim","trim_array","true","truncate","uescape","union","unique","unknown","unnest","update   ","upper","user","using","value","values","value_of","var_pop","var_samp","varbinary","varchar","varying","versioning","when","whenever","where","width_bucket","window","with","within","without","year","add","asc","collation","desc","final","first","last","view"].filter(function(e){return!s.includes(e)}),u={begin:r(/\b/,t.apply(void 0,c),/\s*\(/),keywords:{built_in:c.join(" ")}};return{name:"SQL",case_insensitive:!0,illegal:/[{}]|<\//,keywords:{$pattern:/\b[\w\.]+/,keyword:function(e){var _ref11=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},r=_ref11.exceptions,t=_ref11.when;var n=t;return r=r||[],e.map(function(e){return e.match(/\|\d+$/)||r.includes(e)?e:n(e)?e+"|0":e})}(l,{when:function when(e){return e.length<3}}).join(" "),literal:a.join(" "),type:i.join(" "),built_in:"current_catalog current_date current_default_transform_group current_path current_role current_schema current_transform_group_for_type current_user session_user system_time system_user current_time localtime current_timestamp localtimestamp"},contains:[{begin:t.apply(void 0,o),keywords:{$pattern:/[\w\.]+/,keyword:l.concat(o).join(" "),literal:a.join(" "),type:i.join(" ")}},{className:"type",begin:t("double precision","large object","with timezone","without timezone")},u,{className:"variable",begin:/@[a-z0-9]+/},{className:"string",variants:[{begin:/'/,end:/'/,contains:[{begin:/''/}]}]},{begin:/"/,end:/"/,contains:[{begin:/""/}]},e.C_NUMBER_MODE,e.C_BLOCK_COMMENT_MODE,n,{className:"operator",begin:/[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,relevance:0}]}}}());hljs.registerLanguage("scheme",function(){"use strict";return function(e){var t="[^\\(\\)\\[\\]\\{\\}\",'`;#|\\\\\\s]+",n={$pattern:t,"builtin-name":"case-lambda call/cc class define-class exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / ; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char->integer char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact->inexact exact? exp expt floor force gcd imag-part inexact->exact inexact? input-port? integer->char integer? interaction-environment lcm length list list->string list->vector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number->string number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string->list string->number string->symbol string-append string-ci<=? string-ci<? string-ci=? string-ci>=? string-ci>? string-copy string-fill! string-length string-ref string-set! string<=? string<? string=? string>=? string>? string? substring symbol->string symbol? tan transcript-off transcript-on truncate values vector vector->list vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"},r={className:"literal",begin:"(#t|#f|#\\\\"+t+"|#\\\\.)"},a={className:"number",variants:[{begin:"(-|\\+)?\\d+([./]\\d+)?",relevance:0},{begin:"(-|\\+)?\\d+([./]\\d+)?[+\\-](-|\\+)?\\d+([./]\\d+)?i",relevance:0},{begin:"#b[0-1]+(/[0-1]+)?"},{begin:"#o[0-7]+(/[0-7]+)?"},{begin:"#x[0-9a-f]+(/[0-9a-f]+)?"}]},i=e.QUOTE_STRING_MODE,c=[e.COMMENT(";","$",{relevance:0}),e.COMMENT("#\\|","\\|#")],s={begin:t,relevance:0},l={className:"symbol",begin:"'"+t},o={endsWithParent:!0,relevance:0},g={variants:[{begin:/'/},{begin:"`"}],contains:[{begin:"\\(",end:"\\)",contains:["self",r,i,a,s,l]}]},u={className:"name",relevance:0,begin:t,keywords:n},d={variants:[{begin:"\\(",end:"\\)"},{begin:"\\[",end:"\\]"}],contains:[{begin:/lambda/,endsWithParent:!0,returnBegin:!0,contains:[u,{endsParent:!0,variants:[{begin:/\(/,end:/\)/},{begin:/\[/,end:/\]/}],contains:[s]}]},u,o]};return o.contains=[r,a,i,s,l,g,d].concat(c),{name:"Scheme",illegal:/\S/,contains:[e.SHEBANG(),a,i,l,g,d].concat(c)}}}());hljs.registerLanguage("swift",function(){"use strict";function e(e){return e?"string"==typeof e?e:e.source:null}function n(e){return a("(?=",e,")")}function a(){for(var _len18=arguments.length,n=new Array(_len18),_key18=0;_key18<_len18;_key18++){n[_key18]=arguments[_key18]}return n.map(function(n){return e(n)}).join("")}function t(){for(var _len19=arguments.length,n=new Array(_len19),_key19=0;_key19<_len19;_key19++){n[_key19]=arguments[_key19]}return"("+n.map(function(n){return e(n)}).join("|")+")"}var i=function i(e){return a(/\b/,e,/\w$/.test(e)?/\b/:/\B/)},s=["Protocol","Type"].map(i),u=["init","self"].map(i),c=["Any","Self"],r=["associatedtype",/as\?/,/as!/,"as","break","case","catch","class","continue","convenience","default","defer","deinit","didSet","do","dynamic","else","enum","extension","fallthrough",/fileprivate\(set\)/,"fileprivate","final","for","func","get","guard","if","import","indirect","infix",/init\?/,/init!/,"inout",/internal\(set\)/,"internal","in","is","lazy","let","mutating","nonmutating",/open\(set\)/,"open","operator","optional","override","postfix","precedencegroup","prefix",/private\(set\)/,"private","protocol",/public\(set\)/,"public","repeat","required","rethrows","return","set","some","static","struct","subscript","super","switch","throws","throw",/try\?/,/try!/,"try","typealias",/unowned\(safe\)/,/unowned\(unsafe\)/,"unowned","var","weak","where","while","willSet"],o=["false","nil","true"],l=["#colorLiteral","#column","#dsohandle","#else","#elseif","#endif","#error","#file","#fileID","#fileLiteral","#filePath","#function","#if","#imageLiteral","#keyPath","#line","#selector","#sourceLocation","#warn_unqualified_access","#warning"],m=["abs","all","any","assert","assertionFailure","debugPrint","dump","fatalError","getVaList","isKnownUniquelyReferenced","max","min","numericCast","pointwiseMax","pointwiseMin","precondition","preconditionFailure","print","readLine","repeatElement","sequence","stride","swap","swift_unboxFromSwiftValueWithType","transcode","type","unsafeBitCast","unsafeDowncast","withExtendedLifetime","withUnsafeMutablePointer","withUnsafePointer","withVaList","withoutActuallyEscaping","zip"],p=t(/[/=\-+!*%<>&|^~?]/,/[\u00A1-\u00A7]/,/[\u00A9\u00AB]/,/[\u00AC\u00AE]/,/[\u00B0\u00B1]/,/[\u00B6\u00BB\u00BF\u00D7\u00F7]/,/[\u2016-\u2017]/,/[\u2020-\u2027]/,/[\u2030-\u203E]/,/[\u2041-\u2053]/,/[\u2055-\u205E]/,/[\u2190-\u23FF]/,/[\u2500-\u2775]/,/[\u2794-\u2BFF]/,/[\u2E00-\u2E7F]/,/[\u3001-\u3003]/,/[\u3008-\u3020]/,/[\u3030]/),F=t(p,/[\u0300-\u036F]/,/[\u1DC0-\u1DFF]/,/[\u20D0-\u20FF]/,/[\uFE00-\uFE0F]/,/[\uFE20-\uFE2F]/),d=a(p,F,"*"),b=t(/[a-zA-Z_]/,/[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,/[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,/[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,/[\u1E00-\u1FFF]/,/[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,/[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,/[\u2C00-\u2DFF\u2E80-\u2FFF]/,/[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,/[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,/[\uFE47-\uFEFE\uFF00-\uFFFD]/),f=t(b,/\d/,/[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/),h=a(b,f,"*"),w=a(/[A-Z]/,f,"*"),y=["autoclosure",a(/convention\(/,t("swift","block","c"),/\)/),"discardableResult","dynamicCallable","dynamicMemberLookup","escaping","frozen","GKInspectable","IBAction","IBDesignable","IBInspectable","IBOutlet","IBSegueAction","inlinable","main","nonobjc","NSApplicationMain","NSCopying","NSManaged",a(/objc\(/,h,/\)/),"objc","objcMembers","propertyWrapper","requires_stored_property_inits","testable","UIApplicationMain","unknown","usableFromInline"],g=["iOS","iOSApplicationExtension","macOS","macOSApplicationExtension","macCatalyst","macCatalystApplicationExtension","watchOS","watchOSApplicationExtension","tvOS","tvOSApplicationExtension","swift"];return function(e){var p={match:/\s+/,relevance:0},b=e.COMMENT("/\\*","\\*/",{contains:["self"]}),E=[e.C_LINE_COMMENT_MODE,b],v={className:"keyword",begin:a(/\./,n(t.apply(void 0,_toConsumableArray(s).concat(_toConsumableArray(u))))),end:t.apply(void 0,_toConsumableArray(s).concat(_toConsumableArray(u))),excludeBegin:!0},A={match:a(/\./,t.apply(void 0,r)),relevance:0},N=r.filter(function(e){return"string"==typeof e}).concat(["_|0"]),C={variants:[{className:"keyword",match:t.apply(void 0,_toConsumableArray(r.filter(function(e){return"string"!=typeof e}).concat(c).map(i)).concat(_toConsumableArray(u)))}]},D={$pattern:t(/\b\w+/,/#\w+/),keyword:N.concat(l).join(" "),literal:o.join(" ")},B=[v,A,C],_=[{match:a(/\./,t.apply(void 0,m)),relevance:0},{className:"built_in",match:a(/\b/,t.apply(void 0,m),/(?=\()/)}],k={match:/->/,relevance:0},S=[k,{className:"operator",relevance:0,variants:[{match:d},{match:"\\.(\\.|".concat(F,")+")}]}],M="([0-9a-fA-F]_*)+",x={className:"number",relevance:0,variants:[{match:"\\b(([0-9]_*)+)(\\.(([0-9]_*)+))?([eE][+-]?(([0-9]_*)+))?\\b"},{match:"\\b0x(".concat(M,")(\\.(").concat(M,"))?([pP][+-]?(([0-9]_*)+))?\\b")},{match:/\b0o([0-7]_*)+\b/},{match:/\b0b([01]_*)+\b/}]},I=function I(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return{className:"subst",variants:[{match:a(/\\/,e,/[0\\tnr"']/)},{match:a(/\\/,e,/u\{[0-9a-fA-F]{1,8}\}/)}]}},L=function L(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return{className:"subst",match:a(/\\/,e,/[\t ]*(?:[\r\n]|\r\n)/)}},O=function O(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return{className:"subst",label:"interpol",begin:a(/\\/,e,/\(/),end:/\)/}},$=function $(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return{begin:a(e,/"""/),end:a(/"""/,e),contains:[I(e),L(e),O(e)]}},j=function j(){var e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:"";return{begin:a(e,/"/),end:a(/"/,e),contains:[I(e),O(e)]}},P={className:"string",variants:[$(),$("#"),$("##"),$("###"),j(),j("#"),j("##"),j("###")]},K={match:a(/`/,h,/`/)},T=[K,{className:"variable",match:/\$\d+/},{className:"variable",match:"\\$".concat(f,"+")}],z=[{match:/(@|#)available/,className:"keyword",starts:{contains:[{begin:/\(/,end:/\)/,keywords:g.join(" "),contains:[].concat(S,[x,P])}]}},{className:"keyword",match:a(/@/,t.apply(void 0,y))},{className:"meta",match:a(/@/,h)}],q={match:n(/\b[A-Z]/),relevance:0,contains:[{className:"type",match:a(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/,f,"+")},{className:"type",match:w,relevance:0},{match:/[?!]+/,relevance:0},{match:/\.\.\./,relevance:0},{match:a(/\s+&\s+/,n(w)),relevance:0}]},U={begin:/</,end:/>/,keywords:D,contains:[].concat(E,B,z,[k,q])};q.contains.push(U);var Z={begin:/\(/,end:/\)/,relevance:0,keywords:D,contains:["self",{match:a(h,/\s*:/),keywords:"_|0",relevance:0}].concat(E,B,_,S,[x,P],T,z,[q])},V={beginKeywords:"func",contains:[{className:"title",match:t(K.match,h,d),endsParent:!0,relevance:0},p]},W={begin:/</,end:/>/,contains:[].concat(E,[q])},G={begin:/\(/,end:/\)/,keywords:D,contains:[{begin:t(n(a(h,/\s*:/)),n(a(h,/\s+/,h,/\s*:/))),end:/:/,relevance:0,contains:[{className:"keyword",match:/\b_\b/},{className:"params",match:h}]}].concat(E,B,S,[x,P],z,[q,Z]),endsParent:!0,illegal:/["']/},R={className:"function",match:n(/\bfunc\b/),contains:[V,W,G,p],illegal:[/\[/,/%/]},X={className:"function",match:/\b(subscript|init[?!]?)\s*(?=[<(])/,keywords:{keyword:"subscript init init? init!",$pattern:/\w+[?!]?/},contains:[W,G,p],illegal:/\[|%/};var _iterator=_createForOfIteratorHelper(P.variants),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _e7=_step.value;var _n4=_e7.contains.find(function(e){return"interpol"===e.label});_n4.keywords=D;var _a5=[].concat(B,_,S,[x,P],T);_n4.contains=[].concat(_toConsumableArray(_a5),[{begin:/\(/,end:/\)/,contains:["self"].concat(_toConsumableArray(_a5))}])}}catch(err){_iterator.e(err)}finally{_iterator.f()}return{name:"Swift",keywords:D,contains:[].concat(E,[R,X,{className:"class",beginKeywords:"struct protocol class extension enum",end:"\\{",excludeEnd:!0,keywords:D,contains:[e.inherit(e.TITLE_MODE,{begin:/[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/})].concat(B)},{beginKeywords:"import",end:/$/,contains:[].concat(E),relevance:0}],B,_,S,[x,P],T,z,[q,Z])}}}());hljs.registerLanguage("typescript",function(){"use strict";var e="[A-Za-z$_][0-9A-Za-z$_]*",n=["as","in","of","if","for","while","finally","var","new","function","do","return","void","else","break","catch","instanceof","with","throw","case","default","try","switch","continue","typeof","delete","let","yield","const","class","debugger","async","await","static","import","from","export","extends"],a=["true","false","null","undefined","NaN","Infinity"],s=[].concat(["setInterval","setTimeout","clearInterval","clearTimeout","require","exports","eval","isFinite","isNaN","parseFloat","parseInt","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","unescape"],["arguments","this","super","console","window","document","localStorage","module","global"],["Intl","DataView","Number","Math","Date","String","RegExp","Object","Function","Boolean","Error","Symbol","Set","Map","WeakSet","WeakMap","Proxy","Reflect","JSON","Promise","Float64Array","Int16Array","Int32Array","Int8Array","Uint16Array","Uint32Array","Float32Array","Array","Uint8Array","Uint8ClampedArray","ArrayBuffer"],["EvalError","InternalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError"]);function t(e){return i("(?=",e,")")}function i(){for(var _len20=arguments.length,e=new Array(_len20),_key20=0;_key20<_len20;_key20++){e[_key20]=arguments[_key20]}return e.map(function(e){return(n=e)?"string"==typeof n?n:n.source:null;var n}).join("")}return function(r){var c={$pattern:e,keyword:n.concat(["type","namespace","typedef","interface","public","private","protected","implements","declare","abstract","readonly"]).join(" "),literal:a.join(" "),built_in:s.concat(["any","void","number","boolean","string","object","never","enum"]).join(" ")},o={className:"meta",begin:"@[A-Za-z$_][0-9A-Za-z$_]*"},l=function l(e,n,a){var s=e.contains.findIndex(function(e){return e.label===n});if(-1===s)throw Error("can not find mode to replace");e.contains.splice(s,1,a)},b=function(r){var c=e,o={begin:/<[A-Za-z0-9\\._:-]+/,end:/\/[A-Za-z0-9\\._:-]+>|\/>/,isTrulyOpeningTag:function isTrulyOpeningTag(e,n){var a=e[0].length+e.index,s=e.input[a];"<"!==s?">"===s&&(function(e,_ref12){var n=_ref12.after;var a="</"+e[0].slice(1);return-1!==e.input.indexOf(a,n)}(e,{after:a})||n.ignoreMatch()):n.ignoreMatch()}},l={$pattern:e,keyword:n.join(" "),literal:a.join(" "),built_in:s.join(" ")},b="\\.([0-9](_?[0-9])*)",d="0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*",g={className:"number",variants:[{begin:"(\\b(".concat(d,")((").concat(b,")|\\.)?|(").concat(b,"))[eE][+-]?([0-9](_?[0-9])*)\\b")},{begin:"\\b(".concat(d,")\\b((").concat(b,")\\b|\\.)?|(").concat(b,")\\b")},{begin:"\\b(0|[1-9](_?[0-9])*)n\\b"},{begin:"\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b"},{begin:"\\b0[bB][0-1](_?[0-1])*n?\\b"},{begin:"\\b0[oO][0-7](_?[0-7])*n?\\b"},{begin:"\\b0[0-7]+n?\\b"}],relevance:0},u={className:"subst",begin:"\\$\\{",end:"\\}",keywords:l,contains:[]},E={begin:"html`",end:"",starts:{end:"`",returnEnd:!1,contains:[r.BACKSLASH_ESCAPE,u],subLanguage:"xml"}},m={begin:"css`",end:"",starts:{end:"`",returnEnd:!1,contains:[r.BACKSLASH_ESCAPE,u],subLanguage:"css"}},_={className:"string",begin:"`",end:"`",contains:[r.BACKSLASH_ESCAPE,u]},y={className:"comment",variants:[r.COMMENT(/\/\*\*(?!\/)/,"\\*/",{relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+",contains:[{className:"type",begin:"\\{",end:"\\}",relevance:0},{className:"variable",begin:c+"(?=\\s*(-)|$)",endsParent:!0,relevance:0},{begin:/(?=[^\n])\s/,relevance:0}]}]}),r.C_BLOCK_COMMENT_MODE,r.C_LINE_COMMENT_MODE]},p=[r.APOS_STRING_MODE,r.QUOTE_STRING_MODE,E,m,_,g,r.REGEXP_MODE];u.contains=p.concat({begin:/\{/,end:/\}/,keywords:l,contains:["self"].concat(p)});var N=[].concat(y,u.contains),f=N.concat([{begin:/\(/,end:/\)/,keywords:l,contains:["self"].concat(N)}]),A={className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:l,contains:f};return{name:"Javascript",aliases:["js","jsx","mjs","cjs"],keywords:l,exports:{PARAMS_CONTAINS:f},illegal:/#(?![$_A-z])/,contains:[r.SHEBANG({label:"shebang",binary:"node",relevance:5}),{label:"use_strict",className:"meta",relevance:10,begin:/^\s*['"]use (strict|asm)['"]/},r.APOS_STRING_MODE,r.QUOTE_STRING_MODE,E,m,_,y,g,{begin:i(/[{,\n]\s*/,t(i(/(((\/\/.*$)|(\/\*(\*[^/]|[^*])*\*\/))\s*)*/,c+"\\s*:"))),relevance:0,contains:[{className:"attr",begin:c+t("\\s*:"),relevance:0}]},{begin:"("+r.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",contains:[y,r.REGEXP_MODE,{className:"function",begin:"(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|"+r.UNDERSCORE_IDENT_RE+")\\s*=>",returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:r.UNDERSCORE_IDENT_RE,relevance:0},{className:null,begin:/\(\s*\)/,skip:!0},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:l,contains:f}]}]},{begin:/,/,relevance:0},{className:"",begin:/\s/,end:/\s*/,skip:!0},{variants:[{begin:"<>",end:"</>"},{begin:o.begin,"on:begin":o.isTrulyOpeningTag,end:o.end}],subLanguage:"xml",contains:[{begin:o.begin,end:o.end,skip:!0,contains:["self"]}]}],relevance:0},{className:"function",beginKeywords:"function",end:/[{;]/,excludeEnd:!0,keywords:l,contains:["self",r.inherit(r.TITLE_MODE,{begin:c}),A],illegal:/%/},{beginKeywords:"while if switch catch for"},{className:"function",begin:r.UNDERSCORE_IDENT_RE+"\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",returnBegin:!0,contains:[A,r.inherit(r.TITLE_MODE,{begin:c})]},{variants:[{begin:"\\."+c},{begin:"\\$"+c}],relevance:0},{className:"class",beginKeywords:"class",end:/[{;=]/,excludeEnd:!0,illegal:/[:"[\]]/,contains:[{beginKeywords:"extends"},r.UNDERSCORE_TITLE_MODE]},{begin:/\b(?=constructor)/,end:/[{;]/,excludeEnd:!0,contains:[r.inherit(r.TITLE_MODE,{begin:c}),"self",A]},{begin:"(get|set)\\s+(?="+c+"\\()",end:/\{/,keywords:"get set",contains:[r.inherit(r.TITLE_MODE,{begin:c}),{begin:/\(\)/},A]},{begin:/\$[(.]/}]}}(r);return Object.assign(b.keywords,c),b.exports.PARAMS_CONTAINS.push(o),b.contains=b.contains.concat([o,{beginKeywords:"namespace",end:/\{/,excludeEnd:!0},{beginKeywords:"interface",end:/\{/,excludeEnd:!0,keywords:"interface extends"}]),l(b,"shebang",r.SHEBANG()),l(b,"use_strict",{className:"meta",relevance:10,begin:/^\s*['"]use strict['"]/}),b.contains.find(function(e){return"function"===e.className}).relevance=0,Object.assign(b,{name:"TypeScript",aliases:["ts"]}),b}}());hljs.registerLanguage("yaml",function(){"use strict";return function(e){var n="true false yes no null",a="[\\w#;/?:@&=+$,.~*'()[\\]]+",s={className:"string",relevance:0,variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/\S+/}],contains:[e.BACKSLASH_ESCAPE,{className:"template-variable",variants:[{begin:/\{\{/,end:/\}\}/},{begin:/%\{/,end:/\}/}]}]},i=e.inherit(s,{variants:[{begin:/'/,end:/'/},{begin:/"/,end:/"/},{begin:/[^\s,{}[\]]+/}]}),l={end:",",endsWithParent:!0,excludeEnd:!0,contains:[],keywords:n,relevance:0},t={begin:/\{/,end:/\}/,contains:[l],illegal:"\\n",relevance:0},g={begin:"\\[",end:"\\]",contains:[l],illegal:"\\n",relevance:0},b=[{className:"attr",variants:[{begin:"\\w[\\w :\\/.-]*:(?=[ \t]|$)"},{begin:'"\\w[\\w :\\/.-]*":(?=[ \t]|$)'},{begin:"'\\w[\\w :\\/.-]*':(?=[ \t]|$)"}]},{className:"meta",begin:"^---\\s*$",relevance:10},{className:"string",begin:"[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"},{begin:"<%[%=-]?",end:"[%-]?%>",subLanguage:"ruby",excludeBegin:!0,excludeEnd:!0,relevance:0},{className:"type",begin:"!\\w+!"+a},{className:"type",begin:"!<"+a+">"},{className:"type",begin:"!"+a},{className:"type",begin:"!!"+a},{className:"meta",begin:"&"+e.UNDERSCORE_IDENT_RE+"$"},{className:"meta",begin:"\\*"+e.UNDERSCORE_IDENT_RE+"$"},{className:"bullet",begin:"-(?=[ ]|$)",relevance:0},e.HASH_COMMENT_MODE,{beginKeywords:n,keywords:{literal:n}},{className:"number",begin:"\\b[0-9]{4}(-[0-9][0-9]){0,2}([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?(\\.[0-9]*)?([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?\\b"},{className:"number",begin:e.C_NUMBER_RE+"\\b",relevance:0},t,g,s],r=[].concat(b);return r.pop(),r.push(i),l.contains=r,{name:"YAML",case_insensitive:!0,aliases:["yml","YAML"],contains:b}}}());hljs.registerLanguage("plaintext",function(){"use strict";return function(t){return{name:"Plain text",aliases:["text","txt"],disableAutodetect:!0}}}());hljs.registerLanguage("pyxlscript",function(){"use strict";return function(_){var e={keywords:"assert todo debug_pause debug_print|4 debug_watch with_camera let|2 const mod local preserving_transform|10 for at in and or xor not with while until if then else push_mode pop_mode reset_game set_mode return def break continue default bitand bitnot bitor bitxor bitshl bitshr because quit_game launch_game deg true false nan IDE_USER VIEW_ARRAY HOST_CODE SCREEN_SIZE pi epsilon infinity nil|2 ∞ ½ ⅓ ⅔ ¼ ¾ ⅕ ⅖ ⅗ ⅘ ⅙ ⅐ ⅛ ⅑ ⅒ ° ε π ∅ ∞ ⁰ ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ CREDITS CONSTANTS ASSETS SOURCE_LOCATION gamepad_array touch joy",built_in:"set_screen_size ray_intersect ray_intersect_map up_y draw_bounds draw_disk reset_clip reset_transform set_clip draw_line draw_sprite_corner_rect intersect_clip draw_point draw_corner_rect reset_camera set_camera get_camera draw_rect get_background set_background text_width get_sprite_pixel_color draw_sprite draw_text draw_tri draw_poly get_transform get_clip rotation_sign sign_nonzero set_transform xy xz_to_xyz xy_to_angle angle_to_xy xy_to_xyz xz_to_xy xy_to_xz xz xyz any_button_press any_button_release draw_map draw_map_span map_resize map_generate_maze map_resize get_mode get_previous_mode get_map_pixel_color get_map_pixel_color_by_ws_coord get_map_sprite set_map_sprite get_map_sprite_by_ws_coord set_map_sprite_by_ws_coord parse unparse format_number uppercase lowercase resume_audio get_audio_status ray_value play_sound resume_sound stop_audio game_frames mode_frames delay sequence add_frame_hook make_spline remove_frame_hook make_entity entity_mass entity_move entity_inertia entity_area draw_entity overlaps entity_remove_all entity_add_child entity_remove_child entity_update_children entity_simulate split now game_frames mode_frames replace starts_with ends_with find_map_path find_path join entity_apply_force entity_apply_impulse perp gray rgb rgba hsv hsva last_value last_key insert reverse reversed call set_post_effects get_post_effects reset_post_effects push_front local_time device_control physics_add_contact_callback physics_entity_contacts physics_entity_has_contacts physics_add_entity physics_remove_entity physics_remove_all physics_attach physics_detach make_physics make_contact_group draw_physics physics_simulate min max mid abs acos atan asin sign sign_nonzero cos clamp hash smoothstep lerp lerp_angle smootherstep perceptual_lerp_color log log2 log10 noise oscillate pow make_random random_sign random_integer random_within_cube random_within_sphere random_on_sphere random_within_circle random_within_square random_on_square random_on_circle random_direction2D random_direction3D random_value random_gaussian random_gaussian2D random_truncated_gaussian random_truncated_gaussian2D random ξ sgn sqrt sin set_random_seed tan conncatenate extend extended deep_clone clone copy draw_previous_mode cross direction dot equivalent magnitude magnitude_squared max_component min_component xy xyz trim_spaces slice set_pause_menu iterate fast_remove_key find keys remove_key substring shuffle shuffled sort resize push pop pop_front push_front fast_remove_value remove_values remove_all round floor ceil todo debug_pause debug_print set_playback_rate set_pitch set_volume set_pan set_loop remove_frame_hooks_by_mode is_string is_function is_NaN is_object is_nil is_boolean is_number is_array type rgb_to_xyz axis_aligned_draw_box load_local save_local transform_map_layer_to_ws_z transform_ws_z_to_map_layer transform_map_space_to_ws transform_ws_to_map_space transform_cs_to_ss transform_cs_z_to_ws_z transform_ws_z_to_cs_z transform_ss_to_cs transform_cs_to_ws transform_ws_to_cs transform_es_to_ws transform_ws_to_ws transform_to_parent transform_to_child push_guest_menu_mode stop_hosting start_hosting disconnect_guest ABS ADD DIV MAD MUL SUB MAX MIN SIGN CLAMP LERP RGB_ADD_RGB RGB_SUB_RGB RGB_MUL_RGB RGB_DIV_RGB RGB_MUL RGB_DIV RGB_DOT_RGB RGB_LERP RGBA_ADD_RGBA RGBA_SUB_RGBA RGBA_MUL_RGBA RGBA_DIV_RGBA RGBA_MUL RGBA_DIV RGBA_DOT_RGBA RGBA_LERP XY_MAD_S_XY XY_MAD_XY_XY XY_ADD_XY XY_SUB_XY XY_MUL_XY XY_DIV_XY XY_MUL XY_DIV XY_DOT_XY XY_CRS_XY XZ_ADD_XZ XZ_SUB_XZ XZ_MUL_XZ XZ_DIV_XZ XZ_MUL XZ_DIV XZ_DOT_XZ XYZ_DIRECTION XYZ_ADD_XYZ XYZ_SUB_XYZ XYZ_MUL_XYZ XYZ_DIV_XYZ XYZ_MUL XYZ_DIV XYZ_DOT_XYZ XYZ_CRS_XYZ XY_DIRECTION MAT2x2_MATMUL_XY MAT2x2_MATMUL_XZ MAT3x3_MATMUL_XYZ MAT3x4_MATMUL_XYZ MAT3x4_MATMUL_XYZW"},t={className:"subst",begin:/\{/,end:/\}/,keywords:e},s={className:"string",contains:[_.BACKSLASH_ESCAPE],variants:[{begin:/(u|r|ur)"/,end:/"/,relevance:10},{begin:/(b|br)"/,end:/"/},{begin:/(fr|rf|f)"/,end:/"/,contains:[_.BACKSLASH_ESCAPE,t]},_.QUOTE_STRING_MODE]},a={className:"number",relevance:0,variants:[{begin:/\u2205|[+-]?[\u221e\u03b5\u03c0\xbd\u2153\u2154\xbc\xbe\u2155\u2156\u2157\u2158\u2159\u2150\u215b\u2151\u2152`]/},{begin:/#[0-7a-fA-F]+/},{begin:/\b[+-]?(\d*\.)?\d+(%|deg|\xb0)?/},{begin:/[\u2080\u2081\u2082\u2083\u2084\u2085\u2086\u2087\u2088\u2089\u2070\xb9\xb2\xb3\u2074\u2075\u2076\u2077\u2078\u2079]/}]},r={className:"params",begin:/\(/,end:/\)/,contains:[a,s]};return t.contains=[s,a],{aliases:["pyxlscript"],keywords:e,illegal:/(<\/|->|\?)|=>|@|\$/,contains:[{className:"section",relevance:10,variants:[{begin:/^[^\n]+?\\n(-|\u2500|\u2014|\u2501|\u23af|=|\u2550|\u268c){5,}/}]},a,s,_.C_LINE_COMMENT_MODE,_.C_BLOCK_COMMENT_MODE,{variants:[{className:"function",beginKeywords:"def"}],end:/:/,illegal:/[${=;\n,]/,contains:[_.UNDERSCORE_TITLE_MODE,r,{begin:/->/,endsWithParent:!0,keywords:"None"}]}]}}}());
/*****************************************************************************************/

// The following is for emacs. It must be at the end of the file and is
// needed to preserve the BOM mark when editing in emacs. The begin and
// end comment on each line are also required.
 
/* Local Variables: */
/* mode: JavaScript */
/* coding: utf-8-with-signature */
/* End: */


FILE:: .//src_modules/markdeep/my_add_md.css
/* reset heading/link fonts to that of body */
.md a,
.md div.title, contents, .md .tocHeader,
.md h1, .md h2, .md h3, .md h4, .md h5, .md h6,
.md .nonumberh1, .md .nonumberh2, .md .nonumberh3, .md .nonumberh4, .md .nonumberh5, .md .nonumberh6,
.md .shortTOC, .md .mediumTOC, .md .longTOC {
    font-family: inherit;
}

.md div.title, .md div.subtitle {
    position: absolute;
    right: 0px;
    text-align: right;
    color: white;
    z-index: 10;
    margin: 0px;
    padding-right: 30px;
    font-weight: 900;
}

.md div.title {
    text-align: right;
    position: absolute;
    left: -230px;
    top: 0px;
    height: 85px;
    padding-top: 20px;
    font-size: 21px;
    border-bottom: 8px solid #555;
    box-shadow: 0px 0px 5px rgba(0,0,0,0.75);
    background-color:  #202124;
    background-image: url('logo.svg');
    background-repeat: no-repeat;
    background-position: top left;
    background-size: contain;
}

.md .imagecaption, .md div.listingcaption {
    display: inline;
}

.md div.subtitle {
    top: 60px;
}

.md .tocHeader {
    display:none;
}

.md .longTOC .level1 {
    font-weight: 300;
    margin-bottom: -30px;
}


.md h1 {
    font-weight: bold;
    font-size: 150%;
    font-family: Roboto,sans-serif;
    padding-bottom: 25px;
    border-bottom: 1px solid #000;
    margin-bottom: 25px;
    margin-left:-20px;
    margin-right:-20px;
    padding-left:20px;
    padding-top:25px;
}

.md h2 {
    color: rgb(0, 72, 49);
    font-size: 120%;
    border-bottom: 1px solid #cf8313;
}

.md h3, .md h4, .md h5, .md h6 {
    font-size: 120%;
}

.md table.table th {
    background: #f7d7a8;
    color: black;
}
    

.md code {
    /* background: unset; */
    color: crimson;
    padding-left: 0.2em;
    padding-right: 0.2em;
    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.19);
}

.md pre.tilde {
    border-top: 1px solid #CCC;
    border-bottom: 1px solid #CCC;
    padding: 5px 0 5px 20px;
    margin: 0 0 0 0;
    background: #FCFCFC;
    page-break-inside: avoid;
}

.md pre > code , .md td > code {
    /* background: unset; */
    color: unset;
    padding-left: unset;
    padding-right: unset;
    box-shadow: unset;
}

.md .tocTop {
    display: inline;
}

.md div.afterTitles {
    height: 115px;
}


/*  */
.md .admonition{position:relative;margin:1em 0;padding:.4rem 1rem;border-radius:.2rem;border-left:2.5rem solid rgba(68,138,255,.4);background-color:rgba(68,138,255,.15);}
.md .admonition-title{font-weight:bold;border-bottom:solid 1px rgba(68,138,255,.4);padding-bottom:4px;margin-bottom:4px;margin-left: -1rem;padding-left:1rem;margin-right:-1rem;border-color:rgba(68,138,255,.4)}
.md .admonition.tip{border-left:2.5rem solid rgba(50,255,90,.4);background-color:rgba(50,255,90,.15)}
.md .admonition.tip::before{content:"\24d8";font-weight:bold;font-size:150%;position:relative;top:3px;color:rgba(26,128,46,.8);left:-2.95rem;display:block;width:0;height:0}
.md .admonition.tip>.admonition-title{border-color:rgba(50,255,90,.4)}
.md .admonition.warn,.md .admonition.warning{border-left:2.5rem solid rgba(255,145,0,.4);background-color:rgba(255,145,0,.15)}
.md .admonition.warn::before,.md .admonition.warning::before{content:"\26A0";font-weight:bold;font-size:150%;position:relative;top:2px;color:rgba(128,73,0,.8);left:-2.95rem;display:block;width:0;height:0}
.md .admonition.warn>.admonition-title,.md .admonition.warning>.admonition-title{border-color:rgba(255,145,0,.4)}
.md .admonition.error{border-left: 2.5rem solid rgba(255,23,68,.4);background-color:rgba(255,23,68,.15)}
.md .admonition.error>.admonition-title{border-color:rgba(255,23,68,.4)}
.md .admonition.error::before{content: "\2612";font-family:"Arial";font-size:200%;position:relative;color:rgba(128,12,34,.8);top:-2px;left:-3rem;display:block;width:0;height:0}
.md .admonition p:last-child{margin-bottom:0}
/*  */

.md a:link, .md a:visited, .md a:link code, .md a:visited code {
color: #cf8313;
text-decoration: underline;
}

.md a:hover, .md a:hover code {
color: #cf8313;
}

FILE:: .//src_modules/markdeep/typical_md.css
@import url('https://fonts.googleapis.com/css?family=Roboto&display=swap');

body {
    font-weight: 400;
    font-size: 14px;
    font-family: Roboto,Arial,sans-serif;
    text-align: left;
    line-height: 170%;
    -webkit-font-smoothing: unset;
}


/* reset heading/link fonts to that of body */
.md a,
.md div.title, contents, .md .tocHeader,
.md h1, .md h2, .md h3, .md h4, .md h5, .md h6,
.md .nonumberh1, .md .nonumberh2, .md .nonumberh3, .md .nonumberh4, .md .nonumberh5, .md .nonumberh6,
.md .shortTOC, .md .mediumTOC, .md .longTOC {
    font-family: inherit;
}

.md div.title, .md div.subtitle {
    position: absolute;
    right: 0px;
    text-align: right;
    color: white;
    z-index: 10;
    margin: 0px;
    padding-right: 30px;
    font-weight: 900;
}

.md div.title {
    text-align: right;
    position: absolute;
    left: -230px;
    top: 0px;
    height: 85px;
    padding-top: 20px;
    font-size: 21px;
    border-bottom: 8px solid #555;
    box-shadow: 0px 0px 5px rgba(0,0,0,0.75);
    background-color:  #202124;
    background-image: url('logo.svg');
    background-repeat: no-repeat;
    background-position: top left;
    background-size: contain;
}

.md .imagecaption, .md div.listingcaption {
    display: inline;
}

.md div.subtitle {
    top: 60px;
}

.md .tocHeader {
    display:none;
}

.md .longTOC .level1 {
    font-weight: 300;
    margin-bottom: -30px;
}


.md h1 {
    font-weight: bold;
    font-size: 150%;
    font-family: Roboto,sans-serif;
    padding-bottom: 25px;
    border-bottom: 1px solid #000;
    margin-bottom: 25px;
    margin-left:-20px;
    margin-right:-20px;
    padding-left:20px;
    padding-top:25px;
}

.md h2 {
    color: rgb(0, 72, 49);
    font-size: 120%;
    border-bottom: 1px solid #cf8313;
}

.md h3, .md h4, .md h5, .md h6 {
    font-size: 120%;
}

.md table.table th {
    background: #f7d7a8;
    color: black;
}
    

.md code {
    /* background: unset; */
    color: crimson;
    padding-left: 0.2em;
    padding-right: 0.2em;
    box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 3px 10px 0 rgba(0, 0, 0, 0.19);
}

.md pre > code , .md td > code {
    /* background: unset; */
    color: unset;
    padding-left: unset;
    padding-right: unset;
    box-shadow: unset;
}

.md .tocTop {
    display: inline;
}

body {
    position: absolute;
    left: 230px;
    right:0px;
    margin: 0px;
    padding: 0px;
    max-width: unset;
    padding-right: 15px;
}


.md div.afterTitles {
    height: 115px;
}


/* .md .admonition {
border-radius: unset;
position: relative;
margin-left: -10px;
border-left: 4px solid rgb(118, 185, 0);
padding-left: 48px;
background: unset !important;
}

.md .admonition-title {
border: unset !important;
margin-left: -55px;
margin-bottom: -15px;
}

.md .admonition.warn, .md .admonition.warning {
border-left: 4px solid rgb(255, 165, 0);
}

.md .admonition.warn::before, .md .admonition.warning::before {
display: none;
}

.md .admonition.warn .admonition-title, .md .admonition.warning .admonition-title {
border-bottom: 1px solid rgba(68,138,255,1);
}

.md .admonition.tip {
border: 1px solid rgba(68,138,255,1);
border-left: 2.5rem solid rgba(68,138,255,1);
background: #202020;
}
.md .admonition.tip .admonition-title {
border-bottom: 1px solid rgba(68,138,255,1);
}

.md .admonition.error {
border: 1px solid rgba(255,23,68,1);
border-left: 2.5rem solid rgba(255,23,68,1);
background: #202020;
}

.md .admonition.error .admonition-title {
border-bottom: 1px solid rgba(255,23,68,1);
} */

/*  */
.md .admonition{position:relative;margin:1em 0;padding:.4rem 1rem;border-radius:.2rem;border-left:2.5rem solid rgba(68,138,255,.4);background-color:rgba(68,138,255,.15);}
.md .admonition-title{font-weight:bold;border-bottom:solid 1px rgba(68,138,255,.4);padding-bottom:4px;margin-bottom:4px;margin-left: -1rem;padding-left:1rem;margin-right:-1rem;border-color:rgba(68,138,255,.4)}
.md .admonition.tip{border-left:2.5rem solid rgba(50,255,90,.4);background-color:rgba(50,255,90,.15)}
.md .admonition.tip::before{content:"\24d8";font-weight:bold;font-size:150%;position:relative;top:3px;color:rgba(26,128,46,.8);left:-2.95rem;display:block;width:0;height:0}
.md .admonition.tip>.admonition-title{border-color:rgba(50,255,90,.4)}
.md .admonition.warn,.md .admonition.warning{border-left:2.5rem solid rgba(255,145,0,.4);background-color:rgba(255,145,0,.15)}
.md .admonition.warn::before,.md .admonition.warning::before{content:"\26A0";font-weight:bold;font-size:150%;position:relative;top:2px;color:rgba(128,73,0,.8);left:-2.95rem;display:block;width:0;height:0}
.md .admonition.warn>.admonition-title,.md .admonition.warning>.admonition-title{border-color:rgba(255,145,0,.4)}
.md .admonition.error{border-left: 2.5rem solid rgba(255,23,68,.4);background-color:rgba(255,23,68,.15)}
.md .admonition.error>.admonition-title{border-color:rgba(255,23,68,.4)}
.md .admonition.error::before{content: "\2612";font-family:"Arial";font-size:200%;position:relative;color:rgba(128,12,34,.8);top:-2px;left:-3rem;display:block;width:0;height:0}
.md .admonition p:last-child{margin-bottom:0}
/*  */

.md a:link, .md a:visited, .md a:link code, .md a:visited code {
color: #cf8313;
text-decoration: underline;
}

.md a:hover, .md a:hover code {
color: #cf8313;
}

@media screen {
    .md .longTOC {
        display: block;
        white-space: nowrap;    
        width: 200px;
        border-right: 1px solid #777;
        overflow-y: auto;
        font-family: inherit;
        position: fixed;
        left: 0px;
        top: 115px;
        bottom:0px;
        margin: 0px;
        padding: 0px;
        padding-left:10px;   
        padding-top: -120px;
    }

    .scrolled .md .longTOC {
        position: fixed;
        top: 0px;
    }



/* no numbering of headings */
.md h1:before, .md h2:before, .md h3:before, .md h4:before, .md h5:before, .md h6:before { content: none; }
.md .tocNumber { display: none; }

.md .longTOC a, .md .longTOC a:hover, .md .longTOC code {
    text-decoration: none;
    color: #000;
    font-size: 12px;
    font-family: sans-serif;
}

}


FILE:: .//src_modules/menu/menu.js
// to generate/display menu

////////////////////////////
function dsp_menu(){
    // display menu on top
    my_ajax_get("./src_modules/menu/menu.php",[{}],function(rtnO){
        if(!rtnO.hasOwnProperty("cntData")) return;
        for(let tmpv of rtnO["cntData"]){
            if(tmpv.hasOwnProperty("position") && tmpv["position"] === "rightright"){
                document.getElementById("myMenu2").insertBefore(gen_menu_item_on_top(tmpv),document.getElementById("myMenu2").childNodes[0]);
            }else{
                document.getElementById("myMenu2").appendChild(gen_menu_item_on_top(tmpv));
            }
        }
        if(rtnO.hasOwnProperty("testMenu")){
            dsp_menu_test(rtnO["testMenu"]);
        }
        // => update user
        upd_user_info();

        // => first view
        for(let tmpe of myMenu2.childNodes){
            if(tmpe.nodeType !== 1) continue;
            if(tmpe.getAttribute("onclick") !== null 
            && tmpe.getAttribute("onclick").search(/dsp_menu_PLPI_observation/) > -1
            ){
                tmpe.click();
                break;
            }else{}
        }
    });
}

function gen_menu_item_on_top(cntI){
    let eTop = my_create("div",undefined,["w3-bar-item", "w3-mobile","w3-round","w3-button","my-tooltip"]);
    if(cntI.hasOwnProperty("position")){
        if(cntI["position"].search("right") > -1) eTop.classList.add("w3-right");
    }
    if(cntI.hasOwnProperty("text")){
        if(cntI["text"] !== ""){
            // eTop.classList.add("w3-padding");
            eTop.style.height = "52px";
            eTop.style.lineHeight = "30px";
            eTop.innerText = cntI["text"];
        }
    }
    if(cntI.hasOwnProperty("icon") && cntI["icon"] !== ""){
        if(cntI["icon"].search(/^bi/) > -1){
            eTop.appendChild(my_create("i",undefined,[cntI["icon"],"w3-text-indigo","w3-xlarge"]));
        }else if(cntI["icon"].search(/^google:/) > -1){
            // google icon
            let iconTxt = cntI["icon"].replace("google:","");
            eTop.appendChild(my_create("i",iconTxt,["material-icons","w3-text-indigo","my-center"],{"font-size":"36px"}));
        }else{
            eTop.appendChild(my_create("img",undefined,["w3-text-indigo","w3-xlarge"],{"padding":"4px"},{"src":cntI["icon"],"height":"36px"}));
        }
    }
    if(cntI.hasOwnProperty("tooltip")){
        if(cntI["tooltip"] !== "") eTop.appendChild(my_create("span",cntI["tooltip"],["my-tooltip-content"]));
    }

    if(cntI.hasOwnProperty("separator") && cntI["separator"] === "yes"){
        eTop.style.height = "50px";
        eTop.style.margin = "0 5px 0 5px";
        eTop.style.padding = 0;
        eTop.classList.remove("w3-button");
        eTop.style.border = "3px solid lightgray";
    }

    // anything else is attribute
    for(let tmpv in cntI){
        if(tmpv === "separator") continue;
        if(tmpv === "position") continue;
        if(tmpv === "text") continue;
        if(tmpv === "icon") continue;
        if(tmpv === "tooltip") continue;
        eTop.setAttribute(tmpv,cntI[tmpv]);
    }
    return eTop;
}

function toggle_top_menu_item(clkE){
    // toggle the leftSide, call back to change my-active of the clicked menu-item, and return: 0: same item was clicked, 1: different item was clicked
    if(clkE.classList.contains("my-active")){
        if(leftSide.style.display === "block" || leftSide.classList.contains("w3-show")){
            hide_left();
        }else{
            show_left();
        }
        return 0;
    }else{}

    // call-back to in-active other menu items
    for (let tmpe of document.querySelectorAll("#myMenu2 div")){
        if(tmpe.style.display === "none" || tmpe.classList.contains("w3-hide")) continue;
        if(tmpe !== clkE){
            tmpe.classList.remove("my-active");
        }else{
            tmpe.classList.add("my-active");
        }
    }

    hide_left();
    return 1;
}

function dsp_menu_admin(clkE){
    // display menu for admin tasks on the left, after clicking the admin-menu button on top
    if(document.getElementById("leftSide") === null) return;
    if(!toggle_top_menu_item(clkE)) return;

    while(leftSide.childNodes.length > 0) {
        leftSide.lastChild.remove();
    }

    // => ajax for info
    my_ajax_get("./src_modules/menu/rtn_data_menu_admin_on_left.php",[{}],function(rtnO){
        if(!rtnO.hasOwnProperty("cntData")) return;
        for(let tmpv of rtnO["cntData"]){
            leftSide.appendChild(gen_menu_item_on_left(tmpv));
        }
        // display
        show_left();
        // make the first one clicked (activated)
        leftSide.getElementsByTagName("div")[0].click();
    });

    // => show the welcome part- page on the mainSide
    if(document.getElementById("mainSide") !== null){
        while(mainSide.childNodes.length>0){ mainSide.lastChild.remove(); }
        for (let clN of mainSide.classList){
            if(clN.search(/^bg/) > -1) mainSide.classList.remove(clN);
        }
    }
}

function dsp_menu_PLPI_observation(clkE){
    // display menu for PVPI references on the left, after clicking the PVPI-menu button on top
    if(document.getElementById("leftSide") === null) return;
    if(!toggle_top_menu_item(clkE)) return;

    while(leftSide.childNodes.length > 0) {
        leftSide.lastChild.remove();
    }

    // => ajax for info to display the menu
    my_ajax_get("./src_modules/menu/rtn_data_menu_PLPI_observation_on_left.php",[{}],function(rtnO){
        if(!rtnO.hasOwnProperty("cntData")) return;
        for(let tmpv of rtnO["cntData"]){
            leftSide.appendChild(gen_menu_item_on_left(tmpv));
        }
        // display
        show_left();
        // make the first one clicked (activated)
        leftSide.getElementsByTagName("div")[0].click();
    });

    // => show the welcome part- page on the mainSide
    if(document.getElementById("mainSide") !== null){
        while(mainSide.childNodes.length>0){ mainSide.lastChild.remove(); }
        for (let clN of mainSide.classList){
            if(clN.search(/^bg/) > -1) mainSide.classList.remove(clN);
        }
        // mainSide.classList.add("bgPVPI");
        // mainSide.style.minHeight = "100%";
    }
}

function dsp_menu_PVPI(clkE){
    // display menu for PVPI references on the left, after clicking the PVPI-menu button on top
    if(document.getElementById("leftSide") === null) return;
    if(!toggle_top_menu_item(clkE)) return;

    while(leftSide.childNodes.length > 0) {
        leftSide.lastChild.remove();
    }

    // => ajax for info to display the menu
    my_ajax_get("./src_modules/menu/rtn_data_menu_PVPI_on_left.php",[{}],function(rtnO){
        if(!rtnO.hasOwnProperty("cntData")) return;
        for(let tmpv of rtnO["cntData"]){
            leftSide.appendChild(gen_menu_item_on_left(tmpv));
        }
        // display
        show_left();
        // make the first one clicked (activated)
        leftSide.getElementsByTagName("div")[0].click();
    });

    // => show the welcome part- page on the mainSide
    if(document.getElementById("mainSide") !== null){
        while(mainSide.childNodes.length>0){ mainSide.lastChild.remove(); }
        for (let clN of mainSide.classList){
            if(clN.search(/^bg/) > -1) mainSide.classList.remove(clN);
        }
        mainSide.classList.add("bgPVPI");
        mainSide.style.minHeight = "100%";
    }
}

function dsp_menu_servers(clkE){
    // display menu for PVPI references on the left, after clicking the PVPI-menu button on top
    if(document.getElementById("leftSide") === null) return;
    if(!toggle_top_menu_item(clkE)) return;

    while(leftSide.childNodes.length > 0) {
        leftSide.lastChild.remove();
    }

    // => ajax for info to display the menu
    my_ajax_get("./src_modules/menu/rtn_data_menu_servers_on_left.php",[{}],function(rtnO){
        if(!rtnO.hasOwnProperty("cntData")) return;
        for(let tmpv of rtnO["cntData"]){
            leftSide.appendChild(gen_menu_item_on_left(tmpv));
        }
        // display
        show_left();
        // make the first one clicked (activated)
        leftSide.getElementsByTagName("div")[0].click();
    });

    // => show the welcome part- page on the mainSide
    if(document.getElementById("mainSide") !== null){
        while(mainSide.childNodes.length>0){ mainSide.lastChild.remove(); }
        for (let clN of mainSide.classList){
            if(clN.search(/^bg/) > -1) mainSide.classList.remove(clN);
        }
        // mainSide.classList.add("bgPVPI");
        // mainSide.style.minHeight = "100%";
    }
}

function dsp_menu_disk_inode(clkE){
    // display menu for PVPI references on the left, after clicking the PVPI-menu button on top
    if(document.getElementById("leftSide") === null) return;
    if(!toggle_top_menu_item(clkE)) return;

    while(leftSide.childNodes.length > 0) {
        leftSide.lastChild.remove();
    }

    // => ajax for info to display the menu
    my_ajax_get("./src_modules/menu/rtn_data_menu_disk_inode_on_left.php",[{}],function(rtnO){
        if(!rtnO.hasOwnProperty("cntData")) return;
        for(let tmpv of rtnO["cntData"]){
            leftSide.appendChild(gen_menu_item_on_left(tmpv));
        }
        // display
        show_left();
        // make the first one clicked (activated)
        leftSide.getElementsByTagName("div")[0].click();
    });

    // => show the welcome part- page on the mainSide
    if(document.getElementById("mainSide") !== null){
        while(mainSide.childNodes.length>0){ mainSide.lastChild.remove(); }
        for (let clN of mainSide.classList){
            if(clN.search(/^bg/) > -1) mainSide.classList.remove(clN);
        }
        // mainSide.classList.add("bgPVPI");
        // mainSide.style.minHeight = "100%";
    }
}

function dsp_menu_worldcup(clkE){
    // display menu for wolrdcup game references on the left, after clicking the worldcup-menu button on top
    if(document.getElementById("leftSide") === null) return;
    if(!toggle_top_menu_item(clkE)) return;

    while(leftSide.childNodes.length > 0) {
        leftSide.lastChild.remove();
    }

    // => ajax for info to display the menu
    my_ajax_get("./src_modules/menu/rtn_data_menu_worldcup_on_left.php",[{}],function(rtnO){
        if(!rtnO.hasOwnProperty("cntData")) return;
        for(let tmpv of rtnO["cntData"]){
            leftSide.appendChild(gen_menu_item_on_left(tmpv));
        }
        // display
        show_left();
    });

    // => show the welcome part- page on the mainSide
    if(document.getElementById("mainSide") !== null){
        while(mainSide.childNodes.length>0){ mainSide.lastChild.remove(); }
        for (let clN of mainSide.classList){
            if(clN.search(/^bg/) > -1) mainSide.classList.remove(clN);
        }
        mainSide.classList.add("bgWorldCup2022");
        mainSide.style.minHeight = "100%";
    }
}

function gen_menu_item_on_left(cntI){
    if(!cntI.hasOwnProperty("text")){
        if(cntI.hasOwnProperty("separator") && cntI["separator"] === "yes"){
            return my_create("hr",undefined,["w3-border-indigo"],{"width":"75%", "margin":"0 0 0 15px"})
        }
        return null;
    }
    let eTop = my_create("div",undefined,["w3-bar-item", "w3-mobile","w3-round","w3-button","my-tooltip","myCnt-leftmenu-item"]);
    if(cntI["text"] !== "") eTop.appendChild(my_create("span",cntI["text"]));
    if(cntI.hasOwnProperty("tooltip")){
        if(cntI["tooltip"] !== "") eTop.appendChild(my_create("span",cntI["tooltip"],["my-tooltip-content"]));
    }

    // anything else is attribute
    for(let tmpv in cntI){
        if(tmpv === "text") continue;
        if(tmpv === "tooltip") continue;
        if(tmpv === "requestItems") continue;
        if(tmpv.search(/funcn/i) > -1) continue;
        eTop.setAttribute(tmpv,cntI[tmpv]);
    }
    
    // event listener
    if(cntI.hasOwnProperty("sFuncN") && cntI["sFuncN"] !== ""){
        eTop.addEventListener("click",function(){
            // inform user about waiting for server feedback
            let eWait = dsp_wait();
            // => ajax the server side script
            let oRqt = {};
            if(cntI.hasOwnProperty("requestItems")) oRqt = cntI["requestItems"];
            my_ajax_get(cntI["sFuncN"],[oRqt],function(rtnO){
                if(eWait !== null) eWait.remove();
                // =>
                if(cntI.hasOwnProperty("cFuncN") && cntI["cFuncN"] !== ""){
                    console.log("Exe funcN='"+cntI["cFuncN"]+"'")
                    // console.log(rtnO)
                    executeFunctionByName(cntI["cFuncN"],window,rtnO)
                }else{
                    // display to the mainMenu by default
                    if(document.getElementById("mainSide") !== null){
                        let eTop = my_create("div",undefined,["w3-border","w3-round"],{})
                        eTop.innerHTML = rtnO;
                        mainSide.appendChild(eTop)
                    }
                }
            });

        });
    }else{
        eTop.addEventListener("click",function(){
            if(cntI.hasOwnProperty("cFuncN") && cntI["cFuncN"] !== ""){
                console.log("Exe funcN='"+cntI["cFuncN"]+"'")
                executeFunctionByName(cntI["cFuncN"],window,{})
            }else{
            }
        });
    }
    // => register the last clicking item
    eTop.addEventListener("click",function(){
        // => change the state of the menu item
        for(let tmpe of leftSide.getElementsByClassName("myCnt-leftmenu-item")){
            tmpe.classList.remove("active");
        }
        this.classList.add("active");
        // => reg into this JS session
        last_left_menu_item = this;
        
        // => need to reg to SESSION or cookies ?!
        // RESERVED
    })
    // =>
    return eTop;
}

function dsp_menu_test(cntD){
    if(typeof(cntD) !== "object") return;
    if(cntD.length === 0) return;
    let eMenuTop = my_create("div",undefined,["w3-container","w3-small","w3-light-green","w3-hover-shadow","w3-round"],{"position":"fixed","right":0, "top":"60px","max-height":"400px","min-width":"150px"})
    for(let tmpv of cntD){
        let eC = my_create("div",tmpv["text"],["w3-button","w3-block"],{"padding":"3px 0 0 0"})
        eC.addEventListener("click",function(){
            my_ajax_get(tmpv["Sfunc"],[{"command":tmpv["getCmd"]}],function(rtnO){
                let eTop = null;
                if(document.getElementById("test_holder")) test_holder.remove();
                eTop = my_create("div",
                    my_create("span","X",["w3-padding","w3-large","w3-button","w3-display-topright","w3-round"],{},{"onclick":"this.parentNode.remove()"}),
                    ["w3-khaki"],
                    {"padding":0,"position":"fixed","bottom":0,"left":0,"height":"30%","width":"100%","overflow":"auto","font-size":"9px"},
                    {id:"test_holder"}
                    );
                body.appendChild(eTop);
                let noFmtE = my_create("pre",JSON.stringify(rtnO,undefined,2).replace(/\\n/g,"<br>"),["w3-small"]);
                eTop.appendChild(noFmtE);
            });
        })
        eMenuTop.appendChild(eC)
    }
    eMenuTop.appendChild(gen_test_form());
    // =>
    body.appendChild(eMenuTop)
}

function gen_test_form(){
    // a simple testing form for user to input pre-defined command and execute, display the results in test_holder element
    let cntData = {
        "cntData": [
            {"label":"Input","type":"text","name":"input"},
            {"label":"Command","type":"text","name":"command"},
            {"label":"Submit","type":"submit"}
        ],
        "formAction":"src_modules/test/md_command.php",
    };
    let eTop = my_gen_form(cntData,function(tgtE,rtnO){
        let eTop = null;
        if(document.getElementById("test_holder")) test_holder.remove();
        eTop = my_create("div",
            my_create("span","X",["w3-padding","w3-large","w3-button","w3-display-topright","w3-round"],{},{"onclick":"this.parentNode.remove()"}),
            ["w3-khaki"],
            {"padding":0,"position":"fixed","bottom":0,"left":0,"height":"30%","width":"100%","overflow":"auto","font-size":"9px"},
            {id:"test_holder"}
            );
        body.appendChild(eTop);
        let noFmtE = my_create("pre",JSON.stringify(rtnO["cmdRtnCode"],undefined,2).replace(/\\n/g,"<br>"),["w3-small"]);
        eTop.appendChild(noFmtE);
    });
    eTop.classList.remove("w3-modal");

    eTop.childNodes[0].style.width = "200px";
    eTop.style.padding = 0;
    eTop.childNodes[0].style.padding = 0;
    eTop.childNodes[0].childNodes[0].style.padding = 0;

    return eTop;
}

/////////////////////////////////////////
let globalInterval = setInterval(my_refresh_mainSide,5*60*1000);
let last_left_menu_item = null;

function my_refresh_mainSide(){
    if(document.getElementById("mainSide") === null) return 0;
    console.log("my_refresh_mainSide works!")
    let prjN = null;
    let stat = null;
    for(let tmpe of mainSide.childNodes){
        if(tmpe.nodeType !== 1) continue;
        if(tmpe.id === undefined) continue;
        switch(tmpe.id){
            // Special on-top elements
            case "disk_inode_graphs":
                usageDiskInode.dsp_n_upd_disk_inode_graphs_top();
                break;
            case "PVPI_dsp_unq":
                PLPI_observation.upd_PVPI_unique_session();
                break;
            case "PVPI_dsp_sum_prj_ontop":
                prjN = PVPI_dsp_sum_prj_ontop.getElementsByClassName("myCnt-PVPI-prjN")[0].innerText
                PVPI_org.dsp_sum_sessions_on_top(prjN);
                break;
            case "jobs_in_scope_on_top":
                prjN = jobs_in_scope_on_top.getElementsByClassName("myCnt-prjN-for-jobs")[0].innerText
                stat = jobs_in_scope_on_top.getElementsByClassName("myCnt-stat-for-jobs")[0].innerText
                exeServers.dsp_jobs_inscope_on_top(prjN,stat);
                break;

            // as left side item registration
            case "PLPI_obs_sum":
                last_left_menu_item.click();
                break;
            case "srvExesSum":
                last_left_menu_item.click();
                break;
            case "exeSrv_at_site":
                last_left_menu_item.click();
                break;
            case "usage_disk_inode_top":
                last_left_menu_item.click();
                break;
            case "PVPI_insider_dataMerge":
                last_left_menu_item.click();
                break;
            case "PVPI_insider_problem":
                last_left_menu_item.click();
                break;
            case "PVPI_insider_ongoing":
                last_left_menu_item.click();
                break;
            case "PVPI_sum_by_time_top":
                last_left_menu_item.click();
                break;
            case "PVPI_org_top":
                last_left_menu_item.click();
                break;
            
            // => Default
            default:
                console.log("Error: id='" + tmpe.id + "' cannot be refreshed")
        }
    }

    return 1;
}

FILE:: .//src_modules/menu/menu.php
<?php
    // return controlling data for generation of menu at init/ or changed at sequences
    $oO = array();
    $oO["rtnCode"] = "OK";
    $oO["cntData"] = array();

    array_push($oO["cntData"],array("position" => "rightright", "text" => "", "icon" => "bi-box-arrow-left", "tooltip" => "Log in by OTP", "onclick" => "dsp_login_form('OTP')", "id" => "btn_login_otp"));
    array_push($oO["cntData"],array("position" => "rightright", "text" => "", "icon" => "bi-box-arrow-right", "tooltip" => "Log out", "onclick" => "my_logout()", "id" => "btn_logout"));
    // array_push($oO["cntData"],array("position" => "right", "text" => "", "icon" => "bi-box-arrow-left", "tooltip" => "Log in", "onclick" => "dsp_login_form()", "id" => "btn_login"));
    array_push($oO["cntData"],array("position" => "right", "text" => "test", "icon" => "", "tooltip" => "my test function", "onclick" => "myTest()"));
    // =>
    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    $user = new User_by_sqlite3;
    
    if($user->login_email === "man.duong.ym@renesas.com" || preg_match('/Admin.*|SuperUser/',$user->role)){
        array_push($oO["cntData"],array("position" => "right", "text" => "", "icon" => "bi-person-fill-exclamation", "tooltip" => "Menu for admin", "onclick" => "dsp_menu_admin(this)"));
    }

    array_push($oO["cntData"],array("position" => "right", "text" => "", "icon" => "bi-clock-history", 
        "tooltip" => "PL team's activities by timeline", 
        "onclick" => "dsp_activities_by_timeline(this)"
    ));
    array_push($oO["cntData"],array("position" => "right", "text" => "", "icon" => "assets/PVPI_logo.svg", 
        "tooltip" => "Menu for PVPI", 
        "onclick" => "dsp_menu_PVPI(this)"
    ));
    array_push($oO["cntData"],array("position" => "right", "text" => "", "icon" => "bi-database-gear", 
        "tooltip" => "Disks/Inodes usage (by cluster).", 
        "onclick" => "dsp_menu_disk_inode(this)"
    ));
    array_push($oO["cntData"],array("position" => "right", "text" => "", "icon" => "bi-hdd-network", 
        "tooltip" => "Servers' information (by cluster).", 
        "onclick" => "dsp_menu_servers(this)"
    ));
    array_push($oO["cntData"],array("position" => "right", "text" => "", "icon" => "assets/worldcup/2022_FIFA_World_Cup_mod.svg", 
        "tooltip" => "Menu for Worldcup competition.", 
        "onclick" => "dsp_menu_worldcup(this)"
    ));

    /////////////////////////////
    array_push($oO["cntData"],array("position" => "right", "separator" => "yes" ));#a separator ^^
    /////////////////////////////

    array_push($oO["cntData"],array("position" => "right", "text" => "", "icon" => "google:crisis_alert", 
        "tooltip" => "Observation on projects' resources and tasks.", 
        "onclick" => "dsp_menu_PLPI_observation(this)"
    ));

    array_push($oO["cntData"],array("position" => "right", "text" => "", "icon" => "google:cloud_sync", 
        "tooltip" => "Re-Fresh current display.", 
        "onclick" => "my_refresh_mainSide()"
    ));
    
    // if($user->login_email === "man.duong.ym@renesas.com"){
    //     $oO["testMenu"] = array();
    //     array_push($oO["testMenu"],array("text" => "Remove all"             , "getCmd" => "removeAllFiles" , "Sfunc" => "src_modules/test/md_command.php"));
    //     array_push($oO["testMenu"],array("text" => "Remove Global Setting"  , "getCmd" => "removeUserGlobal" , "Sfunc" => "src_modules/test/md_command.php"));
    //     array_push($oO["testMenu"],array("text" => "Init Global Setting"    , "getCmd" => "init_user_global_setting" , "Sfunc" => "src_modules/test/md_command.php"));
    //     array_push($oO["testMenu"],array("text" => "All Users"              , "getCmd" => "listUsers" , "Sfunc" => "src_modules/test/md_command.php"));
    //     array_push($oO["testMenu"],array("text" => "[SQL] Remove all"       , "getCmd" => "sql_removeAllFiles" , "Sfunc" => "src_modules/test/md_command.php"));
    //     array_push($oO["testMenu"],array("text" => "[SQL] Remove Global Setting"  , "getCmd" => "sql_removeUserGlobal" , "Sfunc" => "src_modules/test/md_command.php"));
    //     array_push($oO["testMenu"],array("text" => "[SQL] Init Global Setting"    , "getCmd" => "sql_init_user_global_setting" , "Sfunc" => "src_modules/test/md_command.php"));
    //     // array_push($oO["testMenu"],array("text" => "[SQL] user-info"        , "getCmd" => "sql_get_user_info" , "Sfunc" => "src_modules/test/md_command.php"));
    //     // array_push($oO["testMenu"],array("text" => "[SQL] reg-test-acc"     , "getCmd" => "sql_reg_test" , "Sfunc" => "src_modules/test/md_command.php"));
    //     // array_push($oO["testMenu"],array("text" => "[SQL] rm-test-acc"      , "getCmd" => "sql_rm_test" , "Sfunc" => "src_modules/test/md_command.php"));
    //     // array_push($oO["testMenu"],array("text" => "[SQL] rm-test-acc complete"     , "getCmd" => "sql_rm_test_complete" , "Sfunc" => "src_modules/test/md_command.php"));
    //     array_push($oO["testMenu"],array("text" => "[SQL] All Users"     , "getCmd" => "sql_all_users" , "Sfunc" => "src_modules/test/md_command.php"));
    // }

    echo(json_encode($oO));
?>

FILE:: .//src_modules/menu/rtn_data_menu_PLPI_observation_on_left.php
<?php
    // return controlling data for generation of menu at init/ or changed at sequences
    $oO = array();
    $oO["rtnCode"] = "OK";
    $oO["cntData"] = array();

    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    $user = new User_by_sqlite3;

    array_push($oO["cntData"],array(
        "text" => "Observer", "tooltip" => "Summary of observation on projects' resources and tasks", 
        "cFuncN" => "PLPI_observation.dsp_top_view",
        "sFuncN" => "./src_modules/PLPI_observation/rtn_data_n_reg_setting.php",
        "requestItems" => array("prjN" => "all")
    ));

    if($user->login_email === "man.duong.ym@renesas.com" || preg_match('/Admin.*|SuperUser/',$user->role)){
        //////////////////////
        array_push($oO["cntData"],array("separator" => "yes"));
        //////////////////////

        array_push($oO["cntData"],array(
            "text" => "Setting", "tooltip" => "Setup things to observe for a project.", 
            "cFuncN" => "PLPI_observation.dsp_all_settings",
            "sFuncN" => "./src_modules/PLPI_observation/rtn_data_n_reg_setting.php",
            "requestItems" => array("prjN" => "all")
        ));
    }else{}

    echo(json_encode($oO));
?>

FILE:: .//src_modules/menu/rtn_data_menu_PVPI_on_left.php
<?php
    // return controlling data for generation of menu at init/ or changed at sequences
    $oO = array();
    $oO["rtnCode"] = "OK";
    $oO["cntData"] = array();

    array_push($oO["cntData"],array(
        "text" => "Observer", "tooltip" => "Sum by projects", 
        "cFuncN" => "PVPI_org.up_sum_PVPI",
        "sFuncN" => "./src_modules/PVPI_org/upSumPVPI.php",
        "requestItems" => array("q" => 1)
    ));
    array_push($oO["cntData"],array(
        "text" => "Insider_data", "tooltip" => "List all PV sessions by data flow", 
        "cFuncN" => "PVPI_insider.upTrackByMergeData",
        "sFuncN" => "./src_modules/PVPI_insider/trackByMergeData.php",
        // "requestItems" => array("q" => "RCar_V4M", "maxN" => 2),
    ));
    array_push($oO["cntData"],array(
        "text" => "Insider_ongoing", "tooltip" => "List all PV sessions ongoing-execution.", 
        "cFuncN" => "PVPI_insider.upTrackByOngoingData",
        "sFuncN" => "./src_modules/PVPI_insider/trackOngoingData.php"
    ));
    array_push($oO["cntData"],array(
        "text" => "Insider_errors", "tooltip" => "List all PV sessions got errors/ unexpected exit.", 
        "cFuncN" => "PVPI_insider.upTrackByProblemData",
        "sFuncN" => "./src_modules/PVPI_insider/trackProblemData.php"
    ));
    array_push($oO["cntData"],array(
        "text" => "Sum by time", "tooltip" => "Simple summary of PVPI session by dates.", 
        "cFuncN" => "dsp_simple_table_4_PVPI_sum_by_time",
        "sFuncN" => "./src_modules/PVPI_export/rtn_sum_by_time_info.php"
    ));

    echo(json_encode($oO));
?>

FILE:: .//src_modules/menu/rtn_data_menu_admin_on_left.php
<?php
    // return controlling data for generation of menu at init/ or changed at sequences
    $oO = array();
    $oO["rtnCode"] = "OK";
    $oO["cntData"] = array();
    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    $user = new User_by_sqlite3;

    if($user->login_email === "man.duong.ym@renesas.com" || preg_match('/Admin|SuperUser/',$user->role)){
        array_push($oO["cntData"],array("text" => "Users", "tooltip" => "Manage all users info", "cFuncN" => "dsp_users_info","sFuncN" => "./src_modules/login/rtn_users_info.php"));
    }
    
    if($user->login_email === "man.duong.ym@renesas.com" || $user->role === "Admin"){
        array_push($oO["cntData"],array("text" => "Data-files", "tooltip" => "List all data-files under data/by-sqlite3", "cFuncN" => "dsp_simple_table_4_data_files","sFuncN" => "./src_modules/host_info/list_data_files.php"));
        array_push($oO["cntData"],array("text" => "Sqlite Tables", "tooltip" => "List all tables under data/by-sqlite3", "cFuncN" => "dsp_simple_table_4_data_tables","sFuncN" => "./src_modules/host_info/list_data_tables.php"));
        array_push($oO["cntData"],array("text" => "phpinfo", "tooltip" => "phpinfo", "cFuncN" => "","sFuncN" => "./src_modules/host_info/phpinfo.html.php"));
        array_push($oO["cntData"],array("text" => "host-refresh", "tooltip" => "host info with refreshing inteval", "cFuncN" => "dsp_host_info_w_interval","sFuncN" => "./src_modules/host_info/host_info_w_interval.php"));
    }else{}

    echo(json_encode($oO));
?>

FILE:: .//src_modules/menu/rtn_data_menu_disk_inode_on_left.php
<?php
    // return controlling data for generation of menu at init/ or changed at sequences
    $oO = array();
    $oO["rtnCode"] = "OK";
    $oO["cntData"] = array();

    array_push($oO["cntData"],array(
        "text" => "RVC disks/inode", "tooltip" => "Usage of disk/inode of RVC's disks", 
        "cFuncN" => "usageDiskInode.dsp_top_view",
        "sFuncN" => "./src_modules/usageDiskInode/chkDiskInode.php",
        "requestItems" => array("q" => "")
    ));
    array_push($oO["cntData"],array(
        "text" => "Kansai disks/inode", "tooltip" => "Usage of disk/inode of Kansai's disks", 
        "cFuncN" => "usageDiskInode.dsp_top_view",
        "sFuncN" => "./src_modules/usageDiskInode/chkDiskInode.php",
        "requestItems" => array("q" => "klsl")
    ));
    array_push($oO["cntData"],array(
        "text" => "Musashi disks/inode", "tooltip" => "Usage of disk/inode of Musashi's disks", 
        "cFuncN" => "usageDiskInode.dsp_top_view",
        "sFuncN" => "./src_modules/usageDiskInode/chkDiskInode.php",
        "requestItems" => array("q" => "mesl")
    ));

    echo(json_encode($oO));
?>

FILE:: .//src_modules/menu/rtn_data_menu_servers_on_left.php
<?php
    // return controlling data for generation of menu at init/ or changed at sequences
    $oO = array();
    $oO["rtnCode"] = "OK";
    $oO["cntData"] = array();

    array_push($oO["cntData"],array(
        "text" => "Summary", "tooltip" => "Summary info of all clusters' servers", 
        "cFuncN" => "exeServers.dsp_sum_view",
        "sFuncN" => "./src_modules/chkServers/sumExeSrvs.php"
    ));
    array_push($oO["cntData"],array(
        "text" => "RVC cluster", "tooltip" => "Exe servers in RVC cluster", 
        "cFuncN" => "exeServers.dsp_top_view",
        "sFuncN" => "./src_modules/chkServers/chkExeSrvs.php",
        "requestItems" => array("q" => "")
    ));
    array_push($oO["cntData"],array(
        "text" => "Kansai cluster", "tooltip" => "Exe servers in Kansai cluster", 
        "cFuncN" => "exeServers.dsp_top_view",
        "sFuncN" => "./src_modules/chkServers/chkExeSrvs.php",
        "requestItems" => array("q" => "klsl")
    ));
    array_push($oO["cntData"],array(
        "text" => "Musashi cluster", "tooltip" => "Exe servers in Musashi cluster", 
        "cFuncN" => "exeServers.dsp_top_view",
        "sFuncN" => "./src_modules/chkServers/chkExeSrvs.php",
        "requestItems" => array("q" => "mesl")
    ));

    echo(json_encode($oO));
?>

FILE:: .//src_modules/menu/rtn_data_menu_worldcup_on_left.php
<?php
    // return controlling data for generation of menu at init/ or changed at sequences
    require_once '../../src_main/my.php';
    register_shutdown_function("my_handler_fatal");

    $oO = array();
    $oO["rtnCode"] = "OK";
    $oO["cntData"] = array();

    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    $user = new User_by_sqlite3;

    if($user->role === "Admin" || $user->login_email === "man.duong.ym@renesas.com"){
        array_push($oO["cntData"],array("text" => "Import Matches (fixed file)", "tooltip" => "Input matches for betting from fixed file.", 
            "cFuncN" => "dsp_matches_w_adding",
            "sFuncN" => "./src_modules/worldcup/import_matches_from_file.php"
        ));
        array_push($oO["cntData"],array("text" => "Import betScore (fixed file)", "tooltip" => "Input betScore for betting from fixed file.", 
            "cFuncN" => "dsp_matches_w_adding",
            "sFuncN" => "./src_modules/worldcup/import_betScore_from_file.php"
        ));
    }

    if($user->role === "Admin" || $user->role === "SuperUser" || $user->role === "AdminWC"){
        // more universal
        array_push($oO["cntData"],array("text" => "Import from uploaded file", "tooltip" => "Input matches/bet-score for betting", 
        "cFuncN" => "dsp_upload_file_and_action",
        "sFuncN" => ""
        ));
        array_push($oO["cntData"],array("text" => "Import matches' info", "tooltip" => "Input matches for betting", 
            "cFuncN" => "dsp_matches_w_adding",
            "sFuncN" => "./src_modules/worldcup/rtn_matches.php"
        ));
    }

    array_push($oO["cntData"],array("text" => "Matches vs. your bet", "tooltip" => "Matches and your bet", 
        "cFuncN" => "dsp_matches_vs_self_bet",
        "sFuncN" => "./src_modules/worldcup/rtn_matches_vs_self_bet.php"
    ));
    array_push($oO["cntData"],array("text" => "All Users' Bet/matches", "tooltip" => "Betting results of all users per each match", 
        "cFuncN" => "dsp_bet_results_vs_matches",
        "sFuncN" => "./src_modules/worldcup/rtn_bet_results_vs_matches.php"
    ));
    array_push($oO["cntData"],array("text" => "All Users' ranking", "tooltip" => "All users' results in ranks", 
        "cFuncN" => "dsp_users_points",
        "sFuncN" => "./src_modules/worldcup/rtn_users_points.php"
    ));

    echo(json_encode($oO));
?>

FILE:: .//src_modules/otp/login_otp.php
<?php
    // ini_set('display_errors', 1);
    // ini_set('display_startup_errors', 1);
    // error_reporting(E_ALL);
    // => check if data is valid #1
    
    require_once '../../src_main/my.php';
    require_once '../../src_modules/login/session.php';
    register_shutdown_function("my_handler_fatal");

    require_once 'otp.class.php';
    require_once 'mail_function.php';

    $defOTPf = "../../data_manual/list_user_w_def_OTP.txt";#file holding default OTP incase there is problem with OTP sending email, this is very dangerous

    if(array_count_values($_POST) === 0) {echo "{}";return 0; }
    if(!isset($_POST["login_email"])) {echo "{}";return 0;}
    if(!isset($_POST["login_OTP"])) {echo "{}";return 0;}
    
    $oObj = array();
    $oObj["OTP"] = "Not proceeded yet.";
    // $oObj["login_email"] = $_POST["login_email"];

    session_start();
    $otp = new Sakib\OTP;

    if($_POST["login_OTP"] === ""){
        // reset all the session then start a new session for this login-info
        if(isset($_SESSION["login_email"]))  my_destroy_session();
        if(isset($_SESSION["email"]))  my_destroy_session();
        if(!isset($_SESSION)) session_start();

        // register the email and ask for OTP
        $oObj["OTP"] = "no OTP";
        $code = $otp->generateRandomString(6);
        $email = $_POST['login_email'];
        $_SESSION['email'] = $email;
        $hash = $otp->CreateOTP($email,$code);
        $_SESSION['hash'] = $hash;
        # => sending email
        $oObj["mailStt"] = sendOTP($email,$code);//send the code via email
        $oObj["OTP"] = "Sent";//OTP sent
    }else{
        // register the email and the received OTP (or so it is)
        $oObj["OTP"] = "";
        $flgInit = false;
        if(isset($_SESSION)){
            if(isset($_SESSION["hash"]) && isset($_SESSION["email"])) $flgInit = true;
            if(!isset($_SESSION["hash"])) $oObj["OTP"] .= "NG:missing-hash ";
            if(!isset($_SESSION["email"])) $oObj["OTP"] .= "NG:missing-email ";
        }else{
            $oObj["OTP"] = "NG: missing SESSION.";
        }
        // => try to check and overwrite behavior if there is manual def OTP
        $defCode = "";
        if(file_exists($defOTPf) && isset($_SESSION["email"])){
            $FH = fopen($defOTPf,"r");
            if($FH){
                while(!feof($FH)){
                    $tmpa = explode(",",fgets($FH));
                    if($tmpa[0] === $_SESSION["email"]){
                        $defCode = preg_replace('/[\n\r]/','',$tmpa[1]);
                        $flgInit = true;
                    }
                }
                fclose($FH);
            }
        }else{}
        $oObj["flgInit"] = $flgInit;
        $oObj["defCode"] = $defCode;

        if($flgInit === true){
            $email = $_SESSION['email'];
            $hash = "n/a";if(isset($_SESSION['hash'])) $hash = $_SESSION['hash'];
            $code = $_POST['login_OTP'];
            
            $hash = $otp->VerifyOTP($email,$code,$hash);
            
            if($hash === "MATCHED" || ($defCode !== "" && $code === $defCode)){
                $oObj["OTP"] = "OK";
                session_destroy();// comment out to keep the info in SESSION
                session_start();// start a new session entry and reg the info
                $_SESSION["login_email"] = $email;
                $_SESSION["logStatus"] = "OK";
                $_SESSION["logMethod"] = "OTP";
                $_SESSION["logStart"] = time();

                // => register to system
                require_once "../../src_modules/login/users_sqlite3_OTP.class.php";
                $user = new User_by_sqlite3;
                if($user->status !== "Already") $user->reg_user();
                $oObj["user_info"] = $user->get_user_info();
            }else{
                $oObj["OTP"] = "NG:mismatch";
            }
        }
    }

    //dbg:
    $oObj["SESSION"] = $_SESSION;//OTP sent

    // => check if data is already existed
    echo json_encode($oObj);
?>

FILE:: .//src_modules/otp/mail_function.php
<?php	
	function sendOTP($email,$otp) {

        $to = $email;
        $subject = 'Secret OTP';
        $from = 'test@testmail.com';

        $headers = "From: $from";
        $headers .= "MIME-Version: 1.0\r\n";
        $headers .= "Content-Type: text/html; charset=UTF-8\r\n";

        $message = '<p><strong>Secrete OTP code:</strong></p><br/>';
        $message .= $otp;
        $message .= '<br/><br/>';

        if (mail($to, $subject, $message, $headers)) {
            return 'Main sent successfully.';
        } else {
            return 'Unable to send mail. Please try again.';
        }
	}
?>

FILE:: .//src_modules/otp/newotp.php
<?php
// https://github.com/moh4mmad/php-otp-without-database

require_once 'src_modules/otp/otp.class.php';
require_once 'src_modules/otp/mail_function.php';
session_start();

if (isset($_POST["email"])) {
$otp = new Sakib\OTP;
$code = $otp->generateRandomString(6);
// $code = "ALOHA_M";
$email = $_POST['email'];
$hash = $otp->CreateOTP($email,$code);
$_SESSION['email'] = $email;
$_SESSION['hash'] = $hash;
# => sending email
sendOTP($email,$code);//send the code via email
# =>
header("Location: src_modules/otp/verifyotp.php"); 
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>OTP Verification without Database</title>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script> 
<style type="text/css">
	.login-form {
		width: 340px;
    	margin: 50px auto;
	}
    .login-form form {
    	margin-bottom: 15px;
        background: #f7f7f7;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
        padding: 30px;
    }
    .login-form h2 {
        margin: 0 0 15px;
    }
    .form-control, .btn {
        min-height: 38px;
        border-radius: 2px;
    }
    .btn {        
        font-size: 15px;
        font-weight: bold;
    }
</style>
</head>
<body>
<div class="login-form">
    <form action="" method="post">
        <h3 style="font-size: 20px;" class="text-center">OTP Verification without DB</h3>       
        <div class="form-group">
            <input type="email" name="email" class="form-control" placeholder="Email" required="required">
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary btn-block">Submit</button>
        </div>
    </form>
</div>
</body>
</html>

FILE:: .//src_modules/otp/otp.class.php
<?php
namespace Sakib;

class OTP
{
	/**
	 * Create OTP function
	 *
	 * @param string $email
	 * @param string $otp
	 * @param string $key
	 * @param integer $min
	 * @param string $algo
	 * @return string
	 */	
	public function CreateOTP($email, $otp, $key = "verysecret", $min = 5, $algo = "sha256")
	{
		$expireAfter = time() + $min * 60 * 1000; //Expires after in Minutes, converteed to miliseconds
		$data = $email . $otp . $expireAfter;
		 
		// creating SHA256 hash of the data
		$hash = hash_hmac($algo, $data, $key);
		
		// send email mail("someone@example.com","OTP", "OTP: ".$otp);
		return $hash . "." . $expireAfter;
	}
	
	/**
	 * Verify OTP
	 *
	 * @param string $email
	 * @param string $otp
	 * @param string $hash
	 * @param string $key
	 * @param string $algo
	 * @return boolean
	 */
	public function VerifyOTP($email, $otp, $hash, $key = "verysecret", $algo = "sha256")
	{
		// Hash should have at least one dot
		if (strpos($hash, '.') !== false) {
			// Seperate Hash value and expires from the hash returned from the user
			$hashdata = explode (".", $hash); 
			
			// Check if expiry time has passed
			if (time() > $hashdata[1] ) {
				return "FALSE#".$hashdata[1];#false;
			}
			
			// Calculate new hash with the same key and the same algorithm
			$data = $email . $otp . $hashdata[1];
			$newHash = hash_hmac($algo, $data, $key); 
			
			// Match the hashes
			if ($newHash == $hashdata[0]) {
				return "MATCHED";
				// return true;
			} else {
				return "UNMATCHED#<br/>".$newHash."#<br/>".$hash."#<br/>email:".$email."#<br/>otp:".$otp;
            }
		} else {
			return "FALSE#notSplitted";
			// return false;
		}
	}
	
	/**
	 * Generate Random String
	 *
	 * @param integer $length
	 * @return string
	 */
	public function generateRandomString($length = 6)
	{
		$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
		$charactersLength = strlen($characters);
		$randomString = '';
		
		for ($i = 0; $i < $length; $i++) {
			$randomString .= $characters[rand(0, $charactersLength - 1)];
		}
		
		return $randomString;
	}
	
}

FILE:: .//src_modules/otp/verifyotp.php
<?php

require_once 'src/otp.class.php';
session_start();
if (empty($_SESSION['hash']))
{
    // header("Location: index.php"); 
    header("Location: index.html");
    exit();
}
if (isset($_POST["otp"])) {
    $otp = new Sakib\OTP;
    $email = $_SESSION['email'];
    $hash = $_SESSION['hash'];
    $code = $_POST['otp'];
    
    $hash = $otp->VerifyOTP($email,$code,$hash);
    
    if($hash === "MATCHED")
    {
        $success = true;
        $oStr = $hash;
        session_destroy();
    }
    else
    {
        $error = true;
        $oStr = $hash;
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>OTP Verification without Database</title>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script> 
<style type="text/css">
	.login-form {
		width: 340px;
    	margin: 50px auto;
	}
    .login-form form {
    	margin-bottom: 15px;
        background: #f7f7f7;
        box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);
        padding: 30px;
    }
    .login-form h2 {
        margin: 0 0 15px;
    }
    .form-control, .btn {
        min-height: 38px;
        border-radius: 2px;
    }
    .btn {        
        font-size: 15px;
        font-weight: bold;
    }
</style>
</head>
<body>
<?php echo "<h1>xxx: " . $_POST['mailSentStt'] . "</h1><br/>" ?>
<div class="login-form">
    <form action="" method="post">
        <h3 style="font-size: 20px;" class="text-center">OTP Verification without DB</h3> 
        <?php if(isset($error)) {?>
        <div class="alert alert-danger" role="alert"> Verification failed! <?php echo $oStr ?></div>
        <?php } ?>
        
        <?php if(isset($success)) {?>
        <div class="alert alert-success" role="alert"> Verification success! </div>
        <?php } ?>
        
        <div class="form-group">
            <input type="text" name="otp" class="form-control" placeholder="OTP" required="required">
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary btn-block">Submit</button>
        </div>
    </form>
</div>
</body>
</html>

FILE:: .//src_modules/redmine/NativeCurlClient.php
<?php

namespace Redmine\Client;

/**
 * Native cURL client.
 */
final class NativeCurlClient
{
    // private string $url;
    // private string $apikeyOrUsername;
    // private ?string $password;
    // private ?string $impersonateUser = null;
    // private int $lastResponseStatusCode = 0;
    // private string $lastResponseContentType = '';
    // private string $lastResponseBody = '';
    // private array $curlOptions = [];
    // private array $httpHeaders = [];
    // private array $httpHeadersNames = [];
    // private ?int $port = null;

    /**
     * $apikeyOrUsername should be your ApiKey, but it could also be your username.
     * $password needs to be set if a username is given (not recommended).
     */
    public function __construct(
        $url,
        $apikeyOrUsername,
        $password = null
    ) {
        $this->url = $url;
        $this->apikeyOrUsername = $apikeyOrUsername;
        $this->password = $password;

        // get Port from url
        $defaultPorts = array(
            'http' => 80,
            'https' => 443,
        );

        $tmp = parse_url($this->url);

        if (isset($tmp['port'])) {
            $this->port = $tmp['port'];
        } elseif (isset($tmp['scheme']) && array_key_exists($tmp['scheme'], $defaultPorts)) {
            $this->port = $defaultPorts[$tmp['scheme']];
        } else {
            $this->port = $defaultPorts['http'];
        }

        // =>
        $this->impersonateUser = null;
        $this->httpHeadersNames = array();
        $this->httpHeaders = array();
    }

    /**
     * Sets to an existing username so api calls can be
     * impersonated to this user.
     */
    public function startImpersonateUser($username)
    {
        $this->impersonateUser = $username;
    }

    /**
     * Remove the user impersonate.
     */
    public function stopImpersonateUser()
    {
        $this->impersonateUser = null;
    }

    /**
     * Create and send a GET request.
     */
    public function requestGet($path)
    {
        return $this->request('get', $path);
    }

    /**
     * Create and send a POST request.
     */
    public function requestPost($path, $body)
    {
        return $this->request('post', $path, $body);
    }

    /**
     * Create and send a PUT request.
     */
    public function requestPut($path, $body)
    {
        return $this->request('put', $path, $body);
    }

    /**
     * Create and send a DELETE request.
     */
    public function requestDelete($path)
    {
        return $this->request('delete', $path);
    }

    /**
     * Returns status code of the last response.
     */
    public function getLastResponseStatusCode()
    {
        return $this->lastResponseStatusCode;
    }

    /**
     * Returns content type of the last response.
     */
    public function getLastResponseContentType()
    {
        return $this->lastResponseContentType;
    }

    /**
     * Returns the body of the last response.
     */
    public function getLastResponseBody()
    {
        return $this->lastResponseBody;
    }

    /**
     * Set a cURL option.
     *
     * @param int   $option The CURLOPT_XXX option to set
     * @param mixed $value  The value to be set on option
     */
    public function setCurlOption(int $option, $value)
    {
        // Headers must be handled serperatly
        if ("CURLOPT_HTTPHEADER" === $option) {
            // $value must be an array. setHttpHeaders() will enforce this.
            $this->setHttpHeaders($value);

            return;
        }

        $this->curlOptions[$option] = $value;
    }

    /**
     * Unset a cURL option.
     *
     * @param int $option The CURLOPT_XXX option to unset
     */
    public function unsetCurlOption(int $option)
    {
        // Headers must be handled serperatly
        if ("CURLOPT_HTTPHEADER" === $option) {
            $this->httpHeaders = array();
            $this->httpHeadersNames = array();

            return;
        }

        if (array_key_exists($option, $this->curlOptions)) {
            unset($this->curlOptions[$option]);
        }
    }

    /**
     * Set multiple HTTP headers.
     */
    private function setHttpHeaders(array $headers)
    {
        foreach ($headers as $header) {
            $values = explode(':', $header, 2);

            // Ignore invalid header
            if (count($values) < 2) {
                continue;
            }

            $this->setHttpHeader(trim($values[0]), trim($values[1]));
        }
    }

    /**
     * Set a HTTP header.
     */
    private function setHttpHeader($name, $value)
    {
        $this->unsetHttpHeader($name);

        $this->httpHeadersNames[strtolower($name)] = $name;
        $this->httpHeaders[$name] = $value;
    }

    /**
     * Unset a HTTP header.
     */
    private function unsetHttpHeader($name)
    {
        $headerId = strtolower($name);

        if (array_key_exists($headerId, $this->httpHeadersNames)) {
            unset($this->httpHeaders[$this->httpHeadersNames[$headerId]]);
            unset($this->httpHeadersNames[$headerId]);
        }
    }

    /**
     * @throws ClientException If anything goes wrong on curl request
     */
    private function request($method, $path, $body = "")
    {
        if($body === null) $body = '';
        $this->lastResponseStatusCode = 0;
        $this->lastResponseContentType = '';
        $this->lastResponseBody = '';

        $curl = $this->createCurl($method, $path, $body);

        $response = curl_exec($curl);

        $curlErrorNumber = curl_errno($curl);

        if (CURLE_OK !== $curlErrorNumber) {
            // $e = new ClientException(curl_error($curl), $curlErrorNumber);
            curl_close($curl);
            echo "curlError: $curlErrorNumber: ".curl_error($curl) . "\n";
            return "Error: $curlErrorNumber";
            // throw $e;
            // throw new Exception("UNKNOWN");
        }

        $this->lastResponseBody = (false === $response) ? '' : $response;
        $this->lastResponseStatusCode = curl_getinfo($curl, CURLINFO_HTTP_CODE);
        $possibleContentType = curl_getinfo($curl, CURLINFO_CONTENT_TYPE);

        if (is_string($possibleContentType)) {
            $this->lastResponseContentType = $possibleContentType;
        }

        curl_close($curl);

        return $this->lastResponseStatusCode < 400;
    }

    /**
     * Prepare the request by setting the cURL options.
     *
     * @return resource a cURL handle on success, <b>FALSE</b> on errors
     */
    private function createCurl($method, $path, $body = "")
    {
        if($body === null) $body = '';
        // General cURL options
        $curlOptions = array(
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1, // use HTTP 1.1
            CURLOPT_PORT => $this->port,
        );

        // Merge custom curl options
        // $curlOptions = array_replace($curlOptions, $this->curlOptions);

        // Host and request options
        $curlOptions[CURLOPT_URL] = $this->url.$path;

        // Set the HTTP request headers
        $curlOptions[CURLOPT_HTTPHEADER] = $this->createHttpHeader($path);

        unset($curlOptions[CURLOPT_CUSTOMREQUEST]);
        unset($curlOptions[CURLOPT_POST]);
        unset($curlOptions[CURLOPT_POSTFIELDS]);
        switch ($method) {
            case 'post':
                $curlOptions[CURLOPT_POST] = 1;
                if ($this->isUploadCall($path) && $this->isValidFilePath($body)) {
                    @trigger_error('Uploading an attachment by filepath is deprecated, use file_get_contents() to upload the file content instead.', E_USER_DEPRECATED);

                    $file = fopen($body, 'r');
                    $size = filesize($body);
                    $filedata = fread($file, $size);

                    $curlOptions[CURLOPT_POSTFIELDS] = $filedata;
                    $curlOptions[CURLOPT_INFILE] = $file;
                    $curlOptions[CURLOPT_INFILESIZE] = $size;
                } elseif (isset($body)) {
                    $curlOptions[CURLOPT_POSTFIELDS] = $body;
                }
                break;
            case 'put':
                $curlOptions[CURLOPT_CUSTOMREQUEST] = 'PUT';
                if (isset($body)) {
                    $curlOptions[CURLOPT_POSTFIELDS] = $body;
                }
                break;
            case 'delete':
                $curlOptions[CURLOPT_CUSTOMREQUEST] = 'DELETE';
                break;
            default: // GET
                break;
        }

        // Set or reset mandatory curl options
        $curlOptions = array_replace($curlOptions, array(
            CURLOPT_VERBOSE => 0,
            CURLOPT_HEADER => 0,
            CURLOPT_RETURNTRANSFER => 1,
        ));

        $curl = curl_init();

        // Set all cURL options to the current cURL resource
        curl_setopt_array($curl, $curlOptions);

        // print_r($curlOptions);
        // print_r(curl_getinfo($curl));
        return $curl;
    }

    private function createHttpHeader($path)
    {
        // Additional request headers
        $httpHeaders = array(
            'Expect: ',
        );

        // Redmine specific headers
        if (null !== $this->impersonateUser && !array_key_exists(strtolower('X-Redmine-Switch-User'), $this->httpHeadersNames)) {
            $httpHeaders[] = 'X-Redmine-Switch-User: '.$this->impersonateUser;
        }

        // Set Authentication header
        // @see https://www.redmine.org/projects/redmine/wiki/Rest_api#Authentication
        if (null === $this->password && !array_key_exists(strtolower('X-Redmine-API-Key'), $this->httpHeadersNames)) {
            $httpHeaders[] = 'X-Redmine-API-Key: '.$this->apikeyOrUsername;
        } else {
            if (!array_key_exists(strtolower('Authorization'), $this->httpHeadersNames)) {
                // Setting Header "Authorization: Basic base64" is the same as
                // $this->setCurlOption(CURLOPT_USERPWD, "$username:$password")
                // @see https://stackoverflow.com/a/26285941
                $httpHeaders[] = 'Authorization: Basic '.base64_encode($this->apikeyOrUsername.':'.$this->password);
            }
        }

        // prepare custom headers
        $customHttpHeaders = array();

        foreach ($this->httpHeaders as $headerName => $headerValue) {
            $customHttpHeaders[] = $headerName.': '.$headerValue;
        }

        // Merge custom headers
        $httpHeaders = array_merge($httpHeaders, $customHttpHeaders);

        // Now set or reset mandatory headers

        // Content type headers
        $tmp = parse_url($this->url.$path);

        if ($this->isUploadCall($path)) {
            $httpHeaders[] = 'Content-Type: application/octet-stream';
        } elseif ('json' === substr($tmp['path'], -4)) {
            $httpHeaders[] = 'Content-Type: application/json';
        } elseif ('xml' === substr($tmp['path'], -3)) {
            $httpHeaders[] = 'Content-Type: text/xml';
        }

        return $httpHeaders;
    }
    
    private function isUploadCall($path)
    {
        $path = strtolower($path);

        return (false !== strpos($path, '/uploads.json')) || (false !== strpos($path, '/uploads.xml'));
    }

    private function isValidFilePath($body)
    {
        return
            '' !== $body
            && strlen($body) <= \PHP_MAXPATHLEN
            && is_file(strval(str_replace("\0", '', $body)))
        ;
    }
}

FILE:: .//src_modules/redmine/get_issues.php
<?php
    // ini_set('display_errors', 1);
    // ini_set('display_startup_errors', 1);
    // error_reporting(E_ALL);

    // ref: https://github.com/kbsali/php-redmine-api
    // $apiKey = "3b96f9078763fcf1fc0bff57a44d937df6293c44";//mand
    $apiKey = "a649e2afc2b0272759256dba8c901ad1c9f88316";//quyen
    $url = "http://172.29.143.22:8080";
    
    $lastIndex = -1;//index starts from 0
    $limit = 100;
    $offset = 0;
    $childURL = "issues.json";//
    $opMode = "sum";//sum: return summary info | org: return original data
    
    $dbg = 0;
    // $lastIndex = 124;
    
    if(isset($_GET["apiKey"])) $apiKey = $_GET["apiKey"];

    if(isset($_GET["offset"])) $offset = $_GET["offset"];
    if(isset($_GET["limit"])) $limit = $_GET["limit"];
    if(isset($_GET["lastIndex"])) $lastIndex = $_GET["lastIndex"];
    
    if(isset($_GET["childURL"])) $childURL = $_GET["childURL"];
    if(isset($_GET["opMode"])) $opMode = $_GET["opMode"];
    
    // consider executed as scripting at server side
    if($argc > 1){
        $options = getopt("",array("offset:","limit:","lastIndex:","childURL:","opMode:","apiKey:"));
        if(isset($options["offset"])) $offset = $options["offset"];
        if(isset($options["limit"])) $limit = $options["limit"];
        if(isset($options["lastIndex"])) $lastIndex = $options["lastIndex"];
        if(isset($options["childURL"])) $childURL = $options["childURL"];
        if(isset($options["opMode"])) $opMode = $options["opMode"];
        if(isset($options["apiKey"])) $apiKey = $options["apiKey"];
    }
    // return;
    
    ////////////////////////////////////////////////////
    require_once "src/NativeCurlClient.php";
    $curlClient = new \Redmine\Client\NativeCurlClient(
        $url,
        $apiKey,
        null
    );
    ////////////////////////////////////////////////////

    if($opMode === "upHistory"){
        // checking whether it needs updated
        // 1. check if the flag updating is on
        if(file_exists("./data/flg_updating.txt")){
            echo json_encode(array(
                "regTime" => time(),
                "outObj" => array(
                    "result" => "flg_updating on.",
                ),
            ));
            return;
        }else{
            // 2. check if the last time updating is more than 15min
            $chkFile = "./data/last_updating.json";
            if(file_exists($chkFile)){
                if($fh = fopen($chkFile, "r")){
                    $tmpObj = json_decode(fread($fh, filesize($chkFile)), true);
                    fclose($fh);
                    if(time() - $tmpObj["regTime"] < 15 * 60){
                        echo json_encode(array(
                            "regTime" => time(),
                            "outObj" => array(
                                "result" => "regTime less than 15min",
                            ),
                        ));
                        return;
                    }else{}
                } else { }
            }else{}
        }
        // register the flg_updating.txt
        if(! $fh = fopen("./data/flg_updating.txt","w")){
            //cannot open for writing
            echo json_encode(array(
                "regTime" => time(),
                "outObj" => array(
                    "result" => "Cannot register flg_updating.",
                ),
            ));
            return;
        }else{
            fwrite($fh,"ongoing");
            fclose($fh);
        }
    }

    $time_start = microtime(true);
    //echo $curlClient->requestGet("/issues/20409.json");
    // echo json_encode($curlClient->requestGet("/issues.json"));

    $dataAll = array();
    $dataThis = array();
    
    $allUsers = array();
    $outObj = array();
    $regItems = array();//for debugging
    
    $lastTotalCount = 0;
    
    $_limit = 100;
    if($lastIndex > -1 && $lastIndex < $limit) $limit = $lastIndex - $offset + 1;
    while($limit > 0){
        if($limit > 100){
            $_limit = 100;
            $limit -= 100;
        }else{
            $_limit = $limit;
            $limit = 0;
        }
        $modURL = "?limit=${_limit}&offset=$offset";
        $curlClient->requestGet("/" . $childURL .$modURL);
        $dataThis = json_decode($curlClient->getLastResponseBody(),true);
        
        $offset += $_limit;
        if(array_key_exists("total_count",$dataThis)){
            if($offset >= $dataThis["total_count"]){
                $limit = 0;
            }else{
                if($lastIndex > -1 && $lastIndex < $dataThis['total_count']){
                    $limit = $lastIndex - $offset + 1;
                }else{
                    $limit = $dataThis["total_count"] - $offset;
                }
            }
            $lastTotalCount = $dataThis['total_count'];
        }
        // $dataAll = array_merge_recursive($dataAll, $dataThis);
        ///////////////////////////////
        if($opMode === "sum" || $opMode === "upHistory"){
            manipulate_issues_data($dataThis,$allUsers,$outObj,$regItems);
        }elseif($opMode === "org"){
            $outObj = array("received" => $dataThis);
        }else{
        }
        ///////////////////////////////
        if($dbg){
            echo "limit='$limit' offset='$offset' limit='$limit' total_count=". $dataThis['total_count'] 
            . " count=" . count($dataThis["issues"]) 
            . " consumed:" . number_format(memory_get_usage()/(1024*1024),1)  . "Mb"
            . " " . number_format(microtime(true) - $time_start,1) . "(sec)"
            . "\n";
            // if($offset >= $dbg * 100) $limit = 0; //testing only
        }
        if($lastIndex > -1 && $offset >= $lastIndex) $limit = 0;//max reached
    }
    if(!$dbg){
        // inform the http request
        if($opMode === "sum" || $opMode === "org"){
            echo json_encode(array(
                "regTime" => time(),
            #    "allUsers" => $allUsers,
                "outObj" => $outObj,
                "total_count" => $lastTotalCount,
                "offset" => $offset,
            #    'regItems' => $regItems,
                "dbg_inputs" => array(
                    "opMode" => $opMode,
                    "childURL" => $childURL,
                    "apiKey" => $apiKey
                ),
            ));
            return;
        }elseif($opMode === "upHistory"){
            //
            $status = "done";
            //write to specific decided file
            $fh = null;
            if(!$fh = fopen("./data/sum_issues.json","w")){
                $status = "Cannot open for writing to file.";
            }else{
                fwrite($fh,json_encode(
                    array(
                        "regTime" => time(),
                        "outObj" => $outObj,
                        "total_count" => $lastTotalCount,
                        "offset" => $offset,
                        )
                ));
                fclose($fh);
            }
            //delete the flagging file
            if(file_exists("./data/flg_updating.txt")) unlink("./data/flg_updating.txt");
            // register the date-time
            $fh = null;
            if(!$fh = fopen("./data/last_updating.json","w")){
                $status = "Cannot open for writing to file.";
            }else{
                fwrite($fh,json_encode(
                    array(
                        "regTime" => time()
                    )
                ));
                fclose($fh);
            }
            // and inform user about the finishing
            echo json_encode(array(
                "regTime" => time(),
            #    "allUsers" => $allUsers,
                "outObj" => array(
                    "result" => $status,
                ),
            # "total_count" => $lastTotalCount,
            #   "offset" => $offset,
            #    'regItems' => $regItems,
                "dbg_inputs" => array(
                    "opMode" => $opMode,
                    "childURL" => $childURL,
                    "apiKey" => $apiKey
                ),
            ));
            return;
        }else{
            //unknown request from client
            echo json_encode(array(
                "regTime" => time(),
            #    "allUsers" => $allUsers,
                "outObj" => array(
                    "result" => "unknown request",
                ),
            # "total_count" => $lastTotalCount,
            #   "offset" => $offset,
            #    'regItems' => $regItems,
                "dbg_inputs" => array(
                    "opMode" => $opMode,
                    "childURL" => $childURL,
                    "apiKey" => $apiKey
                ),
            ));
            return;
        }
    }else{}

    ////////////////////////////////////////////////////
    function manipulate_issues_data($data,&$forUsers,&$forPrjs,&$regItems){
        foreach($data["issues"] as $issue){
            // =>
            $userId = $issue['author']['id'];
            $userName = $issue['author']['name'];
            if(isset($issue['assigned_to']) && isset($issue['assigned_to']['id']) && isset($issue['assigned_to']['name'])){
                $userId = $issue['assigned_to']['id'];
                $userName = $issue['assigned_to']['name'];
            }
            if(!isset($forUsers[$userId])){
                $forUsers[$userId]['count'] = 0;
                $forUsers[$userId]['name'] = $userName;
            }
            $forUsers[$userId]['count']++;
            
            // =>
            if(!isset($forPrjs[$issue['project']['name']])){
                $forPrjs[$issue['project']['name']] = array();
                $forPrjs[$issue['project']['name']]['id'] = $issue['project']['id'];
                $forPrjs[$issue['project']['name']]['total'] = 0;
                $forPrjs[$issue['project']['name']]['emptyMAC'] = 0;
                $forPrjs[$issue['project']['name']]['MAC<31'] = 0;
                $forPrjs[$issue['project']['name']]['MAC=31-90'] = 0;
                $forPrjs[$issue['project']['name']]['MAC>90'] = 0;
                $forPrjs[$issue['project']['name']]['emptyMAC_issues'] = array();
                $forPrjs[$issue['project']['name']]['MAC<31_issues'] = array();
                $forPrjs[$issue['project']['name']]['MAC=31-90_issues'] = array();
                $forPrjs[$issue['project']['name']]['MAC>90_issues'] = array();
            }
            $forPrjs[$issue['project']['name']]['total']++;
            $MACDateStr = "";
            foreach ($issue['custom_fields'] as $field){
                if($field['name'] === 'Y3. Monthly Asset Check Date'){
                    $MACDateStr = $field["value"];
                }else{}
            }
            if($MACDateStr === ""){
                $forPrjs[$issue['project']['name']]['emptyMAC']++;
                array_push($forPrjs[$issue['project']['name']]['emptyMAC_issues'],$issue['id']);
            }else{
                $MACDateObj = date_create($MACDateStr);
                $diffDays = date_diff($MACDateObj,date_create());
                if($diffDays->format("%r%a") - 31 < 0){
                    $forPrjs[$issue['project']['name']]['MAC<31']++;
     //  array_push($forPrjs[$issue['project']['name']]['MAC<31_issues'],$issue['id']);
                }elseif($diffDays->format("%r%a") - 91 < 0){
                    $forPrjs[$issue['project']['name']]['MAC=31-90']++;
         array_push($forPrjs[$issue['project']['name']]['MAC=31-90_issues'],$issue['id']);
                }else{
                    $forPrjs[$issue['project']['name']]['MAC>90']++;
         array_push($forPrjs[$issue['project']['name']]['MAC>90_issues'],$issue['id']);
                }
            }
            
            // =>
            array_push($regItems,$issue['id']);
        }
    }
?>

FILE:: .//src_modules/test/database.php
<?php
    //
    require_once("../../src_main/my.php");
    // register_shutdown_function("my_handler_fatal",array());
    
    require_once("../../src_modules/login/users_file.class.php");
    
    function chk_mysql_connection(){
        // $servername = "localhost";
        // $username = "root";
        // $password = "Pass1234";
        $servername = "localhost";
        $username = "";
        $password = "";
        try {
            // $conn = new PDO("mysql:host=$servername;dbname=myDB", $username, $password);
            $conn = new PDO("mysql:host=$servername", $username, $password);
            // $conn = new PDO("sqlite:host=$servername", $username, $password);
            // set the PDO error mode to exception
            $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            // $oO["rtnCode"] = "Connected successfully";
            $conn = null;
            return 1;#"OK: can connect to mysql.";
        } catch(PDOException $e) {
            // $oO["rtnCode"] = "Connection failed: " . $e->getMessage();
            return $e->getCode();#"Failed: " . $e->getMessage();
        }
    };

    $oO = array();
    $oO["rtnCode"] = "OK";

    $oO['mysql_connect_check'] = chk_mysql_connection();
    // $oO['simple_login_json_check'] = User_by_file::chk_login_json_data();

    $user = new User_by_file;
    $oO["login_email"] = $user->login_email;
    $oO["status1"] = $user->status;
    // $oO["remove_status"] = $user->remove_user();
    $oO["reg_status1"] = $user->reg_user();
    $oO["status2"] = $user->status;
    $oO["reg_status2"] = $user->remove_user();
    $oO["status3"] = $user->status;
    $oO["user_info"] = $user->get_user_info();
    
    $oO["mand"] = $user->manduong("removeAllFiles");
    
    //last command to accumulate output before sendingF
    $oO["FATAL"] = error_get_last();
    echo(json_encode($oO));
?>

FILE:: .//src_modules/test/database_sqlite3.php
<?php
    require_once("../../src_main/my.php");
    register_shutdown_function("my_handler_fatal",array());

   class MyDB extends SQLite3
   {
      function __construct()
      {
         $this->open('../../data/test.db');
      }
   }
   $db = new MyDB();

   $oO = array();
   if(!$db){
      $oO["rtnCode"] = $db->lastErrorMsg();
   } else {
      $oO["rtnCode"] = "Opened database successfully";
   }

   echo(json_encode($oO));
?>

FILE:: .//src_modules/test/md_command.php
<?php
    //
    require_once("../../src_main/my.php");
    // register_shutdown_function("my_handler_fatal",array());
    
    require_once("../../src_modules/login/users_file.class.php");
    require_once("../../src_modules/login/users_sqlite3.class.php");
    $user = new User_by_file;
    $user2 = new User_by_sqlite3;

    $oO = array();
    $oO["rtnCode"] = "OK";
    $oO["tgt"] = ""; if(isset($_REQUEST["input"])) $oO["tgt"] = $_REQUEST["input"];
    $oO["cmd"] = ""; if(isset($_REQUEST["command"])) $oO["cmd"] = $_REQUEST["command"];
    $oO["GET"] = $_GET;
    $oO["POST"] = $_POST;
    
    if(preg_match("/^sql_/",$oO["cmd"])){
        $oO["cmdRtnCode"] = $user2->manduong($oO["cmd"],$oO["tgt"]);
    }else{
        $oO["cmdRtnCode"] = $user->manduong($oO["cmd"]);
    }
    
    //last command to accumulate output before sendingF
    $oO["FATAL"] = error_get_last();
    echo(json_encode($oO));
?>

FILE:: .//src_modules/test/rtn_server_vars.php
<?php
    // my collection of common functions
    // =================================
    
    session_start();//Start new or resume existing session
    $oO = array();
    // $oO["GET"] = $_GET; 
    // $oO["POST"] = $_POST; 
    // $oO["COOKIES"] = $_COOKIE;
    $oO["SESSION"] = $_SESSION;
    $oO["test"] = 2;
    // $oO["SERVER"] = $_SERVER;
    // $oO["GLOBALS"] = $GLOBALS;
    // $oO["REQUEST"] = $_REQUEST;
    // $oO["ENV"] = $_ENV;
    // $oO["FILES"] = $_FILES;
    // $oO["version_php"] =  phpversion();
    // $oO["version_apache"] =  apache_get_version();
    // $oO["version_SQLite3"] =  SQLite3::version();

    echo(json_encode($oO));
?>

FILE:: .//src_modules/test/test.js



FILE:: .//src_modules/usageDiskInode/chkDiskInode.php
<?php
    // ini_set('display_errors', 1);
    // ini_set('display_startup_errors', 1);
    // error_reporting(E_ALL);

    $tgtD = "../../data/disk_usage_collections";

    // ##########
    $output = array();
    $tgtSite = $_GET["q"];
    $tgtPath = $_GET["path"];
    $mode = $_GET["mode"];
    if($tgtSite === null || $tgtSite === "") $tgtSite = "RVC"; //#default side
    if($mode === null || $mode === "") $mode = "latest"; //#default side

    $f24h  = $tgtD . "/" . $tgtSite . "_df_24h.json";
    $fdays = $tgtD . "/" . $tgtSite . "_df_days.json";

    $oO = array();
    // $oO["f24h"] = $f24h;
    // $oO["fdays"] = $fdays;
    $oO["data"] = array();
    // $oO["GET"] = $_GET;
    $oO["mode"] = $mode;
    $oO["path"] = $tgtPath;
    $oO["siteName"] = $tgtSite;

    if($mode === "latest" && file_exists($f24h)){
        $data = json_decode(file_get_contents($f24h),true);
        foreach($data as $type => $content){
            foreach($content as $path => $abDT){
                $allDT = array_keys($abDT);
                rsort($allDT);
                if(! array_key_exists($type,$oO["data"])) $oO["data"][$type] = array();
                $oO["data"][$type][$tgtSite . ":" . $path] = $abDT[$allDT[0]];
                $oO["data"][$type][$tgtSite . ":" . $path]['time'] = $allDT[0];
                // break 1;
            }
        }

    }elseif($mode === "24h" && file_exists($f24h)){
        $data = json_decode(file_get_contents($f24h),true);
        foreach($data as $type => $content){
            foreach($content as $path => $abDT){
                if($path !== $tgtPath) continue;
                $oO["data"][$type] = reduce_time_by_disk_percent_data($abDT);//
                // $oO["data"][$type] = $abDT;//
            }
        }

    }elseif($mode === "days" && file_exists($fdays)){
        $data = json_decode(file_get_contents($fdays),true);
        foreach($data as $type => $content){
            foreach($content as $path => $abDT){
                if($path !== $tgtPath) continue;
                // $oO["data"][$type] = reduce_time_by_disk_percent_data($abDT);//
                $oO["data"][$type] = $abDT;//
            }
        }

    }else{}
 
    echo json_encode($oO);
    // var_dump($oO);

    ///////////////////////////// FUNCTIONS
    function reduce_time_by_disk_percent_data($arrIn){
        $arrOut = array();
        $lastDt = -1;
        $tmpa = array_keys($arrIn);
        sort($tmpa);
        // reduce the same value
        foreach($tmpa as $dt){
            $info = $arrIn[$dt];
            if(count($arrOut) === 0){
                $arrOut[$dt] = $info;
                $lastDt = $dt;

            // }elseif($arrIn[$dt]["used%"] !== $arrOut[$lastDt]["used%"]){
            }elseif(abs(floatval($arrIn[$dt]["avai"]) - floatval($arrOut[$lastDt]["avai"])) >= 15000000){
                $arrOut[$dt] = $info;
                // $arrOut[$dt]["in_org"] = $arrIn[$dt]["avai"];
                // $arrOut[$dt]["in"] = floatval($arrIn[$dt]["avai"]);
                // $arrOut[$dt]["delta"] = floatval($arrIn[$dt]["avai"]) - floatval($arrOut[$lastDt]["avai"]);
                $lastDt = $dt;

            }else{
                // reduced
            }
        }
        // reg the last one
        if($lastDt !== end($tmpa)){
            $arrOut[end($tmpa)] = $arrIn[end($tmpa)];
        }

        return $arrOut;
    }

    return;
?>

FILE:: .//src_modules/usageDiskInode/usageDiskInode.js
// https://developer.mozilla.org/en-US/docs/Glossary/IIFE

(function(){

    // => load css for PVPI
    // my_add_css("ss_google_icon","https://fonts.googleapis.com/icon?family=Material+Icons");
    // my_add_css("ss_PVPI_org","css/PVPI_org.css");
    // => load js for charting (notice: load 1 then load 2 in ajax)
    (my_add_js("js_Chart_3_7_1","https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js"))
    .onload = function(){
        my_add_js("js_Chart_adapter_date","https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js");
    }

    ///////////////////////////////////////////
    // => private properties/ variables
    ///////////////////////////////////////////

    ///////////////////////////////////////////
    // => public properties/ variables
    ///////////////////////////////////////////

    ///////////////////////////////////////////
    // => public methods
    ///////////////////////////////////////////
    usageDiskInode.dsp_top_view = function(rtnO){
        // console.log(rtnO);
        if(document.getElementById("usage_disk_inode_top") === null){
            while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}
            eTop = my_create("div",undefined,["w3-light-gray","w3-card-2","w3-row"],{},{id:"usage_disk_inode_top"});
            // let eMore = my_create("div",undefined,["w3-yellow"],{},{id:"usage_disk_inode_more"})
            mainSide.appendChild(eTop);
            // mainSide.appendChild(eMore);
        }else{
            eTop = document.getElementById("usage_disk_inode_top");
        }
        // =>
        if(! rtnO.data.hasOwnProperty("disk") || Object.keys(rtnO["data"]["disk"]).length === 0){
            eTop.innerText = "Nothing to show.";
            return 0;
        }else{}

        while(eTop.childNodes.length>1) {eTop.lastChild.remove()}
        // =>
        if(eTop.lastChild !== null){
            if((eTop.lastChild.nodeType === 1 && eTop.lastChild.getAttribute("id") !== "usage_disk_inode_filter")
            || eTop.lastChild.nodeType !== 1
            ){
                eTop.lastChild.remove();
                eTop.appendChild(gen_filter());
            }else if(eTop.lastChild.nodeType !== 1){

            }
        }else{
            eTop.appendChild(gen_filter());
        }


        // => content
        // => sort by percentage first
        let tmpa = [];
        for(let path in rtnO.data.disk){
            let name = path.split("/").pop();
            tmpa.push([
                path,
                ((("00" + parseInt(rtnO.data.disk[path]["used%"])).slice(-3)+name).toUpperCase()+"ZZZZZZZZZZ").slice(0,13),
                ((("00" + parseInt(rtnO.data.inode[path]["used%"])).slice(-3)+name).toUpperCase()+"ZZZZZZZZZZ").slice(0,13),
            ])
        }
        tmpa.sort(function(a,b){
            let bcmp = b[1]; if(b[2] > b[1]) bcmp = b[2];
            let acmp = a[1]; if(a[2] > a[1]) acmp = a[2];
            if(bcmp > acmp) return 1;
            if(bcmp < acmp) return -1;
            return 0;
        })
        
        for(let tmpv of tmpa){
            let path  = tmpv[0];
            eTop.appendChild(gen_diskinode_sum(path,rtnO["data"]["disk"][path],rtnO["data"]["inode"][path]));
        }

        
        // =>
        return 1;
    };

    usageDiskInode.dsp_n_upd_disk_inode_graphs_top = function(topE,path,data){
        if(document.getElementById("mainSide") === null) return 0;

        if(topE !== undefined && typeof(topE) === "string") topE = document.getElementById(topE);

        // => modify the layout of the topE if needed
        if(topE !== undefined && topE !== null) topE.style.paddingBottom = "300px";

        // =>
        let eTop = null;
        if(document.getElementById("disk_inode_graphs") === null){
            // ->
            if(path === undefined || path === "") return 0;//cannot do this

            // -> newly creating
            eTop = my_create("div",undefined,
                ["w3-display-container","w3-sand"],
                {"position":"fixed","bottom":0,"height":"300px","width":"calc(100vw - 250px - 16px - 15px)"},
                {id:"disk_inode_graphs"})
            // =>
            mainSide.appendChild(eTop); //
            ////////////
            let eTitle = my_create("h3",
                path,
                ["w3-yellow","myCnt-title"],
                {"position":"sticky","top":0},
                {});
            // => add a closing button, and title
            eX = my_create("span","X",["w3-container","w3-display-topright","w3-hover-red"]);
            eX.addEventListener("click",function(){
                eTop.remove();
                if(topE !== undefined && topE !== null) topE.style.paddingBottom = "initial";
            })
            eTop.appendChild(eTitle);
            eTop.appendChild(eX);

            let eBtnByDays = my_create("div","to: by-days",["w3-button","w3-right","w3-round","w3-hover-blue","myCnt-button"])
            eBtnByDays.addEventListener("click",function(){
                let thisPath = this.parentNode.getElementsByClassName("myCnt-title")[0].innerText;
                // =>
                let mode = "days";
                if(this.innerText === "to: by-days"){
                    this.innerText = "to: within-24h";
                    mode = "days";
                }else{
                    this.innerText = "to: by-days";
                    mode = "24h";
                }
                // =>
                let tmpa = thisPath.split(":")
                if(tmpa.length !== 2) return 0;
                let eWait = dsp_wait();
                // ajax- for 24h (default) data
                my_ajax_get("src_modules/usageDiskInode/chkDiskInode.php",[{q:tmpa[0],path:tmpa[1],mode:mode}],function(rtnO){
                    // console.log(rtnO)
                    console.log(thisPath)
                    upd_disk_inode_graphs_by_time("graph_Disk",rtnO["data"]["disk"],"disk",mode);
                    upd_disk_inode_graphs_by_time("graph_Inode",rtnO["data"]["inode"],"inode",mode);
                    eWait.remove();
                })
            })
            eTop.appendChild(eBtnByDays)
    
            let eSubInfo1 = my_create("div","Disk: -% (-) free / Inode: -% (-) free",["myCnt-subInfo-1"])
            eTop.appendChild(eSubInfo1);
            let eSubInfo2 = my_create("div","Last updated at: YYMMDD hh:mm",["myCnt-subInfo-2","w3-small"])
            eTop.appendChild(eSubInfo2);
    
            // => graphs holder
            let e4D = my_create("div",undefined,["w3-half","w3-card-2"],{},{id:"graph_Disk"})
            e4D.appendChild(my_create("div","Disk data by time",["w3-small"],{"padding":0}))
            eTop.appendChild(e4D)

            let e4I = my_create("div",undefined,["w3-half","w3-card-2"],{},{id:"graph_Inode"})
            e4I.appendChild(my_create("div","Inode data by time",["w3-small"],{"padding":0}))
            eTop.appendChild(e4I)
            
        }else{
            eTop = document.getElementById("disk_inode_graphs");
        }

        // update the content
        let eTitle = eTop.getElementsByClassName("myCnt-title")[0]
        let eSub1 = eTop.getElementsByClassName("myCnt-subInfo-1")[0]
        let eSub2 = eTop.getElementsByClassName("myCnt-subInfo-2")[0]
        let eBtn = eTop.getElementsByClassName("myCnt-button")[0]
        // =>
        eBtn.innerText = "to: by-days";
        // =>
        if(data !== undefined && data !== null){
            // =>
            if(path !== undefined && path !== "" && path !== eTitle.textContent){
                eTitle.textContent = path;
            }else{}
            // =>
            let aoDT1 = Object.keys(data["disk"]);
            let aoDT2 = Object.keys(data["inode"]);
            eSub1.innerText = "Disk: "
                                + data["disk"][aoDT1[aoDT1.length-1]]["used%"]
                                + " ("
                                + (parseFloat(data["disk"][aoDT1[aoDT1.length-1]]["avai"])/(1024*1024)).toFixed(1) + " (GB) free"
                                + ")"
                            + " / Inode: "
                                + data["inode"][aoDT2[aoDT2.length-1]]["used%"]
                                + " ("
                                + (parseFloat(data["inode"][aoDT2[aoDT2.length-1]]["avai"])/(1000*1000)).toFixed(1) + " Mil free"
                                + ")"
            
            // =>
            let lastDT = aoDT1[aoDT1.length-1]
            if(aoDT2[aoDT2.length-1] > lastDT) lastDT = aoDT2[aoDT2.length-1]
            let oDT = new Date(lastDT * 1000)
            eSub2.innerText = "Last updated at: " + oDT.toLocaleString()

            // => update the charts/graphs
            upd_disk_inode_graphs_by_time("graph_Disk",data["disk"],"disk");
            upd_disk_inode_graphs_by_time("graph_Inode",data["inode"],"inode");
             
        }else{
            if(path === undefined || path === ""){
                // this is self-update?!
                let orgPath = eTitle.textContent;
                let tmpa = orgPath.split(":")
                let eWait = dsp_wait();
                my_ajax_get("src_modules/usageDiskInode/chkDiskInode.php",[{q:tmpa[0],path:tmpa[1],mode:"24h"}],function(rtnO){
                    // console.log(rtnO)
                    // =>
                    let aoDT1 = Object.keys(rtnO.data["disk"]);
                    let aoDT2 = Object.keys(rtnO.data["inode"]);
                    eSub1.innerText = "Disk: "
                                        + rtnO.data["disk"][aoDT1[aoDT1.length-1]]["used%"]
                                        + " ("
                                        + (parseFloat(rtnO.data["disk"][aoDT1[aoDT1.length-1]]["avai"])/(1024*1024)).toFixed(1) + " (GB) free"
                                        + ")"
                                    + " / Inode: "
                                        + rtnO.data["inode"][aoDT2[aoDT2.length-1]]["used%"]
                                        + " ("
                                        + (parseFloat(rtnO.data["inode"][aoDT2[aoDT2.length-1]]["avai"])/(1000*1000)).toFixed(1) + " Mil free"
                                        + ")"
                    
                    // =>
                    let lastDT = aoDT1[aoDT1.length-1]
                    if(aoDT2[aoDT2.length-1] > lastDT) lastDT = aoDT2[aoDT2.length-1]
                    let oDT = new Date(lastDT * 1000)
                    eSub2.innerText = "Last updated at: " + oDT.toLocaleString()

                    upd_disk_inode_graphs_by_time("graph_Disk",rtnO["data"]["disk"],"disk");
                    upd_disk_inode_graphs_by_time("graph_Inode",rtnO["data"]["inode"],"inode");
                    eWait.remove();
                })
            }
        }

        return 1;
    }

    ///////////////////////////////////////////
    // => private methods
    ///////////////////////////////////////////
    function gen_diskinode_sum(path,oDisk,oInode){
        // console.log(path,oDisk,oInode)
        let eHolder = my_create("div",undefined,["w3-col","s6","m3","l2","myCnt-diskinode-holder"],{"padding":"5px"},{})
        let eTop = my_create("div",undefined,
            ["w3-row","w3-round","w3-border","w3-border-sand","w3-hover-shadow","w3-hover-border-indigo"],
            {"background-color":color_by_percent(oDisk["used%"],oInode["used%"])},
            {}
            )

        let pname = (path.split('/')).pop();
        if(pname === "") pname = "/";

        let eBrief = my_create("div",pname,["my-tooltip","w3-block"]);
        eBrief.appendChild(my_create("div",path,["w3-tiny","my-tooltip-content"],{"width":"100%"}))
        eTop.appendChild(eBrief)

        let eDiskStt = my_create('div',undefined,["w3-twothird","my-tooltip","w3-center","w3-round"],{"background-color":color_by_percent(oDisk["used%"])})
        eDiskStt.appendChild(my_create("div",oDisk["used%"]))
        eDiskStt.appendChild(my_create("div","free:"+(parseFloat(oDisk["avai"])/(1024*1024)).toFixed(1)+"(GB)",["w3-tiny"]))
        eDiskStt.appendChild(my_create("div","Disk %used",["w3-small","my-tooltip-content"]))
        let eInodeStt = my_create('div',undefined,["my-center","w3-third","my-tooltip","w3-center","w3-round"],{"background-color":color_by_percent(oInode["used%"])})
        eInodeStt.appendChild(my_create("div",oInode["used%"]))
        eInodeStt.appendChild(my_create("div",(parseFloat(oInode["avai"])/(1000*1000)).toFixed(1)+"Mil",["w3-tiny"]))
        eInodeStt.appendChild(my_create("div","Inode %used",["w3-small","my-tooltip-content"]))
        eTop.appendChild(eDiskStt)
        eTop.appendChild(eInodeStt)

        eBrief.addEventListener("click",function(){
            let tmpa = path.split(":")
            if(tmpa.length !== 2) return 0;
            let eWait = dsp_wait();
            // dsp top holder
            usageDiskInode.dsp_n_upd_disk_inode_graphs_top(usage_disk_inode_top,path);

            // ajax- for 24h (default) data
            my_ajax_get("src_modules/usageDiskInode/chkDiskInode.php",[{q:tmpa[0],path:tmpa[1],mode:"24h"}],function(rtnO){
                // console.log(rtnO)
                usageDiskInode.dsp_n_upd_disk_inode_graphs_top(usage_disk_inode_top,path,rtnO.data)
                eWait.remove();
            })
            // console.log(this.parentNode.getElementsByClassName("my-tooltip-content")[0].textContent)
            return 1;
        });

        eHolder.appendChild(eTop);
        return eHolder;
    }

    function gen_filter(){
        let eTop = my_create("input",undefined,
            ["w3-input","w3-black","w3-round"],
            {"z-index":2,"position":"sticky","top":0,"margin-bottom":"5px"},
            {id:"usage_disk_inode_filter","placeholder":"Filter by any pattern ..."});
        // filter the disk/inode-holder
        eTop.addEventListener("keyup",function(){
            if(this.value === ""){
                for (let tmpe of document.querySelectorAll(".myCnt-diskinode-holder")) {
                    tmpe.style.display = '';
                }
            }else{
                for (let tmpe of document.querySelectorAll(".myCnt-diskinode-holder")) {
                    let flgGo = true;
                    for (let keyw of this.value.split(' ')){
                        if(keyw === "") continue;
                        if(tmpe.getElementsByClassName("my-tooltip-content")[0].textContent.toUpperCase().search(keyw.toUpperCase()) < 0) flgGo = false;
                    }
                    if(flgGo === true){
                        tmpe.style.display = '';
                    }else{
                        tmpe.style.display = 'none';
                    }
                }
            }
            // console.log(usage_disk_inode_top);
        })
        return eTop;
    }

    function color_by_percent(diskPercent, inodePercent){
        let num1 = parseInt(diskPercent);
        let num2 = 0; if(inodePercent !== undefined) num2 = parseInt(inodePercent);
        let num = num1; if(num2 > num1) num = num2;
        if(num === 100){    return "rgb(255, 10, 10)";
        }else if(num > 95){ return "rgb(255, 99, 71, 0.9)";
        }else if(num > 91){ return "rgb(255, 99, 71, 0.8)";
        }else if(num > 87){ return "rgb(255, 99, 71, 0.7)";
        }else if(num > 85){ return "rgb(255, 99, 71, 0.5)";
        }else if(num > 80){ return "rgb(255, 99, 71, 0.5)";
        }else if(num > 50){ return "rgb(60, 179, 113, 0.5)";
        }else{ return "rgb(60, 179, 113, 0.7)";
        }
    }

    function upd_disk_inode_graphs_by_time(tgte,data,data_type,data_mode){
        // update a graph (div holding canvas) of inode or disk data
        if(data === null) return 0;
        if(data_mode === null || data_mode === undefined) data_mode = "24h";
        if(typeof(tgte) === "string") tgte = document.getElementById(tgte);
        if(tgte === null) return 0;
        if(tgte.nodeType !== 1) return 0;

        // console.log(tgte,data)
        let canvas = tgte.getElementsByTagName("canvas")[0];
        if(canvas === null || canvas === undefined){
            // create new
            canvas = my_create("canvas",undefined,[],{},{})
            canvas.textContext = "Canvas not supported!";
            tgte.appendChild(canvas);
        }else{}
        canvas.style.maxHeight = "200px";

        let ctx = canvas.getContext('2d');
        if(ctx === null || ctx === undefined){
            console.log("ERROR: ctx 2d not existed, exit.");
            return 0;
        }else{}
        let chart = Chart.getChart(ctx);
        if(chart === null || chart === undefined){
            // create new
            chart = new Chart(ctx,{
                type: 'line',
                options: {
                    responsive: true,
                    animations: {
                        radius: {
                          duration: 400,
                          easing: 'linear',
                          loop: (context) => context.active
                        }
                    },
                    hoverRadius: 12,
                    cubicInterpolationMode: 'monotone',
                    interaction:{
                        intersect: false,
                        mode: 'nearest',
                    },
                    parsing: {
                        xAxisKey: 'x',          
                        yAxisKey: 'y'
                    },
                    scales: {
                        yAxis: {
                            beginAtZero: true,
                            type: 'linear',
                            max: 120,
                            ticks:{
                                mirror: true,
                                callback: function(value, index, ticks){
                                    let divider = [1, 1e+3, 1e+6, 1e+9, 1e+12];
                                    let unit    = ["", "K", "M", "B", "T"];
                                    let oStr = value;
                                    for(let i=0;i<divider.length;i++){
                                        oStr = value/divider[i];
                                        // oStr = oStr.toPrecision(1);
                                        oStr += unit[i];
                                        if(value/divider[i+1]<1){
                                            break;
                                        }else{}
                                    }
                                    return oStr;
                                }
                            }
                        },
                        xAxis: {
                            type: 'time',
                        }
                    },
                    plugins: {
                        legend: {
                            display: false,
                            labels: {
                                font : {
                                    size: 8,
                                },
                                boxWidth:3,
                            }    
                        },
                        tooltip:{
                            enabled: true,
                            //usePointStyle: true,   
                            onClick: function(){
                                console.log("ALOHA")
                            },    
                            callbacks: {
                                label: function(context){
                                    let labelMulti = [];
                                    let label = context.dataset.label || '';
                                    // let unique = context.dataset.data[context.dataIndex].unique;
                                    let otherStr = context.dataset.data[context.dataIndex].other;
                                    if(label){
                                        if(otherStr === undefined){
                                            label += ":" + context.parsed.y + "%";
                                        }else{
                                            label += ":" + otherStr;
                                        }
                                        labelMulti.push(label);
                                    }else{
                                        return "n/a";
                                    }
                                    // console.log(context.dataset.data[context.dataIndex].unique)
                                    return labelMulti;
                                },
                                footer: function(tooltipItems){
                                    // get the first item is enough
                                    let avai = tooltipItems[0].dataset.data[tooltipItems[0].dataIndex].avai;
                                    let aoStr = "Free: ";
                                    if(data_type === "disk"){
                                        avai /= 1024*1024;
                                        aoStr += avai.toFixed(1) + "(GB)";
                                    }else{
                                        avai /= 1000*1000;
                                        aoStr += avai.toFixed(1) + "Mil";
                                    }
                                    return aoStr;
                                },
                            }
                        }
                    }
                }
            });
        }else{}

        // => data
        let chart_data = {};
        chart_data.datasets = [];// all series
        chart_data.labels = [];

        let entry = {}; // 1 series
        entry.label = data_type;
        entry.data = [];
        entry.fill = 'origin';
        for(let dt in data){
            let oDT = null;
            if(data_mode === "24h"){
                oDT = new Date(dt  * 1000);
                chart_data.labels.push(oDT);
                entry.data.push({x : oDT, y: parseInt(data[dt]["used%"].replace(/%/,'')),"avai" : data[dt]["avai"]})
            }else{
                chart_data.labels.push(String(dt));
                entry.data.push({x : String(dt), y: parseInt(data[dt]["used%"].replace(/%/,'')),"avai" : data[dt]["avai"]})
            }
            entry.borderColor = "indigo";
        }
        chart_data.datasets.push(entry);

        chart.data = chart_data;

        // =>
        if(data_mode === "24h"){
            chart.options.scales.xAxis.type = 'time';
            chart.options.scales.xAxis.labels = undefined;
        }else{
            chart.options.scales.xAxis.type = 'category';
            chart.options.scales.xAxis.labels = chart_data.labels;
        }
        chart.update();

        return 1;
    }

}(window.usageDiskInode = window.usageDiskInode || {}));

FILE:: .//src_modules/w3/w3.js
/* W3.JS 1.04 April 2019 by w3schools.com */
"use strict";
var w3 = {};
w3.hide = function (sel) {
  w3.hideElements(w3.getElements(sel));
};
w3.hideElements = function (elements) {
  var i, l = elements.length;
  for (i = 0; i < l; i++) {
    w3.hideElement(elements[i]);
  }
};
w3.hideElement = function (element) {
  w3.styleElement(element, "display", "none");
};
w3.show = function (sel, a) {
  var elements = w3.getElements(sel);
  if (a) {w3.hideElements(elements);}
  w3.showElements(elements);
};
w3.showElements = function (elements) {
  var i, l = elements.length;
  for (i = 0; i < l; i++) {
    w3.showElement(elements[i]);
  }
};
w3.showElement = function (element) {
  w3.styleElement(element, "display", "block");
};
w3.addStyle = function (sel, prop, val) {
  w3.styleElements(w3.getElements(sel), prop, val);
};
w3.styleElements = function (elements, prop, val) {
  var i, l = elements.length;
  for (i = 0; i < l; i++) {    
    w3.styleElement(elements[i], prop, val);
  }
};
w3.styleElement = function (element, prop, val) {
  element.style.setProperty(prop, val);
};
w3.toggleShow = function (sel) {
  var i, x = w3.getElements(sel), l = x.length;
  for (i = 0; i < l; i++) {    
    if (x[i].style.display == "none") {
      w3.styleElement(x[i], "display", "block");
    } else {
      w3.styleElement(x[i], "display", "none");
    }
  }
};
w3.addClass = function (sel, name) {
  w3.addClassElements(w3.getElements(sel), name);
};
w3.addClassElements = function (elements, name) {
  var i, l = elements.length;
  for (i = 0; i < l; i++) {
    w3.addClassElement(elements[i], name);
  }
};
w3.addClassElement = function (element, name) {
  var i, arr1, arr2;
  arr1 = element.className.split(" ");
  arr2 = name.split(" ");
  for (i = 0; i < arr2.length; i++) {
    if (arr1.indexOf(arr2[i]) == -1) {element.className += " " + arr2[i];}
  }
};
w3.removeClass = function (sel, name) {
  w3.removeClassElements(w3.getElements(sel), name);
};
w3.removeClassElements = function (elements, name) {
  var i, l = elements.length, arr1, arr2, j;
  for (i = 0; i < l; i++) {
    w3.removeClassElement(elements[i], name);
  }
};
w3.removeClassElement = function (element, name) {
  var i, arr1, arr2;
  arr1 = element.className.split(" ");
  arr2 = name.split(" ");
  for (i = 0; i < arr2.length; i++) {
    while (arr1.indexOf(arr2[i]) > -1) {
      arr1.splice(arr1.indexOf(arr2[i]), 1);     
    }
  }
  element.className = arr1.join(" ");
};
w3.toggleClass = function (sel, c1, c2) {
  w3.toggleClassElements(w3.getElements(sel), c1, c2);
};
w3.toggleClassElements = function (elements, c1, c2) {
  var i, l = elements.length;
  for (i = 0; i < l; i++) {    
    w3.toggleClassElement(elements[i], c1, c2);
  }
};
w3.toggleClassElement = function (element, c1, c2) {
  var t1, t2, t1Arr, t2Arr, j, arr, allPresent;
  t1 = (c1 || "");
  t2 = (c2 || "");
  t1Arr = t1.split(" ");
  t2Arr = t2.split(" ");
  arr = element.className.split(" ");
  if (t2Arr.length == 0) {
    allPresent = true;
    for (j = 0; j < t1Arr.length; j++) {
      if (arr.indexOf(t1Arr[j]) == -1) {allPresent = false;}
    }
    if (allPresent) {
      w3.removeClassElement(element, t1);
    } else {
      w3.addClassElement(element, t1);
    }
  } else {
    allPresent = true;
    for (j = 0; j < t1Arr.length; j++) {
      if (arr.indexOf(t1Arr[j]) == -1) {allPresent = false;}
    }
    if (allPresent) {
      w3.removeClassElement(element, t1);
      w3.addClassElement(element, t2);          
    } else {
      w3.removeClassElement(element, t2);        
      w3.addClassElement(element, t1);
    }
  }
};
w3.getElements = function (id) {
  if (typeof id == "object") {
    return [id];
  } else {
    return document.querySelectorAll(id);
  }
};
w3.filterHTML = function(id, sel, filter) {
  var a, b, c, i, ii, iii, hit;
  a = w3.getElements(id);
  for (i = 0; i < a.length; i++) {
    b = a[i].querySelectorAll(sel);
    for (ii = 0; ii < b.length; ii++) {
      hit = 0;
      if (b[ii].innerText.toUpperCase().indexOf(filter.toUpperCase()) > -1) {
        hit = 1;
      }
      c = b[ii].getElementsByTagName("*");
      for (iii = 0; iii < c.length; iii++) {
        if (c[iii].innerText.toUpperCase().indexOf(filter.toUpperCase()) > -1) {
          hit = 1;
        }
      }
      if (hit == 1) {
        b[ii].style.display = "";
      } else {
        b[ii].style.display = "none";
      }
    }
  }
};
w3.sortHTML = function(id, sel, sortvalue) {
  var a, b, i, ii, y, bytt, v1, v2, cc, j;
  a = w3.getElements(id);
  for (i = 0; i < a.length; i++) {
    for (j = 0; j < 2; j++) {
      cc = 0;
      y = 1;
      while (y == 1) {
        y = 0;
        b = a[i].querySelectorAll(sel);
        for (ii = 0; ii < (b.length - 1); ii++) {
          bytt = 0;
          if (sortvalue) {
            v1 = b[ii].querySelector(sortvalue).innerText;
            v2 = b[ii + 1].querySelector(sortvalue).innerText;
          } else {
            v1 = b[ii].innerText;
            v2 = b[ii + 1].innerText;
          }
          v1 = v1.toLowerCase();
          v2 = v2.toLowerCase();
          if ((j == 0 && (v1 > v2)) || (j == 1 && (v1 < v2))) {
            bytt = 1;
            break;
          }
        }
        if (bytt == 1) {
          b[ii].parentNode.insertBefore(b[ii + 1], b[ii]);
          y = 1;
          cc++;
        }
      }
      if (cc > 0) {break;}
    }
  }
};
w3.slideshow = function (sel, ms, func) {
  var i, ss, x = w3.getElements(sel), l = x.length;
  ss = {};
  ss.current = 1;
  ss.x = x;
  ss.ondisplaychange = func;
  if (!isNaN(ms) || ms == 0) {
    ss.milliseconds = ms;
  } else {
    ss.milliseconds = 1000;
  }
  ss.start = function() {
    ss.display(ss.current)
    if (ss.ondisplaychange) {ss.ondisplaychange();}
    if (ss.milliseconds > 0) {
      window.clearTimeout(ss.timeout);
      ss.timeout = window.setTimeout(ss.next, ss.milliseconds);
    }
  };
  ss.next = function() {
    ss.current += 1;
    if (ss.current > ss.x.length) {ss.current = 1;}
    ss.start();
  };
  ss.previous = function() {
    ss.current -= 1;
    if (ss.current < 1) {ss.current = ss.x.length;}
    ss.start();
  };
  ss.display = function (n) {
    w3.styleElements(ss.x, "display", "none");
    w3.styleElement(ss.x[n - 1], "display", "block");
  }
  ss.start();
  return ss;
};
w3.includeHTML = function(cb) {
  var z, i, elmnt, file, xhttp;
  z = document.getElementsByTagName("*");
  for (i = 0; i < z.length; i++) {
    elmnt = z[i];
    file = elmnt.getAttribute("w3-include-html");
    if (file) {
      xhttp = new XMLHttpRequest();
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4) {
          if (this.status == 200) {elmnt.innerHTML = this.responseText;}
          if (this.status == 404) {elmnt.innerHTML = "Page not found.";}
          elmnt.removeAttribute("w3-include-html");
          w3.includeHTML(cb);
        }
      }      
      xhttp.open("GET", file, true);
      xhttp.send();
      return;
    }
  }
  if (cb) cb();
};
w3.getHttpData = function (file, func) {
  w3.http(file, function () {
    if (this.readyState == 4 && this.status == 200) {
      func(this.responseText);
    }
  });
};
w3.getHttpObject = function (file, func) {
  w3.http(file, function () {
    if (this.readyState == 4 && this.status == 200) {
      func(JSON.parse(this.responseText));
    }
  });
};
w3.displayHttp = function (id, file) {
  w3.http(file, function () {
    if (this.readyState == 4 && this.status == 200) {
      w3.displayObject(id, JSON.parse(this.responseText));
    }
  });
};
w3.http = function (target, readyfunc, xml, method) {
  var httpObj;
  if (!method) {method = "GET"; }
  if (window.XMLHttpRequest) {
    httpObj = new XMLHttpRequest();
  } else if (window.ActiveXObject) {
    httpObj = new ActiveXObject("Microsoft.XMLHTTP");
  }
  if (httpObj) {
    if (readyfunc) {httpObj.onreadystatechange = readyfunc;}
    httpObj.open(method, target, true);
    httpObj.send(xml);
  }
};
w3.getElementsByAttribute = function (x, att) {
  var arr = [], arrCount = -1, i, l, y = x.getElementsByTagName("*"), z = att.toUpperCase();
  l = y.length;
  for (i = -1; i < l; i += 1) {
    if (i == -1) {y[i] = x;}
    if (y[i].getAttribute(z) !== null) {arrCount += 1; arr[arrCount] = y[i];}
  }
  return arr;
};  
w3.dataObject = {},
w3.displayObject = function (id, data) {
  var htmlObj, htmlTemplate, html, arr = [], a, l, rowClone, x, j, i, ii, cc, repeat, repeatObj, repeatX = "";
  htmlObj = document.getElementById(id);
  htmlTemplate = init_template(id, htmlObj);
  html = htmlTemplate.cloneNode(true);
  arr = w3.getElementsByAttribute(html, "w3-repeat");
  l = arr.length;
  for (j = (l - 1); j >= 0; j -= 1) {
    cc = arr[j].getAttribute("w3-repeat").split(" ");
    if (cc.length == 1) {
      repeat = cc[0];
    } else {
      repeatX = cc[0];
      repeat = cc[2];
    }
    arr[j].removeAttribute("w3-repeat");
    repeatObj = data[repeat];
    if (repeatObj && typeof repeatObj == "object" && repeatObj.length != "undefined") {
      i = 0;
      for (x in repeatObj) {
        i += 1;
        rowClone = arr[j];
        rowClone = w3_replace_curly(rowClone, "element", repeatX, repeatObj[x]);
        a = rowClone.attributes;
        for (ii = 0; ii < a.length; ii += 1) {
          a[ii].value = w3_replace_curly(a[ii], "attribute", repeatX, repeatObj[x]).value;
        }
        (i === repeatObj.length) ? arr[j].parentNode.replaceChild(rowClone, arr[j]) : arr[j].parentNode.insertBefore(rowClone, arr[j]);
      }
    } else {
      console.log("w3-repeat must be an array. " + repeat + " is not an array.");
      continue;
    }
  }
  html = w3_replace_curly(html, "element");
  htmlObj.parentNode.replaceChild(html, htmlObj);
  function init_template(id, obj) {
    var template;
    template = obj.cloneNode(true);
    if (w3.dataObject.hasOwnProperty(id)) {return w3.dataObject[id];}
    w3.dataObject[id] = template;
    return template;
  }
  function w3_replace_curly(elmnt, typ, repeatX, x) {
    var value, rowClone, pos1, pos2, originalHTML, lookFor, lookForARR = [], i, cc, r;
    rowClone = elmnt.cloneNode(true);
    pos1 = 0;
    while (pos1 > -1) {
      originalHTML = (typ == "attribute") ? rowClone.value : rowClone.innerHTML;
      pos1 = originalHTML.indexOf("{{", pos1);
      if (pos1 === -1) {break;}
      pos2 = originalHTML.indexOf("}}", pos1 + 1);
      lookFor = originalHTML.substring(pos1 + 2, pos2);
      lookForARR = lookFor.split("||");
      value = undefined;
      for (i = 0; i < lookForARR.length; i += 1) {
        lookForARR[i] = lookForARR[i].replace(/^\s+|\s+$/gm, ''); //trim
        if (x) {value = x[lookForARR[i]];}
        if (value == undefined && data) {value = data[lookForARR[i]];}
        if (value == undefined) {
          cc = lookForARR[i].split(".");
          if (cc[0] == repeatX) {value = x[cc[1]]; }
        }
        if (value == undefined) {
          if (lookForARR[i] == repeatX) {value = x;}
        }
        if (value == undefined) {
          if (lookForARR[i].substr(0, 1) == '"') {
            value = lookForARR[i].replace(/"/g, "");
          } else if (lookForARR[i].substr(0,1) == "'") {
            value = lookForARR[i].replace(/'/g, "");
          }
        }
        if (value != undefined) {break;}
      }
      if (value != undefined) {
        r = "{{" + lookFor + "}}";
        if (typ == "attribute") {
          rowClone.value = rowClone.value.replace(r, value);
        } else {
          w3_replace_html(rowClone, r, value);
        }
      }
      pos1 = pos1 + 1;
    }
    return rowClone;
  }
  function w3_replace_html(a, r, result) {
    var b, l, i, a, x, j;
    if (a.hasAttributes()) {
      b = a.attributes;
      l = b.length;
      for (i = 0; i < l; i += 1) {
        if (b[i].value.indexOf(r) > -1) {b[i].value = b[i].value.replace(r, result);}
      }
    }
    x = a.getElementsByTagName("*");
    l = x.length;
    a.innerHTML = a.innerHTML.replace(r, result);
  }
};

FILE:: .//src_modules/worldcup/del_match.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("../../src_modules/worldcup/worldcup_sqlite3.class.php");
    register_shutdown_function("my_handler_fatal");
    $wc = new WorldCup_by_sqlite3;

    // return control data for generation of login form
    $oO = array();
    if(isset($_REQUEST) && isset($_REQUEST["id"])){
        $oO["del_status"] = $wc->del_match($_REQUEST["id"]);//
    }
    
    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/get_help_on_upload_file.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    register_shutdown_function("my_handler_fatal");

    function reg_file_content($file,&$oO){
        if(file_exists($file)){
            $oO[basename(($file))] = preg_replace('/\r/','',file_get_contents($file));
        }
        return;
    }

    // return control data for generation of login form
    $oO = array();
    
    reg_file_content("../../docs/worldcup/format_import_files.md",$oO);

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/import_betScore_from_file.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("../../src_modules/worldcup/worldcup_sqlite3.class.php");
    register_shutdown_function("my_handler_fatal");
    $wc = new WorldCup_by_sqlite3;

    // return control data for generation of login form
    $oO = array();

    $oO["reg_from_file_status"] = $wc->reg_betScore_from_file();//
    
    $oO["cntData"] = $wc->get_match_info(0);//0 to get all matches info
    
    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/import_matches_from_file.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("../../src_modules/worldcup/worldcup_sqlite3.class.php");
    register_shutdown_function("my_handler_fatal");
    $wc = new WorldCup_by_sqlite3;

    // return control data for generation of login form
    $oO = array();

    $oO["reg_from_file_status"] = $wc->reg_matches_from_file();//
    
    $oO["cntData"] = $wc->get_match_info(0);//0 to get all matches info
    
    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/rtn_bet_results_vs_matches.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("../../src_modules/worldcup/worldcup_sqlite3.class.php");
    // require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    register_shutdown_function("my_handler_fatal");
    $wc = new WorldCup_by_sqlite3;
    // $user = new User_by_sqlite3;

    // return control data for generation of login form
    $oO = array();
    
    $oO["cntData"]["all_matches"] = $wc->get_match_info(0);// to get all matches info
    // $oO["cntData"]["all_bets"] = $wc->get_bet_info(0,"");// to get all bet info
    $oO["cntData"]["all_bets"] = $wc->get_point_per_user(0,"");// to get all bet info
    
    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/rtn_data_as_info_for_user.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("worldcup_sqlite3.class.php");
    register_shutdown_function("my_handler_fatal");
    $worldcup = new WorldCup_by_sqlite3;
    date_default_timezone_set("Asia/Ho_Chi_Minh");

    // return control data for generation of login form
    $oO = array();
    if(isset($_GET) && isset($_GET["id"])){
        // GET with id, modifying form needed
        $oO["def_bet_score"] = $worldcup->get_def_bet_score($_GET["id"]);
        $oO["match_info"] = $worldcup->get_match_info($_GET["id"]);
        $oO["rtnCode"] = "OK";
    }else{
        // => no GET
        $oO["rtnCode"] = "NG: no match ID";
    }

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/rtn_data_n_reg_bet.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("worldcup_sqlite3.class.php");
    register_shutdown_function("my_handler_fatal");
    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    $worldcup = new WorldCup_by_sqlite3;
    $user = new User_by_sqlite3;

    // return control data for generation of login form
    $oO = array();
    $oO["POST"] = $_POST;
    $oO["GET"] = $_GET;
    
    if(!isset($_POST) || count($_POST) === 0){
        if(isset($_GET) && isset($_GET["id"])){
            // GET with id, modifying form needed
            if($worldcup->get_bet_table_header() === false){
                echo array();
                $oO["rtnCode"] = "NG: no header.";
                exit;
            }else{}
            
            $oO["cntData"] = array();
            $oO["formAction"] = "src_modules/worldcup/rtn_data_n_reg_bet.php";
            $data = $worldcup->get_bet_info($_GET["id"],$user->login_email);
            $oO["testData"]["id"] = $_GET["id"];
            $oO["testData"]["user"] = $user->login_email;
            for($i=0;$i<count(array_keys($data[0]));$i++){
                $header = $data[0][$i];
                if($header === "register_on"
                || $header === "register_by"
                || $header === "modify_on"
                || $header === "modify_by"
                ) continue;
                $value = "";
                if(isset($data[1])) $value = $data[1][$i];
                $type = "text";
                if(preg_match("/datetime/",$header)) $type = "datetime-local";
                if($header === "match_id" || $header === "user"){
                    if($header === "match_id") $value = $_GET["id"];
                    if($header === "user") $value = $user->login_email;
                    array_push($oO["cntData"],array("label" => $header, "type" => $type, "name" => $header, "value" => $value, "readonly" => true));
                }elseif($header === "bet_AB"){
                    array_push($oO["cntData"],array("label" => $header, "type" => "select", "name" => $header, "options" => array("A","B"), "value" => $value));
                }elseif($header === "bet_BS"){
                    array_push($oO["cntData"],array("label" => $header, "type" => "select", "name" => $header, "options" => array("big","small"), "value" => $value));
                }else{
                    array_push($oO["cntData"],array("label" => $header, "type" => $type, "name" => $header, "value" => $value));
                }
            }
            array_push($oO["cntData"],array("label" => "Modify", "type" => "submit"));

            $oO["rtnCode"] = "OK";
        }else{
            // => no GET, new register, cannot happen
        }
    }else{
        $oO["reg_bet_status"] = $worldcup->reg_bet($_POST["match_id"],$user->login_email,$_POST);//reg
    }

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/rtn_data_n_reg_bet_score.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("worldcup_sqlite3.class.php");
    register_shutdown_function("my_handler_fatal");
    $worldcup = new WorldCup_by_sqlite3;
    date_default_timezone_set("Asia/Ho_Chi_Minh");

    // return control data for generation of login form
    $oO = array();
    $oO["formAction"] = "src_modules/worldcup/rtn_data_n_reg_bet_score.php";
    if(!isset($_POST) || count($_POST) === 0){
        if(isset($_GET) && isset($_GET["id"])){
            // GET with id, modifying form needed
            $oO["cntData"] = $worldcup->get_def_bet_score($_GET["id"]);
            $oO["match_id"] = $_GET["id"];
            $oO["rtnCode"] = "OK";
        }else{
            // => no GET, new register
            $oO["rtnCode"] = "NG: no match ID";
        }
    }else{
        if(isset($_POST) && isset($_POST["match_id"])){
            $oO["reg_def_bet_score_status"] = $worldcup->reg_def_bet_score($_POST["match_id"],$_POST);//reg for existed
        }else{
            $oO["reg_def_bet_score_status"] = "NG: no match ID";
        }
        $oO["match_id"] = $_POST["match_id"];
    }

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/rtn_data_n_reg_bet_single_element.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("worldcup_sqlite3.class.php");
    register_shutdown_function("my_handler_fatal");
    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    $worldcup = new WorldCup_by_sqlite3;
    $user = new User_by_sqlite3;

    // return control data for generation of login form
    $oO = array();
    // $oO["GET"] = $_GET;
    if(isset($_GET["user"]) && $_GET["user"] !== $user->login_email){
        $oO["reg_bet_status"] = "NG: not self-reg detected.";
    }else{
        if(!isset($_GET["user"])) $_GET["user"]  = $user->login_email;
        if(isset($_GET) && isset($_GET["match_id"])){
            $oO["reg_bet_status"] = $worldcup->reg_bet($_GET["match_id"],$user->login_email,$_GET);//reg
            $oO["cntData"]["all_matches"] = $worldcup->get_match_info(0);// to get all matches info
            $oO["cntData"]["self_bet"] = $worldcup->get_point_per_user(0,$user->login_email);// to get all bet info and results
        }else{
            $oO["reg_bet_status"] = "NG: no input.";
        }
    }

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/rtn_data_n_reg_match.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("worldcup_sqlite3.class.php");
    register_shutdown_function("my_handler_fatal");
    $worldcup = new WorldCup_by_sqlite3;
    date_default_timezone_set("Asia/Ho_Chi_Minh");

    // return control data for generation of login form
    $oO = array();
    
    if(!isset($_POST) || count($_POST) === 0){
        if(isset($_GET) && isset($_GET["id"])){
            // GET with id, modifying form needed
            if($worldcup->get_matches_table_header() === false){
                echo array();
                $oO["rtnCode"] = "NG: no header.";
                exit;
            }else{}
            
            $oO["cntData"] = array();
            $oO["formAction"] = "src_modules/worldcup/rtn_data_n_reg_match.php";
            $data = $worldcup->get_match_info($_GET["id"]);
            for($i=0;$i<count(array_keys($data[0]));$i++){
                $header = $data[0][$i];
                if($header === "register_on"
                || $header === "register_by"
                || $header === "modify_on"
                || $header === "modify_by"
                ) continue;
                $value = $data[1][$i];
                $type = "text";
                if(preg_match("/datetime/",$header)){
                    $type = "datetime-local";
                    $value = strftime('%Y-%m-%dT%H:%M:%S', $value);
                }
                if($header === "id"){
                    array_push($oO["cntData"],array("label" => $header, "type" => $type, "name" => $header, "value" => $value, "readonly" => true));
                }elseif($header === "def_score_bet"){
                    // this is reg by another method (table)
                }else{
                    array_push($oO["cntData"],array("label" => $header, "type" => $type, "name" => $header, "value" => $value));
                }
            }
            array_push($oO["cntData"],array("label" => "Modify", "type" => "submit"));

            $oO["rtnCode"] = "OK";
        }else{
            // => no GET, new register
            if($worldcup->get_matches_table_header() === false){
                echo array();
                $oO["rtnCode"] = "NG: no header.";
                exit;
            }else{}
            
            $oO["cntData"] = array();
            $oO["formAction"] = "src_modules/worldcup/rtn_data_n_reg_match.php";
            foreach($worldcup->get_matches_table_header() as $header){
                $type = "text";
                if(preg_match("/datetime/",$header)) $type = "datetime-local";
                if($header === "def_score_bet"){
                    // this is reg by another method (table)
                }else{
                    array_push($oO["cntData"],array("label" => $header, "type" => $type, "name" => $header));
                }
            }
            array_push($oO["cntData"],array("label" => "Add New", "type" => "submit"));

            $oO["rtnCode"] = "OK";
        }
    }else{
        if(isset($_POST) && isset($_POST["id"])){
            $_POST["match_datetime"] = strtotime($_POST["match_datetime"]);
            $oO["reg_match_status"] = $worldcup->reg_match($_POST["id"],$_POST);//reg for existed
        }else{
            $_POST["match_datetime"] = strtotime($_POST["match_datetime"]);
            $oO["reg_match_status"] = $worldcup->reg_match(0,$_POST);//reg as new
        }
    }

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/rtn_matches.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("../../src_modules/worldcup/worldcup_sqlite3.class.php");
    register_shutdown_function("my_handler_fatal");
    $wc = new WorldCup_by_sqlite3;

    // return control data for generation of login form
    $oO = array();
    
    $oO["cntData"] = $wc->get_match_info(0);//0 to get all matches info
    
    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/rtn_matches_vs_self_bet.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("../../src_modules/worldcup/worldcup_sqlite3.class.php");
    require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    register_shutdown_function("my_handler_fatal");
    $wc = new WorldCup_by_sqlite3;
    $user = new User_by_sqlite3;

    // return control data for generation of login form
    $oO = array();
    
    $oO["cntData"]["all_matches"] = $wc->get_match_info(0);// to get all matches info
    // $oO["cntData"]["self_bet"] = $wc->get_bet_info(0,$user->login_email);// to get all bet info
    $oO["cntData"]["self_bet"] = $wc->get_point_per_user(0,$user->login_email);// to get all bet info and results
    
    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/rtn_users_points.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("../../src_modules/worldcup/worldcup_sqlite3.class.php");
    // require_once("../../src_modules/login/users_sqlite3_OTP.class.php");
    register_shutdown_function("my_handler_fatal");
    $wc = new WorldCup_by_sqlite3;
    // $user = new User_by_sqlite3;

    // return control data for generation of login form
    $oO = array();
    
    $oO["cntData"] = $wc->get_point_per_user(0,"");// to get all matches info for all users
    
    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/upload_file_and_action.php
<?php
    // ini_set('display_errors',0);//don't display error if there is catching error function (error_get_last)
    // ini_set('display_startup_errors',1);
    // ini_set('html_errors',1);
    // error_reporting(E_ALL);

    require_once '../../src_main/my.php';
    require_once("../../src_modules/worldcup/worldcup_sqlite3.class.php");
    register_shutdown_function("my_handler_fatal");
    $wc = new WorldCup_by_sqlite3;

    // return control data for generation of login form
    $oO = array();
    // $oO["FILE"] = $_FILES;
    // $oO["POST"] = $_POST;

    // Firstly check the ERROR
    // Undefined | Multiple Files | $_FILES Corruption Attack
    // If this request falls under any of them, treat it invalid.
    if (
        !isset($_FILES['upfile']['error']) ||
        is_array($_FILES['upfile']['error'])
    ) {
        $oO["rtnCode"] =  "NG: Invalid upload process.";
        echo(json_encode($oO));
        exit;
    }
    // Check $_FILES['upfile']['error'] value.
    switch ($_FILES['upfile']['error']) {
        case UPLOAD_ERR_OK:
            break;
        case UPLOAD_ERR_NO_FILE:
            $oO["rtnCode"] =  "NG: No file sent.";
            echo(json_encode($oO));
            exit;
        case UPLOAD_ERR_INI_SIZE:
        case UPLOAD_ERR_FORM_SIZE:
            $oO["rtnCode"] =  "NG: Exceeded filesize limit.";
            echo(json_encode($oO));
            exit;
        default:
            $oO["rtnCode"] =  "NG: Unknown uploading error.";
            echo(json_encode($oO));
            exit;;
    }

    $finfo  = finfo_open(FILEINFO_MIME_TYPE);// return mime type ala mimetype extension

    $target_dir = "../../data/uploads/";
    if(!file_exists($target_dir)) mkdir($target_dir,0777,true);

    // $save_to_file = $target_dir . basename($_FILES["upfile"]["name"]);
    $save_to_file = $target_dir . "tmp.csv";//fixed the name, allow to work once at a time
    $uploadOk = 1;
    $fileExtension = strtolower(pathinfo($_FILES["upfile"]["name"],PATHINFO_EXTENSION));
    
    // // Check if image file is a actual image or fake image
    // if(isset($_POST["submit"])) {
    //   $check = getimagesize($_FILES["upfile"]["tmp_name"]);
    //   if($check !== false) {
    //     $oO["mime" = $check["mime"];
    //     $uploadOk = 1;
    //   } else {
    //     $oO["rtnCode] = "NG: File is not an image.";
    //     $uploadOk = 0;
    //   }
    // }

    // Check if file already exists
    if (file_exists($save_to_file)) {
        $oO["rtnCode"] = "NG: file already exists.";
        $uploadOk = 0;
    }

    // Check file size
    if ($_FILES["upfile"]["size"] > 500000) {
        $oO["rtnCode"] =  "NG: file is too large.";
        $uploadOk = 0;
    }
    if ($_FILES["upfile"]["size"] === 0) {
        $oO["rtnCode"] =  "NG: file empty.";
        $uploadOk = 0;
    }

    // check file name
    if(!preg_match('/^[-0-9a-zA-Z_\.]+$/',basename($_FILES["upfile"]["name"]))){
        $oO["rtnCode"] =  "NG: file name's strange.";
        $uploadOk = 0;
    }

    // Allow certain file formats
    if($fileExtension !== "csv"){
        $oO["rtnCode"] =  "NG: not a .csv.";
        $uploadOk = 0;
    }

    // Accept type for proceeding
    if(!isset($_POST["mode"])){
        $oO["rtnCode"] =  "NG: 'mode' is required.";
        $uploadOk = 0;
    }
    if(isset($_POST["mode"]) && $_POST["mode"] !== "matches" && $_POST["mode"] !== "betScore"){
        $oO["rtnCode"] =  "NG: 'mode' must be either 'matches' or 'betScore'.";
        $uploadOk = 0;
    }

    // => cannot upload
    if($uploadOk === 0) {
        echo(json_encode($oO));
        exit;
    }

    // => action
    if (is_uploaded_file($_FILES['upfile']['tmp_name'])) {
        // echo "File ". $_FILES['upfile']['name'] ." uploaded successfully.\n";
        // => working with content and type
        // $oO["content"] = file_get_contents($_FILES['upfile']['tmp_name']);
        if(move_uploaded_file($_FILES['upfile']['tmp_name'],$save_to_file)){
            if($_POST["mode"] === "matches"){
                $oO["reg_from_file_status"] = $wc->reg_matches_from_file($save_to_file);//
                $oO["cntData"] = $wc->get_match_info(0);//0 to get all matches info
            }else{
                $oO["reg_from_file_status"] = $wc->reg_betScore_from_file($save_to_file);//
                $oO["cntData"] = $wc->get_match_info(0);//0 to get all matches info
            }

            // done, then remove the file
            $oO["rm_file_stt"] = unlink($save_to_file);
        }else{
            $oO["rtnCode"] =  "NG: Failed to move uploaded file.";
            echo(json_encode($oO));
            exit;
        }
     } else {
        $oO["rtnCode"] =  "NG: Possible file upload attacked.";
        echo(json_encode($oO));
        exit;
     }

    $oO["rtnCode"] = "OK";

    // =>
    echo(json_encode($oO)); //don't print here if register_shutdown_function() because it will dup.
?>

FILE:: .//src_modules/worldcup/worldcup.js
// ============================================
///////////////////////////////////////////////
function dsp_matches_w_adding(cntO){
    if(cntO.length === 0) return;
    if(!cntO.hasOwnProperty("cntData")) return;
    if(cntO["cntData"].length === 0) return;
    if(document.getElementById("mainSide") === null) return;
    while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}

    let eTop = my_create("div",undefined,["w3-responsive"],{"position":"relative"},{"id":"tbl_matches_admin"});
    let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable"],{"min-width":"100%"});
    let eTbd = my_create("tbody",undefined,["w3-small"],{"min-width":"100%"});
    let eAdd = my_create("div","Add new",["w3-btn","w3-card-2","w3-border","w3-hover-indigo"],{"width":"100%"});
    eAdd.addEventListener("click",dsp_add_new_match_form);

    // reg columns
    let regCols = [];
    for(let i=0;i<cntO["cntData"][0].length;i++){
        if(0
        || cntO["cntData"][0][i] === "modify_on"
        || cntO["cntData"][0][i] === "modify_by"
        || cntO["cntData"][0][i] === "register_on"
        || cntO["cntData"][0][i] === "register_by"
        ) continue;
        regCols.push(i);
    }
    // header
    let thData = [];
    for(let i of regCols) { thData.push(cntO["cntData"][0][i]); }
    thData.push("");//preserve room for added button later
    thData.push("");
    eTbd.appendChild(my_add_row(thData,"th",{"padding":"2px"}));

    // content
    for(let j=1;j<cntO["cntData"].length;j++){
        let tdData = [];
        let flgPast = false;
        for(let i of regCols) { 
            if(thData[i] === "match_datetime"){
                let d = new Date(cntO["cntData"][j][i] * 1000);
                if(d - Date.now() < 0) flgPast = true;
                tdData.push(d.toLocaleString("en-US",{dateStyle:"short",timeStyle:"short"}));
            }else if(thData[i] === "def_score_bet"){
                tdData.push("<i class='bi bi-gear w3-button w3-hover-orange w3-xlarge w3-round' style='padding:0'></i>");
            }else{
                tdData.push(cntO["cntData"][j][i]); 
            }
        }
        // => add some more buttons
        tdData.push("<i class='bi bi-bandaid w3-button w3-hover-orange w3-xlarge w3-round' style='padding:0'></i>")
        // tdData.push("<i class='bi bi-info-circle w3-button w3-hover-orange w3-large w3-round' style='padding:0'></i>")
        tdData.push("<i class='bi bi-trash w3-button w3-hover-orange w3-xlarge w3-round' style='padding:0'></i>")
        // =>
        if(flgPast){
            eTbd.appendChild(my_add_row(tdData,"td",{"text-align":"center","vertical-align":"middle","padding":"2px","border":"1px dotted dimgrey","border-radius":"5px","background-color":"lightgray"}));
        }else{
            eTbd.appendChild(my_add_row(tdData,"td",{"text-align":"center","vertical-align":"middle","padding":"2px","border":"1px dotted dimgrey","border-radius":"2px"}));
        }
    }

    for(let tmpe of eTbd.getElementsByClassName("bi-gear")){
        tmpe.addEventListener("click",dsp_mod_bet_score_tbl_from_gear_button);
    }
    for(let tmpe of eTbd.getElementsByClassName("bi-bandaid")){
        tmpe.addEventListener("click",dsp_mod_match_form_from_mod_button);
    }
    for(let tmpe of eTbd.getElementsByClassName("bi-trash")){
        tmpe.addEventListener("click",dsp_del_match_from_del_button);
    }
    // layout-ing
    eTbl.appendChild(eTbd);
    eTop.appendChild(eTbl);
    eTop.appendChild(eAdd)
    mainSide.appendChild(eTop);

    // display none some column
    let aoTr = eTbd.getElementsByTagName("tr");
    for(let tr of aoTr){
        tr.childNodes[0].style.display = "none";
    }
    // add some class 
    w3.addClass("#tbl_matches_admin td","w3-hover-shadow w3-hover-indigo")
    return 1;
}

function dsp_add_new_match_form(){
    let sf = "src_modules/worldcup/rtn_data_n_reg_match.php";
    my_ajax_get(sf,[{}],function(rtnO){
        let tgtForm  = my_gen_form(rtnO,function(tgtForm,rtnO){
            tgtForm.remove();
            console.log(rtnO);
            my_ajax_get("./src_modules/worldcup/rtn_matches.php",[{}],dsp_matches_w_adding)
        });
        // => display the form
        if(tgtForm !== null){
            body.appendChild(tgtForm);
            tgtForm.style.display = "block";
        }
    });
    return;
}

function dsp_mod_bet_score_tbl_from_gear_button(){
    let sf = "src_modules/worldcup/rtn_data_n_reg_bet_score.php";
    let id = this.parentNode.parentNode.getElementsByTagName("td")[0].innerText;
    my_ajax_get(sf,[{id:id}],function(rtnO){
        let tgtForm  = my_gen_bet_score_tbl(rtnO,function(tgtForm,rtnO){
            tgtForm.remove();
            console.log(rtnO);
            my_ajax_get("./src_modules/worldcup/rtn_matches.php",[{}],dsp_matches_w_adding)
        });
        // => display the form
        if(tgtForm !== null){
            body.appendChild(tgtForm);
            tgtForm.style.display = "block";
        }
    });
    return;
}

function dsp_mod_match_form_from_mod_button(){
    let sf = "src_modules/worldcup/rtn_data_n_reg_match.php";
    let id = this.parentNode.parentNode.getElementsByTagName("td")[0].innerText;
    my_ajax_get(sf,[{id:id}],function(rtnO){
        let tgtForm  = my_gen_form(rtnO,function(tgtForm,rtnO){
            tgtForm.remove();
            console.log(rtnO);
            my_ajax_get("./src_modules/worldcup/rtn_matches.php",[{}],dsp_matches_w_adding)
        });
        // => display the form
        if(tgtForm !== null){
            body.appendChild(tgtForm);
            tgtForm.style.display = "block";
        }
    });
    return;
}

function dsp_del_match_from_del_button(){
    // => confirm
    if(!confirm("WARNING: You're deleting something, this work can not be reverted. Are you sure?")) return;

    // => do the job
    let sf = "src_modules/worldcup/del_match.php";
    let id = this.parentNode.parentNode.getElementsByTagName("td")[0].innerText;
    my_ajax_get(sf,[{id:id}],function(rtnO){
        console.log(rtnO)
        my_ajax_get("./src_modules/worldcup/rtn_matches.php",[{}],dsp_matches_w_adding);
    });
    return;
}

function my_gen_bet_score_tbl(cntData,func_act_after_submit){
    //
    console.log(cntData)
    if(!cntData.hasOwnProperty("cntData")) return; //
    if(!cntData.hasOwnProperty("formAction")) cntData["formAction"] = ""; //
    // console.log(cntData)
    let eTop = my_create("div",undefined,["w3-container"]);
    let eBtnClose = my_create("span","&times;",["w3-button","w3-display-topright"],{},{"onclick":"this.parentNode.parentNode.parentNode.remove()"})
    // form content
    let eForm = my_create("form",undefined,["w3-container","w3-padding-16"],{},{"method":"post"});
    let eRef = my_create("div",undefined,["w3-container"]);
    // => ref
    eRef.appendChild(my_create("label","Match-ID:"));
    eRef.appendChild(my_create("input",undefined,["w3-lightgrey","w3-border-0"],{},{"readonly":true,"name":"match_id","value":cntData["match_id"]}))
    // => submit button
    let eBtn = my_create("input","Submit",["w3-input","w3-button","w3-indigo"],{"margin-top":"20px"},{"type":"submit"})

    // => table of valid scores
    let eTblTop = my_create("div",undefined);
    let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable"]);
    let eTbd = my_create("tbody",undefined);
    let trData = [];
    trData.push("A-B"); for(let i=0;i<11;i++){ trData.push(i) }
    eTbd.appendChild(my_add_row(trData,"th",{"padding":0,"width":"8.33%"}));
    for(let i=0;i<11;i++){
        let tr = my_create("tr",undefined);
        tr.appendChild(my_create("th",i,[],{"padding":0}))
        for(let j=0;j<11;j++){
            let td = my_create("td",my_create("input",undefined,["w3-round","w3-card-2"],{"width":"100%"},{"type":"text","name":"score="+i+":"+j}),[],{"padding":0});
            td.childNodes[0].style.backgroundColor = "lightgray";
            if(Object.keys(cntData).length > 0){
                if(cntData["cntData"].hasOwnProperty(i+":"+j)){
                    if(cntData["cntData"][i+":"+j] !== undefined
                    && cntData["cntData"][i+":"+j] !== ""
                    && cntData["cntData"][i+":"+j] !== "null"
                    ){
                        td.childNodes[0].value = cntData["cntData"][i+":"+j];
                        td.childNodes[0].style.backgroundColor = "orange";
                    }else{}
                }else{}
            }
            td.addEventListener("change",function(e){
                if(e.target.value === ""){
                    e.target.style.backgroundColor = "lightgray";
                }else{
                    e.target.style.backgroundColor = "orange";
                }
            })
            // => init it
            tr.appendChild(td)
        }
        eTbd.appendChild(tr)
    }


    // submisson behavior
    eForm.setAttribute("action",cntData["formAction"]);
    // prevent default submit behavaior and redirect it to the submit-button
    eForm.addEventListener("submit",function(event){
        event.preventDefault(); 
        my_ajax_post_form(cntData["formAction"],eForm,function(rtnO){
            func_act_after_submit(eTop.parentNode.parentNode,rtnO);
            // console.log(rtnO)
        })
        // event.target.parentNode.parentNode.parentNode.remove();// don't auto close form because OTP need sendingOTP to standstill
    })

    eTbl.appendChild(eTbd);
    eTblTop.appendChild(eTbl);
    eForm.appendChild(eRef);
    eForm.appendChild(eTblTop);
    eForm.appendChild(eBtn);
    eTop.appendChild(eBtnClose);
    eTop.appendChild(eForm);
    return my_create("div",my_create("div",eTop,["w3-modal-content"]),["w3-modal"],{},{});
}

// ============================================
///////////////////////////////////////////////
function dsp_matches_vs_self_bet(cntO){
    console.log(cntO)
    if(cntO.length === 0) return;
    if(!cntO.hasOwnProperty("cntData")) return;
    if(cntO["cntData"]["all_matches"].length === 0) return;
    if(document.getElementById("mainSide") === null) return;
    while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}

    let eTop = my_create("div",undefined,["w3-responsive"],{"position":"relative"},{"id":"tbl_matches_self_bet"});
    let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable"],{"min-width":"100%"});
    let eTbd = my_create("tbody",undefined,[],{"min-width":"100%"});

    // reg columns
    let regCols = [];
    for(let i=0;i<cntO["cntData"]["all_matches"][0].length;i++){
        if(0
        || cntO["cntData"]["all_matches"][0][i] === "modify_on"
        || cntO["cntData"]["all_matches"][0][i] === "modify_by"
        || cntO["cntData"]["all_matches"][0][i] === "register_on"
        || cntO["cntData"]["all_matches"][0][i] === "register_by"
        || (cntO["cntData"]["all_matches"][0][i].search(/^def/) > -1)
        ) continue;
        regCols.push(i);
    }
    // header
    let thData = [];
    for(let i of regCols) { thData.push(cntO["cntData"]["all_matches"][0][i]); }
    thData.push("A_B pts");
    thData.push("B_S pts");
    thData.push("Score pts");
    thData.push("All pts");
    thData.push("");
    thData.push("");
    eTbd.appendChild(my_add_row(thData,"th",{"padding":"2px"}));

    let user = "";
    for(let tmpv in cntO["cntData"]["self_bet"]) {user = tmpv;}

    // content
    for(let j=1;j<cntO["cntData"]["all_matches"].length;j++){
        let tdData = [];
        let flgPast = false;
        for(let i of regCols) { 
            if(thData[i] === "match_datetime"){
                let d = new Date(cntO["cntData"]["all_matches"][j][i] * 1000);
                if(d - Date.now() < 0) flgPast = true;
                tdData.push(d.toLocaleString("en-US",{dateStyle:"short",timeStyle:"short"})); 
            }else{
                tdData.push(cntO["cntData"]["all_matches"][j][i]); 
            }
        }

        if(!cntO["cntData"].hasOwnProperty("self_bet")
        || !cntO["cntData"]["self_bet"].hasOwnProperty(user)
        || !cntO["cntData"]["self_bet"][user].hasOwnProperty("detail")
        || !cntO["cntData"]["self_bet"][user]["detail"].hasOwnProperty(cntO["cntData"]["all_matches"][j][0])){
            tdData.push("-","-","-",0);
        }else{
            let pts_AB = "-";
            if(cntO["cntData"]["self_bet"][user]["detail"][cntO["cntData"]["all_matches"][j][0]].hasOwnProperty("AB")){
                pts_AB = cntO["cntData"]["self_bet"][user]["detail"][cntO["cntData"]["all_matches"][j][0]]["AB"]["points"];
            }else{}
            let pts_BS = "-";
            if(cntO["cntData"]["self_bet"][user]["detail"][cntO["cntData"]["all_matches"][j][0]].hasOwnProperty("BS")){
                pts_BS = cntO["cntData"]["self_bet"][user]["detail"][cntO["cntData"]["all_matches"][j][0]]["BS"]["points"];
            }else{}
            let pts_score = "-";
            if(cntO["cntData"]["self_bet"][user]["detail"][cntO["cntData"]["all_matches"][j][0]].hasOwnProperty("Score")){
                pts_score = cntO["cntData"]["self_bet"][user]["detail"][cntO["cntData"]["all_matches"][j][0]]["Score"]["points"];
            }else{}
            let sum = 0;
            if(Number.isInteger(pts_AB)) sum+=pts_AB;
            if(Number.isInteger(pts_BS)) sum+=pts_BS;
            if(Number.isInteger(pts_score)) sum+=pts_score;
            tdData.push(pts_AB,pts_BS,pts_score,sum);
        }
        // => add info button
        tdData.push("<i class='bi bi-info-circle w3-button w3-hover-orange w3-xlarge w3-round' style='padding:0'></i>")
        // => add mod button
        tdData.push("<i class='bi bi-bandaid w3-button w3-hover-orange w3-xlarge w3-round' style='padding:0'></i>")
        // =>
        if(flgPast){
            eTbd.appendChild(my_add_row(tdData,"td",{"padding":"2px","background-color":"lightgray"}));
        }else{
            eTbd.appendChild(my_add_row(tdData,"td",{"padding":"2px"}));
        }
    }

    for(let tmpe of eTbd.getElementsByClassName("bi-bandaid")){
        tmpe.addEventListener("click",dsp_mod_bet_form_from_mod_button);
    }
    for(let tmpe of eTbd.getElementsByClassName("bi-info-circle")){
        tmpe.addEventListener("click",function(){
            let theMatchID = this.parentNode.parentNode.childNodes[0].innerText;
            console.log(theMatchID)
            dsp_bet_score_tbl_as_info(theMatchID);
        });
    }

    eTbl.appendChild(eTbd);
    eTop.appendChild(eTbl);
    mainSide.appendChild(eTop);
    
    // display none some column, and modify some columns
    let aoTr = eTbd.getElementsByTagName("tr");
    for(let tr of aoTr){
        tr.childNodes[0].style.display = "none";//hide match_id column
        tr.childNodes[3].style.textAlign = "right";
        tr.childNodes[3].style.color = "indigo";
        tr.childNodes[3].style.verticalAlign = "middle";
        tr.childNodes[4].style.textAlign = "left";
        tr.childNodes[4].style.color = "red";
        tr.childNodes[4].style.verticalAlign = "middle";
        for(let i=5;i<tr.childNodes.length;i++){
            tr.childNodes[i].style.textAlign = "center";
            tr.childNodes[i].style.verticalAlign = "middle";
        }
    }

    // add some inputs (easier for users to input)
    for(let i=1;i<aoTr.length;i++){
        let eTeamA = aoTr[i].childNodes[3];
        let eTeamB = aoTr[i].childNodes[4];
        let eScore = aoTr[i].childNodes[5];
        eTeamB.insertBefore(my_create("i",undefined,["bi-circle","w3-button","myCnt-select-B"],{"padding":0,"color":"gray"},{}),eTeamB.childNodes[0]);
        eTeamA.appendChild(my_create("i",undefined,["bi-circle","w3-button","myCnt-select-A"],{"padding":0,"color":"gray"},{}));
        eScore.style.position = "relative";
        eScore.insertBefore(my_create("i",undefined,["bi-box-arrow-down","w3-button","w3-small","myCnt-select-small"],{"padding":0,"color":"gray"},{}),eScore.childNodes[0]);
        eScore.insertBefore(my_create("i",undefined,["bi-box-arrow-up","w3-button"  ,"w3-small","myCnt-select-big"],{"padding":0,"color":"gray"},{}),eScore.childNodes[0]);
        let eBetScore = my_create("span","-:-",["my-tooltip","myCnt-bet-score","w3-small","w3-hover-shadow","w3-text-purple"],{"padding":0,"font-style":"italic"},{});
        eBetScore.appendChild(my_create("input",undefined,["myCnt-input-bet-score","w3-small","my-tooltip-content-right"],{"width":"30px"}));
        eScore.appendChild(eBetScore);
        eScore.style.height = "36px";
        eScore.style.minWidth = "42px";
        eScore.style.verticalAlign = "top";
    }

    // update icon specifying the betting
    for(let i=1;i<aoTr.length;i++){
        let matchID = aoTr[i].childNodes[0].innerText;
        let betAB = chk_exist_and_return(cntO["cntData"],["self_bet",user,"detail",matchID,"AB","userBet"]);
        let betBS = chk_exist_and_return(cntO["cntData"],["self_bet",user,"detail",matchID,"BS","userBet"]);
        let betScore = chk_exist_and_return(cntO["cntData"],["self_bet",user,"detail",matchID,"Score","userBet"]);
        if(betAB === "A"){
            aoTr[i].getElementsByClassName("myCnt-select-A")[0].style.color = "indigo";
            aoTr[i].getElementsByClassName("myCnt-select-A")[0].classList.remove("bi-circle");
            aoTr[i].getElementsByClassName("myCnt-select-A")[0].classList.add("bi-check-circle");
        }else if(betAB === "B"){
            aoTr[i].getElementsByClassName("myCnt-select-B")[0].style.color = "red";
            aoTr[i].getElementsByClassName("myCnt-select-B")[0].classList.remove("bi-circle");
            aoTr[i].getElementsByClassName("myCnt-select-B")[0].classList.add("bi-check-circle");
        }else{}

        console.log(matchID,aoTr[i].childNodes[3].innerText,betBS)
        if(betBS === "big"){
            aoTr[i].getElementsByClassName("myCnt-select-big")[0].style.color = "black";
            aoTr[i].getElementsByClassName("myCnt-select-big")[0].classList.remove("w3-small");
            aoTr[i].getElementsByClassName("myCnt-select-small")[0].style.color = "lightgray";
            aoTr[i].getElementsByClassName("myCnt-select-small")[0].classList.add("w3-small");
        }else if(betBS === "small") {
            aoTr[i].getElementsByClassName("myCnt-select-small")[0].style.color = "black";
            aoTr[i].getElementsByClassName("myCnt-select-small")[0].classList.remove("w3-small");
            aoTr[i].getElementsByClassName("myCnt-select-big")[0].style.color = "lightgray";
            aoTr[i].getElementsByClassName("myCnt-select-big")[0].classList.add("w3-small");
        }else{}

        if(betScore !== null){
            if(betScore === "") betScore = "-:-";
            aoTr[i].getElementsByClassName("myCnt-bet-score")[0].childNodes[0].nodeValue = betScore;
        }
    }

    // assign behaviors
    for(let i=1;i<aoTr.length;i++){
        let matchID = aoTr[i].childNodes[0].innerText;
        aoTr[i].getElementsByClassName("myCnt-select-A")[0].addEventListener("click",function(){
            if(this.classList.contains("bi-check-circle")){
                // disable selection of A
                my_ajax_get("src_modules/worldcup/rtn_data_n_reg_bet_single_element.php",[{"match_id":matchID,"bet_AB":""}],dsp_matches_vs_self_bet)
            }else{
                let value = prompt("Enter your bet value (integer number, please)","10");
                my_ajax_get("src_modules/worldcup/rtn_data_n_reg_bet_single_element.php",[{"match_id":matchID,"bet_AB":"A","bet_AB_v":value}],dsp_matches_vs_self_bet)
            }
        });
        aoTr[i].getElementsByClassName("myCnt-select-B")[0].addEventListener("click",function(){
            if(this.classList.contains("bi-check-circle")){
                // disable selection of B
                my_ajax_get("src_modules/worldcup/rtn_data_n_reg_bet_single_element.php",[{"match_id":matchID,"bet_AB":""}],dsp_matches_vs_self_bet)
            }else{
                let value = prompt("Enter your bet value (integer number, please)","10");
                my_ajax_get("src_modules/worldcup/rtn_data_n_reg_bet_single_element.php",[{"match_id":matchID,"bet_AB":"B","bet_AB_v":value}],dsp_matches_vs_self_bet)
            }
        });
        aoTr[i].getElementsByClassName("myCnt-select-big")[0].addEventListener("click",function(){
            if(this.style.color === "black"){
                my_ajax_get("src_modules/worldcup/rtn_data_n_reg_bet_single_element.php",[{"match_id":matchID,"bet_BS":""}],dsp_matches_vs_self_bet)
            }else{
                let value = prompt("Enter your bet value (integer number, please)","20");
                my_ajax_get("src_modules/worldcup/rtn_data_n_reg_bet_single_element.php",[{"match_id":matchID,"bet_BS":"big","bet_BS_v":value}],dsp_matches_vs_self_bet)
            }
        });
        aoTr[i].getElementsByClassName("myCnt-select-small")[0].addEventListener("click",function(){
            if(this.style.color === "black"){
                my_ajax_get("src_modules/worldcup/rtn_data_n_reg_bet_single_element.php",[{"match_id":matchID,"bet_BS":""}],dsp_matches_vs_self_bet)
            }else{
                let value = prompt("Enter your bet value (integer number, please)","20");
                my_ajax_get("src_modules/worldcup/rtn_data_n_reg_bet_single_element.php",[{"match_id":matchID,"bet_BS":"small","bet_BS_v":value}],dsp_matches_vs_self_bet)
            }
        });
        aoTr[i].getElementsByClassName("myCnt-input-bet-score")[0].addEventListener("change",function(){
            if(this.value.search(/^\d+:\d+$/) > -1){
                let value = prompt("Enter your bet value (integer number, please)","10");
                my_ajax_get("src_modules/worldcup/rtn_data_n_reg_bet_single_element.php",[{"match_id":matchID,"bet_score":this.value,"bet_score_v":value}],dsp_matches_vs_self_bet)
            }
        });
    }


    return 1;
}

function chk_exist_and_return(tgtO,aoLvl){
    if(tgtO === undefined) return null;
    if(tgtO === null) return null;
    if(aoLvl.length === 0) return tgtO;
    let fE = aoLvl.shift();
    if(tgtO.hasOwnProperty(fE)){
        return chk_exist_and_return(tgtO[fE],aoLvl)
    }else{
        return null;
    }
    return null;
}

function dsp_mod_bet_form_from_mod_button(){
    let sf = "src_modules/worldcup/rtn_data_n_reg_bet.php";
    let id = this.parentNode.parentNode.getElementsByTagName("td")[0].innerText;
    my_ajax_get(sf,[{id:id}],function(rtnO){
        console.log(rtnO)
        let tgtForm  = my_gen_form(rtnO,function(tgtForm,rtnO){
            console.log(rtnO);
            if(rtnO["reg_bet_status"].search(/^NG:/) > -1) alert(rtnO["reg_bet_status"])
            tgtForm.remove();
            my_ajax_get("./src_modules/worldcup/rtn_matches_vs_self_bet.php",[{}],dsp_matches_vs_self_bet)
        });
        // => modify the form (add more button to display the def_bet_score)
        for(let tmpv of tgtForm.getElementsByTagName("form")[0].childNodes){
            if(tmpv.innerText === "bet_score"){
                let aBtn = my_create("i",undefined,["bi-info-circle-fill","w3-button","w3-round-xlarge"])
                aBtn.addEventListener("click",function(e){
                    let theForm = e.target.parentNode.parentNode;
                    let theMatchID = theForm["match_id"].value;
                    dsp_bet_score_tbl_as_info(theMatchID)
                    // console.log(theForm,theMatchID)
                });
                tmpv.appendChild(aBtn)
            }
        }
        // => display the form
        if(tgtForm !== null){
            body.appendChild(tgtForm);
            tgtForm.style.display = "block";
        }
    });
    return;
}

function cal_simple_result_match_from_score(scoreStr){
    // return simple result (as string) from score string A:B
    if(scoreStr === undefined) return "";
    if(scoreStr.search(/:/) === -1) return scoreStr;
    let tmpa = scoreStr.split(":")
    if(tmpa[0] > tmpa[1]) return "Awin";
    if(tmpa[0] < tmpa[1]) return "Bwin";
    return "draw";
}

function dsp_bet_score_tbl_as_info(matchID){
    let sf = "src_modules/worldcup/rtn_data_as_info_for_user.php";
    let id = matchID;
    my_ajax_get(sf,[{id:id}],function(rtnO){
        let tgtForm  = my_gen_bet_score_tbl_as_info(rtnO);
        // => display the form
        if(tgtForm !== null){
            body.appendChild(tgtForm);
            tgtForm.style.display = "block";
        }
    });
    return;
}

function my_gen_bet_score_tbl_as_info(cntData){
    //
    if(!cntData.hasOwnProperty("def_bet_score")) return; //
    console.log(cntData)
    let eTop = my_create("div",undefined,[],{"padding":0});
    let eBtnClose = my_create("span","&times;",["w3-button","w3-display-topright"],{},{"onclick":"this.parentNode.remove()"})
    // form content
    let eForm = my_create("form",undefined,["w3-container","w3-padding-16"],{},{"method":"post"});
    let eRef = my_create("div",undefined,[],{});
    // => ref
    eRef.appendChild(my_create("label","Match-ID:"));
    eRef.appendChild(my_create("span",cntData["match_info"][1][0],[],{},{}))

    // => ref about match
    eRef.appendChild(my_create("div",cntData["match_info"][1][2],[],{},{}))
    let d = new Date(cntData["match_info"][1][1] * 1000);
    eRef.appendChild(my_create("div",d.toLocaleString("en-US",{dateStyle:"medium",timeStyle:"short"})));

    eRef.appendChild(my_create("span",cntData["match_info"][1][3],["w3-card-2","w3-indigo","w3-large"],{},{}))
    eRef.appendChild(my_create("span","vs",["w3-lightgrey"],{"margin-left":"3px","margin-right":"3px"},{}))
    eRef.appendChild(my_create("span",cntData["match_info"][1][4],["w3-card-2","w3-indigo","w3-large"],{},{}))

    // => def_AB and def_BS bet info
    eRef.appendChild(my_create("br"));
    eRef.appendChild(my_create("label","Kèo AB:",[],{"margin-right":"5px","padding-top":"20px"}));
    eRef.appendChild(my_create("span",cntData["match_info"][1][5],[],{"padding":"3px","border-bottom":"2px solid red"},{}))
    
    eRef.appendChild(my_create("br"));
    eRef.appendChild(my_create("label","Kèo Tài/Xỉu:",[],{"margin-right":"5px","padding-top":"20px"}));
    eRef.appendChild(my_create("span",cntData["match_info"][1][6],[],{"padding":"3px","border-bottom":"2px solid red"},{}))

    eRef.appendChild(my_create("br"));
    eRef.appendChild(my_create("label","Kèo Tỉ số:",[],{"margin-top":"20px"}));
    // => table of valid def-bet-scores
    let eTblTop = my_create("div",undefined);
    let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable","w3-bordered","w3-border-red"]);
    let eTbd = my_create("tbody",undefined,["w3-small"]);
    let trData = [];
    trData.push("A-B"); for(let i=0;i<11;i++){ trData.push(i) }
    eTbd.appendChild(my_add_row(trData,"th",{"padding":0,"width":"8.33%"}));
    for(let i=0;i<11;i++){
        let tr = my_create("tr",undefined);
        tr.appendChild(my_create("th",i,[],{"padding":0}))
        for(let j=0;j<11;j++){
            let td = my_create("td",my_create("input",undefined,["w3-round","w3-card-2"],{"width":"100%"},{"readonly":true,"type":"text","name":"score="+i+":"+j}),[],{"padding":0});
            td.childNodes[0].style.backgroundColor = "lightgray";
            if(Object.keys(cntData).length > 0){
                if(cntData["def_bet_score"].hasOwnProperty(i+":"+j)){
                    if(cntData["def_bet_score"][i+":"+j] !== undefined
                    && cntData["def_bet_score"][i+":"+j] !== ""
                    && cntData["def_bet_score"][i+":"+j] !== "null"
                    ){
                        td.childNodes[0].value = cntData["def_bet_score"][i+":"+j];
                        td.childNodes[0].style.backgroundColor = "orange";
                    }else{}
                }else{}
            }
            td.addEventListener("change",function(e){
                if(e.target.value === ""){
                    e.target.style.backgroundColor = "lightgray";
                }else{
                    e.target.style.backgroundColor = "orange";
                }
            })
            // => init it
            tr.appendChild(td)
        }
        eTbd.appendChild(tr)
    }


    // submisson behavior
    // eForm.setAttribute("action",cntData["formAction"]);
    // prevent default submit behavaior and redirect it to the submit-button
    eForm.addEventListener("submit",function(event){
        event.preventDefault(); 
    })

    eTbl.appendChild(eTbd);
    eTblTop.appendChild(eTbl);
    eForm.appendChild(eRef);
    eForm.appendChild(eTblTop);
    eTop.appendChild(eBtnClose);
    eTop.appendChild(eForm);
    // return my_create("div",my_create("div",eTop,["w3-modal-content","w3-round-xlarge"],{"position":"fixed","top":0,"right":0,"width":"35%"}),["w3-modal"],{},{});
    return my_create("div",eTop,["w3-light-grey","w3-card-2","w3-round-xlarge"],{"padding":0,"position":"fixed","top":0,"right":0,"width":"35%","z-index":9});
}

// ============================================
///////////////////////////////////////////////
function dsp_bet_results_vs_matches(cntO){
    console.log(cntO)
    if(cntO.length === 0) return;
    if(!cntO.hasOwnProperty("cntData")) return;
    if(cntO["cntData"]["all_matches"].length === 0) return;
    if(document.getElementById("mainSide") === null) return;
    while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}

    let eTop = my_create("div",undefined,["w3-responsive"],{"position":"relative","overflow-y":"visible","overflow-x":"visible"},{"id":"tbl_matches_all_bets"});
    let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable"],{"min-width":"100%"});
    let eTbd = my_create("tbody",undefined,["w3-small"],{"min-width":"100%"});

    // register matches internally
    let hoMatches = {};
    for(let i=1;i<cntO["cntData"]["all_matches"].length;i++){
        let id = cntO["cntData"]["all_matches"][i][0];
        if(!hoMatches.hasOwnProperty(id)) hoMatches[id] = {};
        for(let j=1;j<cntO["cntData"]["all_matches"][0].length;j++){
            hoMatches[id][cntO["cntData"]["all_matches"][0][j]] = cntO["cntData"]["all_matches"][i][j];
        }
    }
    // console.log(hoMatches)

    if(Object.keys(hoMatches).length === 0) return;

    // header
    let thData = [];
    thData.push("User","Match","TeamA","TeamB","Score");
    thData.push("A_B pts","B_S pts","Score pts");
    thData.push("All");
    eTbd.appendChild(my_add_row(thData,"th",{"padding":"2px"}));

    // content
    console.log(cntO["cntData"]["all_bets"])
    for(let user in cntO["cntData"]["all_bets"]){
        if(user === "") continue;
        for(let matchId in cntO["cntData"]["all_bets"][user]["detail"]){
            let pts_AB = "-"; if(cntO["cntData"]["all_bets"][user]["detail"][matchId].hasOwnProperty("AB")) pts_AB = cntO["cntData"]["all_bets"][user]["detail"][matchId]["AB"][["points"]];
            let pts_BS = "-"; if(cntO["cntData"]["all_bets"][user]["detail"][matchId].hasOwnProperty("BS")) pts_BS = cntO["cntData"]["all_bets"][user]["detail"][matchId]["BS"][["points"]];
            let pts_score = "-"; if(cntO["cntData"]["all_bets"][user]["detail"][matchId].hasOwnProperty("Score")) pts_score = cntO["cntData"]["all_bets"][user]["detail"][matchId]["Score"][["points"]];
            let sum = 0;
            if(Number.isInteger(pts_AB)) sum+=pts_AB;
            if(Number.isInteger(pts_BS)) sum+=pts_BS;
            if(Number.isInteger(pts_score)) sum+=pts_score;
            // console.log(pts_AB,pts_BS,pts_score,matchId,hoMatches[matchId])
            let tdData = [
                user,
                matchId,
                hoMatches[matchId]['teamA'],
                hoMatches[matchId]['teamB'],
                hoMatches[matchId]["score"],
                pts_AB,
                pts_BS,
                pts_score,
                sum,
            ]
            let eTr = my_add_row(tdData,"td",{"padding":"2px"})
            eTr.classList.add("myCnt-item-match-user-bets");
            eTbd.appendChild(eTr);
        }
    }
    eTbl.appendChild(eTbd);
    eTop.appendChild(eTbl);
    mainSide.appendChild(eTop);
    
    // => give more info to the bet info (each cell)
    let aoTr = tbl_matches_all_bets.getElementsByClassName("myCnt-item-match-user-bets");
    for(let i=0;i<aoTr.length;i++){
        let user = aoTr[i].getElementsByTagName("td")[0].innerText;
        let matchId = aoTr[i].getElementsByTagName("td")[1].innerText;
        let td_AB = aoTr[i].getElementsByTagName("td")[5];
        let td_BS = aoTr[i].getElementsByTagName("td")[6];
        let td_Score = aoTr[i].getElementsByTagName("td")[7];

        if(!cntO["cntData"]["all_bets"].hasOwnProperty(user)) continue;
        if(!cntO["cntData"]["all_bets"][user].hasOwnProperty("detail")) continue;
        if(!cntO["cntData"]["all_bets"][user]["detail"].hasOwnProperty(matchId)) continue;

        if(cntO["cntData"]["all_bets"][user]["detail"][matchId].hasOwnProperty("AB")){
            if(cntO["cntData"]["all_bets"][user]["detail"][matchId]["AB"]["status"] === "OK"){
                td_AB.classList.add("w3-hover-indigo");
                td_AB.classList.add("my-tooltip");
                td_AB.appendChild(my_create("div",gen_bet_tbl(cntO["cntData"]["all_bets"][user]["detail"][matchId]["AB"]),["my-tooltip-content"]))
            }else{}
        }
        if(cntO["cntData"]["all_bets"][user]["detail"][matchId].hasOwnProperty("BS")){
            if(cntO["cntData"]["all_bets"][user]["detail"][matchId]["BS"]["status"] === "OK"){
                td_BS.classList.add("w3-hover-indigo");
                td_BS.classList.add("my-tooltip");
                td_BS.appendChild(my_create("div",gen_bet_tbl(cntO["cntData"]["all_bets"][user]["detail"][matchId]["BS"]),["my-tooltip-content"]))
            }else{}
        }
        if(cntO["cntData"]["all_bets"][user]["detail"][matchId].hasOwnProperty("Score")){
            // console.log(matchId,user,cntO["cntData"]["all_bets"][user]["detail"][matchId]["Score"])
            if(cntO["cntData"]["all_bets"][user]["detail"][matchId]["Score"]["status"] === "OK"){
                td_Score.classList.add("w3-hover-indigo");
                td_Score.classList.add("my-tooltip");
                td_Score.appendChild(my_create("div",gen_bet_tbl(cntO["cntData"]["all_bets"][user]["detail"][matchId]["Score"]),["my-tooltip-content"]))
            }else{}
        }

    }
    return 1;
}

function gen_bet_tbl(inf){
    // console.log(inf)
    if(inf["status"] !== "OK") return null;
    let eTop = my_create("div",undefined,[])
    let eTbl = my_create("table",undefined,["w3-small"],{"width":"100%"})
    let eTbd = my_create("tbody",undefined,[])
    let defBet = "n/a";
    if(typeof(inf["defBet"]) === "object"){
        defBet = inf["defBet"][inf["score"]];
    }else{
        defBet = inf["defBet"];
    }
    let tr = my_create("tr",undefined); tr.appendChild(my_create("th","score",["w3-black"],{"padding":0}))    ; tr.appendChild(my_create("td",inf["score"],["w3-black"],{"padding":0}))  ; eTbd.appendChild(tr);
        tr = my_create("tr",undefined); tr.appendChild(my_create("th","defBet",["w3-black"],{"padding":0}))   ; tr.appendChild(my_create("td",defBet,["w3-black"],{"padding":0}))                  ; eTbd.appendChild(tr);
        tr = my_create("tr",undefined); tr.appendChild(my_create("th","userBet",["w3-black"],{"padding":0}))  ; tr.appendChild(my_create("td",inf["userBet"],["w3-black"],{"padding":0}))      ; eTbd.appendChild(tr);
        tr = my_create("tr",undefined); tr.appendChild(my_create("th","value",["w3-black"],{"padding":0}))    ; tr.appendChild(my_create("td",inf["userBetValue"],["w3-black"],{"padding":0})) ; eTbd.appendChild(tr);
        tr = my_create("tr",undefined); tr.appendChild(my_create("th","points",["w3-black"],{"padding":0}))   ; tr.appendChild(my_create("td",inf["points"],["w3-black"],{"padding":0}))       ; eTbd.appendChild(tr);
    eTbl.appendChild(eTbd);
    eTop.appendChild(eTbl);

    // some latest format
    return eTop;
}

// ============================================
///////////////////////////////////////////////
function dsp_users_points(cntO){
    console.log(cntO)
    if(Object.keys(cntO).length === 0) return;
    if(!cntO.hasOwnProperty("cntData")) return;
    if(document.getElementById("mainSide") === null) return;
    while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}

    let eTop = my_create("div",undefined,["w3-responsive"],{"position":"relative"},{"id":"tbl_matches_all_bets"});
    let eTbl = my_create("table",undefined,["w3-table-all","w3-hoverable"],{"min-width":"100%"});
    let eTbd = my_create("tbody",undefined,["w3-small"],{"min-width":"100%"});

    // header
    let thData = ["user","#matches","A_B bet","B_S bet","Score bet","Total earn pts"];
    eTbd.appendChild(my_add_row(thData,"th",{"padding":"2px"}));

    // content
    for(let user in cntO["cntData"]){
        if(user === "") continue;
        let tdData = [
            user,
            Object.keys(cntO["cntData"][user]["detail"]).length,
            cntO["cntData"][user]["totalAB"],
            cntO["cntData"][user]["totalBS"],
            cntO["cntData"][user]["totalScore"],
            cntO["cntData"][user]["points"]
        ];
        // =>
        eTbd.appendChild(my_add_row(tdData,"td",{"padding":"2px"}));
    }

    eTbl.appendChild(eTbd);
    eTop.appendChild(eTbl);
    mainSide.appendChild(eTop);
    return 1;
}

///////////////////////////
function dsp_upload_file_and_action(){
    if(document.getElementById("mainSide") === null) return;
    while(mainSide.childNodes.length > 0) {mainSide.lastChild.remove()}

    // => components
    let eTop = my_create("div",undefined,["w3-responsive","w3-border-blue","w3-light-grey","w3-round","w3-card-2"],{"position":"relative","margin-top":"32px","padding":"10px"},{});
    let eForm = my_create("form",undefined,[],{"min-width":"100%"});
    eForm.appendChild(my_create("label","Select file (must be .csv, none-empty):",[],{},{"for":"upfile"}))
    eForm.appendChild(my_create("input",undefined,["w3-input"],{},{"type":"file","name":"upfile"}))
    eForm.appendChild(my_create("label","Select mode:",[],{},{"for":"mode"}))

    let eSlt = my_create("select",undefined,["w3-select"],{},{"type":"select","name":"mode"});
    eSlt.appendChild(my_create("option","For matches",[],{},{"value":"matches"}))
    eSlt.appendChild(my_create("option","For bet score table",[],{},{"value":"betScore"}))
    eForm.appendChild(eSlt)

    eForm.appendChild(my_create("input",undefined,["w3-button","w3-input","w3-indigo"],{"margin-top":"20px"},{"type":"submit","name":"submit"}))

    // => action
    eForm.setAttribute("action","index.php");
    eForm.setAttribute("method","POST");
    eForm.setAttribute("enctype","multipart/form-data");

    // prevent default submit behavaior and redirect it to the submit-button
    eForm.addEventListener("submit",function(event){
        event.preventDefault(); 
        my_ajax_formData("src_modules/worldcup/upload_file_and_action.php",eForm,function(rtnO){
            // func_act_after_submit(eTop.parentNode.parentNode,rtnO);
            dsp_matches_w_adding(rtnO);
            dsp_notification("Swept " + rtnO["reg_from_file_status"].length + " items!","Info")
            console.log(rtnO)
        })
        // event.target.parentNode.parentNode.parentNode.remove();// don't auto close form because OTP need sendingOTP to standstill
    })

    // => some help? in markdeep
    let eHelp = my_create("div",undefined,["w3-card-2","w3-light-grey"],{"margin-top":"20px"});
    eHelp.appendChild(my_create("div","Help",["w3-center","w3-yellow"]));
    my_ajax_get("src_modules/worldcup/get_help_on_upload_file",[{}],function(rtnO){
        console.log(rtnO);
        for(let keyw in rtnO){
            let ePart = my_create("div",undefined,["w3-card-2"],{},{"id":keyw});
            ePart.innerHTML = window.markdeep.format(rtnO[keyw]);
            eHelp.appendChild(ePart)
        }
    })

    // => layout
    eTop.appendChild(eForm);
    mainSide.appendChild(eTop);
    mainSide.appendChild(eHelp);
    return 1;
}

////
function my_ajax_formData(svrSrc,form,fnc){
    // using fromData ?!
    let xmlhttp = new XMLHttpRequest();
    let formData = new FormData();
    let fileHolder = [];
    for(let tmpv of form.childNodes){
        if(tmpv.getAttribute("name") === null) continue;
        if(tmpv.type === "file"){
            fileHolder.push(tmpv.files[0])
        }else{
            formData.append(tmpv.name,tmpv.value)
        }
    }
    // console.log(fileHolder)
    formData.append('upfile',fileHolder[0])

    xmlhttp.addEventListener('error', (event) => {
        alert('Oops! Something went wrong.');
      });

    xmlhttp.onreadystatechange = function(){
        if(this.readyState === 4){
            if(this.status === 200){
                let objData = {};
                try {objData = JSON.parse(this.responseText);}
                catch(err){ 
                    console.log(this.responseText)
                    console.log(err)
                    dsp_notification(err,"Error");
                    dsp_notification(this.responseText,"Error");
                    // console.log(this.responseText);
                    return;
                }
                if(fnc === undefined) return;
                fnc(objData);return;

            }else if(this.status === 500){
                console.log("dbg:: caught the state=" + this.readyState + " status="+this.status + " response=" + this.responseText)
                return;
            }
        }
    }
    xmlhttp.open("POST",svrSrc,true);
    console.log(formData.keys())
    xmlhttp.send(formData);
}

FILE:: .//src_modules/worldcup/worldcup_sqlite3.class.php
<?php
require_once "../../src_modules/login/users_sqlite3_OTP.class.php";
date_default_timezone_set("Asia/Ho_Chi_Minh");

class WorldCup_by_sqlite3
{
    private $tgtd = "../../data/by_sqlite3";
    private $dbname_matches = "worldcup_matches.db";
    private $manual_input_matches = "../../data_manual/data_worldcup_matches.csv";
    private $manual_input_betScore = "../../data_manual/data_worldcup_betScore.csv";

    private $thisUser = null;

    function __construct(){
        if(!file_exists($this->tgtd)){
            try {
                mkdir($this->tgtd,0777,true);
            }catch(Exception $e){
                return $e;
            }
        }else{}

        $this->init_table();
        $this->thisUser = new User_by_sqlite3;

        return "OK";
    }

    function init_table(){
        $db = new SQLite3($this->tgtd . "/" . $this->dbname_matches);
        if(!$db) return "103: Cannot access database: " . $db->lastErrorMsg();

        /// => MATCHES table
        $sql ="CREATE TABLE IF NOT EXISTS
            MATCHES (
                id              INTEGER PRIMARY KEY  AUTOINCREMENT,
                match_datetime ,
                match_group    TEXT ,
                teamA          TEXT ,
                teamB          TEXT ,
                def_AB_bet     TEXT ,
                def_BS_bet     TEXT ,
                def_score_bet  TEXT ,
                score          TEXT ,
                modify_on,
                modify_by,
                register_on,
                register_by
            );";
        
        // create table
        $retExec = $db->exec($sql);
        if(!$retExec) return $db->lastErrorMsg();

        /// => USERS_BET table
        $sql ="CREATE TABLE IF NOT EXISTS
            USERS_BET (
                user     TEXT,
                match_id INTEGER ,
                bet_AB TEXT,
                bet_AB_v INTEGER,
                bet_score TEXT,
                bet_score_v INTEGER,
                bet_BS TEXT,
                bet_BS_v INTEGER,
                modify_on,
                modify_by,
                register_on,
                register_by,
                FOREIGN KEY(match_id) REFERENCES MATCHES(id)
            );";
        // create table
        $retExec = $db->exec($sql);
        if(!$retExec) return $db->lastErrorMsg();

        /// => DEF_BET_SCORE table
        $sql ="CREATE TABLE IF NOT EXISTS
            DEF_BET_SCORE (
                match_id INTEGER ,
                with_score TEXT,
                ratio TEXT,
                FOREIGN KEY(match_id) REFERENCES MATCHES(id)
            );";
        
        // create table
        $retExec = $db->exec($sql);
        if(!$retExec) return $db->lastErrorMsg();

        $db->close();
        return "OK";
    }

    function reg_match($id=0,$info=array()){
        // newly register or modify a match by its id
        if($info === array() ) return "101: nothing to reg or mod";//nothing to reg or mod

        foreach(array('match_datetime','teamA','teamB') as $chkkey){
            if(!isset($info[$chkkey])) return "NG: must have '$chkkey'";
            if($info[$chkkey] === "") return "NG: '$chkkey' must not empty";
        }

        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"MATCHES");
        if(!$db) return "NG: NotRegYet";

        if($id === 0){
            // create new
            if(count($info)){
                // => check if there is chance that the item was already registered
                $matchDT = $info['match_datetime'];
                $teamA = $info['teamA'];
                $teamB = $info['teamB'];
                $sql = "SELECT * from MATCHES WHERE match_datetime=$matchDT AND teamA='$teamA' AND teamB='$teamB';";
                $fA = $db->query($sql)->fetchArray(SQLITE3_ASSOC);
                if($fA) return "NG: already existed, matchDT='$matchDT' teamA='$teamA' teamB='$teamB'";
                // => do the job
                $info["register_on"] = time();
                $info["register_by"] = $this->thisUser->login_email;
                $updStrHeads = "(";
                $updStrValues = "VALUES(";
                foreach($info  as $keyw => $value){
                    $updStrHeads .= $keyw . " , ";
                    if(is_int($value) || is_long($value) || is_null($value) || is_float($value)){
                        $updStrValues .= $value . " , ";
                    }else{
                        $updStrValues .= "'" . $value . "' , ";
                    }
                }
                $updStrHeads = preg_replace("/, $/","",$updStrHeads);
                $updStrValues = preg_replace("/, $/","",$updStrValues);
                $updStrHeads .= ")";
                $updStrValues .= ")";
                if($updStrHeads !== "()" && $updStrValues !== "VALUES()"){
                    $sql = "INSERT INTO MATCHES $updStrHeads $updStrValues ;";
                    $info["sql"] = $sql;
                    $info["exec_stt"] = $db->exec($sql);
                    $info["exec_msg"] = $db->lastErrorMsg();
                }
                $info["id"] = $id;
                return array("info" => $info);
            }else{}
        }elseif($id>0){
            // modify one by query the table
            $info["modify_on"] = time();
            $info["modify_by"] = $this->thisUser->login_email;

            $sql = "SELECT * from MATCHES WHERE id='" . $id . "'";
            $fA = $db->query($sql)->fetchArray();//fetch array
            if(! $fA){
                return "105: cannot modify an none-existed match.";
            }else{
                if(count($info)){
                    // modify when existed
                    $updStr = "";
                    foreach($info  as $keyw => $value){
                        if(is_int($value) || is_long($value) || is_null($value) || is_float($value)){
                            $updStr .= $keyw . " = " . $value . " , ";
                        }else{
                            $updStr .= $keyw . " = '" . $value . "' , ";
                        }
                    }
                    if($updStr !== ""){
                        $updStr = preg_replace("/ , $/","",$updStr);
                        $sql = "UPDATE MATCHES SET $updStr WHERE id=$id";
                        $info["sql"] = $sql;
                        $info["exec_stt"] = $db->exec($sql);
                        $info["exec_msg"] = $db->lastErrorMsg();
                    }
                    $info["id"] = $id;
                    return array("info" => $info);
                }else{}
            }
        }else{
            // out of scope
            return "104: out-of-scope id='" .$id."'" ;
        }

        $db->close();
        return "OK:$id";//OK
    }

    function reg_matches_from_file($tgtf=""){
        if($tgtf==="") $tgtf = $this->manual_input_matches;
        if(!file_exists($tgtf)) return "NG: target file none-existed.";
        $oData = array();
        $oO = array();
        $nol = 0;
        if($fh = fopen($tgtf,"r")){
            while(!feof($fh)){
                $nol++;
                $line = trim(fgets($fh));
                if(!$line) continue;
                if(preg_match('/^#/',trim($line))) continue;
                if(preg_match('/#match_datetime/',$line)) continue;
                $aoW = explode(",",$line);
                if(count($aoW) < 6) continue;
                if($aoW[0] === ""
                || $aoW[1] === ""
                || $aoW[2] === ""
                || $aoW[3] === ""
                ) continue;
                array_push($oData,array(
                    "match_datetime" => strtotime($aoW[0]),
                    "match_group" =>  $aoW[1],
                    "teamA" =>  $aoW[2],
                    "teamB" =>  $aoW[3],
                    "def_AB_bet" =>  $this->recal_score_like_string($aoW[4]),
                    "def_BS_bet" =>  $aoW[5],
                    "score" =>  $this->recal_score_like_string($aoW[6]),
                ));
                // if($nol > 1) break; // debuging - stop at 1
            }
            fclose($fh);
        }else{
            return "NG: cannot open file.";
        }
        if(count(array_keys($oData)) > 0){
            $nol = 0;
            foreach($oData as $item){
                $nol++;
                // => register newly
                $rtnMsg = $this->reg_match(0,$item);
                // => loging the status
                if(isset($rtnMsg["info"]) && isset($rtnMsg["info"]["exec_msg"]) && $rtnMsg["info"]["exec_msg"] === "not an error"){
                }elseif(preg_match("/OK:/",$rtnMsg)){
                }else{
                    array_push($oO,$rtnMsg);
                }
            }
        }
        // return "OK";
        return $oO;
    }

    function reg_bet($match_id=0,$user="",$info=array()){
        if($match_id === 0) return "NG: there is no match_id to reg_bet.";
        if($user === "") return "NG: there is no user to reg_bet.";
        if($info === array() ) return "101: nothing to reg or mod";//nothing to reg or mod

        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"USERS_BET");
        if(!$db) return "NG: NotRegYet";

        // check if the time allow the betting
        $matchInf = $this->get_match_info($match_id);
        if(count(array_keys($matchInf)) > 0){
            // => allow users to register or not
            // if($matchInf[1][1] + 30*60 < time())  return "NG: Over time, cannot bet anymore.";//OK
        }else{
            return "NG: No match found";//OK
        }

        $sql = "SELECT * from USERS_BET WHERE match_id=$match_id AND user=\"$user\";";
        $query = $db->query($sql);
        $fA = false;
        if($query) $fA = $query->fetchArray(SQLITE3_ASSOC);
        if($fA){
            // already existed, modify only
            $info["modify_on"] = time();
            $info["modify_by"] = $this->thisUser->login_email;
            $updStr = "";
            foreach($info  as $keyw => $value){
                if(is_int($value) || is_long($value) || is_null($value) || is_float($value)){
                    $updStr .= $keyw . " = " . $value . " , ";
                }else{
                    $updStr .= $keyw . " = '" . $value . "' , ";
                }
            }
            if($updStr !== ""){
                $updStr = preg_replace("/ , $/","",$updStr);
                $sql = "UPDATE USERS_BET SET $updStr WHERE match_id=$match_id AND user=\"$user\"";
                $info["sql"] = $sql;
                $info["exec_stt"] = $db->exec($sql);
                $info["exec_msg"] = $db->lastErrorMsg();
            }
            $info["match_id"] = $match_id;
            $info["user"] = $user;
            // return array("info" => $info);
        }else{
            // create new bet
            $info["register_on"] = time();
            $info["register_by"] = $this->thisUser->login_email;
            $updStrHeads = "(";
            $updStrValues = "VALUES(";
            foreach($info  as $keyw => $value){
                $updStrHeads .= $keyw . " , ";
                if(is_int($value) || is_long($value) || is_null($value) || is_float($value)){
                    $updStrValues .= $value . " , ";
                }else{
                    $updStrValues .= "'" . $value . "' , ";
                }
            }
            $updStrHeads = preg_replace("/, $/","",$updStrHeads);
            $updStrValues = preg_replace("/, $/","",$updStrValues);
            $updStrHeads .= ")";
            $updStrValues .= ")";
            if($updStrHeads !== "()" && $updStrValues !== "VALUES()"){
                $sql = "INSERT INTO USERS_BET $updStrHeads $updStrValues ;";
                $info["sql"] = $sql;
                $info["exec_stt"] = $db->exec($sql);
                $info["exec_msg"] = $db->lastErrorMsg();
            }
            $info["match_id"] = $match_id;
            $info["user"] = $user;
            // return array("info" => $info);
        }

        $db->close();
        return "OK: $match_id,$user";//OK
    }

    function del_match($id=0){
        if($id === 0) return "NG: there is no id to delete.";
        if($this->thisUser->role !== "Admin" && $this->thisUser->role !== "AdminWC") return "NG: User not a valid role.";
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"MATCHES");
        if(!$db) return "NG: NotRegYet";
        $sql = "DELETE FROM MATCHES WHERE id=$id;";
        $info["sql"] = $sql;
        $info["exec_stt"] = $db->exec($sql);
        $info["exec_msg"] = $db->lastErrorMsg();
        $db->close();
        return "OK:$id";//OK
    }

    function del_bet($match_id=0,$user=""){
        if($match_id === 0) return "NG: there is no id to delete.";
        if($user === "") return "NG: there is no user to delete.";
        if($this->thisUser->login_email !== $user) return "NG: Can delete self bet only.";
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"USERS_BET");
        if(!$db) return "NG: NotRegYet";
        $sql = "DELETE FROM USERS_BET WHERE match_id=$match_id AND user=$user";
        $info["sql"] = $sql;
        $info["exec_stt"] = $db->exec($sql);
        $info["exec_msg"] = $db->lastErrorMsg();
        $db->close();
        return "OK: $match_id, $user";//OK
    }

    function get_match_info($id=0){
        $oO = array();
 
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"MATCHES");
        if(!$db) return "NG: NotRegYet";

        // => header
        array_push($oO,array());
        $sql = "PRAGMA table_info(MATCHES)";
        $query = $db->query($sql);
        while($fA = $query->fetchArray(SQLITE3_ASSOC)){
            array_push($oO[0],$fA["name"]);
        }

        // => content
        $sql = "SELECT * from MATCHES";
        if($id > 0) $sql .= " WHERE id=$id;";
        $query = $db->query($sql);
        if(!$query) return $oO;
        while($fA = $query->fetchArray(SQLITE3_ASSOC)){
            array_push($oO,array_values($fA));
        }
 
        $db->close();
        return $oO;
    }

    function get_bet_info($match_id=0,$user=""){
        $oO = array();
 
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"USERS_BET");
        if(!$db) return "NG: NotRegYet";

        // => header
        array_push($oO,array());
        $sql = "PRAGMA table_info(USERS_BET)";
        $query = $db->query($sql);
        while($fA = $query->fetchArray(SQLITE3_ASSOC)){
            array_push($oO[0],$fA["name"]);
        }

        // => content
        $sql = "SELECT * from USERS_BET";
        if($match_id > 0 && $user !== ""){
            $sql .= " WHERE match_id=$match_id AND user='$user';";
        }elseif($match_id > 0){
            $sql .= " WHERE match_id=$match_id;";
        }elseif($user !== ""){
            $sql .= " WHERE user='$user';";
        }else{}
        $query = $db->query($sql);
        if(!$query) return $oO;
        while($fA = $query->fetchArray(SQLITE3_ASSOC)){
            array_push($oO,array_values($fA));
        }

        $db->close();
        return $oO;
    }

    function get_point_per_user($match_id=0,$user=""){
        $oO = array();
        $oMatches = array();
 
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"USERS_BET");
        if(!$db) return "NG: NotRegYet";

        // => get bet info
        $sql = "SELECT * from USERS_BET";
        if($match_id > 0 && $user !== ""){
            $sql .= " WHERE match_id=$match_id AND user='$user';";
        }elseif($match_id > 0){
            $sql .= " WHERE match_id=$match_id;";
        }elseif($user !== ""){
            $sql .= " WHERE user='$user';";
        }else{}
        $query = $db->query($sql);
        if(!$query) return $oO;
        while($fA = $query->fetchArray(SQLITE3_ASSOC)){
            ///// => for each betting info: extract match result and calculate point of the user
            // => init
            if(!isset($oO[$fA["user"]])){
                $oO[$fA["user"]] = array();
                $oO[$fA["user"]]["points"] = 0;
                $oO[$fA["user"]]["totalAB"] = 0;
                $oO[$fA["user"]]["totalBS"] = 0;
                $oO[$fA["user"]]["totalScore"] = 0;
                $oO[$fA["user"]]["detail"] = array();
            }
            
            // => extract match result
            $matchInfo = $this->get_match_info($fA["match_id"]);
            if(is_array($matchInfo) && count($matchInfo) > 1){
                if(!isset($oMatches[$fA["match_id"]])) $oMatches[$fA["match_id"]] = $matchInfo[1];
                // => calculate the point
                $match_def_AB = $oMatches[$fA["match_id"]][5];//5 for 'def_AB_bet' index
                $match_def_BS = $oMatches[$fA["match_id"]][6];//6 for 'def_BS_bet' index
                $match_score = $this->recal_score_like_string($oMatches[$fA["match_id"]][8]);//8 for 'score' index

                $match_def_score = $this->get_def_bet_score($fA["match_id"]);
                
                $betABInf = $this->rtn_pts_AB($match_score,$match_def_AB,$fA["bet_AB"],$fA["bet_AB_v"]);
                $betBSInf = $this->rtn_pts_BS($match_score,$match_def_BS,$fA["bet_BS"],$fA["bet_BS_v"]);
                $betScoreInf = $this->rtn_pts_score($match_score,$match_def_score,$fA["bet_score"],$fA["bet_score_v"]);

                // reg to output
                if($betABInf["bet"]){
                    if(!isset($oO[$fA["user"]]["detail"][$fA["match_id"]])) $oO[$fA["user"]]["detail"][$fA["match_id"]] = array();
                    $oO[$fA["user"]]["detail"][$fA["match_id"]]["AB"] = $betABInf;
                    $oO[$fA["user"]]["points"]+=$betABInf["points"];
                    $oO[$fA["user"]]["totalAB"]+=$betABInf["userBetValue"];
                }else{}
                if($betBSInf["bet"]){
                    if(!isset($oO[$fA["user"]]["detail"][$fA["match_id"]])) $oO[$fA["user"]]["detail"][$fA["match_id"]] = array();
                    $oO[$fA["user"]]["detail"][$fA["match_id"]]["BS"] = $betBSInf;
                    $oO[$fA["user"]]["points"]+=$betBSInf["points"];
                    $oO[$fA["user"]]["totalBS"]+=$betBSInf["userBetValue"];
                }else{}
                if($betScoreInf["bet"]){
                    if(!isset($oO[$fA["user"]]["detail"][$fA["match_id"]])) $oO[$fA["user"]]["detail"][$fA["match_id"]] = array();
                    $oO[$fA["user"]]["detail"][$fA["match_id"]]["Score"] = $betScoreInf;
                    $oO[$fA["user"]]["points"]+=$betScoreInf["points"];
                    $oO[$fA["user"]]["totalScore"]+=$betScoreInf["userBetValue"];
                }else{}
                
            }else{}
        }
        // $oO = $oMatches;
        $db->close();
        return $oO;
    }

    function get_matches_table_header(){
        // return array of header in sqlite3 table, without some internal controlling names
        $oO = array();
 
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"MATCHES");
        if(!$db) return false;

        // => header
        $sql = "PRAGMA table_info(MATCHES)";
        $query = $db->query($sql);
        while($fA = $query->fetchArray(SQLITE3_ASSOC)){
            if($fA["name"] === "id"
            || $fA["name"] === "register_on"
            || $fA["name"] === "register_by"
            || $fA["name"] === "modify_on"
            || $fA["name"] === "modify_by"
            ) continue;
            array_push($oO,$fA["name"]);
        }
 
        $db->close();
        return $oO;
    }

    function reg_betScore_from_file($tgtf=""){
        if($tgtf==="") $tgtf = $this->manual_input_betScore;
        if(!file_exists($tgtf)) return "NG: target file none-existed.";
        $oData = array();
        $oO = array();
        if($fh = fopen($tgtf,"r")){
            while(!feof($fh)){
                $line = trim(fgets($fh));
                if(!$line) continue;
                if(preg_match('/^#/',trim($line))) continue;
                if(preg_match('/#match_datetime/',$line)) continue;
                $aoW = explode(",",$line);
                if(count($aoW) < 5) continue;
                if($aoW[0] === ""
                || $aoW[1] === ""
                || $aoW[2] === ""
                || $aoW[3] === ""
                || $aoW[4] === ""
                ) continue;
                $matchDT = strtotime($aoW[0]);
                $teamA = $aoW[1];
                $teamB = $aoW[2];
                $score = $this->recal_score_like_string($aoW[3]);
                $ratio = $aoW[4];
                $matchID = $this->rtn_match_id($matchDT,$teamA,$teamB);
                if($matchID){
                    if(!isset($oData[$matchID])) $oData[$matchID] = array();
                    $oData[$matchID]["score=" . $score] = $ratio;
                }
            }
            fclose($fh);
        }else{
            return "NG: cannot open file.";
        }
        $oO["data"] = $oData;

        if(count(array_keys($oData)) > 0){
            foreach($oData as $matchID => $info){
                // => working on it
                $rtnMsg = $this->reg_def_bet_score($matchID,$info);
                // => loging the status
                if(isset($rtnMsg["status"]) && is_array($rtnMsg["status"]) && count($rtnMsg["status"]) > 0){
                    array_push($oO,$rtnMsg);
                }elseif(is_array($rtnMsg) && $rtnMsg === array()){
                }else{
                    array_push($oO,$rtnMsg);
                }
            }
        }

        // return "OK";
        return $oO;
    }

    function reg_def_bet_score($id=0,$info=array()){
        $oO = array();
        if($id === 0) return $oO;
        $oO["status"] = "starting";
        $oO["detail"] = array();
        // $oO["info"] = $info;

        $db_matches = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"MATCHES");
        if(!$db_matches) return "NG: NotRegYet";
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"DEF_BET_SCORE");
        if(!$db) return "NG: NotRegYet";

        // => check if match existed
        $sql = "SELECT * from MATCHES WHERE id=$id;";
        $fA = $db_matches->query($sql)->fetchArray();//fetch array
        if(! $fA){
            return "105: cannot modify an none-existed match, id='".$id."'";
        }else{
            if(count(array_keys($info))){
                $oO["status"] = array();
                foreach($info as $guide => $ratio){
                    if(!preg_match('/^score=/',$guide)) continue;
                    if($ratio === "") continue;
                    $tmpa = explode("=",$guide);
                    $with_score = $this->recal_score_like_string($tmpa[1]);
                    // check if there existed the match def-bet-score already
                    $chkSql = "SELECT * from DEF_BET_SCORE WHERE match_id=$id AND with_score='$with_score';";
                    $fA = $db->query($chkSql)->fetchArray(SQLITE3_ASSOC);
                    if(! $fA){
                        // newly creating...
                        $updStrHeads = "(";
                        $updStrValues = "VALUES(";
                        foreach(array("match_id" => $id, "with_score" => $with_score, "ratio" => $ratio)  as $keyw => $value){
                            $updStrHeads .= $keyw . " , ";
                            if(is_int($value) || is_long($value) || is_null($value) || is_float($value)){
                                $updStrValues .= $value . " , ";
                            }else{
                                $updStrValues .= "'" . $value . "' , ";
                            }
                        }
                        $updStrHeads = preg_replace("/, $/","",$updStrHeads);
                        $updStrValues = preg_replace("/, $/","",$updStrValues);
                        $updStrHeads .= ")";
                        $updStrValues .= ")";
                        if($updStrHeads !== "()" && $updStrValues !== "VALUES()"){
                            $sql = "INSERT INTO DEF_BET_SCORE $updStrHeads $updStrValues ;";
                            $tmpH = array();
                            $tmpH["sql"] = $sql;
                            $tmpH["exec_stt"] = $db->exec($sql);
                            $tmpH["exec_msg"] = $db->lastErrorMsg();
                            // array_push($oO["detail"],"new: id=" . $id . " w/ " . $with_score . " = " . $value);
                            array_push($oO["detail"],$tmpH);
                            if($tmpH["exec_msg"] !== "not an error"){
                                array_push($oO["status"], "NG: new id='$id' score='$with_score' stt='".$tmpH['exec_stt']."'");
                            }else{
                                array_push($oO["status"], "OK: new id='$id' score='$with_score' stt='".$tmpH['exec_stt']."'");
                            }
                        }
                    }else{
                        // modify when existed
                        $updStr = "";
                        foreach(array("with_score" => $with_score, "ratio" => $ratio)  as $keyw => $value){
                            if(is_int($value) || is_long($value) || is_null($value) || is_float($value)){
                                $updStr .= $keyw . " = " . $value . " , ";
                            }else{
                                $updStr .= $keyw . " = '" . $value . "' , ";
                            }
                        }
                        if($updStr !== ""){
                            $updStr = preg_replace("/ , $/","",$updStr);
                            $sql = "UPDATE DEF_BET_SCORE SET $updStr WHERE match_id=$id";
                            $tmpH = array();
                            $tmpH["sql"] = $sql;
                            $tmpH["exec_stt"] = $db->exec($sql);
                            $tmpH["exec_msg"] = $db->lastErrorMsg();
                            // array_push($oO["detail"],"mod: id=" . $id . " w/ " . $with_score . " = " . $value);
                            // array_push($oO["detail"],$tmpH);
                            if($tmpH["exec_msg"] !== "not an error"){
                                array_push($oO["status"], "NG: mod id='$id' score='$with_score' stt='".$tmpH['exec_stt']."'");
                            }else{
                                array_push($oO["status"], "OK: mod id='$id' score='$with_score' stt='".$tmpH['exec_stt']."'");
                            }
                        }
                    }
                }
            }else{
                $oO["status"] = "NG: nothing to go.";
            }
        }

        $db_matches->close();
        $db->close();
        return $oO;
    }

    function get_def_bet_score($match_id=0){
        $oO = array();
        if($match_id === 0) return $oO;
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"DEF_BET_SCORE");
        if(!$db) return "NG: NotRegYet";
        $sql = "SELECT * from DEF_BET_SCORE WHERE match_id=$match_id;";
        $query = $db->query($sql);
        if($query){
            while($fA = $query->fetchArray(SQLITE3_ASSOC)){
                $oO[$fA["with_score"]] = $fA["ratio"];//simplify the output
            }
        }else{}

        return $oO;
    }

    function get_bet_table_header(){
        // return array of header in sqlite3 table, without some internal controlling names
        $oO = array();
 
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"USERS_BET");
        if(!$db) return false;

        // => header
        $sql = "PRAGMA table_info(MATCHES)";
        $query = $db->query($sql);
        while($fA = $query->fetchArray(SQLITE3_ASSOC)){
            if(0
            || $fA["name"] === "register_on"
            || $fA["name"] === "register_by"
            || $fA["name"] === "modify_on"
            || $fA["name"] === "modify_by"
            ) continue;
            array_push($oO,$fA["name"]);
        }
 
        $db->close();
        return $oO;
    }

    ////////////////////////
    private function rtn_pts_AB($score,$defBet,$userBet,$userBetValue){
        $oO = array(
            "bet" => true,
            "score" => $score,
            "defBet" => $defBet,
            "userBet" => $userBet,
            "userBetValue" => $userBetValue,
            "points" => 0,
            "status" => "cannot proceed",
        );

        if($userBet === null || $userBet === "") return $oO;
        if($userBetValue === null || $userBetValue === "") return $oO;
        
        if($userBet !== null && $userBetValue !== null) $oO["bet"] = true;
        
        $oO["status"] = "OK";
        if(!$oO["bet"]) return $oO;
        
        if($score === null || $score === ""){
            $score = "-:-";
            $oO["points"] = 0;
        }else{
            
            if($defBet === null || $defBet === ""){
                $oO["status"] = "NG: no defBet.";
                return $oO;
            }else{}

            $tmpa1 = preg_split('/[-:,_]/',$score);
            $tmpa2 = preg_split('/[-:,_]/',$defBet);
            $tmpv = ($tmpa1[0]+$tmpa2[0]) - ($tmpa1[1]+$tmpa2[1]);
            if($userBet === "B") $tmpv =  -$tmpv;

            if($tmpv <= -0.5){
                $oO["points"] = -1.0 * $userBetValue;
            }elseif($tmpv <= -0.25){
                $oO["points"] = -0.5 * $userBetValue;
            }elseif($tmpv <= 0){
                $oO["points"] =  0.0 * $userBetValue;
            }elseif($tmpv < 0.5){
                $oO["points"] =  0.5 * $userBetValue;
            }else{
                $oO["points"] =  1.0 * $userBetValue;
            }
        }

        return $oO;
    }

    private function rtn_pts_BS($score,$defBet,$userBet,$userBetValue){
        $oO = array(
            "bet" => false,
            "score" => $score,
            "defBet" => $defBet,
            "userBet" => $userBet,
            "userBetValue" => $userBetValue,
            "points" => 0,
            "status" => "cannot proceed",
        );

        if($userBet === null || $userBet === "") return $oO;
        if($userBetValue === null || $userBetValue === "") return $oO;

        if($userBet !== null && $userBetValue !== null) $oO["bet"] = true;

        $oO["status"] = "OK";
        if(!$oO["bet"]) return $oO;

        if($score === null || $score === ""){
            $score = "-:-";
            $oO["points"] = 0;
        }else{
            if($defBet === null || $defBet === ""){
                $oO["status"] = "NG: no defBet.";
                return $oO;
            }else{}

            $tmpa1 = preg_split('/[-:,_]/',$score);
            $tmpv = ($tmpa1[0]+$tmpa1[1]) - $defBet;
            if($userBet === "small") $tmpv =  -$tmpv;

            if($tmpv <= -0.5){
                $oO["points"] = -1.0 * $userBetValue;
            }elseif($tmpv <= -0.25){
                $oO["points"] = -0.5 * $userBetValue;
            }elseif($tmpv <= 0){
                $oO["points"] =  0.0 * $userBetValue;
            }elseif($tmpv < 0.5){
                $oO["points"] =  0.5 * $userBetValue;
            }else{
                $oO["points"] =  1.0 * $userBetValue;
            }
        }

        return $oO;
    }

    private function rtn_pts_score($score,$defBet,$userBet,$userBetValue){
        $oO = array(
            "bet" => true,
            "score" => $score,
            "defBet" => $defBet,
            "userBet" => $userBet,
            "userBetValue" => $userBetValue,
            "points" => 0,
            "status" => "cannot proceed",
        );

        if($defBet === null || $defBet === "") return $oO;
        if($userBet === null || $userBet === "") return $oO;
        if($userBetValue === null || $userBetValue === "") return $oO;

        if($score === null || $score === ""){
            $score = "-:-";
            $oO["points"] = 0;
        }else{
            if($defBet === null || $defBet === "" || count(array_keys($defBet )) === 0){
                $oO["status"] = "NG: no defBet.";
                return $oO;
            }else{}

            $ratio = 2;
            if(isset($defBet[$score])){
                $ratio = $defBet[$score];
            }else{
                $oO["status"] = "No bet-score for $score";
            }

            if($userBet !== null && $userBetValue !== null) $oO["bet"] = true;

            $oO["status"] = "OK";
            if(!$oO["bet"]) return $oO;

            if($score === $userBet){
                $oO["points"] = ($ratio-1) * $userBetValue;//-1 for the bet-value needed to be in-scope
            }else{
                $oO["points"] = -1 * $userBetValue;
            }
        }

        return $oO;
    }

    private function rtn_match_id($matchDT="",$teamA="",$teamB=""){
        if($matchDT === "") return false;
        if($teamA === "") return false;
        if($teamB === "") return false;
        
        $db = $this->is_tbl_existed($this->tgtd . "/" . $this->dbname_matches,"MATCHES");
        if(!$db) return false;

        $sql = "SELECT * from MATCHES WHERE match_datetime=$matchDT AND teamA='$teamA' AND teamB='$teamB';";
        $query = $db->query($sql);
        if(!$query){
            $db->close();
            return false;
        }else{}

        $fA = $query->fetchArray(SQLITE3_ASSOC);
        if(!$fA){
            $db->close();
            return false;
        }else{}
        
        $db->close();
        return $fA["id"];
    }

    private function recal_score_like_string($str=""){
        if($str === "") return $str;
        $tmpa = preg_split('/[-:,_\s]/',preg_replace('/[\r\n]/','',trim($str)));
        if(count($tmpa) < 2) return $str;
        return "$tmpa[0]:$tmpa[1]";
    }

    ///////////////////////
    private function is_tbl_existed($dbPath="",$tbln=""){
        if($dbPath === "") return false;
        if(!file_exists($dbPath)) return false;
        if(filesize($dbPath) === 0) return false;
        $db = new SQLite3($dbPath);
        if(!$db) return false;
        $sql = "SELECT * from sqlite_master WHERE name='".$tbln."' and type='table'";
        if(!$db->query($sql)) {$db->close();return false;}
        return $db;
    }

    /////////////////////////////////////////////////////
}
?>

FILE:: .//wkdirServer/PVPI_export/scripts/cmd.extract_PVPI_sessions_to_excel.pl
#!/usr/bin/perl -w

use strict;
use lib "/shsv/BackendIO/99_Physical/4_Users/manduong/PROGRAMS/PVPI_new/PVPI_com/CPANmin";
use lib "/shsv/BackendIO/99_Physical/4_Users/manduong/PROGRAMS/PVPI_new/PVPI_com/SCRIPTS";

my $scrname = "extract_PVPI_sessions_to_excel";
my $VERSION = "v0.0.1";
my $VER_DATE = "2022/12/14";
printf "You're using perl version: v%vd\n", $^V;

use CommonSub;
use JSON;
use Memory::Usage       ; #calculate memory usage
use Excel::Writer::XLSX;

binmode STDOUT, ":encoding(UTF-8)"; #avoid warning 'Wide character ...' when printing to STDOUT
my $mu = Memory::Usage->new();

#ho Errors
my %hoE = ();
&my_define_error_codes(\%hoE);

############### INPUT ARGUMENT
my %inArg = ();
{
    # -> input argument extractor
    for(my $i=0;$i<=$#ARGV;$i++){
        if($ARGV[$i] =~ /^--(\S+)/){
            my $tmpv = $1;
            (!exists $inArg{$tmpv}) && ($inArg{$tmpv} = 1);#enable
            if($i<$#ARGV && $ARGV[$i+1] !~ /^--(\S+)/){
                $inArg{$tmpv} = $ARGV[$i+1];
                $i++;
            }else{}
        }
    }
    # -> check whether inputs comply with the program
    #    give default value
    (! exists $inArg{"indir"}) && ($inArg{'indir'} = "../../../../data");
    (! exists $inArg{"outdir"}) && ($inArg{'outdir'} = "./tmpOutdir");
    (! exists $inArg{"prjName"}) && ($inArg{'prjName'} = "all");
    (! exists $inArg{"topCellName"}) && ($inArg{'topCellName'} = "all");
}
# myPrintDataRef(\%inArg,1,"");

### register the starting time of the run
my $staEpoch = time();

############### MAIN
my %hoTgtF = ();#hash of target files
my %hoStat = ();#hash of statistic
my %hoAllDetailInf = ();#hash of all info to be excel -ed (detail)
my %hoAllSumInf = ();#hash of all info to be excel -ed (summary)
{   print "Scoping target file json data ...\n";
    foreach my $tmpf (glob($inArg{'indir'} . "/" . "detailInd_*.json")){
        my $fname = &file_name($tmpf);
        my ($prjN,$fromDT,$toDT) = &parse_detailInd_file_name($fname);
        # print "dbg:: $fname : $prjN, $fromDT, $toDT\n";
        ($inArg{'prjName'} ne "all" && $prjN ne $inArg{'prjName'}) && next;
        if(! exists $hoTgtF{$fname}){
            $hoTgtF{$fname} = {};
            $hoTgtF{$fname}{"path"} = $tmpf;
            $hoTgtF{$fname}{"prjN"} = $prjN;
            $hoTgtF{$fname}{"from"} = $fromDT;
            $hoTgtF{$fname}{"to"} = $toDT;
        }
    }
}
# myPrintDataRef \%hoTgtF,1,"";

{   print "JSON parsing data ...\n";
    my $jsonObj = JSON->new();
    $jsonObj = JSON->new->allow_nonref;
    $jsonObj->relaxed();
    $jsonObj->space_before();

    foreach my $fname (sort keys %hoTgtF){
        if(open TMPF,"<$hoTgtF{$fname}{'path'}"){
            # => working on file content
            my $tmpString = "";
            while(<TMPF>){
                chomp;
                
                #some modification/refining for json format here

                $tmpString .= $_;
            }
            close TMPF;
            
            # => json parsing/decoding
            my %hoInf = ();
            if($tmpString){
                %hoInf = %{ $jsonObj->decode($tmpString) };
                (!$hoStat{'#files'}) && ($hoStat{'#files'} = 0); $hoStat{'#files'}++;
            }
            # myPrintDataRef \%hoInf,1,"";

            # => extract neccesary info
            (! exists $hoAllDetailInf{$hoTgtF{$fname}{'prjN'}}) && ($hoAllDetailInf{$hoTgtF{$fname}{'prjN'}} = {});
            (! exists $hoAllSumInf{$hoTgtF{$fname}{'prjN'}}) && ($hoAllSumInf{$hoTgtF{$fname}{'prjN'}} = {});
            &record_session_info($fname,\%hoInf,$hoAllDetailInf{$hoTgtF{$fname}{'prjN'}},$hoAllSumInf{$hoTgtF{$fname}{'prjN'}},\%hoStat,\%inArg);
        }else{
            print "dbg:: failed to open $hoTgtF{$fname}{'path'}\n";
        }
    }
}
# myPrintDataRef \%hoAllDetailInf,1,"";
# myPrintDataRef \%hoAllSumInf,1,"";

{   print "To Excel report ...\n";
    (! scalar keys %hoAllDetailInf) && next;
    foreach my $prjN (sort keys %hoAllDetailInf){
        foreach my $dspDate (sort keys %{$hoAllDetailInf{$prjN}}){
            (! scalar keys %{$hoAllDetailInf{$prjN}{$dspDate}}) && next;

            ### -> create workbook
            my $outf  = $inArg{"outdir"} . "/" . "${prjN}_${dspDate}.xlsx" ;
            my $outf2 = $inArg{"outdir"} . "/" . "${prjN}_${dspDate}.xlsx_info.json" ;
            my $workbook =  Excel::Writer::XLSX->new($outf);
            my $fhInfo = undef;
            open $fhInfo, ">$outf2";
            
            if(! defined($workbook)){
                die "ERROR:: Fatal: the excel file cannot be created, maybe it's already existed and being opened.\n\n";
            }else{}

            ### -> info.json as summary content
            &gen_info_json($fhInfo,$hoAllDetailInf{$prjN}{$dspDate});

            ### -> init format for workbook
            my $rhFmt = &excel_init_format($workbook);

            ### -> content (sheets)
            my $count = 0;
            my %hoAllShN = ();#hash of all sheet name, try not to dup. the name of sheet
            foreach my $topCellName (sort keys %{$hoAllDetailInf{$prjN}{$dspDate}}){
                $count++;#control the name of sheet
                my @callNames = keys %{$hoAllSumInf{$prjN}{"All_Top_cell"}{$topCellName}};
                my $shN = $count;
                for(my $i=0;$i<=$#callNames;$i++){
                    ($callNames[$i] eq "") && next;
                    ($callNames[$i] eq "n/a") && next;
                    ($callNames[$i] eq "N/A") && next;
                    ($callNames[$i] eq "ip") && next;
                    ($callNames[$i] eq "IP") && next;
                    $shN = uc($callNames[$i]);
                    # -> remove not-allowed chacteres
                    $shN =~ s/[\/\\\?\*\[\]:]//g;
                    #
                    (!exists $hoAllShN{$shN}) && last;
                }
                (exists $hoAllShN{$shN}) && ($shN .= "_" . $count);#never dup.
                $hoAllShN{$shN} = 1; #register the name

                my $ws = $workbook->add_worksheet($shN);
                $ws->write(0,0,"Summary of PVPI sessions for cell='$topCellName', on '$dspDate', prjN='$prjN'.");
                $ws->write(1,0,"Generated at " . localtime(time));
                &excel_out_content_sheet($ws,$rhFmt,\%hoAllDetailInf,\%hoAllSumInf,$prjN,$dspDate,$topCellName);
            }
            
            ### -> finalize
            &excel_finalize($workbook,"Collection of PVPI session for '$prjN' on '$dspDate'");
            close($fhInfo);

            print "  > finished for: ${prjN}_${dspDate}.xlsx\n";
        }
    }
}

############### FINISHING
FINISH:
&my_finish($staEpoch);
print "FINISHED.\n\n";
exit;



############### Sub-routines
###
sub my_define_error_codes($){
    my $rh = shift;#reference to hash of errors (global var.)
    $rh->{1}= "indir must be a dir.";
    return 1;
}
###
sub myQuit(){
    my $c = shift;#code
    my $m = ""; (@_) && ($m = shift);#more
    print "\n";
    # ->
    if(!exists $hoE{$c}){
        print "Quit:$c: Unknown";
    }else{
        print "Quit: $c: $hoE{$c}";
    }
    # ->
    ("$m" ne "") && print ", $m";
    print "\n";
    print "\n";  exit;#exit the program
}
###
sub file_name($){
    # get file name
    return pop @{ [split(/\/+/, $_[0])] };
}
### 
sub parse_detailInd_file_name($){
    my $fname = shift;
    $fname =~ s/\.json$//;
    my @tmpa = split /_+/, $fname;
    ($#tmpa < 4) && return ();
    
    my $to = pop @tmpa;
    my $fr = pop @tmpa;
    pop @tmpa;
    shift @tmpa;
    my $prjN = join "_", @tmpa;

    return ($prjN,$fr,$to);
}
###
sub my_finish(){
    my $staEpoch = -1;
    (@_) && ($staEpoch = shift);
    my $usr_name  = getlogin || (getpwuid($<))[0];
    $mu->record("Finishing");
    my @tmpa = @{ $mu->state()->[0] };
    print "\n#####################################################################################\n";
    ($staEpoch > -1) &&
    print "###     STARTED at " . &shorten_DateTime_from_epoch($staEpoch) . "\n";
    print "###     FINISH  at " . &shorten_DateTime_from_epoch(time) . "\n";
    print "###     Detail memory consumed (by Memory::Usage) (in MB(s)):\n";
    print "###        virtual memory size = ".(sprintf("%.1f",$tmpa[2]/1024))."\n";
    print "###        resident set   size = ".(sprintf("%.1f",$tmpa[3]/1024))."\n";
    print "###        shared memory  size = ".(sprintf("%.1f",$tmpa[4]/1024))."\n";
    print "###        aka-code / exe size = ".(sprintf("%.1f",$tmpa[5]/1024))."\n";
    print "###        data and stack size = ".(sprintf("%.1f",$tmpa[6]/1024))."\n";
    print "######################################################################################\n\n";
}

###
sub record_session_info($$$$;$$){
    my $fname = shift;#the file name of individual tracked info
    my $rinf = shift;#reference to hash of info to be checked and extracted
    my $rDetail = shift;#reference to hash of all collected info (as detail)
    my $rSum = shift;#reference to hash of all collected info (as summary)
    my $rstat = shift;#ref to hash of statistic
    my $rinArg = shift;#ref to input arguments (for scoping data)

    foreach my $uniquePVPI (sort keys %$rinf){
        (!exists $rstat->{'#sessions'}) && ($rstat->{'#sessions'} = 0); $rstat->{'#sessions'}++;
        if(! scalar grep {
            /^run.*drc|^run.*lvs|^run.*lvl|/
        } keys %{$rinf->{$uniquePVPI}}) { next; }
        
        (!exists $rstat->{'#sessions_w_drc-lvs-lvl'}) && ($rstat->{'#sessions_w_drc-lvs-lvl'} = 0); $rstat->{'#sessions_w_drc-lvs-lvl'}++;
        ($rinArg->{'topCellName'} ne "all" && $rinf->{$uniquePVPI}{'TOP_LAYOUT_NAME'} !~ $rinArg->{'topCellName'}) && next;

        (!exists $rstat->{'#sessions_in_topcell'}) && ($rstat->{'#sessions_in_topcell'} = 0); $rstat->{'#sessions_in_topcell'}++;
        my $TOP_LAYOUT_NAME = $rinf->{$uniquePVPI}{'TOP_LAYOUT_NAME'};
        (!$TOP_LAYOUT_NAME) && ($TOP_LAYOUT_NAME = "TOP_LAYOUT_NAME");
        my $CHIP_OR_IP = $TOP_LAYOUT_NAME;
        (exists $rinf->{$uniquePVPI}{'CHIP_OR_IP'}) && ($CHIP_OR_IP = $rinf->{$uniquePVPI}{'CHIP_OR_IP'});

        my $startAt = $rinf->{$uniquePVPI}{'startAt'};
        my $TAT = $rinf->{$uniquePVPI}{'TAT'};
        if(! defined($TAT)){
            print "dbg:: unq='$uniquePVPI' no defined TAT, ignored.\n";
            next;
        }else{}
        if($TAT !~ /^\d+$/){
            print "dbg:: unq='$uniquePVPI' not number TAT='$TAT', ignored.\n";
            next;
        }else{}
        if($TAT == 0){
            # print "dbg:: unq='$uniquePVPI' TAT=0, ignored.\n";
            next;
        }else{}

        my $endAt = $startAt + $TAT;
        my $dspDate = &shorten_Date_from_epoch($endAt);
        (!$dspDate) && ($dspDate = "YYMMDD");
        if(exists $rinArg->{'target_date'}){
            my $flgGo = 0;
            ($rinArg->{'target_date'} =~ /all/i) && ($rinArg->{'target_date'} = "*");
            foreach my $tmpv (split /\s*,\s*/, $rinArg->{'target_date'}){
                my $tmpPattern = $tmpv;
                $tmpPattern =~ s/\*/.*/g;
                $tmpPattern =~ s/\.\././g;
                # print "dbg:: $tmpPattern\n";
                ($dspDate =~ /^$tmpPattern$/) && $flgGo++;
            }
            (!$flgGo) && next;
        }

        # print "dbg:: $fname: $uniquePVPI / $dspDate\n";
        my $tmpr = $rDetail;
        (!exists $tmpr->{$dspDate}) && ($tmpr->{$dspDate} = {}); $tmpr = $tmpr->{$dspDate};
        (!exists $tmpr->{$TOP_LAYOUT_NAME}) && ($tmpr->{$TOP_LAYOUT_NAME} = {}); $tmpr = $tmpr->{$TOP_LAYOUT_NAME};
        (!exists $tmpr->{$uniquePVPI}) && ($tmpr->{$uniquePVPI} = {}); $tmpr = $tmpr->{$uniquePVPI};

        foreach my $runkey (sort keys %{$rinf->{$uniquePVPI}}){
            ($runkey !~ /^run_/) && next;
            ($runkey !~ /drc|lvs|lvl/) && next;
            if(exists $rinf->{$uniquePVPI}{$runkey}{"subrun"}){
                foreach my $subrun (@{$rinf->{$uniquePVPI}{$runkey}{"subrun"}}){
                    my $subrunName = $subrun->{"sortKey"};
                    if(exists $subrun->{"moreInfo"}){
                        # -> record neccesary info only (based on run-key)
                        # -> following code is for debugging
                        if(0
                        # && $runkey =~ /lvs/
                        ){
                            foreach my $tmpk (sort keys %{$subrun->{'moreInfo'}}){
                                print "dbg:: $fname: $uniquePVPI / $runkey / subrun / $subrunName / $tmpk -> " . ref($subrun->{'moreInfo'}{$tmpk}). "\n";
                            }
                        }else{}
                        # <-
                        (!exists $tmpr->{$runkey . "/" . $subrunName}) && ($tmpr->{$runkey . "/" . $subrunName} = {});
                        my $tmpr2 = $tmpr->{$runkey . "/" . $subrunName};

                        my $moreInfo = $subrun->{'moreInfo'};
                        if($runkey =~ /drc|lvl/){
                            ### -> DRC/ LVL
                            # ->
                            $tmpr2->{"DRC_noVioRules"} = $moreInfo->{"DRC_noVioRules"};
                            $tmpr2->{"DRC_noResults"} = $moreInfo->{"DRC_noResults"};
                            $tmpr2->{"reportAt"} = &shorten_Date_from_epoch($moreInfo->{"reportAt"});
                            # ->
                            foreach my $errN (keys %{$moreInfo->{"DRC_Errors"}}){
                                $tmpr2->{$errN} = $moreInfo->{"DRC_Errors"}{$errN};
                            }

                        }elsif($runkey =~ /lvs/){
                            ### -> LVS
                            if($subrunName =~ /EXT/){
                                $tmpr2->{"ERC_noVioRules"} = $moreInfo->{"ERC_noVioRules"};
                                $tmpr2->{"ERC_noResults"}  = $moreInfo->{"ERC_noResults"};
                                $tmpr2->{"reportAt"} = &shorten_Date_from_epoch($moreInfo->{"reportAt"});
                                foreach my $errN (keys %{$moreInfo->{"ERC_Errors"}}){
                                    $tmpr2->{$errN} = $moreInfo->{"ERC_Errors"}{$errN};
                                }
                            }else{
                                $tmpr2->{"compare"} = $moreInfo->{"compare"};
                                $tmpr2->{"reportAt"} = &shorten_Date_from_epoch($moreInfo->{"reportAt"});
                            }

                        }else{
                            # out of scope
                        }
                    }else{
                        #no moreInfo
                    }
                    # -> reg for the summary
                    (!exists $rSum->{'All_Top_cell'}) && ($rSum->{'All_Top_cell'} = {});
                    (!exists $rSum->{'All_Top_cell'}{$TOP_LAYOUT_NAME}) && ($rSum->{'All_Top_cell'}{$TOP_LAYOUT_NAME} = {});
                    (!exists $rSum->{'All_Top_cell'}{$TOP_LAYOUT_NAME}{$CHIP_OR_IP}) && ($rSum->{'All_Top_cell'}{$TOP_LAYOUT_NAME}{$CHIP_OR_IP} = 0);
                    $rSum->{'All_Top_cell'}{$TOP_LAYOUT_NAME}{$CHIP_OR_IP}++;

                    (!exists $rSum->{'All_runkey'}) && ($rSum->{'All_runkey'} = {});
                    (!exists $rSum->{'All_runkey'}{$runkey . "/" . $subrunName}) && ($rSum->{'All_runkey'}{$runkey . "/" . $subrunName} = 0);
                    $rSum->{'All_runkey'}{$runkey . "/" . $subrunName}++;

                    (!exists $rSum->{'All_Finished_date'}) && ($rSum->{'All_Finished_date'} = {});
                    (!exists $rSum->{'All_Finished_date'}{$dspDate}) && ($rSum->{'All_Finished_date'}{$dspDate} = 0);
                    $rSum->{'All_Finished_date'}{$dspDate}++;
                }
            }else{
                #no subrun, the run may be failed
            }
        }
    }
    return 1;
}

###
sub shorten_Date_from_epoch($){
    my $epoch = shift;
    ($epoch !~ /^\d+$/) && return "";
    my ($sec, $min, $hour, $mday, $mon, $year,$wday, $yday, $isdst) = localtime($epoch);
    $year -=100;
    # $year += 2000;
    $mon  +=1;
    $sec  = sprintf("%02d",$sec);
    $min  = sprintf("%02d",$min);
    $hour = sprintf("%02d",$hour);
    $mday = sprintf("%02d",$mday);
    $mon  = sprintf("%02d",$mon);
    $year = sprintf("%02d",$year);
    return $year.$mon.$mday;
}

###
sub shorten_DateTime_from_epoch($){
    my $epoch = shift;
    ($epoch !~ /^\d+$/) && return "";
    my ($sec, $min, $hour, $mday, $mon, $year,$wday, $yday, $isdst) = localtime($epoch);
    $year -=100;
    $year += 2000;
    $mon  +=1;
    $sec  = sprintf("%02d",$sec);
    $min  = sprintf("%02d",$min);
    $hour = sprintf("%02d",$hour);
    $mday = sprintf("%02d",$mday);
    $mon  = sprintf("%02d",$mon);
    $year = sprintf("%04d",$year);
    return "$year/$mon/$mday - $hour:$min:$sec";
}

###
sub excel_init_format($){
    my $wb = shift;#
    my %hoFmt = ();
    # ->
    $hoFmt{'common'} = $wb->add_format(align=>'center',valign=>'vcenter',color=>'red',bold=>1);
    # ->
    return \%hoFmt;
}

###
sub excel_finalize($$){
    my $wb = shift;
    my $title = shift;

    my $usr_name  = getlogin || (getpwuid($<))[0];
    my ($sec, $min, $hour, $mday, $mon, $year,$wday, $yday, $isdst) = localtime(time);
    $year -=100;
    $year += 2000;
    $mon  +=1;
    $sec  = sprintf("%02d",$sec);
    $min  = sprintf("%02d",$min);
    $hour = sprintf("%02d",$hour);
    $mday = sprintf("%02d",$mday);
    $mon  = sprintf("%02d",$mon);
    $year = sprintf("%04d",$year);
    $wb->set_properties(
        title => $title,
        keywords => "PVPI",
        subject => "DRC, LVS, LVL",
        author => $usr_name,
        company => "Renesas Vietname Ltd.",
        comments => "Generated by script $scrname ($VERSION) at $hour:$min:$sec; $year/$mon/$mday.",
    );
    $wb->close() || die "Fatal error when closing workbook : $!\n";
    return 1;
}

###
sub excel_out_content_sheet($$$$){
    my $ws = shift;
    my $fmt = shift;#reference to format
    my $rdd = shift;#reference to data of detail
    my $rds = shift;#reference to data of summary
    my $prjN = shift;
    my $dspDate = shift;
    my $topCellName = shift;
    
    my $r0 = 3;#starting row
    my $c0 = 1;#starting col
    my $rx = $r0;#running row
    my $cx = $c0;#running col

    ### extract some info
    my @callNames = keys %{$rds->{$prjN}{"All_Top_cell"}{$topCellName}};

    ### summary table
    $ws->write($rx++,$cx,[("Summary",$dspDate)]);
    $ws->write($rx++,$cx,[("Top layout name:",$topCellName)]);
    $ws->write($rx++,$cx,[("Called name:",@callNames)]);
    $ws->write($rx++,$cx,[("#####","#####")]);

    my $tmpr = $rdd->{$prjN}{$dspDate}{$topCellName};#

    foreach my $runk (sort keys %{$rds->{$prjN}{"All_runkey"}}){
        my $value = "-";
        # -> sweep the detail data
        foreach my $unq (sort {
                            my @tmpa1 = split /__/,$a;
                            my @tmpa2 = split /__/,$b;
                            return $tmpa1[2] <=> $tmpa2[2];
                        }
                keys %$tmpr){
            if(exists $tmpr->{$unq}{$runk}){
                ($value eq "-") && ($value = "");
                # now fix the keyword for specific summary of runkey
                if($runk =~ /drc|lvl/){
                    $value .= $tmpr->{$unq}{$runk}{"DRC_noResults"} . ",";
                }elsif($runk =~ /lvs.*EXT|erc.*EXT/){
                    $value .= $tmpr->{$unq}{$runk}{"ERC_noResults"} . ",";
                }elsif($runk =~ /lvs.*CMP|lvs.*COMP/){
                    $value .= $tmpr->{$unq}{$runk}{"compare"} . ",";
                }else{}
            }else{}
        }
        $value =~ s/,$//;
        $ws->write($rx++,$cx,[($runk,$value)]);
    }

    ### detail table
    $rx++;
    # header of detail content table
    $ws->write($rx++,$cx,[("Detail:")]);
    my $rf0 = $rx;#row for auto-filter the detail table
    $ws->write($rx++,$cx,[("USER","From host", "Start At", "Run keyword", "Step", "Indicator", "Value")]);

    foreach my $unq (sort keys %$tmpr){
        (! scalar keys %{$tmpr->{$unq}}) && next;
        my @tmpa = split /__/, $unq;
        my $staAt = pop @tmpa;
        my $host = pop @tmpa;
        my $user = pop @tmpa;
        foreach my $runk (sort keys %{$tmpr->{$unq}}){
            my @tmpa = split /\//, $runk;
            my $pvrun = shift @tmpa;
            my $substep = shift @tmpa;
            foreach my $keyw (sort keys %{$tmpr->{$unq}{$runk}}){
                my @dr = ($user,$host,scalar localtime($staAt),$pvrun,$substep,$keyw,$tmpr->{$unq}{$runk}{$keyw});
                $ws->write($rx++,$cx,\@dr);
            }
        }
    }

    # auto filter
    $ws->autofilter($rf0,$cx,$rx,$cx+6);

    # some format
    $ws->set_column("A:A",3);
    $ws->set_column("B:B",40);
    $ws->set_column("C:C",15);
    $ws->set_column("D:D",30);
    $ws->set_column("E:E",30);
    $ws->set_column("F:F",30);
    $ws->set_column("G:G",40);
    $ws->set_column("H:H",10);

    # $ws->hide_gridlines(2);
    # $ws->set_tab_color('yellow'); #set tab color
    $ws->set_zoom(80);           #set zoom factor

    return 1;
}

sub gen_info_json($$){
    my $fh = shift;#file handler
    my $rd = shift;#reference to data

    ### => collection of data
    my %hoC = ();#hash of collected info
    $hoC{"byCells"} = {};
    $hoC{"byUsers"} = {};
    $hoC{"bySessions"} = 0;
    $hoC{"byDRC"} = 0;
    $hoC{"byLVS"} = 0;
    $hoC{"byLVL"} = 0;
    foreach my $cell (keys %$rd){
        (!exists $hoC{"byCells"}{$cell}) && ($hoC{"byCells"}{$cell} = 0); $hoC{"byCells"}{$cell}++;
        foreach my $unq (keys %{$rd->{$cell}}){
            $hoC{'bySessions'}++;
            my @tmpa = split '__',$unq;
            my $user = $tmpa[0];
            (!exists $hoC{"byUsers"}{$user}) && ($hoC{"byUsers"}{$user} = 0); $hoC{"byUsers"}{$user}++;
            foreach my $runk (keys %{$rd->{$cell}{$unq}}){
                    if($runk =~ /run_drc/){ $hoC{'byDRC'}++;
                }elsif($runk =~ /run_lvs/){ $hoC{'byLVS'}++;
                }elsif($runk =~ /run_lvl/){ $hoC{'byLVL'}++;
                }else{}
            }
        }
    }
    # myPrintDataRef \%hoC,1,"";

    ### out info
    my $jsonObj = JSON->new();
    $jsonObj = JSON->new->allow_nonref;
    $jsonObj->relaxed();
    $jsonObj->space_before();
    #->

    print $fh $jsonObj->encode({(
        "#_Cells" => scalar keys %{$hoC{"byCells"}},
        "#_Users" => scalar keys %{$hoC{"byUsers"}},
        "#_Sessions" => $hoC{"bySessions"},
        "#Checker DRC" => $hoC{"byDRC"},
        "#Checker LVS/ERC" => $hoC{"byLVS"},
        "#Checker LVL" => $hoC{"byLVL"},
    )});

    ###
    return 1;
}

### history
# 221214    ManD    Newly created.
# 221218    ManD    Add: info.json being created.

FILE:: .//wkdirServer/PVPI_export/zgo.defaultrun.csh
#!/bin/csh -f

###
### this is wrapper, is about to extract PVPI web-database (json text format) to excel file for storage and manipulation by human later
###

set cur = "/shsv/hws2/prj/VMS/cgi-bin/PVPI/.TEST_MD/page11_PLPI/wkdirServer/PVPI_export";#needed for crontab

set exe = "$cur/scripts/cmd.extract_PVPI_sessions_to_excel.pl";
if(! -f $exe) exit;
if(! -x $exe) exit;

### prepare inputs
set outdir = "$cur/outdir";

# -> clean or not
#rm -rf $outdir ;#clean output dir
#mkdir -p $outdir;

# -> control date to be today only
set tgtDate = `date +%y%m%d`

### execution
echo; echo "STARTING wrapper ... cmd='$exe:t' for tgtDate='$tgtDate'";
$exe \
    --indir "$cur/../../../../data/" \
    #--prjName "RCar_V4M" \
    #--prjName "RH850_U2C8" \
    --prjName "all" \
    --topCellName "all" \
    #--target_date "all" \
    #--target_date "2212*" \
    --target_date $tgtDate \
    --outdir $outdir \
;

echo "FINISHED wrapper.";echo;

FILE:: .//wkdirServer/disk_collection/collect_df.pl
#!/usr/bin/perl -w

use JSON;
use strict;
use lib "/shsv/BackendIO/99_Physical/4_Users/manduong/PROGRAMS/PVPI_new/PVPI_com/SCRIPTS";
use CommonSub;

# to be executed by crontab, this path must be absolute
my $tgtd = "/shsv/hws2/prj/VMS/cgi-bin/PVPI/.TEST_MD/page11_PLPI/data/disk_usage_collections";
my $tgtf_24h  = "$tgtd/RVC_df_24h.json";#every execution time, within 24h
my $tgtf_days = "$tgtd/RVC_df_days.json";#at 23:59 or last record

# global
my $limitDays = 365;#1 year = 365 days

my %ho24h = ();
my %hoByD = ();

# control the current logged time
my $now = time();

################# MAIN
### =>
{   (! -f $tgtf_24h) && next;
    print "Retrieve current database 24h ...\n";
    my %tmph = %{ &decode_file($tgtf_24h) };
    # filter to be within 24h
    foreach my $dspStr (keys %tmph){
        foreach my $path (keys %{$tmph{$dspStr}}){
            foreach my $time (keys %{$tmph{$dspStr}{$path}}){
                ($now - $time > 24 * 60 * 60) && next;
                (! exists $ho24h{$dspStr}) && ($ho24h{$dspStr} = {});
                (! exists $ho24h{$dspStr}{$path}) && ($ho24h{$dspStr}{$path} = {});
                (! exists $ho24h{$dspStr}{$path}{$time}) && ($ho24h{$dspStr}{$path}{$time} = {});
                foreach my $keyw (keys %{$tmph{$dspStr}{$path}{$time}}){
                    $ho24h{$dspStr}{$path}{$time}{$keyw} = $tmph{$dspStr}{$path}{$time}{$keyw};
                }
            }
        }
    }

    (! -f $tgtf_days) && next;
    print "Retrieve current database by days ...\n";
    %tmph = %{ &decode_file($tgtf_days) };
    foreach my $dspStr (keys %tmph){
        foreach my $path (keys %{$tmph{$dspStr}}){
            my $norecord = 0;
            foreach my $date (sort {$b <=> $a} keys %{$tmph{$dspStr}{$path}}){
                $norecord++;
                ($norecord > $limitDays) && last;
                (! exists $hoByD{$dspStr}) && ($hoByD{$dspStr} = {});
                (! exists $hoByD{$dspStr}{$path}) && ($hoByD{$dspStr}{$path} = {});
                (! exists $hoByD{$dspStr}{$path}{$date}) && ($hoByD{$dspStr}{$path}{$date} = {});
                foreach my $keyw (keys %{$tmph{$dspStr}{$path}{$date}}){
                    $hoByD{$dspStr}{$path}{$date}{$keyw} = $tmph{$dspStr}{$path}{$date}{$keyw};
                }
            }
        }
    }
}

### =>
{   print "Working on df ...\n";
    foreach my $cmdStr ("df -P", "df -Pi"){
        my @dfOut = split(/[\n\r]+/,readpipe($cmdStr));
        while ( my $line = shift @dfOut ){
            chomp($line);
            # print "dbg:: $line\n";

            my ($fs,$total,$used,$avai,$percent,$path) = split /\s+/,$line;

            # suppose first line is the header
            ($fs =~ /filesystem/i) && next;

            #
            my $dspStr = "disk"; ($cmdStr eq "df -Pi") && ($dspStr = "inode");
            my $today = &rtn_today_string_from_epoch_gmtime($now);

            # -> making last record in 24h
            (! exists $ho24h{$dspStr}) && ($ho24h{$dspStr} = {});
            (! exists $ho24h{$dspStr}{$path}) && ($ho24h{$dspStr}{$path} = {});
            (! exists $ho24h{$dspStr}{$path}{$now}) && ($ho24h{$dspStr}{$path}{$now} = {});
            $ho24h{$dspStr}{$path}{$now}{'Total'} = $total;
            $ho24h{$dspStr}{$path}{$now}{'avai'} = $avai;
            $ho24h{$dspStr}{$path}{$now}{'used%'} = $percent;

            # -> making last record in by-days
            (! exists $hoByD{$dspStr}) && ($hoByD{$dspStr} = {});
            (! exists $hoByD{$dspStr}{$path}) && ($hoByD{$dspStr}{$path} = {});
            (! exists $hoByD{$dspStr}{$path}{$today}) && ($hoByD{$dspStr}{$path}{$today} = {});
            $hoByD{$dspStr}{$path}{$today}{'Total'} = $total;
            $hoByD{$dspStr}{$path}{$today}{'avai'} = $avai;
            $hoByD{$dspStr}{$path}{$today}{'used%'} = $percent;
        }
    }
}

### =>
{   print "Outputing the database files ...\n";
    my $jsonObj = JSON->new();
    $jsonObj = JSON->new->allow_nonref;
    $jsonObj->relaxed();
    $jsonObj->space_before();
    # $jsonObj->pretty();
    foreach my $item ( 
        [$tgtf_24h , \%ho24h],
        [$tgtf_days, \%hoByD],
    ){
        my $tgtf = $item->[0];
        my $rdata = $item->[1];
        # print "dbg:: $tgtf, $rdata\n";
        if(open (TGTF,">$tgtf")){
            print TGTF $jsonObj->encode($rdata);
        }else{
            print "dbg:: cannot open for write, tgtf='$tgtf' : $!\n";
        }
    }
}

FINISH:
print "\nFINISHED.\n";
exit;

################ SUB
sub decode_file($){
    my $tgtf = shift;
    if(! -f $tgtf){
        print "ERROR: ignore to decode, not a file='$tgtf'.\n";
        return {()};
    }else{}
    print "dbg:: decoding, working on tgtf='$tgtf'\n";
    my %hoD = ();
    if(open TGTF,"<$tgtf"){
        my $tmps = "";
        while(<TGTF>){
            chomp;
            $tmps .= $_;
        }
        close(TGTF);
        my $jsonObj = JSON->new();
        $jsonObj = JSON->new->allow_nonref;
        $jsonObj->relaxed();
        $jsonObj->space_before();
        if($tmps){
            %hoD = %{ $jsonObj->decode($tmps)};
        }else{
            print "dbg:: nothing to json decode.\n";
        }
    }else{
        print "ERROR: cannot open tgtf : $!\n";
    }
    return \%hoD;
}

sub rtn_today_string_from_epoch_gmtime($){
    my $epoch = shift;
    ($epoch !~ /^\d+$/) && return "YYYYMMDD";
    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = gmtime(time);
    $year += 1900;
    $mon  +=1;
    $mon = sprintf("%02d",$mon);
    $mday = sprintf("%02d",$mday);
    return "${year}${mon}${mday}";
}

################# History
# 221226 ManD   new

FILE:: .//wkdirServer/disk_collection/zgo.collect_df_all.csh
#!/bin/csh -f

### for this cluster
/shsv/hws2/prj/VMS/cgi-bin/PVPI/.TEST_MD/page11_PLPI/wkdirServer/disk_collection/collect_df.pl
### for remoting
/shsv/BackendIO/99_Physical/4_Users/manduong/PROGRAMS/myCollect/myGetExeSrvs/wkdir/zgo.rundefault_4_df.csh
